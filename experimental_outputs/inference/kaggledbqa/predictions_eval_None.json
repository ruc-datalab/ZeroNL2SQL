[
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which country has the most capacities of nuclear power plants?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which country has the most capacities of nuclear power plants?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select nuclear_power_plants.Country",
        "real_label": "select nuclear_power_plants.Country",
        "topk_preds": [
            "select nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, nuclear_power_plants.Capacity",
            "select nuclear_power_plants.Name, nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, max(nuclear_power_plants.Capacity)",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name",
            "select nuclear_power_plants.Country, nuclear_power_plants.Source",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name5",
            "select nuclear_power_plants.Country, nuclear_power_plants.Status"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which country has the most capacities of nuclear power plants?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which country has the least capacities of nuclear power plants?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which country has the least capacities of nuclear power plants?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select nuclear_power_plants.Country",
        "real_label": "select nuclear_power_plants.Country",
        "topk_preds": [
            "select nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, nuclear_power_plants.Capacity",
            "select nuclear_power_plants.Country, max(nuclear_power_plants.Capacity)",
            "select nuclear_power_plants.Name, nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, min(nuclear_power_plants.Capacity)",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name",
            "select nuclear_power_plants.Country, nuclear_power_plants.Source",
            "select nuclear_power_plants.Country, max(nuclear_power_plants.Name)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which country has the least capacities of nuclear power plants?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the top 3 countries which have the most nuclear power plants?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-THREE-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the top 3 countries which have the most nuclear power plants?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select nuclear_power_plants.Country",
        "real_label": "select nuclear_power_plants.Country",
        "topk_preds": [
            "select nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, nuclear_power_plants.Status",
            "select nuclear_power_plants.Country, nuclear_power_plants.Longitude",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name5",
            "select nuclear_power_plants.Country, nuclear_power_plants.Source",
            "select nuclear_power_plants.Country, nuclear_power_plants.ReactorType",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name",
            "select nuclear_power_plants.Country, nuclear_power_plants.Latitude"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the top 3 countries which have the most nuclear power plants?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which country has the most nuclear station?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which country has the most nuclear station?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select nuclear_power_plants.Country",
        "real_label": "select nuclear_power_plants.Country",
        "topk_preds": [
            "select nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, nuclear_power_plants.Longitude",
            "select nuclear_power_plants.Country, nuclear_power_plants.Status",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name5",
            "select nuclear_power_plants.Country, nuclear_power_plants.Source",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name",
            "select nuclear_power_plants.Country, nuclear_power_plants.Latitude",
            "select nuclear_power_plants.Country, nuclear_power_plants.ReactorType"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which country has the most nuclear station?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which county has the most nuclear station shut down?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which county has the most nuclear station shut down?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select nuclear_power_plants.Country",
        "real_label": "select nuclear_power_plants.Country",
        "topk_preds": [
            "select nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, nuclear_power_plants.Status",
            "select nuclear_power_plants.Country (GeoNuclearData.c4)",
            "select nuclear_power_plants.Country, nuclear_power_plants.Status, nuclear_power_plants.ReactorType",
            "select nuclear_power_plants.Country, nuclear_power_plants.Status, nuclear_power_plants.Source",
            "select nuclear_power_plants.Country, nuclear_power_plants.Status, min(nuclear_power_plants.Status)",
            "select nuclear_power_plants.Country, nuclear_power_plants.Status, nuclear_power_plants.LastUpdatedAt",
            "select nuclear_power_plants.Name, nuclear_power_plants.Country"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which county has the most nuclear station shut down?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What nuclear station has the largest nuclear power plant capacity?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-ORDER BY-LIMIT",
        "label": "SELECT-FROM-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-ORDER BY-LIMIT)",
            "SELECT-FROM-ORDER BY-LIMIT, SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What nuclear station has the largest nuclear power plant capacity?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c1",
        "label": "select t0.c1",
        "score": true,
        "real_pred": "select nuclear_power_plants.Name",
        "real_label": "select nuclear_power_plants.Name",
        "topk_preds": [
            "select nuclear_power_plants.Name",
            "select nuclear_power_plants.Id, nuclear_power_plants.Name",
            "select nuclear_power_plants.Name, nuclear_power_plants.Longitude",
            "select nuclear_power_plants.Name, nuclear_power_plants.Latitude",
            "select nuclear_power_plants.Name, nuclear_power_plants.ReactorType",
            "select nuclear_power_plants.Name, nuclear_power_plants.Status",
            "select nuclear_power_plants.Name, nuclear_power_plants.LastUpdatedAt",
            "select nuclear_power_plants.Name, nuclear_power_plants.Source"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What nuclear station has the largest nuclear power plant capacity?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many operating nuclear station in France?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country (France), c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE, count(*)",
            "SELECT-FROM-WHERE (count(*)",
            "SELECT-FROM-WHERE count(*)",
            "SELECT-FROM-WHERE.",
            "SELECT-FROM-WHERE-NUM(*)",
            "SELECT-FROM-WHERE-COUNT(*)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many operating nuclear station in France?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country (France), c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), nuclear_power_plants.Country",
            "select count(*), nuclear_power_plants.Name",
            "select count(*), nuclear_power_plants.Id",
            "select count(*), nuclear_power_plants.Latitude",
            "select count(*), nuclear_power_plants.Country",
            "select count(*), nuclear_power_plants.Id",
            "select count(nuclear_power_plants.Id)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many operating nuclear station in France?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country (France), c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many nuclear station are under construction?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status (Under Construction), c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (count(*)",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many nuclear station are under construction?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status (Under Construction), c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select count(*)",
        "label": "select count(t0.c1)",
        "score": false,
        "real_pred": "select count(*)",
        "real_label": "select count(nuclear_power_plants.Name)",
        "topk_preds": [
            "select count(*)",
            "select count(*), nuclear_power_plants.Status",
            "select count(*), geo.nucleardata.c1",
            "select count(*), geoNuclearData.c1",
            "select count(*), nuclear_power_plants.Status",
            "select count(*), geoNuclearData.c4",
            "select count(*), geoNuclearData.c0",
            "select count(*), geo.nucleardata.c2"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many nuclear station are under construction?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status (Under Construction), c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What nuclear reactor model is the most popular?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What nuclear reactor model is the most popular?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c7",
        "label": "select t0.c7",
        "score": true,
        "real_pred": "select nuclear_power_plants.ReactorModel",
        "real_label": "select nuclear_power_plants.ReactorModel",
        "topk_preds": [
            "select nuclear_power_plants.ReactorModel",
            "select nuclear_power_plants.Id, nuclear_power_plants.ReactorModel",
            "select nuclear_power_plants.ReactorType, nuclear_power_plants.ReactorModel",
            "select nuclear_power_plants.ReactorModel, nuclear_power_plants.ReactorType",
            "select nuclear_power_plants.ReactorModel, nuclear_power_plants.ReactorType",
            "select nuclear_power_plants.ReactorModel, nuclear_power_plants.Name",
            "select nuclear_power_plants.Id, nuclear_power_plants.Name",
            "select nuclear_power_plants.ReactorModel, nuclear_power_plants.Status"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What nuclear reactor model is the most popular?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which country is Chinon-A3 in?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name (Chinon-A3, Chinon-A2), c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which country is Chinon-A3 in?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name (Chinon-A3, Chinon-A2), c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select nuclear_power_plants.Country",
        "real_label": "select nuclear_power_plants.Country",
        "topk_preds": [
            "select nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, nuclear_power_plants.Longitude",
            "select nuclear_power_plants.Country, nuclear_power_plants.Latitude",
            "select nuclear_power_plants.Country (http://nuclear_power_plants.Country)",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name",
            "select nuclear_power_plants.Country, nuclear_power_plants.Status",
            "select t0, nuclear_power_plants.Country",
            "select nuclear_power_plants.Country (https://nuclear_power_plants.Country)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which country is Chinon-A3 in?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name (Chinon-A3, Chinon-A2), c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are operational nuclear power plants in Japan called?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country (Japan), c5: status (Operational), c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INSTRUCT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are operational nuclear power plants in Japan called?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country (Japan), c5: status (Operational), c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c1",
        "label": "select t0.c1",
        "score": true,
        "real_pred": "select nuclear_power_plants.Name",
        "real_label": "select nuclear_power_plants.Name",
        "topk_preds": [
            "select nuclear_power_plants.Name",
            "select nuclear_power_plants.Name, nuclear_power_plants.Latitude, nuclear_power_plants.Longitude",
            "select nuclear_power_plants.Name, nuclear_power_plants.Longitude, nuclear_power_plants.Country",
            "select nuclear_power_plants.Name, nuclear_power_plants.Latitude",
            "select nuclear_power_plants.Name, nuclear_power_plants.Country",
            "select nuclear_power_plants.Id, nuclear_power_plants.Name",
            "select nuclear_power_plants.Name, nuclear_power_plants.Longitude",
            "select nuclear_power_plants.Name, nuclear_power_plants.Longitude, nuclear_power_plants.Latitude"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are operational nuclear power plants in Japan called?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country (Japan), c5: status (Operational), c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which country first started using nuclear power plant(s)?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-ORDER BY-LIMIT",
        "label": "SELECT-FROM-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which country first started using nuclear power plant(s)?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select nuclear_power_plants.Country",
        "real_label": "select nuclear_power_plants.Country",
        "topk_preds": [
            "select nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name",
            "select nuclear_power_plants.Country, nuclear_power_plants.Status",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name5",
            "select nuclear_power_plants.Country, nuclear_power_plants.Latitude",
            "select nuclear_power_plants.Country, nuclear_power_plants.Longitude",
            "select nuclear_power_plants.Country, nuclear_power_plants.Source",
            "select nuclear_power_plants.Country, nuclear_power_plants.ReactorType"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which country first started using nuclear power plant(s)?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many nuclear power plants are in preparation to be used in Japan?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country (Japan), c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE (count(*)",
            "SELECT-FROM-WHERE, count(*)",
            "SELECT-FROM-WHERE-NUM(*)",
            "SELECT-FROM-WHERE Zahl(*)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many nuclear power plants are in preparation to be used in Japan?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country (Japan), c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), nuclear_power_plants.Id",
            "select count(*), nuclear_power_plants.Name",
            "select count(*), nuclear_power_plants.Country",
            "select count(nuclear_power_plants.Id)",
            "select count(*), nuclear_power_plants.Status",
            "select count(*), nuclear_power_plants.Latitude",
            "select count(*), nuclear_power_plants.Longitude"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many nuclear power plants are in preparation to be used in Japan?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country (Japan), c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the current situation of the nuclear power plant in the United States with the maximum capacity?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country (United States), c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE -ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-ORDER BY-LIMIT)",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the current situation of the nuclear power plant in the United States with the maximum capacity?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country (United States), c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c5",
        "label": "select t0.c5",
        "score": true,
        "real_pred": "select nuclear_power_plants.Status",
        "real_label": "select nuclear_power_plants.Status",
        "topk_preds": [
            "select nuclear_power_plants.Status",
            "select nuclear_power_plants.Name, nuclear_power_plants.Status",
            "select nuclear_power_plants.Id, nuclear_power_plants.Status",
            "select nuclear_power_plants.Status, nuclear_power_plants.ReactorType",
            "select nuclear_power_plants.Status, nuclear_power_plants.Capacity",
            "select nuclear_power_plants.Status, nuclear_power_plants.Source",
            "select nuclear_power_plants.Status, nuclear_power_plants.LastUpdatedAt",
            "select nuclear_power_plants.Status, nuclear_power_plants.ReactorModel"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the current situation of the nuclear power plant in the United States with the maximum capacity?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country (United States), c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the maximum capacity of existing pressurized water reactor?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-PRESSURE-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the maximum capacity of existing pressurized water reactor?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select max(t0.c11)",
        "label": "select max(t0.c11)",
        "score": true,
        "real_pred": "select max(nuclear_power_plants.Capacity)",
        "real_label": "select max(nuclear_power_plants.Capacity)",
        "topk_preds": [
            "select max(nuclear_power_plants.Capacity)",
            "select max(nuclear_power_plants.Name)",
            "select max(nuclear_power_plants.OperationalTo)",
            "select max(nuclear_power_plants.OperationalFrom)",
            "select max(nuclear_power_plants.Status)",
            "select max(nuclear_power_plants.ConstructionStartAt)",
            "select max(nuclear_power_plants.ReactorType)",
            "select max(nuclear_power_plants.ReactorModel)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the maximum capacity of existing pressurized water reactor?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which nation has the most nuclear plants under construction?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status (Under Construction), c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which nation has the most nuclear plants under construction?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status (Under Construction), c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select nuclear_power_plants.Country",
        "real_label": "select nuclear_power_plants.Country",
        "topk_preds": [
            "select nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, nuclear_power_plants.Status",
            "select nuclear_power_plants.Country (GeoNuclearData.c4)",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name",
            "select nuclear_power_plants.Name, nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, nuclear_power_plants.Longitude",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name5",
            "select nuclear_power_plants.Country, nuclear_power_plants.ReactorType"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which nation has the most nuclear plants under construction?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status (Under Construction), c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which country has the most under constriction power plants to date?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which country has the most under constriction power plants to date?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select nuclear_power_plants.Country",
        "real_label": "select nuclear_power_plants.Country",
        "topk_preds": [
            "select nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, nuclear_power_plants.Status",
            "select nuclear_power_plants.Country, nuclear_power_plants.ConstructionStartAt",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name5",
            "select nuclear_power_plants.Country, nuclear_power_plants.ReactorModel",
            "select nuclear_power_plants.Country, nuclear_power_plants.ReactorType",
            "select nuclear_power_plants.Country, nuclear_power_plants.Longitude",
            "select nuclear_power_plants.Country, nuclear_power_plants.Source"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which country has the most under constriction power plants to date?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Where is the first BWR type power plant built and located?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype (BWR), c7: reactormodel (BWR), c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE ORDER BY-LIMIT",
            "SELECT-FROM-WHEREORDER BY-LIMIT",
            "SELECT-FROM-WHERE or ORDER BY-LIMIT",
            "SELECT-FROM-WHERE or-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE.ORDER BY-LIMIT",
            "SELECT-FROM-WHERE ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Where is the first BWR type power plant built and located?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype (BWR), c7: reactormodel (BWR), c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c2, t0.c3",
        "label": "select t0.c3, t0.c2",
        "score": false,
        "real_pred": "select nuclear_power_plants.Latitude, nuclear_power_plants.Longitude",
        "real_label": "select nuclear_power_plants.Longitude, nuclear_power_plants.Latitude",
        "topk_preds": [
            "select nuclear_power_plants.Latitude, nuclear_power_plants.Longitude",
            "select nuclear_power_plants.Name, nuclear_power_plants.Latitude",
            "select nuclear_power_plants.Name, nuclear_power_plants.Latitude, nuclear_power_plants.Longitude",
            "select nuclear_power_plants.Id, nuclear_power_plants.Latitude, nuclear_power_plants.Longitude",
            "select nuclear_power_plants.Id, nuclear_power_plants.Latitude",
            "select nuclear_power_plants.Latitude, nuclear_power_plants.Longitude, nuclear_power_plants.Country",
            "select nuclear_power_plants.Id, nuclear_power_plants.Name",
            "select nuclear_power_plants.Latitude.c2, nuclear_power_plants.Longitude"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Where is the first BWR type power plant built and located?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype (BWR), c7: reactormodel (BWR), c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which country lead the total capacity of the power plants it held?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which country lead the total capacity of the power plants it held?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select nuclear_power_plants.Country",
        "real_label": "select nuclear_power_plants.Country",
        "topk_preds": [
            "select nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, sum(nuclear_power_plants.Capacity)",
            "select nuclear_power_plants.Country, sum(nuclear_power_plants.Name)",
            "select nuclear_power_plants.Country, sum(nuclear_power_plants.Status)",
            "select nuclear_power_plants.Country, sum(nuclear_power_plants.OperationalTo)",
            "select nuclear_power_plants.Country, sum(nuclear_power_plants.OperationalFrom)",
            "select nuclear_power_plants.Country pour sum(nuclear_power_plants.Capacity)",
            "select nuclear_power_plants.Country, sum(nuclear_power_plants.ConstructionStartAt)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which country lead the total capacity of the power plants it held?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the main source of the information for this table?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-UNION-SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the main source of the information for this table?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c13",
        "label": "select t0.c13",
        "score": true,
        "real_pred": "select nuclear_power_plants.Source",
        "real_label": "select nuclear_power_plants.Source",
        "topk_preds": [
            "select nuclear_power_plants.Source",
            "select distinct nuclear_power_plants.Source",
            "select nuclear_power_plants.Source, nuclear_power_plants.Latitude",
            "select nuclear_power_plants.LastUpdatedAt, nuclear_power_plants.Source",
            "select nuclear_power_plants.Source, nuclear_power_plants.Name4",
            "select nuclear_power_plants.Source, nuclear_power_plants.LastUpdatedAt",
            "select nuclear_power_plants.Source, nuclear_power_plants.Country",
            "select distinct nuclear_power_plants.Name, nuclear_power_plants.Source"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the main source of the information for this table?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which reactor type has the largest average capacity?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-",
            "SELECT-FROM-GEOGRAPHY-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which reactor type has the largest average capacity?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c6",
        "label": "select t0.c6",
        "score": true,
        "real_pred": "select nuclear_power_plants.ReactorType",
        "real_label": "select nuclear_power_plants.ReactorType",
        "topk_preds": [
            "select nuclear_power_plants.ReactorType",
            "select nuclear_power_plants.ReactorType, avg(nuclear_power_plants.Capacity)",
            "select nuclear_power_plants.Status, avg(nuclear_power_plants.Capacity)",
            "select nuclear_power_plants.Name, nuclear_power_plants.ReactorType",
            "select nuclear_power_plants.Id, nuclear_power_plants.ReactorType",
            "select nuclear_power_plants.Status, avg(nuclear_power_plants.OperationalFrom)",
            "select nuclear_power_plants.Status, avg(nuclear_power_plants.OperationalTo)",
            "select nuclear_power_plants.ReactorType, avg(nuclear_power_plants.OperationalTo)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which reactor type has the largest average capacity?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name, c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which country is Kursk-1 in?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name (Kursk-1, Kursk 2-1), c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (SELECT-FROM-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE (UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which country is Kursk-1 in?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name (Kursk-1, Kursk 2-1), c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select nuclear_power_plants.Country",
        "real_label": "select nuclear_power_plants.Country",
        "topk_preds": [
            "select nuclear_power_plants.Country",
            "select nuclear_power_plants.Country, geo.nucleardata.c1, nuclear_power_plants.Latitude",
            "select nuclear_power_plants.Country, geo.nucleardata.c2, nuclear_power_plants.Longitude",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name",
            "select nuclear_power_plants.Country, geo.nucleardata.c1",
            "select nuclear_power_plants.Country, geo.nucleardata.c2",
            "select nuclear_power_plants.Country, nuclear_power_plants.Name, nuclear_power_plants.Latitude",
            "select nuclear_power_plants.Country, nuclear_power_plants.Latitude, nuclear_power_plants.Longitude"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which country is Kursk-1 in?, database: Database: GeoNuclearData. t0: nuclear_power_plants(c0: id, c1: name (Kursk-1, Kursk 2-1), c2: latitude, c3: longitude, c4: country, c5: status, c6: reactortype, c7: reactormodel, c8: constructionstartat, c9: operationalfrom, c10: operationalto, c11: capacity, c12: lastupdatedat, c13: source).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "nuclear_power_plants",
        "real_label": "nuclear_power_plants",
        "topk_preds": [
            "nuclear_power_plants",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What time do most of the crimes happen?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GEOGRAPHIE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-CURRENCY-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What time do most of the crimes happen?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select t0.c3",
        "label": "select t0.c1",
        "score": false,
        "real_pred": "select GreaterManchesterCrime.LSOA",
        "real_label": "select GreaterManchesterCrime.CrimeTS",
        "topk_preds": [
            "select GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.Outcome",
            "select GreaterManchesterCrime.CrimeID, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.CrimeID, GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.LSOA, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.CrimeID, min(GreaterManchesterCrime.LSOA)",
            "select GreaterManchesterCrime.CrimeID, max(GreaterManchesterCrime.LSOA)",
            "select GreaterManchesterCrime.LSOA, GreaterManchesterCrime.Location"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What time do most of the crimes happen?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the most likely outcome of the police investigation if the crime happen on \"street\"?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-RATE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the most likely outcome of the police investigation if the crime happen on \"street\"?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select t0.c5",
        "label": "select t0.c5",
        "score": true,
        "real_pred": "select GreaterManchesterCrime.Outcome",
        "real_label": "select GreaterManchesterCrime.Outcome",
        "topk_preds": [
            "select GreaterManchesterCrime.Outcome",
            "select GreaterManchesterCrime.Outcome, GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Outcome, GreaterManchesterCrime.LSOA",
            "select max(GreaterManchesterCrime.Outcome)",
            "select GreaterManchesterCrime.Outcome, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.Outcome, GreaterManchesterCrime.CrimeTS",
            "select GreaterManchesterCrime.Outcome, t0.c6",
            "select max(GreaterManchesterCrime.Outcome), GreaterManchesterCrime.Location"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the most likely outcome of the police investigation if the crime happen on \"street\"?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which type of crime happen the most in Salford?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which type of crime happen the most in Salford?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select GreaterManchesterCrime.Type",
        "real_label": "select GreaterManchesterCrime.Type",
        "topk_preds": [
            "select GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.Type, GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.LSOA, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.Type, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.CrimeID, GreaterManchesterCrime.Type"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which type of crime happen the most in Salford?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many crimes are under investigation?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome (Under investigation)).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WITH-WHERE",
            "SELECT-FROM-WHERE (count(*)",
            "SELECT-FROM-WHILE",
            "SELECT-FROMWHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many crimes are under investigation?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome (Under investigation)).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), GreaterManchesterCrime.Outcome",
            "select count(*), GreaterManchesterCrime.CrimeID",
            "select count(*), GreaterManchesterCrime.CrimeTS",
            "select count(GreaterManchesterCrime.CrimeID)",
            "select count(*), GreaterManchesterCrime.Type",
            "select count(*), GreaterManchesterCrime.LSOA",
            "select count(*), GreaterManchesterCrime.Location"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many crimes are under investigation?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome (Under investigation)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many crimes has been conducted?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM",
        "score": true,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM UNION-SELECT-FROM",
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM",
            "SELECT-FROM (t0.c1)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many crimes has been conducted?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), GreaterManchesterCrime.CrimeTS",
            "select count(*), GreaterManchesterCrime.CrimeID",
            "select count(GreaterManchesterCrime.CrimeTS)",
            "select count(*), database: GreaterManchesterCrime.CrimeTS",
            "select count(*), GreaterManchesterCrime.Location",
            "select count(*) the sum(GreaterManchesterCrime.CrimeTS)",
            "select count(*), GreaterManchesterCrime.LSOA"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many crimes has been conducted?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the top 3 area of crime conducted?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the top 3 area of crime conducted?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select t0.c2",
        "label": "select t0.c2",
        "score": true,
        "real_pred": "select GreaterManchesterCrime.Location",
        "real_label": "select GreaterManchesterCrime.Location",
        "topk_preds": [
            "select GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.Location",
            "select distinct GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.LSOA",
            "select distinct GreaterManchesterCrime.Location, GreaterManchesterCrime.LSOA"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the top 3 area of crime conducted?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which type of crime has the highest rate of \"Investigation complete\"?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which type of crime has the highest rate of \"Investigation complete\"?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select GreaterManchesterCrime.Type",
        "real_label": "select GreaterManchesterCrime.Type",
        "topk_preds": [
            "select GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.CrimeID, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.Type, GreaterManchesterCrime.Outcome",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.LSOA, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.CrimeID, GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.LSOA"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which type of crime has the highest rate of \"Investigation complete\"?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many crimes were classified as \"Drugs\"?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type (Drugs), c5: outcome).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE (count(*)",
            "SELECT-FROM-WHERE, count(*)",
            "SELECT-FROM-WHERE.",
            "SELECT SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE "
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many crimes were classified as \"Drugs\"?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type (Drugs), c5: outcome).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), GreaterManchesterCrime.Type",
            "select count(*), GreaterManchesterCrime.CrimeID",
            "select count(*), GreaterManchesterCrime.CrimeTS",
            "select count(*), GreaterManchesterCrime.LSOA",
            "select count(*), GreaterManchesterCrime.Location",
            "select count(*), GreaterManchesterCrime.CrimeID",
            "select count(*), GreaterManchesterCrime.Outcome"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many crimes were classified as \"Drugs\"?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type (Drugs), c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many crimes are still \"Under investigation\" to date?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome (Under investigation)).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE (count(*)",
            "SELECT-FROM-WHERE UNTIL",
            "SELECT-FROM-WHERE to count(*)",
            "SELECT-FROM-WHERE t0"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many crimes are still \"Under investigation\" to date?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome (Under investigation)).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), GreaterManchesterCrime.CrimeID",
            "select count(*), GreaterManchesterCrime.Outcome",
            "select count(*), GreaterManchesterCrime.CrimeTS",
            "select count(*), GreaterManchesterCrime.Type",
            "select count(*), GreaterManchesterCrime.LSOA",
            "select count(*), GreaterManchesterCrime.Location",
            "select count(*), t0.c6"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many crimes are still \"Under investigation\" to date?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome (Under investigation)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which location has the top amount of \"Drugs\" crime conducted?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type (Drugs), c5: outcome).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-WHERE-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which location has the top amount of \"Drugs\" crime conducted?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type (Drugs), c5: outcome).",
        "prediction": "select t0.c2",
        "label": "select t0.c2",
        "score": true,
        "real_pred": "select GreaterManchesterCrime.Location",
        "real_label": "select GreaterManchesterCrime.Location",
        "topk_preds": [
            "select GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.CrimeTS",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.CrimeID",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.Outcome",
            "select GreaterManchesterCrime.Location, t0.c7"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which location has the top amount of \"Drugs\" crime conducted?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type (Drugs), c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What\u2019s the most common type of crime?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What\u2019s the most common type of crime?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select GreaterManchesterCrime.Type",
        "real_label": "select GreaterManchesterCrime.Type",
        "topk_preds": [
            "select GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.Type, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.Type, GreaterManchesterCrime.LSOA, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.Type, GreaterManchesterCrime.Outcome",
            "select GreaterManchesterCrime.Type, GreaterManchesterCrime.LSOA, GreaterManchesterCrime.Outcome",
            "select GreaterManchesterCrime.CrimeID, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.Type, GreaterManchesterCrime.LSOA, GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.LSOA, GreaterManchesterCrime.Type"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What\u2019s the most common type of crime?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Where is the most dangerous area?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Where is the most dangerous area?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select t0.c2",
        "label": "select t0.c2",
        "score": true,
        "real_pred": "select GreaterManchesterCrime.Location",
        "real_label": "select GreaterManchesterCrime.Location",
        "topk_preds": [
            "select GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.Location, min(GreaterManchesterCrime.LSOA)",
            "select GreaterManchesterCrime.Location (GreaterManchesterCrime.LSOA)",
            "select min(GreaterManchesterCrime.Location)",
            "select GreaterManchesterCrime.Location, max(GreaterManchesterCrime.LSOA)",
            "select GreaterManchesterCrime.Location, alpha(GreaterManchesterCrime.LSOA)",
            "select top GreaterManchesterCrime.Location"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Where is the most dangerous area?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Where is the safest area?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Where is the safest area?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select t0.c2",
        "label": "select t0.c2",
        "score": true,
        "real_pred": "select GreaterManchesterCrime.Location",
        "real_label": "select GreaterManchesterCrime.Location",
        "topk_preds": [
            "select GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.CrimeID, GreaterManchesterCrime.Location",
            "select safest GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Location, min(GreaterManchesterCrime.LSOA)",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.CrimeTS",
            "select GreaterManchesterCrime.Location (or GreaterManchesterCrime.LSOA)",
            "select GreaterManchesterCrime.Location, max(GreaterManchesterCrime.LSOA)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Where is the safest area?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Where is the place with the largest number of sexual offenses crime events?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-WHERE-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Where is the place with the largest number of sexual offenses crime events?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select t0.c2",
        "label": "select t0.c2",
        "score": true,
        "real_pred": "select GreaterManchesterCrime.Location",
        "real_label": "select GreaterManchesterCrime.Location",
        "topk_preds": [
            "select GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.CrimeTS",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.CrimeID",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.Outcome",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.Location, max(GreaterManchesterCrime.CrimeTS)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Where is the place with the largest number of sexual offenses crime events?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: If it is possible to increase the number of police officers, which place is with the first priority?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: If it is possible to increase the number of police officers, which place is with the first priority?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select t0.c2",
        "label": "select t0.c2",
        "score": true,
        "real_pred": "select GreaterManchesterCrime.Location",
        "real_label": "select GreaterManchesterCrime.Location",
        "topk_preds": [
            "select GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.CrimeTS",
            "select GreaterManchesterCrime.Location, min(GreaterManchesterCrime.LSOA)",
            "select GreaterManchesterCrime.Location, GreaterManchesterCrime.CrimeID",
            "select GreaterManchesterCrime.Location, t1.c3"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: If it is possible to increase the number of police officers, which place is with the first priority?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which type of crime has the most prosecution cases?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-",
            "SELECT-FROM-GROUPS-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which type of crime has the most prosecution cases?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select GreaterManchesterCrime.Type",
        "real_label": "select GreaterManchesterCrime.Type",
        "topk_preds": [
            "select GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.Type, GreaterManchesterCrime.Outcome",
            "select GreaterManchesterCrime.CrimeID, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.Type, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.LSOA, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.CrimeID, GreaterManchesterCrime.Location"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which type of crime has the most prosecution cases?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which type of crime has the most investigation complete cases?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUPS-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which type of crime has the most investigation complete cases?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select GreaterManchesterCrime.Type",
        "real_label": "select GreaterManchesterCrime.Type",
        "topk_preds": [
            "select GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.Type, GreaterManchesterCrime.Outcome",
            "select GreaterManchesterCrime.CrimeID, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.LSOA, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.CrimeTS, GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Type, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.CrimeID, GreaterManchesterCrime.Location"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which type of crime has the most investigation complete cases?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid, c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the result in case 6B:E2:54:C6:58:D2?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid (6B:E2:54:C6:58:D2), c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the result in case 6B:E2:54:C6:58:D2?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid (6B:E2:54:C6:58:D2), c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "select t0.c5",
        "label": "select t0.c5",
        "score": true,
        "real_pred": "select GreaterManchesterCrime.Outcome",
        "real_label": "select GreaterManchesterCrime.Outcome",
        "topk_preds": [
            "select GreaterManchesterCrime.Outcome",
            "select GreaterManchesterCrime.CrimeID, GreaterManchesterCrime.Outcome",
            "select GreaterManchesterCrime.Outcome, GreaterManchesterCrime.Type",
            "select GreaterManchesterCrime.Outcome, t0.c6",
            "select GreaterManchesterCrime.Outcome, GreaterManchesterCrime.Location",
            "select GreaterManchesterCrime.Outcome, GreaterManchesterCrime.LSOA",
            "select GreaterManchesterCrime.Outcome, GreaterManchesterCrime.CrimeTS",
            "select sum(GreaterManchesterCrime.Outcome)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the result in case 6B:E2:54:C6:58:D2?, database: Database: GreaterManchesterCrime. t0: greatermanchestercrime(c0: crimeid (6B:E2:54:C6:58:D2), c1: crimets, c2: location, c3: lsoa, c4: type, c5: outcome).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "GreaterManchesterCrime",
        "real_label": "GreaterManchesterCrime",
        "topk_preds": [
            "GreaterManchesterCrime",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: which foods are captured in the data set?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM",
        "score": true,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM UNION-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM SELECT-FROM"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: which foods are captured in the data set?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select distinct t0.c8",
        "label": "select distinct t0.c6",
        "score": false,
        "real_pred": "select distinct sampledata15.variety",
        "real_label": "select distinct sampledata15.commod",
        "topk_preds": [
            "select distinct sampledata15.variety",
            "select distinct sampledata15.variety, sampledata15.origin",
            "select count(distinct sampledata15.variety)",
            "select sampledata15.variety",
            "select distinct sampledata15.variety, sampledata15.claim",
            "select distinct sampledata15.variety, sampledata15.growst",
            "select distinct sampledata15.variety, sampledata15.distst",
            "select distinct sampledata15.variety, sampledata15.packst"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: which foods are captured in the data set?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "sampledata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "sampledata15",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: how many samples have unknown countries of origin?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety (Unknown), c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE (count(*)",
            "SELECT-FROM-WITH-WHERE",
            "SELECT-FROM with-WHERE",
            "SELECT-FROM-WHERE (Number(*)",
            "SELECT-FROM-WHERE (*)",
            "SELECT-FROM-WHERE."
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: how many samples have unknown countries of origin?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety (Unknown), c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), sampledata15.origin, sampledata15.country",
            "select count(*), sampledata15.country",
            "select count(*), sampledata15.origin",
            "select count(distinct sampledata15.sample_pk)",
            "select count(*), sampledata15.origin - sampledata15.country",
            "select count(*), sampledata15.origin & sampledata15.country",
            "select count(*), sampledata15.origin, sampledata15.country"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: how many samples have unknown countries of origin?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety (Unknown), c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "sampledata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "sampledata15",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which are the top 10 commodities that have the highest residue during 2015?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-WHERE-ORDER BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-WHERE)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which are the top 10 commodities that have the highest residue during 2015?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c6",
        "label": "select t1.c1",
        "score": false,
        "real_pred": "select sampledata15.commod",
        "real_label": "select resultsdata15.commod",
        "topk_preds": [
            "select sampledata15.commod",
            "select sampledata15.commod, resultsdata15.commod",
            "select sampledata15.month, sampledata15.commod",
            "select sampledata15.commod, resultsdata15.mean",
            "select sampledata15.commod, resultsdata15.extract",
            "select sampledata15.commod, sampledata15.claim",
            "select sampledata15.commod, sampledata15.growst",
            "select sampledata15.commod, resultsdata15.determin"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which are the top 10 commodities that have the highest residue during 2015?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0 t1",
        "label": "t0 t1",
        "score": true,
        "real_pred": "sampledata15 resultsdata15",
        "real_label": "sampledata15 resultsdata15",
        "topk_preds": [
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Name some imported commodities that are not found in the US., database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": false,
        "real_pred": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE -EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WAIT-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Name some imported commodities that are not found in the US., database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c6",
        "label": "select t0.c6",
        "score": true,
        "real_pred": "select sampledata15.commod",
        "real_label": "select sampledata15.commod",
        "topk_preds": [
            "select sampledata15.commod",
            "select distinct sampledata15.commod",
            "select sampledata15.state",
            "select sampledata15.day",
            "select sampledata15.year",
            "select sampledata15.source_id",
            "select sampledata15.site",
            "select sampledata15.commtype"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Name some imported commodities that are not found in the US., database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "sampledata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "sampledata15",
            "",
            "",
            "",
            "sampledata15 resultsdata15",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Tell me the average pesticide residue for each state in the US where food is grown., database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY",
        "label": "SELECT-FROM-GROUP BY",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY",
        "real_label": "SELECT-FROM-GROUP BY",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY ",
            "SELECT-FROM-WHERE-GROUP BY (t0.c1)",
            "SELECT-FROM -WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY (ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Tell me the average pesticide residue for each state in the US where food is grown., database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select avg(t1.c13), t0.c1",
        "label": "select t0.c15, avg(t1.c6)",
        "score": false,
        "real_pred": "select avg(resultsdata15.mean), sampledata15.state",
        "real_label": "select sampledata15.growst, avg(resultsdata15.concen)",
        "topk_preds": [
            "select avg(resultsdata15.mean), sampledata15.state",
            "select sampledata15.state, avg(resultsdata15.mean)",
            "select sampledata15.state, avg(resultsdata15.mean5)",
            "select avg(resultsdata15.mean5), sampledata15.state",
            "select sampledata15.state, avg(resultsdata15.meanc13)",
            "select sampledata15.state, avg(resultsdata15.meanc13c13c13)",
            "select sampledata15.state, avg(resultsdata15.meanc13c13)",
            "select sampledata15.state, avg(resultsdata15.meanc13c13c13c13"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Tell me the average pesticide residue for each state in the US where food is grown., database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0 t1",
        "label": "t0 t1",
        "score": true,
        "real_pred": "sampledata15 resultsdata15",
        "real_label": "sampledata15 resultsdata15",
        "topk_preds": [
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which varieties of apple typically have higher pesticide levels?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-GROUP BY-HAVING",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-HAVING",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which varieties of apple typically have higher pesticide levels?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c8",
        "label": "select t0.c8",
        "score": true,
        "real_pred": "select sampledata15.variety",
        "real_label": "select sampledata15.variety",
        "topk_preds": [
            "select sampledata15.variety",
            "select distinct sampledata15.variety",
            "select sampledata15.variety, resultsdata15.mean",
            "select distinct sampledata15.variety, resultsdata15.mean",
            "select highst sampledata15.variety",
            "select sampledata15.variety, resultsdata15.extract",
            "select sampledata15.variety, resultsdata15.determin",
            "select sampledata15.variety, resultsdata15.commod"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which varieties of apple typically have higher pesticide levels?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0 t1",
        "label": "t0 t1",
        "score": true,
        "real_pred": "sampledata15 resultsdata15",
        "real_label": "sampledata15 resultsdata15",
        "topk_preds": [
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which commodities have the pesticides concentration much higher than their limit for detection?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which commodities have the pesticides concentration much higher than their limit for detection?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c6",
        "label": "select t1.c1",
        "score": false,
        "real_pred": "select sampledata15.commod",
        "real_label": "select resultsdata15.commod",
        "topk_preds": [
            "select sampledata15.commod",
            "select sampledata15.state",
            "select distinct sampledata15.commod",
            "select sampledata15.site",
            "select sampledata15.day",
            "select resultsdata15.commod",
            "select sampledata15.year",
            "select sampledata15.sample_pk"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which commodities have the pesticides concentration much higher than their limit for detection?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0 t1",
        "label": "t1",
        "score": false,
        "real_pred": "sampledata15 resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            "",
            "resultsdata15"
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Name top 5 labs with the maximum number of testing., database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Name top 5 labs with the maximum number of testing., database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t1.c3",
        "label": "select t1.c3",
        "score": true,
        "real_pred": "select resultsdata15.lab",
        "real_label": "select resultsdata15.lab",
        "topk_preds": [
            "select resultsdata15.lab",
            "select resultsdata15.lab, resultsdata15.pestcode",
            "select resultsdata15.lab, resultsdata15.lod",
            "select resultsdata15.lab, resultsdata15.concen",
            "select resultsdata15.lab, resultsdata15.testclass",
            "select resultsdata15.lab, resultsdata15.commtype",
            "select resultsdata15.lab, resultsdata15.extract",
            "select resultsdata15.lab, resultsdata15.conunit"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Name top 5 labs with the maximum number of testing., database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "resultsdata15",
            "",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which country is the safest in terms of the pesticide concentration found in imported foods?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GEORGE-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-Import-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which country is the safest in terms of the pesticide concentration found in imported foods?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c10",
        "label": "select t0.c10",
        "score": true,
        "real_pred": "select sampledata15.country",
        "real_label": "select sampledata15.country",
        "topk_preds": [
            "select sampledata15.country",
            "select sampledata15.country, resultsdata15.concen",
            "select sampledata15.country, resultsdata15.mean",
            "select sampledata15.country, sampledata15.claim",
            "select sampledata15.country, sampledata15.distst",
            "select sampledata15.country, resultsdata15.extract",
            "select sampledata15.country, min(resultsdata15.mean)",
            "select sampledata15.country, sampledata15.growst"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which country is the safest in terms of the pesticide concentration found in imported foods?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0 t1",
        "label": "t0 t1",
        "score": true,
        "real_pred": "sampledata15 resultsdata15",
        "real_label": "sampledata15 resultsdata15",
        "topk_preds": [
            "sampledata15 resultsdata15",
            "sampledata15",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which is the most popular state in the US in terms of commodities distribution?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which is the most popular state in the US in terms of commodities distribution?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c1",
        "label": "select t0.c17",
        "score": false,
        "real_pred": "select sampledata15.state",
        "real_label": "select sampledata15.distst",
        "topk_preds": [
            "select sampledata15.state",
            "select sampledata15.state, sampledata15.distst",
            "select sampledata15.state, sampledata15.packst",
            "select sampledata15.state, sampledata15.claim",
            "select sampledata15.state, sampledata15.growst",
            "select sampledata15.state, sampledata15.year",
            "select sampledata15.state, sampledata15.quantity",
            "select sampledata15.state, sampledata15.year0"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which is the most popular state in the US in terms of commodities distribution?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "sampledata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "sampledata15",
            "",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the maximum pesticide concentration ever found in a commodity?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM",
        "score": true,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM UNION-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the maximum pesticide concentration ever found in a commodity?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select max(t1.c6)",
        "label": "select max(t1.c6)",
        "score": true,
        "real_pred": "select max(resultsdata15.concen)",
        "real_label": "select max(resultsdata15.concen)",
        "topk_preds": [
            "select max(resultsdata15.concen)",
            "select max(resultsdata15.concen), resultsdata15.lod",
            "select max(resultsdata15.concen), resultsdata15.commod",
            "select max(resultsdata15.concen), resultsdata15.mean",
            "select max(resultsdata15.concen), resultsdata15.determin",
            "select max(resultsdata15.concen), resultsdata15.testclass",
            "select max(resultsdata15.concen), resultsdata15.concen",
            "select max(resultsdata15.concen), resultsdata15.lab"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the maximum pesticide concentration ever found in a commodity?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "resultsdata15",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: When is sample 3763 collected?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: When is sample 3763 collected?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c2",
        "label": "select t0.c2, t0.c3, t0.c4",
        "score": false,
        "real_pred": "select sampledata15.year",
        "real_label": "select sampledata15.year, sampledata15.month, sampledata15.day",
        "topk_preds": [
            "select sampledata15.year",
            "select sampledata15.sample_pk, sampledata15.year",
            "select sampledata15.month",
            "select sampledata15.month, sampledata15.day",
            "select sampledata15.sample_pk, sampledata15.month",
            "select sampledata15.day",
            "select sampledata15.site",
            "select sampledata15.sample_pk, sampledata15.day"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: When is sample 3763 collected?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "sampledata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "sampledata15",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which state has the most apple collected?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which state has the most apple collected?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c1",
        "label": "select t0.c17",
        "score": false,
        "real_pred": "select sampledata15.state",
        "real_label": "select sampledata15.distst",
        "topk_preds": [
            "select sampledata15.state",
            "select sampledata15.state, sampledata15.distst",
            "select sampledata15.state, sampledata15.year",
            "select sampledata15.state, sampledata15.claim",
            "select sampledata15.state, sampledata15.month",
            "select sampledata15.state, sampledata15.growst",
            "select sampledata15.state, sampledata15.packst",
            "select sampledata15.state, sampledata15.site"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which state has the most apple collected?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "sampledata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "sampledata15",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which state has grow the most apples?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which state has grow the most apples?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c1",
        "label": "select t0.c15",
        "score": false,
        "real_pred": "select sampledata15.state",
        "real_label": "select sampledata15.growst",
        "topk_preds": [
            "select sampledata15.state",
            "select sampledata15.state, sampledata15.distst",
            "select sampledata15.state, sampledata15.growst",
            "select sampledata15.state, sampledata15.claim",
            "select sampledata15.state, sampledata15.packst",
            "select sampledata15.state, sampledata15.year",
            "select sampledata15.state, sampledata15.month",
            "select sampledata15.state, sampledata15.site"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which state has grow the most apples?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "sampledata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "sampledata15",
            "",
            "",
            "",
            "sampledata15 resultsdata15",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many class of products are there?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM",
        "score": true,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM (count(distinct t1.c5)",
            "SELECT-FROM (distinct t1.c5)",
            "SELECT-FROM, count(distinct t1.c5)",
            "SELECT-FROM (Num(distinct t1.c5)",
            "SELECT-FROM (total count(distinct t1.c5)",
            "SELECT-FROM (count(distinct t1.c6)",
            "SELECT-FROM (count(distinct t1.c4)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many class of products are there?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select count(distinct t1.c5)",
        "label": "select count(distinct t0.c8)",
        "score": false,
        "real_pred": "select count(distinct resultsdata15.testclass)",
        "real_label": "select count(distinct sampledata15.variety)",
        "topk_preds": [
            "select count(distinct resultsdata15.testclass)",
            "select count(distinct t2.c5)",
            "select count(distinct resultsdata15.pestcode)",
            "select count(distinct resultsdata15.concen)",
            "select count(distinct resultsdata15.commtype)",
            "select count(distinct resultsdata15.lab)",
            "select count(distinct resultsdata15.conunit)",
            "select count(distinct resultsdata15.commod)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many class of products are there?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t1",
        "label": "t0",
        "score": false,
        "real_pred": "resultsdata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "resultsdata15",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: what's the 4 digit collection code of sample 3763?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-ISO-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-SAMPLE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: what's the 4 digit collection code of sample 3763?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c4",
        "label": "select t0.c5",
        "score": false,
        "real_pred": "select sampledata15.day",
        "real_label": "select sampledata15.site",
        "topk_preds": [
            "select sampledata15.day",
            "select sampledata15.site",
            "select sampledata15.commod",
            "select sampledata15.claim",
            "select sampledata15.sample_pk",
            "select sampledata15.month",
            "select t15.c4",
            "select sampledata15.state"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: what's the 4 digit collection code of sample 3763?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0 t1",
        "label": "t0",
        "score": false,
        "real_pred": "sampledata15 resultsdata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "sampledata15 resultsdata15",
            "sampledata15",
            "",
            "",
            "resultsdata15",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: If sample 6480 is imported, which country is it originally from?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: If sample 6480 is imported, which country is it originally from?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c10",
        "label": "select t0.c10",
        "score": true,
        "real_pred": "select sampledata15.country",
        "real_label": "select sampledata15.country",
        "topk_preds": [
            "select sampledata15.country",
            "select sampledata15.origin",
            "select sampledata15.origin, sampledata15.country",
            "select sampledata15.country, sampledata15.origin",
            "select sampledata15.sample_pk9, sampledata15.country",
            "select sampledata15.origin, sampledata15.country",
            "select distinct sampledata15.country",
            "select sampledata15.sample_pk9"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: If sample 6480 is imported, which country is it originally from?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "sampledata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "sampledata15",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many number of units are there in sample 9628?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many number of units are there in sample 9628?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select count(*)",
        "label": "select t0.c14",
        "score": false,
        "real_pred": "select count(*)",
        "real_label": "select sampledata15.quantity",
        "topk_preds": [
            "select count(*)",
            "select count(distinct resultsdata15.conunit)",
            "select sum(resultsdata15.conunit)",
            "select count(*), resultsdata15.conunit",
            "select count(resultsdata15.conunit)",
            "select count(conunits)",
            "select count(*), sampledata15.commod",
            "select count(*), sampledata15.sample_pk"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many number of units are there in sample 9628?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t1",
        "label": "t0",
        "score": false,
        "real_pred": "resultsdata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "resultsdata15",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What's the code for test for sample 7498?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (SELECT-FROM-WHERE)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What's the code for test for sample 7498?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t1.c5",
        "label": "select t1.c5",
        "score": true,
        "real_pred": "select resultsdata15.testclass",
        "real_label": "select resultsdata15.testclass",
        "topk_preds": [
            "select resultsdata15.testclass",
            "select resultsdata15.pestcode",
            "select resultsdata15.commod",
            "select resultsdata15.concen",
            "select resultsdata15.lab",
            "select resultsdata15.commtype",
            "select resultsdata15.testclass,",
            "select resultsdata15.sample_pk"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What's the code for test for sample 7498?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "resultsdata15",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What's the code for confirmation for the latest sample?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-ORDER BY-LIMIT",
        "label": "SELECT-FROM-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-ORDER BY-LIMIT)",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What's the code for confirmation for the latest sample?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t1.c4",
        "label": "select t1.c9",
        "score": false,
        "real_pred": "select resultsdata15.pestcode",
        "real_label": "select resultsdata15.confmethod",
        "topk_preds": [
            "select resultsdata15.pestcode",
            "select resultsdata15.concen",
            "select resultsdata15.testclass",
            "select resultsdata15.confmethod",
            "select resultsdata15.conunit",
            "select resultsdata15.lod",
            "select resultsdata15.mean",
            "select resultsdata15.determin"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What's the code for confirmation for the latest sample?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0 t1",
        "label": "t0 t1",
        "score": true,
        "real_pred": "sampledata15 resultsdata15",
        "real_label": "sampledata15 resultsdata15",
        "topk_preds": [
            "sampledata15 resultsdata15",
            "resultsdata15",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which lab has analyzed the most sample?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which lab has analyzed the most sample?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t1.c3",
        "label": "select t1.c3",
        "score": true,
        "real_pred": "select resultsdata15.lab",
        "real_label": "select resultsdata15.lab",
        "topk_preds": [
            "select resultsdata15.lab",
            "select resultsdata15.lab, resultsdata15.lod",
            "select resultsdata15.lab dept. resultsdata15.lod",
            "select resultsdata15.lab, resultsdata15.pestcode",
            "select resultsdata15.lab, resultsdata15.extract",
            "select resultsdata15.lab dept resultsdata15.lod",
            "select resultsdata15.lab (resultsdata15.lod)",
            "select resultsdata15.lab, resultsdata15.concen"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which lab has analyzed the most sample?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "resultsdata15",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What's the majority of test classification result?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUPS-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROSS-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What's the majority of test classification result?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t1.c5",
        "label": "select max(t1.c5)",
        "score": false,
        "real_pred": "select resultsdata15.testclass",
        "real_label": "select max(resultsdata15.testclass)",
        "topk_preds": [
            "select resultsdata15.testclass",
            "select avg(resultsdata15.testclass)",
            "select preponderance(resultsdata15.testclass)",
            "select resultsdata15.testclass, resultsdata15.concen",
            "select majorite(resultsdata15.testclass)",
            "select predominance(resultsdata15.testclass)",
            "select majorit resultsdata15.testclass",
            "select major(resultsdata15.testclass)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What's the majority of test classification result?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "resultsdata15",
            "",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What's the unit of measure for sample 3879?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-JECT-SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-JECT-FROM-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-SAMPLE-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What's the unit of measure for sample 3879?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t1.c8",
        "label": "select t1.c8",
        "score": true,
        "real_pred": "select resultsdata15.conunit",
        "real_label": "select resultsdata15.conunit",
        "topk_preds": [
            "select resultsdata15.conunit",
            "select sampledata15.quantity",
            "select resultsdata15.lod",
            "select t15.c14",
            "select t14.c14",
            "select t2.c14",
            "select resultsdata15.determin",
            "select t12.c14"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What's the unit of measure for sample 3879?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0 t1",
        "label": "t1",
        "score": false,
        "real_pred": "sampledata15 resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "sampledata15 resultsdata15",
            "resultsdata15",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What's the unit of measure used for the product commodity code PO?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod (PO), c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim (PO), c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod (PO), c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE (GROUP BY-ORDER BY-LIMIT)",
            "SELECT-FROM-WHERE (GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE (UNION-SELECT-FROM-WHERE)",
            "SELECT-FROM-WHERE (GROUP BY-HAVING)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What's the unit of measure used for the product commodity code PO?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod (PO), c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim (PO), c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod (PO), c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t1.c14",
        "label": "select t1.c8",
        "score": false,
        "real_pred": "select resultsdata15.extract",
        "real_label": "select resultsdata15.conunit",
        "topk_preds": [
            "select resultsdata15.extract",
            "select resultsdata15.conunit",
            "select t15.c14",
            "select resultsdata15.mean",
            "select distinct resultsdata15.conunit",
            "select distinct resultsdata15.extract",
            "select resultsdata15.pestcode",
            "select resultsdata15.determin"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What's the unit of measure used for the product commodity code PO?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod (PO), c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim (PO), c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod (PO), c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t15",
        "label": "t1",
        "score": false,
        "real_pred": "resultsdata155",
        "real_label": "resultsdata15",
        "topk_preds": [
            "",
            "",
            "",
            "",
            "resultsdata15",
            "",
            "",
            "sampledata15 resultsdata15"
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What's the mean result finding for product AP?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod (AP), c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod (AP), c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE (avg(t1.c13)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What's the mean result finding for product AP?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod (AP), c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod (AP), c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select avg(t1.c13)",
        "label": "select t1.c13",
        "score": false,
        "real_pred": "select avg(resultsdata15.mean)",
        "real_label": "select resultsdata15.mean",
        "topk_preds": [
            "select avg(resultsdata15.mean)",
            "select avg(resultsdata15.mean5)",
            "select avg(resultsdata15.lab)",
            "select avg(resultsdata15.mean8)",
            "select avg(resultsdata15.commod)",
            "select avg(t1.c 13)",
            "select avg(resultsdata15.extract)",
            "select avg(resultsdata15.mean"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What's the mean result finding for product AP?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod (AP), c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod (AP), c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "resultsdata15",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What's the most common extraction method?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety (Common), c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What's the most common extraction method?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety (Common), c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t1.c14",
        "label": "select max(t1.c14)",
        "score": false,
        "real_pred": "select resultsdata15.extract",
        "real_label": "select max(resultsdata15.extract)",
        "topk_preds": [
            "select resultsdata15.extract",
            "select resultsdata15.confmethod",
            "select resultsdata15.mean",
            "select resultsdata15.confmethod2",
            "select resultsdata15.lod",
            "select resultsdata15.determin",
            "select resultsdata15.pestcode",
            "select resultsdata15.conunit"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What's the most common extraction method?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety (Common), c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "resultsdata15",
            "",
            "",
            "",
            "",
            "sampledata15 resultsdata15",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which lab conduct of most number of tests?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which lab conduct of most number of tests?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t1.c3",
        "label": "select t1.c3",
        "score": true,
        "real_pred": "select resultsdata15.lab",
        "real_label": "select resultsdata15.lab",
        "topk_preds": [
            "select resultsdata15.lab",
            "select resultsdata15.lab, resultsdata15.lod",
            "select resultsdata15.lab, resultsdata15.pestcode",
            "select resultsdata15.lab (resultsdata15.lod)",
            "select resultsdata15.lab, resultsdata15.concen",
            "select resultsdata15.lab, resultsdata15.conunit",
            "select resultsdata15.lab, resultsdata15.testclass",
            "select resultsdata15.lab, resultsdata15.extract"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which lab conduct of most number of tests?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "resultsdata15",
            "",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which lab is used for testing for prodict AP?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod (AP), c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod (AP), c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE/UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which lab is used for testing for prodict AP?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod (AP), c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod (AP), c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t1.c3",
        "label": "select t1.c3",
        "score": true,
        "real_pred": "select resultsdata15.lab",
        "real_label": "select resultsdata15.lab",
        "topk_preds": [
            "select resultsdata15.lab",
            "select distinct resultsdata15.lab",
            "select resultsdata15.lab, resultsdata15.lod",
            "select distinct resultsdata15.lab, resultsdata15.lod",
            "select specific resultsdata15.lab",
            "select resultsdata15.commod",
            "select unique resultsdata15.lab",
            "select resultsdata15.lod"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which lab is used for testing for prodict AP?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod (AP), c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod (AP), c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "resultsdata15",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many samples come from other countries?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE (count(*)",
            "SELECT-FROM",
            "SELECT-FROM-WHERE, count(*)",
            "SELECT-FROM-WHERE,",
            "SELECT-FROM-WHERE "
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many samples come from other countries?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(distinct sampledata15.sample_pk)",
            "select count(*), sampledata15.country",
            "select count(distinct sampledata15.growst.c0)",
            "select count(distinct sampledata15.origin)",
            "select count(distinct sampledata15.state)",
            "select count(distinct sampledata15.site)",
            "select count(distinct sampledata15.growst)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many samples come from other countries?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "sampledata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "sampledata15",
            "",
            "",
            "",
            "",
            "",
            "",
            "sampledata15 resultsdata15"
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What kind of food has been tested 'detect' most?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE)",
            "SELECT-FROM-WHERE-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What kind of food has been tested 'detect' most?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c8",
        "label": "select t1.c1",
        "score": false,
        "real_pred": "select sampledata15.variety",
        "real_label": "select resultsdata15.commod",
        "topk_preds": [
            "select sampledata15.variety",
            "select sampledata15.variety, resultsdata15.testclass",
            "select sampledata15.variety, resultsdata15.determin",
            "select sampledata15.variety, sampledata15.origin",
            "select sampledata15.variety, resultsdata15.mean",
            "select sampledata15.variety, resultsdata15.commod",
            "select sampledata15.variety, resultsdata15.concen",
            "select sampledata15.variety, resultsdata15.lab"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What kind of food has been tested 'detect' most?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0 t1",
        "label": "t1",
        "score": false,
        "real_pred": "sampledata15 resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which state produce the most organic food?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety (Organic), c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which state produce the most organic food?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety (Organic), c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c1",
        "label": "select t0.c1",
        "score": true,
        "real_pred": "select sampledata15.state",
        "real_label": "select sampledata15.state",
        "topk_preds": [
            "select sampledata15.state",
            "select sampledata15.state, sampledata15.distst",
            "select sampledata15.state, sampledata15.year",
            "select sampledata15.state, sampledata15.claim",
            "select sampledata15.state, sampledata15.month",
            "select sampledata15.state, sampledata15.site",
            "select sampledata15.state, sampledata15.growst",
            "select sampledata15.state, sampledata15.source_id"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which state produce the most organic food?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety (Organic), c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "sampledata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "sampledata15",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Where do the US import the most food?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Where do the US import the most food?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c10",
        "label": "select max(t0.c10)",
        "score": false,
        "real_pred": "select sampledata15.country",
        "real_label": "select max(sampledata15.country)",
        "topk_preds": [
            "select sampledata15.country",
            "select sampledata15.country, sampledata15.claim",
            "select sampledata15.country, sampledata15.growst",
            "select sampledata15.country, sampledata15.distst",
            "select sampledata15.country, sampledata15.year3",
            "select sampledata15.country, sampledata15.state",
            "select sampledata15.distst",
            "select sampledata15.country, sampledata15.disttype"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Where do the US import the most food?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "sampledata15",
        "real_label": "sampledata15",
        "topk_preds": [
            "sampledata15",
            "",
            "",
            "",
            "sampledata15 resultsdata15",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What kind of food has been test the most?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What kind of food has been test the most?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t0.c8",
        "label": "select max(t1.c1)",
        "score": false,
        "real_pred": "select sampledata15.variety",
        "real_label": "select max(resultsdata15.commod)",
        "topk_preds": [
            "select sampledata15.variety",
            "select sampledata15.variety, resultsdata15.testclass",
            "select sampledata15.variety, sampledata15.origin",
            "select sampledata15.variety, resultsdata15.concen",
            "select sampledata15.variety, resultsdata15.commod",
            "select sampledata15.variety, resultsdata15.pestcode",
            "select sampledata15.variety, resultsdata15.lab",
            "select sampledata15.variety, resultsdata15.determin"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What kind of food has been test the most?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t0 t1",
        "label": "t1",
        "score": false,
        "real_pred": "sampledata15 resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which kind of pesticide is the easiest to be tested?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-OPERATION-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-OPERATION-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which kind of pesticide is the easiest to be tested?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "select t1.c4",
        "label": "select max(t1.c4)",
        "score": false,
        "real_pred": "select resultsdata15.pestcode",
        "real_label": "select max(resultsdata15.pestcode)",
        "topk_preds": [
            "select resultsdata15.pestcode",
            "select resultsdata15.testclass",
            "select resultsdata15.commtype",
            "select resultsdata15.commod",
            "select resultsdata15.lab",
            "select resultsdata15.extract",
            "select resultsdata15.pestcode4",
            "select resultsdata15.pestcode1"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which kind of pesticide is the easiest to be tested?, database: Database: Pesticide. t0: sampledata15(c0: sample_pk, c1: state, c2: year, c3: month, c4: day, c5: site, c6: commod, c7: source_id, c8: variety, c9: origin, c10: country, c11: disttype, c12: commtype, c13: claim, c14: quantity, c15: growst, c16: packst, c17: distst) (c0) refers to t1(c0). t1: resultsdata15(c0: sample_pk, c1: commod, c2: commtype, c3: lab, c4: pestcode, c5: testclass, c6: concen, c7: lod, c8: conunit, c9: confmethod, c10: confmethod2, c11: annotate, c12: quantitate, c13: mean, c14: extract, c15: determin).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "resultsdata15",
        "real_label": "resultsdata15",
        "topk_preds": [
            "resultsdata15",
            "",
            "sampledata15 resultsdata15",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which school district receive the most of federal revenue through state in Wisconsin?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (Wisconsin), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (Wisconsin), c2: #_records).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE-GROUP BY-LIMIT)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which school district receive the most of federal revenue through state in Wisconsin?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (Wisconsin), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (Wisconsin), c2: #_records).",
        "prediction": "select t0.c2",
        "label": "select t0.c2",
        "score": true,
        "real_pred": "select FINREV_FED_17.school_district",
        "real_label": "select FINREV_FED_17.school_district",
        "topk_preds": [
            "select FINREV_FED_17.school_district",
            "select FINREV_FED_17.school_district, FINREV_FED_17.t_fed_rev",
            "select FINREV_FED_17.state_code, FINREV_FED_17.school_district",
            "select FINREV_FED_17.school_district, FINREV_FED_17.nces_id",
            "select FINREV_FED_17.school_district, FINREV_FED_17.c25",
            "select FINREV_FED_17.school_district, FINREV_FED_17.state_code",
            "select FINREV_FED_17.school_district, FINREV_FED_17.idcensus",
            "select FINREV_FED_17.school_district, FINREV_FED_17.idcensus3"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which school district receive the most of federal revenue through state in Wisconsin?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (Wisconsin), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (Wisconsin), c2: #_records).",
        "prediction": "t0 t2",
        "label": "t0 t2",
        "score": true,
        "real_pred": "FINREV_FED_17 FINREV_FED_KEY_17",
        "real_label": "FINREV_FED_17 FINREV_FED_KEY_17",
        "topk_preds": [
            "FINREV_FED_17 FINREV_FED_KEY_17",
            "",
            "FINREV_FED_17",
            "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the average Title 1 fund in Virginia?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (Virginia), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (Virginia), c2: #_records).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE (avg(t1.c3)",
            "SELECT-FROM-WHERE (Avg(t1.c3)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the average Title 1 fund in Virginia?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (Virginia), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (Virginia), c2: #_records).",
        "prediction": "select avg(t2.c4)",
        "label": "select avg(t0.c6)",
        "score": false,
        "real_pred": "select avg(t2.c4)",
        "real_label": "select avg(FINREV_FED_17.c14)",
        "topk_preds": [
            "select avg(t2.c4)",
            "select avg(t1.c4)",
            "select avg(t3.c4)",
            "select avg(FINREV_FED_17.yr_data)",
            "select avg(FINREV_FED_KEY_17.#_Records)",
            "select avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select avg(FINREV_FED_17.t_fed_rev)",
            "select avg(FINREV_FED_17.c14)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the average Title 1 fund in Virginia?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (Virginia), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (Virginia), c2: #_records).",
        "prediction": "t0 t1",
        "label": "t0 t2",
        "score": false,
        "real_pred": "FINREV_FED_17 NDECoreExcel_Math_Grade8",
        "real_label": "FINREV_FED_17 FINREV_FED_KEY_17",
        "topk_preds": [
            "FINREV_FED_17 NDECoreExcel_Math_Grade8",
            "FINREV_FED_17 FINREV_FED_KEY_17",
            "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "NDECoreExcel_Math_Grade8",
            "FINREV_FED_17",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the top 10 states that have the highest average math score and federal revenue they got through different categories?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the top 10 states that have the highest average math score and federal revenue they got through different categories?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select t1.c1, t0.c5",
        "label": "select t2.c1, sum(t0.c6),sum(t0.c7)",
        "score": false,
        "real_pred": "select NDECoreExcel_Math_Grade8.state, FINREV_FED_17.t_fed_rev",
        "real_label": "select FINREV_FED_KEY_17.State, sum(FINREV_FED_17.c14),sum(FINREV_FED_17.c25)",
        "topk_preds": [
            "select NDECoreExcel_Math_Grade8.state, FINREV_FED_17.t_fed_rev",
            "select FINREV_FED_17.state_code, avg(NDECoreExcel_Math_Grade8.average_scale_score), max(FINREV_FED_17.t_fed_rev)",
            "select FINREV_FED_17.idcensus, FINREV_FED_17.t_fed_rev",
            "select FINREV_FED_KEY_17.State, FINREV_FED_17.t_fed_rev",
            "select FINREV_FED_17.state_code, NDECoreExcel_Math_Grade8.state, FINREV_FED_17.t_fed_rev",
            "select NDECoreExcel_Math_Grade8.state, FINREV_FED_17.idcensus, FINREV_FED_17.t_fed_rev",
            "select FINREV_FED_17.state_code, FINREV_FED_17.t_fed_rev",
            "select FINREV_FED_17.state_code, avg(NDECoreExcel_Math_Grade8.average_scale_score), FINREV_FED_17.t_fed_rev"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the top 10 states that have the highest average math score and federal revenue they got through different categories?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t0 t1 t2",
        "label": "t0 t1 t2",
        "score": true,
        "real_pred": "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
        "real_label": "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
        "topk_preds": [
            "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "FINREV_FED_17 NDECoreExcel_Math_Grade8",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the schools with highest federal revenue in each federal revenue categories and what's their state average scores?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-UNION-SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-UNION-SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT - SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, avg(t1.c3)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT - GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the schools with highest federal revenue in each federal revenue categories and what's their state average scores?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select t0.c2, t0.c5, avg(t1.c3)",
        "label": "select t0.c2, max(t0.c6), t1.c3",
        "score": false,
        "real_pred": "select FINREV_FED_17.school_district, FINREV_FED_17.t_fed_rev, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
        "real_label": "select FINREV_FED_17.school_district, max(FINREV_FED_17.c14), NDECoreExcel_Math_Grade8.average_scale_score",
        "topk_preds": [
            "select FINREV_FED_17.school_district, FINREV_FED_17.t_fed_rev, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_17.school_district, FINREV_FED_17.t_fed_rev, avg(t1.c8)",
            "select FINREV_FED_17.school_district, NDECoreExcel_Math_Grade8.state, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_17.school_district, FINREV_FED_17.nces_id, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select NDECoreExcel_Math_Grade8.state, FINREV_FED_17.school_district, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_KEY_17.State, FINREV_FED_17.school_district, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_17.school_district, t1.c5, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_17.school_district, FINREV_FED_17.c25, avg(NDECoreExcel_Math_Grade8.average_scale_score)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the schools with highest federal revenue in each federal revenue categories and what's their state average scores?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t0 t1",
        "label": "t0 t1 t2",
        "score": false,
        "real_pred": "FINREV_FED_17 NDECoreExcel_Math_Grade8",
        "real_label": "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
        "topk_preds": [
            "FINREV_FED_17 NDECoreExcel_Math_Grade8",
            "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: State with highest average math score, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT."
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: State with highest average math score, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select t1.c1",
        "label": "select t1.c1",
        "score": true,
        "real_pred": "select NDECoreExcel_Math_Grade8.state",
        "real_label": "select NDECoreExcel_Math_Grade8.state",
        "topk_preds": [
            "select NDECoreExcel_Math_Grade8.state",
            "select NDECoreExcel_Math_Grade8.state, NDECoreExcel_Math_Grade8.average_scale_score",
            "select NDECoreExcel_Math_Grade8.state, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select NDECoreExcel_Math_Grade8.state, max(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select NDECoreExcel_Math_Grade8.state, NDECoreExcel_Math_Grade8.all_students",
            "select NDECoreExcel_Math_Grade8.state, FINREV_FED_KEY_17.State",
            "select NDECoreExcel_Math_Grade8.state, min(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select NDECoreExcel_Math_Grade8.state, NDECoreExcel_Math_Grade8.average_scale_score.c3"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: State with highest average math score, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "NDECoreExcel_Math_Grade8",
        "real_label": "NDECoreExcel_Math_Grade8",
        "topk_preds": [
            "NDECoreExcel_Math_Grade8",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: School with highest ratio of total revenue and average scores, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: School with highest ratio of total revenue and average scores, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select t0.c2",
        "label": "select t0.c2, max(t0.c5 / t1.c3)",
        "score": false,
        "real_pred": "select FINREV_FED_17.school_district",
        "real_label": "select FINREV_FED_17.school_district, max(FINREV_FED_17.t_fed_rev / NDECoreExcel_Math_Grade8.average_scale_score)",
        "topk_preds": [
            "select FINREV_FED_17.school_district",
            "select FINREV_FED_17.school_district, NDECoreExcel_Math_Grade8.average_scale_score",
            "select FINREV_FED_17.school_district, FINREV_FED_17.t_fed_rev, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_17.school_district, FINREV_FED_17.t_fed_rev, NDECoreExcel_Math_Grade8.average_scale_score",
            "select FINREV_FED_17.school_district, FINREV_FED_17.t_fed_rev",
            "select FINREV_FED_17.school_district, NDECoreExcel_Math_Grade8.state",
            "select NDECoreExcel_Math_Grade8.all_students, NDECoreExcel_Math_Grade8.average_scale_score",
            "select FINREV_FED_17.idcensus, NDECoreExcel_Math_Grade8.average_scale_score"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: School with highest ratio of total revenue and average scores, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t0 t1",
        "label": "t0 t1 t2",
        "score": false,
        "real_pred": "FINREV_FED_17 NDECoreExcel_Math_Grade8",
        "real_label": "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
        "topk_preds": [
            "FINREV_FED_17 NDECoreExcel_Math_Grade8",
            "",
            "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "",
            "NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which state spent the most revenue towards schools and whats the state average score, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which state spent the most revenue towards schools and whats the state average score, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select t0.c1, avg(t1.c3)",
        "label": "select t2.c1, t1.c3",
        "score": false,
        "real_pred": "select FINREV_FED_17.idcensus, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
        "real_label": "select FINREV_FED_KEY_17.State, NDECoreExcel_Math_Grade8.average_scale_score",
        "topk_preds": [
            "select FINREV_FED_17.idcensus, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_17.school_district, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select NDECoreExcel_Math_Grade8.state, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_17.state_code, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_KEY_17.State, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select t3.c1, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select t4.c1, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_17.idcensus, avg(t1.c8)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which state spent the most revenue towards schools and whats the state average score, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t0 t1",
        "label": "t0 t1 t2",
        "score": false,
        "real_pred": "FINREV_FED_17 NDECoreExcel_Math_Grade8",
        "real_label": "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
        "topk_preds": [
            "FINREV_FED_17 NDECoreExcel_Math_Grade8",
            "",
            "",
            "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: School with lowest ratio of total revenue and average scores, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: School with lowest ratio of total revenue and average scores, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select t0.c2",
        "label": "select t0.c2, min(t0.c5 / t1.c3)",
        "score": false,
        "real_pred": "select FINREV_FED_17.school_district",
        "real_label": "select FINREV_FED_17.school_district, min(FINREV_FED_17.t_fed_rev / NDECoreExcel_Math_Grade8.average_scale_score)",
        "topk_preds": [
            "select FINREV_FED_17.school_district",
            "select FINREV_FED_17.school_district, NDECoreExcel_Math_Grade8.average_scale_score",
            "select FINREV_FED_17.school_district, FINREV_FED_17.t_fed_rev, NDECoreExcel_Math_Grade8.average_scale_score",
            "select FINREV_FED_17.school_district, FINREV_FED_17.t_fed_rev, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_17.school_district, FINREV_FED_17.t_fed_rev",
            "select NDECoreExcel_Math_Grade8.all_students, NDECoreExcel_Math_Grade8.average_scale_score",
            "select FINREV_FED_17.idcensus, NDECoreExcel_Math_Grade8.average_scale_score",
            "select FINREV_FED_17.school_district, NDECoreExcel_Math_Grade8.state"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: School with lowest ratio of total revenue and average scores, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t0 t1",
        "label": "t0 t1 t2",
        "score": false,
        "real_pred": "FINREV_FED_17 NDECoreExcel_Math_Grade8",
        "real_label": "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
        "topk_preds": [
            "FINREV_FED_17 NDECoreExcel_Math_Grade8",
            "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which state spent the least revenue towards schools and whats the state average score, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which state spent the least revenue towards schools and whats the state average score, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select t0.c1, avg(t1.c3)",
        "label": "select t2.c1, t1.c3",
        "score": false,
        "real_pred": "select FINREV_FED_17.idcensus, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
        "real_label": "select FINREV_FED_KEY_17.State, NDECoreExcel_Math_Grade8.average_scale_score",
        "topk_preds": [
            "select FINREV_FED_17.idcensus, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select NDECoreExcel_Math_Grade8.state, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_KEY_17.State, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_17.school_district, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_17.state_code, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select t3.c1, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select t4.c1, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select FINREV_FED_17.idcensus, avg(t1.c8)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which state spent the least revenue towards schools and whats the state average score, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t0 t1",
        "label": "t0 t1 t2",
        "score": false,
        "real_pred": "FINREV_FED_17 NDECoreExcel_Math_Grade8",
        "real_label": "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
        "topk_preds": [
            "FINREV_FED_17 NDECoreExcel_Math_Grade8",
            "",
            "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which state has the highest average score in math exam?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which state has the highest average score in math exam?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select t1.c1",
        "label": "select t1.c1",
        "score": true,
        "real_pred": "select NDECoreExcel_Math_Grade8.state",
        "real_label": "select NDECoreExcel_Math_Grade8.state",
        "topk_preds": [
            "select NDECoreExcel_Math_Grade8.state",
            "select NDECoreExcel_Math_Grade8.state, NDECoreExcel_Math_Grade8.average_scale_score",
            "select NDECoreExcel_Math_Grade8.state, FINREV_FED_KEY_17.State",
            "select NDECoreExcel_Math_Grade8.state, NDECoreExcel_Math_Grade8.all_students",
            "select NDECoreExcel_Math_Grade8.state, freq(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select NDECoreExcel_Math_Grade8.state, FINREV_FED_KEY_17.#_Records",
            "select NDECoreExcel_Math_Grade8.state, FINREV_FED_17.idcensus",
            "select NDECoreExcel_Math_Grade8.state, FINREV_FED_17.school_district"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which state has the highest average score in math exam?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "NDECoreExcel_Math_Grade8",
        "real_label": "NDECoreExcel_Math_Grade8",
        "topk_preds": [
            "NDECoreExcel_Math_Grade8",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the average match score of CA?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE (avg(t1.c3)",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the average match score of CA?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select avg(t1.c3)",
        "label": "select t1.c3",
        "score": false,
        "real_pred": "select avg(NDECoreExcel_Math_Grade8.average_scale_score)",
        "real_label": "select NDECoreExcel_Math_Grade8.average_scale_score",
        "topk_preds": [
            "select avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select avg(t1.c4)",
            "select avg(NDECoreExcel_Math_Grade8.all_students)",
            "select avg(t1.c6)",
            "select avg(t1.c8)",
            "select avg(t1.c5)",
            "select avg(t1.c9)",
            "select avg(t1.c7)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the average match score of CA?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "NDECoreExcel_Math_Grade8",
        "real_label": "NDECoreExcel_Math_Grade8",
        "topk_preds": [
            "NDECoreExcel_Math_Grade8",
            "NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many unique school districts in Indiana?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (Indiana), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (Indiana), c2: #_records).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (count(distinct t0.c2)",
            "SELECT-FROM-WHERE, count(distinct t0.c2)",
            "SELECT-FROM-WHERE(distinct t0.c2)",
            "SELECT-FROM-WHERE-NUM(distinct t0.c2)",
            "SELECT-FROM-WHERE (distinct t0.c2)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many unique school districts in Indiana?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (Indiana), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (Indiana), c2: #_records).",
        "prediction": "select count(distinct t0.c2)",
        "label": "select count(distinct t0.c2)",
        "score": true,
        "real_pred": "select count(distinct FINREV_FED_17.school_district)",
        "real_label": "select count(distinct FINREV_FED_17.school_district)",
        "topk_preds": [
            "select count(distinct FINREV_FED_17.school_district)",
            "select count(distinct FINREV_FED_17.idcensus)",
            "select count(distinct t0.c 2)",
            "select count(distinct FINREV_FED_17.school_district).",
            "select count(distinct FINREV_FED_17.c14)",
            "select count(distinct FINREV_FED_17.nces_id)",
            "select count(distinct FINREV_FED_17.t_fed_rev)",
            "select count( distinct FINREV_FED_17.school_district)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many unique school districts in Indiana?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (Indiana), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (Indiana), c2: #_records).",
        "prediction": "t0",
        "label": "t0 t2",
        "score": false,
        "real_pred": "FINREV_FED_17",
        "real_label": "FINREV_FED_17 FINREV_FED_KEY_17",
        "topk_preds": [
            "FINREV_FED_17",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the state code of VA?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE (SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE (SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the state code of VA?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select t2.c1",
        "label": "select t2.c0",
        "score": false,
        "real_pred": "select FINREV_FED_KEY_17.State",
        "real_label": "select FINREV_FED_KEY_17.State_Code",
        "topk_preds": [
            "select FINREV_FED_KEY_17.State",
            "select FINREV_FED_KEY_17.State_Code",
            "select FINREV_FED_17.state_code",
            "select FINREV_FED_KEY_17.#_Records",
            "select t2.c3",
            "select t17.c1",
            "select FINREV_FED_17.idcensus",
            "select t2.c4"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the state code of VA?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t0",
        "label": "t2",
        "score": false,
        "real_pred": "FINREV_FED_17",
        "real_label": "FINREV_FED_KEY_17",
        "topk_preds": [
            "FINREV_FED_17",
            "FINREV_FED_KEY_17",
            "NDECoreExcel_Math_Grade8",
            "NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "FINREV_FED_17 FINREV_FED_KEY_17",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which state get the highest revenue?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which state get the highest revenue?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select t0.c1",
        "label": "select t2.c1",
        "score": false,
        "real_pred": "select FINREV_FED_17.idcensus",
        "real_label": "select FINREV_FED_KEY_17.State",
        "topk_preds": [
            "select FINREV_FED_17.idcensus",
            "select FINREV_FED_17.state_code",
            "select FINREV_FED_KEY_17.State",
            "select FINREV_FED_17.yr_data",
            "select FINREV_FED_17.t_fed_rev",
            "select FINREV_FED_17.school_district",
            "select FINREV_FED_17.nces_id",
            "select FINREV_FED_17.c14"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which state get the highest revenue?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t0",
        "label": "t0 t2",
        "score": false,
        "real_pred": "FINREV_FED_17",
        "real_label": "FINREV_FED_17 FINREV_FED_KEY_17",
        "topk_preds": [
            "FINREV_FED_17",
            "FINREV_FED_17 FINREV_FED_KEY_17",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How much funding does Colorado schools receive from Title 1 and the Child Nutrition program respectively?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (Colorado), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (Colorado), c2: #_records).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY",
        "label": "SELECT-FROM-WHERE",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How much funding does Colorado schools receive from Title 1 and the Child Nutrition program respectively?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (Colorado), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (Colorado), c2: #_records).",
        "prediction": "select sum(t0.c4), sum(t0.c5)",
        "label": "select sum(t0.c6), sum(t0.c7)",
        "score": false,
        "real_pred": "select sum(FINREV_FED_17.yr_data), sum(FINREV_FED_17.t_fed_rev)",
        "real_label": "select sum(FINREV_FED_17.c14), sum(FINREV_FED_17.c25)",
        "topk_preds": [
            "select sum(FINREV_FED_17.yr_data), sum(FINREV_FED_17.t_fed_rev)",
            "select FINREV_FED_17.idcensus, FINREV_FED_17.school_district",
            "select NDECoreExcel_Math_Grade8.state, FINREV_FED_KEY_17.#_Records",
            "select sum(FINREV_FED_17.t_fed_rev), sum(FINREV_FED_17.c14)",
            "select NDECoreExcel_Math_Grade8.state, NDECoreExcel_Math_Grade8.all_students",
            "select sum(FINREV_FED_17.c14), sum(FINREV_FED_17.t_fed_rev)",
            "select sum(t3.c4), sum(t3.c5)",
            "select sum(FINREV_FED_17.t_fed_rev), sum(FINREV_FED_17.t_fed_rev)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How much funding does Colorado schools receive from Title 1 and the Child Nutrition program respectively?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (Colorado), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (Colorado), c2: #_records).",
        "prediction": "t0 t1 t2",
        "label": "t0 t2",
        "score": false,
        "real_pred": "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
        "real_label": "FINREV_FED_17 FINREV_FED_KEY_17",
        "topk_preds": [
            "FINREV_FED_17 NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "FINREV_FED_17 NDECoreExcel_Math_Grade8",
            "",
            "NDECoreExcel_Math_Grade8 FINREV_FED_KEY_17",
            "FINREV_FED_17 FINREV_FED_KEY_17",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How much federal funding does Pecatonia Area School district get?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district (PECATONIA AREA SCHOOL DISTRICT), c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How much federal funding does Pecatonia Area School district get?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district (PECATONIA AREA SCHOOL DISTRICT), c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select sum(t0.c7)",
        "label": "select t0.c5",
        "score": false,
        "real_pred": "select sum(FINREV_FED_17.c25)",
        "real_label": "select FINREV_FED_17.t_fed_rev",
        "topk_preds": [
            "select sum(FINREV_FED_17.c25)",
            "select sum(FINREV_FED_17.t_fed_rev)",
            "select sum(FINREV_FED_17.yr_data)",
            "select sum(FINREV_FED_17.idcensus7)",
            "select sum(FINREV_FED_17.school_district5)",
            "select sum(FINREV_FED_17.c14)",
            "select sum(t0.c8)",
            "select FINREV_FED_17.school_district5"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How much federal funding does Pecatonia Area School district get?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district (PECATONIA AREA SCHOOL DISTRICT), c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "FINREV_FED_17",
        "real_label": "FINREV_FED_17",
        "topk_preds": [
            "FINREV_FED_17",
            "FINREV_FED_17 FINREV_FED_KEY_17",
            "FINREV_FED_17 NDECoreExcel_Math_Grade8",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the student scores on the NAEP math exam for 8th graders in North Carolina and South Carolina?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (North Carolina, South Carolina), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (North Carolina, South Carolina), c2: #_records).",
        "prediction": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE.",
            "SELECT-FROM-WHERE-COLUMN-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-2-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE\u2013INTERSECT-SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the student scores on the NAEP math exam for 8th graders in North Carolina and South Carolina?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (North Carolina, South Carolina), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (North Carolina, South Carolina), c2: #_records).",
        "prediction": "select avg(t1.c3)",
        "label": "select t1.c3",
        "score": false,
        "real_pred": "select avg(NDECoreExcel_Math_Grade8.average_scale_score)",
        "real_label": "select NDECoreExcel_Math_Grade8.average_scale_score",
        "topk_preds": [
            "select avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select avg(NDECoreExcel_Math_Grade8.all_students)",
            "select avg(NDECoreExcel_Math_Grade8.average_scale_score), NDECoreExcel_Math_Grade8.all_students",
            "select an avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select student avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select NDECoreExcel_Math_Grade8.average_scale_score",
            "select the avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select avg(NDECoreExcel_Math_Grade8.average_scale_score), t1.c4"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the student scores on the NAEP math exam for 8th graders in North Carolina and South Carolina?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state (North Carolina, South Carolina), c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state (North Carolina, South Carolina), c2: #_records).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "NDECoreExcel_Math_Grade8",
        "real_label": "NDECoreExcel_Math_Grade8",
        "topk_preds": [
            "NDECoreExcel_Math_Grade8",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the averge score of students in NC and in NY?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-DISTINCT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-COMPARE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-COMPARING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-COMPARISING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the averge score of students in NC and in NY?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select avg(t1.c3)",
        "label": "select t1.c3",
        "score": false,
        "real_pred": "select avg(NDECoreExcel_Math_Grade8.average_scale_score)",
        "real_label": "select NDECoreExcel_Math_Grade8.average_scale_score",
        "topk_preds": [
            "select avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select avg(NDECoreExcel_Math_Grade8.average_scale_score), NDECoreExcel_Math_Grade8.state",
            "select NDECoreExcel_Math_Grade8.state, avg(NDECoreExcel_Math_Grade8.average_scale_score)",
            "select avg(NDECoreExcel_Math_Grade8.average_scale_score), NDECoreExcel_Math_Grade8.all_students",
            "select NDECoreExcel_Math_Grade8.average_scale_score",
            "select avg(NDECoreExcel_Math_Grade8.average_scale_score) dec1, NDECoreExcel_Math_Grade8.average_scale_score",
            "select avg(NDECoreExcel_Math_Grade8.average_scale_score), FINREV_FED_17.school_district",
            "select avg(NDECoreExcel_Math_Grade8.average_scale_score), NDECoreExcel_Math_Grade8.state"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the averge score of students in NC and in NY?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "NDECoreExcel_Math_Grade8",
        "real_label": "NDECoreExcel_Math_Grade8",
        "topk_preds": [
            "NDECoreExcel_Math_Grade8",
            "",
            "FINREV_FED_17 NDECoreExcel_Math_Grade8",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many schools get higher revenue via Child Nutrition A than revenue via child left school behind act?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many schools get higher revenue via Child Nutrition A than revenue via child left school behind act?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(distinct FINREV_FED_17.school_district)",
            "select count(*), FINREV_FED_17.school_district",
            "select count(*), FINREV_FED_17.idcensus",
            "select count(*), FINREV_FED_17.state_code",
            "select count(*), FINREV_FED_17.school_district",
            "select count(distinct FINREV_FED_17.state_code)",
            "select count(*), FINREV_FED_KEY_17.State"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many schools get higher revenue via Child Nutrition A than revenue via child left school behind act?, database: Database: StudentMathScore. t0: finrev_fed_17(c0: state_code, c1: idcensus, c2: school_district, c3: nces_id, c4: yr_data, c5: t_fed_rev, c6: c14, c7: c25). t1: ndecoreexcel_math_grade8(c0: year, c1: state, c2: all_students, c3: average_scale_score). t2: finrev_fed_key_17(c0: state_code, c1: state, c2: #_records).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "FINREV_FED_17",
        "real_label": "FINREV_FED_17",
        "topk_preds": [
            "FINREV_FED_17",
            "",
            "FINREV_FED_17 FINREV_FED_KEY_17",
            "FINREV_FED_17 NDECoreExcel_Math_Grade8",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which is the most popular voting method for Hall of Fame in 2000?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ROUTINE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-RATE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-VOTERS-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which is the most popular voting method for Hall of Fame in 2000?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t0.c2",
        "label": "select t0.c2",
        "score": true,
        "real_pred": "select hall_of_fame.votedby",
        "real_label": "select hall_of_fame.votedby",
        "topk_preds": [
            "select hall_of_fame.votedby",
            "select hall_of_fame.player_id, hall_of_fame.votedby",
            "select hall_of_fame.yearid, hall_of_fame.votedby",
            "select hall_of_fame.votes",
            "select hall_of_fame.votedby, hall_of_fame.votes",
            "select hall_of_fame.votedby, hall_of_fame.ballots",
            "select hall_of_fame.ballots, hall_of_fame.votedby",
            "select hall_of_fame.votes, hall_of_fame.votedby"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which is the most popular voting method for Hall of Fame in 2000?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "hall_of_fame",
        "real_label": "hall_of_fame",
        "topk_preds": [
            "hall_of_fame",
            "hall_of_fame player_award_vote salary player",
            "hall_of_fame player_award_vote salary",
            "",
            "",
            "",
            "",
            "hall_of_fame player_award player_award_vote salary player"
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many players weigh over 200 pounds?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (Pounds), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE, count(*)",
            "SELECT-FROM-WHERE (count(*)",
            "SELECT-FROM-WHERE count(*)",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many players weigh over 200 pounds?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (Pounds), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), player.player_id",
            "select count(*) (player.player_id)",
            "select count(*), hall_of_fame.votedby",
            "select count(*), hall_of_fame.yearid",
            "select count(*), hall_of_fame.player_id",
            "select count(*), hall_of_fame.ballots",
            "select count(*) (hall_of_fame.player_id)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many players weigh over 200 pounds?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (Pounds), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t4",
        "label": "t4",
        "score": true,
        "real_pred": "player",
        "real_label": "player",
        "topk_preds": [
            "player",
            "salary player",
            "hall_of_fame player",
            "player_award player",
            "player_award_vote player",
            "",
            "hall_of_fame player_award_vote player",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Who is the winner of Rookie of the Year in 2010?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id (Rookie of the Year), c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id (Rookie of the Year), c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE (SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Who is the winner of Rookie of the Year in 2010?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id (Rookie of the Year), c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id (Rookie of the Year), c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t1.c0",
        "label": "select t1.c0",
        "score": true,
        "real_pred": "select player_award.player_id",
        "real_label": "select player_award.player_id",
        "topk_preds": [
            "select player_award.player_id",
            "select player_award.player_id, player_award.year",
            "select player_award.player_id, player_award.year",
            "select player_award.player_id, player_award.award_id",
            "select player_award.player_id, player_award.league_id",
            "select t14.c0",
            "select player.player_id",
            "select player_award_vote.award_id"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Who is the winner of Rookie of the Year in 2010?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id (Rookie of the Year), c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id (Rookie of the Year), c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "player_award",
        "real_label": "player_award",
        "topk_preds": [
            "player_award",
            "player_award player",
            "player_award player_award_vote",
            "",
            "",
            "",
            "player_award salary",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Who is the highest paid player since 2010?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-RELEVANT-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Who is the highest paid player since 2010?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t3.c3",
        "label": "select t3.c3",
        "score": true,
        "real_pred": "select salary.player_id",
        "real_label": "select salary.player_id",
        "topk_preds": [
            "select salary.player_id",
            "select player.player_id",
            "select player.player_id, salary.salary",
            "select player.player_id, salary.player_id",
            "select player.player_id, player.name_first",
            "select salary.player_id, salary.salary",
            "select player.player_id, player.name_given",
            "select salary.year"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Who is the highest paid player since 2010?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t3 t4",
        "label": "t3",
        "score": false,
        "real_pred": "salary player",
        "real_label": "salary",
        "topk_preds": [
            "salary player",
            "salary",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the salaries of players who have ever enter hall of fame?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first (Ever), c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the salaries of players who have ever enter hall of fame?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first (Ever), c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t3.c4",
        "label": "select t3.c4",
        "score": true,
        "real_pred": "select salary.salary",
        "real_label": "select salary.salary",
        "topk_preds": [
            "select salary.salary",
            "select distinct salary.salary",
            "select sum(salary.salary)",
            "select highest(salary.salary)",
            "select salary.salary)",
            "select the salary.salary",
            "select only salary.salary",
            "select highest salary.salary"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the salaries of players who have ever enter hall of fame?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first (Ever), c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t0 t3",
        "label": "t0 t3",
        "score": true,
        "real_pred": "hall_of_fame salary",
        "real_label": "hall_of_fame salary",
        "topk_preds": [
            "hall_of_fame salary",
            "hall_of_fame salary player",
            "hall_of_fame player_award_vote salary",
            "",
            "hall_of_fame player_award salary",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the minimum votes needed to enter hall of fame for each year since 1871?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY",
        "label": "SELECT-FROM-WHERE-GROUP BY",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY",
        "real_label": "SELECT-FROM-WHERE-GROUP BY",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY (ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY -ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY (LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY (STARTING FROM-WHERE)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the minimum votes needed to enter hall of fame for each year since 1871?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select min(t0.c5), t0.c1",
        "label": "select min(t0.c5), t0.c1",
        "score": true,
        "real_pred": "select min(hall_of_fame.votes), hall_of_fame.yearid",
        "real_label": "select min(hall_of_fame.votes), hall_of_fame.yearid",
        "topk_preds": [
            "select min(hall_of_fame.votes), hall_of_fame.yearid",
            "select hall_of_fame.yearid, min(hall_of_fame.votes)",
            "select min(hall_of_fame.needed), hall_of_fame.yearid",
            "select min(hall_of_fame.inducted), hall_of_fame.yearid",
            "select minimum(hall_of_fame.votes), hall_of_fame.yearid",
            "select min(hall_of_fame.votes), hall_of_fame.yearid,",
            "select min(hall_of_fame.ballots), hall_of_fame.yearid",
            "select min(hall_of_fame.votes), hall_of_fame.yearid."
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the minimum votes needed to enter hall of fame for each year since 1871?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "hall_of_fame",
        "real_label": "hall_of_fame",
        "topk_preds": [
            "hall_of_fame",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the salaries in National League?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (League), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE (SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the salaries in National League?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (League), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t3.c4",
        "label": "select t3.c4",
        "score": true,
        "real_pred": "select salary.salary",
        "real_label": "select salary.salary",
        "topk_preds": [
            "select salary.salary",
            "select salary.league_id, salary.salary",
            "select salary.salary, salary.league_id",
            "select salary.salary)",
            "select salary.salary (t3.c5)",
            "select salary.salary.c4",
            "select salary.salary, salary.league_id0",
            "select sum(salary.salary)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the salaries in National League?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (League), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t3",
        "label": "t3",
        "score": true,
        "real_pred": "salary",
        "real_label": "salary",
        "topk_preds": [
            "salary",
            "",
            "",
            "",
            "",
            "player_award_vote salary",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the salaries in American League?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (League), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE (SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the salaries in American League?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (League), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t3.c4",
        "label": "select t3.c4",
        "score": true,
        "real_pred": "select salary.salary",
        "real_label": "select salary.salary",
        "topk_preds": [
            "select salary.salary",
            "select salary.salary, salary.league_id",
            "select salary.salary)",
            "select AmericanLegion.c4",
            "select salary.salary, salary.league_id0",
            "select salary.salary, salary.league_id2",
            "select sum(salary.salary)",
            "select american_salary.salary"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the salaries in American League?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (League), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t3",
        "label": "t3",
        "score": true,
        "real_pred": "salary",
        "real_label": "salary",
        "topk_preds": [
            "salary",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which birth place has the most player awards?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GIG-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which birth place has the most player awards?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t4.c4",
        "label": "select t4.c4",
        "score": true,
        "real_pred": "select player.birth_country",
        "real_label": "select player.birth_country",
        "topk_preds": [
            "select player.birth_country",
            "select player.birth_city",
            "select player.birth_state, player.birth_city",
            "select player.birth_country, player_award.year",
            "select player.birth_state, player_award.year",
            "select player.birth_year, player.birth_city",
            "select player.birth_country, player.birth_city",
            "select player.birth_city, player_award.year"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which birth place has the most player awards?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t1 t4",
        "label": "t1 t4",
        "score": true,
        "real_pred": "player_award player",
        "real_label": "player_award player",
        "topk_preds": [
            "player_award player",
            "player_award player_award_vote",
            "player_award player_award_vote player",
            "player_award salary player",
            "player_award",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the birth places of players won on hall of fame since 1871?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the birth places of players won on hall of fame since 1871?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t4.c4",
        "label": "select t4.c4",
        "score": true,
        "real_pred": "select player.birth_country",
        "real_label": "select player.birth_country",
        "topk_preds": [
            "select player.birth_country",
            "select distinct player.birth_country",
            "select player.birth_country, player.birth_city",
            "select player.birth_state, player.birth_city",
            "select player.birth_city",
            "select distinct player.birth_country, player.birth_city",
            "select player.birth_year, player.birth_month",
            "select player.birth_year, player.birth_city"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the birth places of players won on hall of fame since 1871?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t0 t4",
        "label": "t0 t4",
        "score": true,
        "real_pred": "hall_of_fame player",
        "real_label": "hall_of_fame player",
        "topk_preds": [
            "hall_of_fame player",
            "hall_of_fame player_award_vote player",
            "hall_of_fame player_award_vote",
            "hall_of_fame player_award player",
            "hall_of_fame player_award_vote salary player",
            "hall_of_fame salary player",
            "hall_of_fame player_award player_award_vote player",
            "hall_of_fame player_award player_award_vote"
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which award has the highest player's salary?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-ORDER BY-LIMIT)",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which award has the highest player's salary?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t1.c1",
        "label": "select t1.c1",
        "score": true,
        "real_pred": "select player_award.award_id",
        "real_label": "select player_award.award_id",
        "topk_preds": [
            "select player_award.award_id",
            "select player_award.award_id, salary.player_id",
            "select player_award.award_id, salary.league_id",
            "select player_award.award_id, salary.year",
            "select player_award.award_id, salary.salary",
            "select player_award.player_id, player_award.award_id",
            "select player_award.year",
            "select player_award.award_id, salary.team_id"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which award has the highest player's salary?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t1 t3",
        "label": "t1 t3",
        "score": true,
        "real_pred": "player_award salary",
        "real_label": "player_award salary",
        "topk_preds": [
            "player_award salary",
            "hall_of_fame player_award salary",
            "player_award player_award_vote salary",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What were the years when any special elections happened in hall of fame?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby (Special Election), c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WITH-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What were the years when any special elections happened in hall of fame?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby (Special Election), c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select distinct t0.c1",
        "label": "select distinct t0.c1",
        "score": true,
        "real_pred": "select distinct hall_of_fame.yearid",
        "real_label": "select distinct hall_of_fame.yearid",
        "topk_preds": [
            "select distinct hall_of_fame.yearid",
            "select hall_of_fame.yearid",
            "select hall_of_fame.yearid, hall_of_fame.votedby",
            "select distinct hall_of_fame.yearid, hall_of_fame.votedby",
            "select specific hall_of_fame.yearid",
            "select the hall_of_fame.yearid",
            "select distinct hall_of_fame.yearid, hall_of_fame.player_id",
            "select distinct hall_of_fame.yearid, hall_of_fame.ballots"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What were the years when any special elections happened in hall of fame?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby (Special Election), c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "hall_of_fame",
        "real_label": "hall_of_fame",
        "topk_preds": [
            "hall_of_fame",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Top 10 countries with the most hall of fame players, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Top 10 countries with the most hall of fame players, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t4.c4",
        "label": "select t4.c4",
        "score": true,
        "real_pred": "select player.birth_country",
        "real_label": "select player.birth_country",
        "topk_preds": [
            "select player.birth_country",
            "select player.birth_country, hall_of_fame.votedby",
            "select player.birth_country, hall_of_fame.votes",
            "select player.birth_country, player.death_country",
            "select player.birth_country, hall_of_fame.inducted",
            "select player.birth_country, hall_of_fame.yearid",
            "select player.birth_country, hall_of_fame.ballots",
            "select player.birth_country, hall_of_fame.category"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Top 10 countries with the most hall of fame players, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t0 t4",
        "label": "t0 t4",
        "score": true,
        "real_pred": "hall_of_fame player",
        "real_label": "hall_of_fame player",
        "topk_preds": [
            "hall_of_fame player",
            "hall_of_fame player_award_vote player",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: For every award, who is the youngest winner?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city (Everly), c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city (Everly), c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-GROUP BY",
        "label": "SELECT-FROM-GROUP BY",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY",
        "real_label": "SELECT-FROM-GROUP BY",
        "topk_preds": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: For every award, who is the youngest winner?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city (Everly), c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city (Everly), c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t1.c0, min(t4.c3)",
        "label": "select t1.c0, t1.c1, min(t1.c2 - t4.c1)",
        "score": false,
        "real_pred": "select player_award.player_id, min(player.birth_day)",
        "real_label": "select player_award.player_id, player_award.award_id, min(player_award.year - player.birth_year)",
        "topk_preds": [
            "select player_award.player_id, min(player.birth_day)",
            "select player_award.player_id, player.birth_year",
            "select player_award.player_id, max(player.birth_day)",
            "select player_award.player_id, player_award.year",
            "select player_award.player_id, player.name_first",
            "select player_award.player_id, min(player.birth_country)",
            "select player_award_vote.award_id, min(player.birth_day)",
            "select player_award.player_id, min(player.birth_month)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: For every award, who is the youngest winner?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city (Everly), c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city (Everly), c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t1 t4",
        "label": "t1 t4",
        "score": true,
        "real_pred": "player_award player",
        "real_label": "player_award player",
        "topk_preds": [
            "player_award player",
            "player_award player_award_vote player",
            "hall_of_fame player_award player",
            "hall_of_fame player_award player_award_vote player",
            "player_award player_award_vote",
            "",
            "player_award player_award_vote salary player",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: For every award, who is the oldest winner?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city (Everly), c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city (Everly), c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-GROUP BY",
        "label": "SELECT-FROM-GROUP BY",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY",
        "real_label": "SELECT-FROM-GROUP BY",
        "topk_preds": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: For every award, who is the oldest winner?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city (Everly), c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city (Everly), c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t1.c0, t4.c1",
        "label": "select t1.c0, t1.c1, max(t1.c2 - t4.c1)",
        "score": false,
        "real_pred": "select player_award.player_id, player.birth_year",
        "real_label": "select player_award.player_id, player_award.award_id, max(player_award.year - player.birth_year)",
        "topk_preds": [
            "select player_award.player_id, player.birth_year",
            "select player_award.player_id, player_award.year",
            "select player_award.player_id, min(player.death_year)",
            "select player_award.player_id, min(player.birth_city)",
            "select player_award.player_id, min(player.death_month)",
            "select player_award.player_id, max(player.death_year)",
            "select player_award.player_id, min(player.birth_year)",
            "select player_award.player_id, min(player.birth_day)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: For every award, who is the oldest winner?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city (Everly), c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city (Everly), c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t1 t4",
        "label": "t1 t4",
        "score": true,
        "real_pred": "player_award player",
        "real_label": "player_award player",
        "topk_preds": [
            "player_award player",
            "player_award player_award_vote player",
            "hall_of_fame player_award player",
            "hall_of_fame player_award player_award_vote player",
            "",
            "player_award player_award_vote salary player",
            "",
            "player_award player_award_vote"
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Top 10 teams with the most hall of fame players, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-HONORS-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Top 10 teams with the most hall of fame players, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t30.c40",
        "label": "select t3.c1",
        "score": false,
        "real_pred": "select t30.c40",
        "real_label": "select salary.team_id",
        "topk_preds": [
            "select t30.c40",
            "select salary.team_id",
            "select t23.c40",
            "select salary.team_id, hall_of_fame.votedby",
            "select t30.c40, t30.c23",
            "select t23.c40, t23.c23",
            "select t30.c40, t30.c2",
            "select t30.c40, t30.c53"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Top 10 teams with the most hall of fame players, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t0 t3",
        "label": "t0 t3",
        "score": true,
        "real_pred": "hall_of_fame salary",
        "real_label": "hall_of_fame salary",
        "topk_preds": [
            "hall_of_fame salary",
            "",
            "",
            "",
            "hall_of_fame player_award_vote salary",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Average lifespan of hall of fame players, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-HONORS",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Average lifespan of hall of fame players, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select avg(t4.c7)",
        "label": "select avg(t4.c7 - t4.c1)",
        "score": false,
        "real_pred": "select avg(player.death_year)",
        "real_label": "select avg(player.death_year - player.birth_year)",
        "topk_preds": [
            "select avg(player.death_year)",
            "select avg(player.death_month)",
            "select avg(player.birth_city)",
            "select avg(player.death_year)",
            "select avg(player.death_year.c16)",
            "select avg(player.death_year, player.weight)",
            "select avg(player.death_year - player.weight)",
            "select avg(player.death_year, player.weight"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Average lifespan of hall of fame players, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t0 t4",
        "label": "t0 t4",
        "score": true,
        "real_pred": "hall_of_fame player",
        "real_label": "hall_of_fame player",
        "topk_preds": [
            "hall_of_fame player",
            "hall_of_fame player_award_vote player",
            "hall_of_fame player_award player",
            "hall_of_fame player_award_vote salary player",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: For award winners, what's average weight for each position, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-GROUP BY",
        "label": "SELECT-FROM-GROUP BY",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY",
        "real_label": "SELECT-FROM-GROUP BY",
        "topk_preds": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-DIVIS-SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY (ORDER BY",
            "SELECT-FROM-FROM-GROUP BY",
            "SELECT-FROM-POLITICAL-GROUP BY",
            "SELECT-FROM-GROUP BY (t4.c16)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: For award winners, what's average weight for each position, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t4.c13, t4.c14, avg(t4.c16)",
        "label": "select avg(t4.c16)",
        "score": false,
        "real_pred": "select player.name_first, player.name_last, avg(player.weight)",
        "real_label": "select avg(player.weight)",
        "topk_preds": [
            "select player.name_first, player.name_last, avg(player.weight)",
            "select player.name_first, player.name_last",
            "select player.weight, avg(player.weight)",
            "select player.name_first, player.weight",
            "select player.name_first, player.weight, avg(player.weight)",
            "select player.name_first, player.name_last, avg(player.birth_city)",
            "select player.weight, avg(player.death_month)",
            "select player.birth_month3, avg(player.weight)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: For award winners, what's average weight for each position, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category, c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t1 t4",
        "label": "t1 t4",
        "score": true,
        "real_pred": "player_award player",
        "real_label": "player_award player",
        "topk_preds": [
            "player_award player",
            "player_award player_award_vote player",
            "hall_of_fame player_award player",
            "player_award",
            "",
            "player_award player_award_vote",
            "",
            "player_award_vote player"
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: For award winners, which position that has the most hall of fame players?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: For award winners, which position that has the most hall of fame players?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t1.c40",
        "label": "select t1.c5",
        "score": false,
        "real_pred": "select player_award.tie0",
        "real_label": "select player_award.notes",
        "topk_preds": [
            "select player_award.tie0",
            "select player_award.year",
            "select player_award.tie",
            "select player_award.league_id",
            "select t1.c9",
            "select player_award.league_id0",
            "select t1.c7",
            "select player_award.notes"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: For award winners, which position that has the most hall of fame players?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t0 t1",
        "label": "t0 t1",
        "score": true,
        "real_pred": "hall_of_fame player_award",
        "real_label": "hall_of_fame player_award",
        "topk_preds": [
            "hall_of_fame player_award",
            "hall_of_fame player_award player",
            "hall_of_fame player_award player_award_vote",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which player get the highest score in 1971?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (Score), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-WHERE",
            "SELECT-FROM-1971-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-WHERE)",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT(t4.c0)",
            "SELECT-FROM-WHERE or-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which player get the highest score in 1971?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (Score), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t4.c0",
        "label": "select t2.c3",
        "score": false,
        "real_pred": "select player.player_id",
        "real_label": "select player_award_vote.player_id",
        "topk_preds": [
            "select player.player_id",
            "select player.player_id, player.name_first",
            "select player.player_id, player.name_last",
            "select player.name_first, player.name_last",
            "select player.player_id, max(player_award_vote.points_max)",
            "select player.player_id, player.name_given",
            "select player.player_id, player.birth_year",
            "select player.birth_year, player.name_last"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which player get the highest score in 1971?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (Score), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t4",
        "label": "t2",
        "score": false,
        "real_pred": "player",
        "real_label": "player_award_vote",
        "topk_preds": [
            "player",
            "player_award_vote player",
            "hall_of_fame player_award_vote player",
            "player_award player_award_vote player",
            "salary player",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which month that players were born has the highest likelihood to be elected as hall of fame?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GEORGE-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-PRE-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which month that players were born has the highest likelihood to be elected as hall of fame?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t4.c2",
        "label": "select t4.c2",
        "score": true,
        "real_pred": "select player.birth_month",
        "real_label": "select player.birth_month",
        "topk_preds": [
            "select player.birth_month",
            "select player.birth_month, hall_of_fame.yearid",
            "select player.birth_month, hall_of_fame.ballots",
            "select player.player_id, player.birth_month",
            "select player.birth_month, player.birth_day",
            "select player.birth_month, hall_of_fame.votes",
            "select player.birth_month, hall_of_fame.votedby",
            "select player.birth_month, hall_of_fame.inducted"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which month that players were born has the highest likelihood to be elected as hall of fame?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t0 t4",
        "label": "t0 t4",
        "score": true,
        "real_pred": "hall_of_fame player",
        "real_label": "hall_of_fame player",
        "topk_preds": [
            "hall_of_fame player",
            "hall_of_fame player_award_vote player",
            "hall_of_fame player_award_vote",
            "hall_of_fame player_award_vote salary player",
            "hall_of_fame player_award player",
            "",
            "hall_of_fame player_award player_award_vote player",
            "hall_of_fame salary player"
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which league has the most player awarded in 2006?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (League), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-",
            "SELECT-FROM-WHERE-GIG-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-CLAIMS-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GIGROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which league has the most player awarded in 2006?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (League), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t1.c3",
        "label": "select t1.c3",
        "score": true,
        "real_pred": "select player_award.league_id",
        "real_label": "select player_award.league_id",
        "topk_preds": [
            "select player_award.league_id",
            "select player_award.league_id, player_award.year",
            "select player_award.league_id, player_award_vote.league_id",
            "select player_award.league_id Ishikawa-kentucky",
            "select player_award.league_id, player_award_vote.year4",
            "select player_award.league_id, player_award.tie",
            "select player_award.league_id, hall_of_fame.votedby",
            "select player_award.league_id, player_award_vote.league_id2"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which league has the most player awarded in 2006?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last (League), c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "player_award",
        "real_label": "player_award",
        "topk_preds": [
            "player_award",
            "player_award player_award_vote",
            "",
            "",
            "",
            "hall_of_fame player_award",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What defense position the player ID willite01 is?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id (willite01), c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id (willite01), c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id (willite01), c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id (willite01), c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE (SELECT-FROM-GROUP BY-ORDER BY-LIMIT)",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ACT-SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What defense position the player ID willite01 is?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id (willite01), c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id (willite01), c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id (willite01), c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id (willite01), c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t7.c2",
        "label": "select distinct t1.c5",
        "score": false,
        "real_pred": "select t7.c2",
        "real_label": "select distinct player_award.notes",
        "topk_preds": [
            "select t7.c2",
            "select t8.c1",
            "select t5.c1",
            "select tdefense(t5.c4)",
            "select t5.c2",
            "select t10.c13",
            "select t13.c2",
            "select tdefense(t5.c2)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What defense position the player ID willite01 is?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id (willite01), c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id (willite01), c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id (willite01), c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id (willite01), c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t13 t14",
        "label": "t1",
        "score": false,
        "real_pred": "player_award3 player_award4",
        "real_label": "player_award",
        "topk_preds": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many players were awarded more than ten times?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-GROUP BY-HAVING",
        "label": "SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-HAVING",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-GROUPS-GROUP BY-HAVING",
            "SELECT-FROM-GROUPE-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many players were awarded more than ten times?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(distinct player_award.player_id)",
            "select count(*), player_award.player_id",
            "select count(player_award.player_id)",
            "select count(*) (player_award.player_id)",
            "select count(*), player_award.year",
            "select count(*), player_award.award_id",
            "select count(*), player_award.league_id"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many players were awarded more than ten times?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "player_award",
        "real_label": "player_award",
        "topk_preds": [
            "player_award",
            "player_award player",
            "",
            "",
            "player_award player_award_vote",
            "hall_of_fame player_award",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which city the most players were born?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-THREE-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which city the most players were born?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t4.c6",
        "label": "select t4.c6",
        "score": true,
        "real_pred": "select player.birth_city",
        "real_label": "select player.birth_city",
        "topk_preds": [
            "select player.birth_city",
            "select player.birth_city, player.name_first",
            "select player.birth_city, player.death_city",
            "select player.birth_city, player.birth_year7",
            "select player.birth_city, player.name_given",
            "select player.birth_city, player.death_year",
            "select player.birth_state, player.birth_city",
            "select player.birth_city, player.name_last"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which city the most players were born?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t4",
        "label": "t4",
        "score": true,
        "real_pred": "player",
        "real_label": "player",
        "topk_preds": [
            "player",
            "player_award_vote player",
            "",
            "salary player",
            "",
            "",
            "",
            "player_award_vote salary player"
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the average weight of players who were awarded third-base man in TSN all-star award?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id (TSN All-Star), c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-AGGRESS-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE (Avg(t4.c16)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the average weight of players who were awarded third-base man in TSN all-star award?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id (TSN All-Star), c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select avg(t4.c16)",
        "label": "select avg(t4.c16)",
        "score": true,
        "real_pred": "select avg(player.weight)",
        "real_label": "select avg(player.weight)",
        "topk_preds": [
            "select avg(player.weight)",
            "select avg(player.birth_city)",
            "select avg(t4.c-16)",
            "select avg(player.death_month)",
            "select avg(t4.c 16)",
            "select an avg(player.weight)",
            "select avg(t4.c)",
            "select Avg(player.weight)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the average weight of players who were awarded third-base man in TSN all-star award?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id (TSN All-Star), c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t1 t4",
        "label": "t1 t4",
        "score": true,
        "real_pred": "player_award player",
        "real_label": "player_award player",
        "topk_preds": [
            "player_award player",
            "player_award player_award_vote player",
            "player_award salary player",
            "player_award player_award_vote",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Who is the player had the highest salary in 2015?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-WHERE)",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-",
            "SELECT-FROM-19-WHERE-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Who is the player had the highest salary in 2015?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "select t4.c0",
        "label": "select t3.c3",
        "score": false,
        "real_pred": "select player.player_id",
        "real_label": "select salary.player_id",
        "topk_preds": [
            "select player.player_id",
            "select player.birth_day",
            "select salary.player_id",
            "select player.player_id, salary.player_id",
            "select player.player_id, player.name_first",
            "select player.player_id, player.name_given",
            "select player.birth_day, salary.salary",
            "select player.player_id, salary.league_id"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Who is the player had the highest salary in 2015?, database: Database: TheHistoryofBaseball. t0: hall_of_fame(c0: player_id, c1: yearid, c2: votedby, c3: ballots, c4: needed, c5: votes, c6: inducted, c7: category (Player), c8: needed_note). t1: player_award(c0: player_id, c1: award_id, c2: year, c3: league_id, c4: tie, c5: notes) (c0) refers to t0(c0). t2: player_award_vote(c0: award_id, c1: year, c2: league_id, c3: player_id, c4: points_won, c5: points_max, c6: votes_first) (c3) refers to t0(c0). t3: salary(c0: year, c1: team_id, c2: league_id, c3: player_id, c4: salary) (c3) refers to t0(c0). t4: player(c0: player_id, c1: birth_year, c2: birth_month, c3: birth_day, c4: birth_country, c5: birth_state, c6: birth_city, c7: death_year, c8: death_month, c9: death_day, c10: death_country, c11: death_state, c12: death_city, c13: name_first, c14: name_last, c15: name_given, c16: weight) (c0) refers to t0(c0).",
        "prediction": "t3 t4",
        "label": "t3",
        "score": false,
        "real_pred": "salary player",
        "real_label": "salary",
        "topk_preds": [
            "salary player",
            "player_award_vote salary player",
            "salary player_award_vote salary player",
            "salary player_award_vote player",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Show all fires caused by campfires in Texas., database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr (Campfire), c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (TEXAS, Texas), c17: fips_code, c18: fips_name (Texas)).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ACT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE (SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Show all fires caused by campfires in Texas., database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr (Campfire), c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (TEXAS, Texas), c17: fips_code, c18: fips_name (Texas)).",
        "prediction": "select t0.c0",
        "label": "select *",
        "score": false,
        "real_pred": "select Fires.FIRE_YEAR",
        "real_label": "select *",
        "topk_preds": [
            "select Fires.FIRE_YEAR",
            "select Fires.DISCOVERY_DATE",
            "select Fires.OWNER_CODE",
            "select Fires.STAT_CAUSE_CODE",
            "select Fires.OWNER_DESCR",
            "select Fires.STAT_CAUSE_DESCR",
            "select Fires.FIRE_YEAR4",
            "select Fires.CONT_DATE"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Show all fires caused by campfires in Texas., database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr (Campfire), c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (TEXAS, Texas), c17: fips_code, c18: fips_name (Texas)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Who was responsible for the land of the biggest fire in Oregon in 2015?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (OREGON, Oregon), c17: fips_code, c18: fips_name (Oregon)).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE -ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Who was responsible for the land of the biggest fire in Oregon in 2015?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (OREGON, Oregon), c17: fips_code, c18: fips_name (Oregon)).",
        "prediction": "select t0.c13",
        "label": "select t0.c14",
        "score": false,
        "real_pred": "select Fires.OWNER_CODE",
        "real_label": "select Fires.OWNER_DESCR",
        "topk_preds": [
            "select Fires.OWNER_CODE",
            "select Fires.OWNER_CODE, Fires.OWNER_DESCR",
            "select Fires.OWNER_CODE, Fires.FIPS_CODE",
            "select Fires.OWNER_CODE, Fires.FIPS_NAME",
            "select Fires.OWNER_CODE, Fires.COUNTY",
            "select Fires.OWNER_CODE, Fires.STATE",
            "select Fires.OWNER_CODE, Fires.OWNER_CODE",
            "select Fires.OWNER_CODE, Fires.DISCOVERY_DOY0"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Who was responsible for the land of the biggest fire in Oregon in 2015?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (OREGON, Oregon), c17: fips_code, c18: fips_name (Oregon)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which counties in Washington had fires in 2012?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (WASHINGTON, Washington), c17: fips_code, c18: fips_name (Washington)).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ACT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ACT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which counties in Washington had fires in 2012?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (WASHINGTON, Washington), c17: fips_code, c18: fips_name (Washington)).",
        "prediction": "select distinct t0.c16",
        "label": "select t0.c16",
        "score": false,
        "real_pred": "select distinct Fires.COUNTY",
        "real_label": "select Fires.COUNTY",
        "topk_preds": [
            "select distinct Fires.COUNTY",
            "select Fires.COUNTY",
            "select distinct Fires.FIPS_CODE",
            "select specific Fires.COUNTY",
            "select distinct Fires.DISCOVERY_DOY3",
            "select only Fires.COUNTY",
            "select count(*)",
            "select distinct t0.c 16"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which counties in Washington had fires in 2012?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (WASHINGTON, Washington), c17: fips_code, c18: fips_name (Washington)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many arson-related fires were there in 2010?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE.GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE PER-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE PER-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many arson-related fires were there in 2010?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), Fires.FIRE_YEAR",
            "select count(Fires.FIRE_YEAR)",
            "select sum(Fires.FIRE_YEAR)",
            "select count(*), Fires.DISCOVERY_DATE",
            "select count(arson-related)",
            "select count(arson)",
            "select count(*), Fires.DISCOVERY_DOY"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many arson-related fires were there in 2010?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many years of data are recorded in this database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM",
        "score": true,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM (GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM (SQL-INTERSECT-SELECT-FROM",
            "SELECT-FROM (SQL-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM (GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM (GROUP BY-HAVING)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many years of data are recorded in this database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select count(*)",
        "label": "select count(distinct t0.c0)",
        "score": false,
        "real_pred": "select count(*)",
        "real_label": "select count(distinct Fires.FIRE_YEAR)",
        "topk_preds": [
            "select count(*)",
            "select count(distinct Fires.FIRE_YEAR)",
            "select count(Fires.FIRE_YEAR)",
            "select count(distinct Fires.DISCOVERY_DATE)",
            "select count(*), Fires.FIRE_YEAR",
            "select count(distinct Fires.DISCOVERY_DOY)",
            "select count(distinct t0.c)",
            "select count(distinct Fires.STAT_CAUSE_CODE)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many years of data are recorded in this database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Average date of year that fire was discovered from 20002004?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (Avg(t0.c1)",
            "SELECT-FROM-WHERE-GROUP BY (INTERSECT-SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Average date of year that fire was discovered from 20002004?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select avg(t0.c1)",
        "label": "select avg(t0.c1)",
        "score": true,
        "real_pred": "select avg(Fires.DISCOVERY_DATE)",
        "real_label": "select avg(Fires.DISCOVERY_DATE)",
        "topk_preds": [
            "select avg(Fires.DISCOVERY_DATE)",
            "select avg(Fires.DISCOVERY_DATE).",
            "select avg(Fires.FIRE_YEAR)",
            "select avg(Fires.DISCOVERY_DOY)",
            "select avg(Fires.STAT_CAUSE_CODE)",
            "select avg(Fires.DISCOVERY_DATE",
            "select avg(Fires.CONT_DATE)",
            "select avg(t0.c 1)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Average date of year that fire was discovered from 20002004?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What\u2019s the most common cause of the fire (code) in the database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What\u2019s the most common cause of the fire (code) in the database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select Fires.STAT_CAUSE_CODE",
        "real_label": "select Fires.STAT_CAUSE_CODE",
        "topk_preds": [
            "select Fires.STAT_CAUSE_CODE",
            "select Fires.STAT_CAUSE_CODE, Fires.STAT_CAUSE_DESCR",
            "select Fires.STAT_CAUSE_CODE, Fires.STATE",
            "select Fires.STAT_CAUSE_CODE, Fires.FIPS_CODE",
            "select Fires.STAT_CAUSE_CODE, Fires.DISCOVERY_TIME",
            "select Fires.DISCOVERY_DATE, Fires.DISCOVERY_DOY",
            "select Fires.STAT_CAUSE_CODE, Fires.DISCOVERY_DATE",
            "select Fires.STAT_CAUSE_CODE, Fires.CONT_DATE"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What\u2019s the most common cause of the fire (code) in the database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What\u2019s the year that have the largest acres in the fire area?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What\u2019s the year that have the largest acres in the fire area?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select t0.c0",
        "label": "select t0.c0",
        "score": true,
        "real_pred": "select Fires.FIRE_YEAR",
        "real_label": "select Fires.FIRE_YEAR",
        "topk_preds": [
            "select Fires.FIRE_YEAR",
            "select Fires.FIRE_YEAR, Fires.FIRE_SIZE",
            "select Fires.FIRE_YEAR, Fires.CONT_DOY",
            "select Fires.FIRE_YEAR, Fires.FIPS_CODE",
            "select Fires.FIRE_YEAR, Fires.CONT_TIME",
            "select Fires.FIRE_YEAR, Fires.STAT_CAUSE_DESCR",
            "select Fires.FIRE_YEAR, Fires.DISCOVERY_DOY",
            "select Fires.FIRE_YEAR, Fires.DISCOVERY_DATE"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What\u2019s the year that have the largest acres in the fire area?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many missing / not specified name of the owner are there in the database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WITH-WHERE",
            "SELECT-FROM-FROM-WHERE",
            "SELECT-FROM-WHERE (count(*)",
            "SELECT-FROM-WHERE-NUM(*)",
            "SELECT-FROM with-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many missing / not specified name of the owner are there in the database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), Fires.OWNER_CODE",
            "select count(*), Fires.OWNER_CODE, Fires.OWNER_DESCR",
            "select count(distinct Fires.OWNER_CODE)",
            "select count(missing / not specified Fires.OWNER_CODE)",
            "select count(missing / Fires.OWNER_CODE)",
            "select count(missing / Fires.OWNER_DESCR)",
            "select count(*), Fires.OWNER_CODE-Fires.OWNER_DESCR"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many missing / not specified name of the owner are there in the database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What\u2019s the county that contains most recorded burns in 2000 according to the database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (COUNTY), c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-WHERE-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What\u2019s the county that contains most recorded burns in 2000 according to the database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (COUNTY), c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select t0.c16",
        "label": "select t0.c16",
        "score": true,
        "real_pred": "select Fires.COUNTY",
        "real_label": "select Fires.COUNTY",
        "topk_preds": [
            "select Fires.COUNTY",
            "select Fires.COUNTY, Fires.FIPS_CODE",
            "select Fires.COUNTY, Fires.DISCOVERY_DATE9",
            "select Fires.COUNTY, Fires.DISCOVERY_DOY3",
            "select Fires.STATE, Fires.COUNTY",
            "select Fires.OWNER_CODE, Fires.COUNTY",
            "select Fires.COUNTY, Fires.STATE",
            "select Fires.COUNTY, Fires.FIPS_NAME"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What\u2019s the county that contains most recorded burns in 2000 according to the database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (COUNTY), c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many distinct cause of the fire descriptions are there in the database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM",
        "score": true,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM (count(distinct t0.c5)",
            "SELECT-FROM (distinct t0.c5)",
            "SELECT-FROM (separate t0.c5)",
            "SELECT-FROM (Separate t0.c5)",
            "SELECT-FROM (t0.c5)",
            "SELECT-FROM (count(distinct t0.c4)",
            "SELECT-FROM (count(distinct t0.c2)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many distinct cause of the fire descriptions are there in the database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select count(distinct t0.c5)",
        "label": "select count(distinct t0.c5)",
        "score": true,
        "real_pred": "select count(distinct Fires.STAT_CAUSE_DESCR)",
        "real_label": "select count(distinct Fires.STAT_CAUSE_DESCR)",
        "topk_preds": [
            "select count(distinct Fires.STAT_CAUSE_DESCR)",
            "select count (distinct Fires.STAT_CAUSE_DESCR)",
            "select count(distinct Fires.STAT_CAUSE_CODE)",
            "select count(distinct Fires.DISCOVERY_DOY)",
            "select count(separate Fires.STAT_CAUSE_DESCR)",
            "select count(distinct Fires.CONT_DATE)",
            "select count(distinct t0.d5)",
            "select count(distinct Fires.DISCOVERY_TIME)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many distinct cause of the fire descriptions are there in the database?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Sum of the acres burned in NC state in 2006?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (STATE), c15: state (NC), c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE (GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE (GROUP BY-ORDER BY-LIMIT)",
            "SELECT-FROM-WHERE (Sum(t0.c9)",
            "SELECT-FROM-WHERE (GROUP BY-ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Sum of the acres burned in NC state in 2006?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (STATE), c15: state (NC), c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select sum(t0.c9)",
        "label": "select sum(t0.c9)",
        "score": true,
        "real_pred": "select sum(Fires.FIRE_SIZE)",
        "real_label": "select sum(Fires.FIRE_SIZE)",
        "topk_preds": [
            "select sum(Fires.FIRE_SIZE)",
            "select sum(Fires.CONT_DATE)",
            "select sum(Fires.CONT_TIME)",
            "select sum(Fires.FIRE_SIZE_CLASS)",
            "select sum(Fires.STAT_CAUSE_DESCR)",
            "select sum(Fires.FIRE_YEAR9)",
            "select sum(t0.c)",
            "select sum(Fires.CONT_DOY)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Sum of the acres burned in NC state in 2006?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (STATE), c15: state (NC), c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What was the cause of the largest wildfire in Utah in the year 1997?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (UTAH, Utah), c17: fips_code, c18: fips_name (Utah)).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE.ORDER BY-LIMIT",
            "SELECT-FROM-WHERE -ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What was the cause of the largest wildfire in Utah in the year 1997?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (UTAH, Utah), c17: fips_code, c18: fips_name (Utah)).",
        "prediction": "select t0.c4",
        "label": "select *",
        "score": false,
        "real_pred": "select Fires.STAT_CAUSE_CODE",
        "real_label": "select *",
        "topk_preds": [
            "select Fires.STAT_CAUSE_CODE",
            "select Fires.STAT_CAUSE_CODE, Fires.STAT_CAUSE_DESCR",
            "select Fires.DISCOVERY_DATE, Fires.DISCOVERY_DOY",
            "select Fires.STAT_CAUSE_DESCR",
            "select Fires.DISCOVERY_DOY",
            "select Fires.STAT_CAUSE_CODE.c5",
            "select Fires.STAT_CAUSE_CODE, Fires.DISCOVERY_TIME",
            "select Fires.DISCOVERY_DATE"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What was the cause of the largest wildfire in Utah in the year 1997?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (UTAH, Utah), c17: fips_code, c18: fips_name (Utah)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many wildfires in Gloucester county have been larger than 10 acres?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (COUNTY), c15: state, c16: county (GLOUCESTER, Gloucester), c17: fips_code, c18: fips_name (Gloucester)).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE, count(*)",
            "SELECT-FROM-WHERE (count(*)",
            "SELECT-FROM-WHERE count(*)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many wildfires in Gloucester county have been larger than 10 acres?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (COUNTY), c15: state, c16: county (GLOUCESTER, Gloucester), c17: fips_code, c18: fips_name (Gloucester)).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), Fires.FIRE_SIZE",
            "select count(*), Fires.COUNTY",
            "select count(*), Fires.FIPS_CODE",
            "select count(*), Fires.STATE",
            "select count(*), Fires.FIRE_YEAR9",
            "select count(*), Fires.OWNER_CODE",
            "select count(*), Fires.OWNER_DESCR"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many wildfires in Gloucester county have been larger than 10 acres?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (COUNTY), c15: state, c16: county (GLOUCESTER, Gloucester), c17: fips_code, c18: fips_name (Gloucester)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which state experiences the most wildfires?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (STATE), c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GEOGRAPHY-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which state experiences the most wildfires?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (STATE), c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select t0.c15",
        "label": "select t0.c15",
        "score": true,
        "real_pred": "select Fires.STATE",
        "real_label": "select Fires.STATE",
        "topk_preds": [
            "select Fires.STATE",
            "select Fires.STATE, Fires.FIPS_CODE",
            "select Fires.STATE, Fires.DISCOVERY_DOY3",
            "select Fires.STATE, Fires.COUNTY",
            "select Fires.STATE, Fires.FIPS_NAME",
            "select Fires.STATE, Fires.DISCOVERY_DOY0",
            "select Fires.STATE, Fires.DISCOVERY_DOY1",
            "select Fires.STATE, Fires.DISCOVERY_DOY6"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which state experiences the most wildfires?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (STATE), c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the leading cause of wildfires?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the leading cause of wildfires?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select t0.c4",
        "label": "select t0.c5",
        "score": false,
        "real_pred": "select Fires.STAT_CAUSE_CODE",
        "real_label": "select Fires.STAT_CAUSE_DESCR",
        "topk_preds": [
            "select Fires.STAT_CAUSE_CODE",
            "select Fires.STAT_CAUSE_CODE, Fires.STATE",
            "select Fires.STAT_CAUSE_CODE, Fires.STAT_CAUSE_DESCR",
            "select Fires.STAT_CAUSE_CODE, Fires.FIPS_CODE",
            "select Fires.STAT_CAUSE_CODE, Fires.FIPS_NAME",
            "select Fires.STAT_CAUSE_DESCR",
            "select Fires.STAT_CAUSE_CODE, Fires.COUNTY",
            "select Fires.STAT_CAUSE_CODE, Fires.DISCOVERY_TIME"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the leading cause of wildfires?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: On what type of land (public or private) do more wildfires occur?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (PRIVATE), c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-VARIATION-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-POLITICAL-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: On what type of land (public or private) do more wildfires occur?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (PRIVATE), c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select t0.c13, t0.c14",
        "label": "select t0.c14",
        "score": false,
        "real_pred": "select Fires.OWNER_CODE, Fires.OWNER_DESCR",
        "real_label": "select Fires.OWNER_DESCR",
        "topk_preds": [
            "select Fires.OWNER_CODE, Fires.OWNER_DESCR",
            "select Fires.OWNER_CODE, count(*)",
            "select Fires.OWNER_CODE, max(Fires.FIRE_SIZE)",
            "select Fires.OWNER_CODE, Fires.COUNTY",
            "select Fires.OWNER_CODE",
            "select Fires.OWNER_CODE, max(Fires.CONT_TIME)",
            "select Fires.OWNER_CODE, Fires.DISCOVERY_DOY2",
            "select Fires.OWNER_CODE, Fires.STATE"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: On what type of land (public or private) do more wildfires occur?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (PRIVATE), c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: In 2014, how many wildfires were the result of mismanaged campfires?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr (Campfire), c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY -LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY (LIMIT)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: In 2014, how many wildfires were the result of mismanaged campfires?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr (Campfire), c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), Fires.FIRE_YEAR",
            "select Fires.FIRE_YEAR, count(*)",
            "select count(*), Fires.DISCOVERY_DATE",
            "select count(Fires.FIRE_YEAR)",
            "select count(*) in Fires.FIRE_YEAR",
            "select count(*), Fires.FIRE_YEAR",
            "select count(*), Fires.STAT_CAUSE_CODE"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: In 2014, how many wildfires were the result of mismanaged campfires?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr (Campfire), c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many total acres of land in Texas have seen a wildfire in the decade between 2000-2010?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (TEXAS, Texas), c17: fips_code, c18: fips_name (Texas)).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE PER-GROUP BY-HAVING",
            "SELECT-FROM-WHERE (GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many total acres of land in Texas have seen a wildfire in the decade between 2000-2010?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (TEXAS, Texas), c17: fips_code, c18: fips_name (Texas)).",
        "prediction": "select sum(t0.c8)",
        "label": "select sum(t0.c9)",
        "score": false,
        "real_pred": "select sum(Fires.CONT_TIME)",
        "real_label": "select sum(Fires.FIRE_SIZE)",
        "topk_preds": [
            "select sum(Fires.CONT_TIME)",
            "select sum(Fires.FIRE_SIZE)",
            "select sum(Fires.CONT_DATE)",
            "select sum(Fires.FIRE_SIZE_CLASS)",
            "select sum(Fires.STAT_CAUSE_DESCR)",
            "select sum(Fires.CONT_DOY)",
            "select sum(Fires.DISCOVERY_DOY)",
            "select sum(Fires.OWNER_CODE5)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many total acres of land in Texas have seen a wildfire in the decade between 2000-2010?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (TEXAS, Texas), c17: fips_code, c18: fips_name (Texas)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which state has the most number of fires being recorded?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (STATE), c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-",
            "SELECT-FROM-GEOGRAPHY-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which state has the most number of fires being recorded?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (STATE), c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select t0.c15",
        "label": "select t0.c15",
        "score": true,
        "real_pred": "select Fires.STATE",
        "real_label": "select Fires.STATE",
        "topk_preds": [
            "select Fires.STATE",
            "select Fires.STATE, Fires.COUNTY",
            "select Fires.STATE, Fires.FIPS_CODE",
            "select Fires.STATE, Fires.FIPS_NAME",
            "select Fires.STATE, Fires.DISCOVERY_DOY0",
            "select Fires.STATE, Fires.DISCOVERY_DOY3",
            "select Fires.STATE, Fires.DISCOVERY_DOY1",
            "select Fires.STATE, Fires.DISCOVERY_DATE9"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which state has the most number of fires being recorded?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr (STATE), c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the most common reason that causes a fire?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the most common reason that causes a fire?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select t0.c4",
        "label": "select t0.c5",
        "score": false,
        "real_pred": "select Fires.STAT_CAUSE_CODE",
        "real_label": "select Fires.STAT_CAUSE_DESCR",
        "topk_preds": [
            "select Fires.STAT_CAUSE_CODE",
            "select Fires.STAT_CAUSE_CODE, Fires.STATE",
            "select Fires.STAT_CAUSE_CODE, Fires.STAT_CAUSE_DESCR",
            "select Fires.STAT_CAUSE_CODE, Fires.FIPS_CODE",
            "select Fires.STAT_CAUSE_CODE, Fires.DISCOVERY_TIME",
            "select Fires.STAT_CAUSE_CODE, Fires.FIPS_NAME",
            "select Fires.STAT_CAUSE_CODE, Fires.COUNTY",
            "select Fires.STAT_CAUSE_CODE, Fires.DISCOVERY_DATE"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the most common reason that causes a fire?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the total area that has been burned until now?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM",
        "score": true,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM (GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM (GROUP BY-ORDER BY-LIMIT)",
            "SELECT-FROM (GROUP BY-ORDER BY",
            "SELECT-FROM UNION-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the total area that has been burned until now?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select sum(t0.c8)",
        "label": "select sum(t0.c9)",
        "score": false,
        "real_pred": "select sum(Fires.CONT_TIME)",
        "real_label": "select sum(Fires.FIRE_SIZE)",
        "topk_preds": [
            "select sum(Fires.CONT_TIME)",
            "select sum(Fires.CONT_DATE)",
            "select sum(Fires.FIRE_SIZE)",
            "select sum(Fires.CONT_DOY)",
            "select sum(Fires.FIRE_SIZE_CLASS)",
            "select sum(Fires.STAT_CAUSE_DESCR)",
            "select sum(Fires.DISCOVERY_DOY)",
            "select sum(Fires.DISCOVERY_TIME)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the total area that has been burned until now?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many acres burned in 2000s and 1990s?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY",
        "label": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY",
        "real_label": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many acres burned in 2000s and 1990s?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select t0.c0, sum(t0.c9)",
        "label": "select sum(t0.c9)",
        "score": false,
        "real_pred": "select Fires.FIRE_YEAR, sum(Fires.FIRE_SIZE)",
        "real_label": "select sum(Fires.FIRE_SIZE)",
        "topk_preds": [
            "select Fires.FIRE_YEAR, sum(Fires.FIRE_SIZE)",
            "select Fires.FIRE_YEAR, sum(Fires.CONT_TIME)",
            "select Fires.FIRE_YEAR, sum(Fires.CONT_DATE)",
            "select Fires.FIRE_YEAR, sum(Fires.STAT_CAUSE_DESCR)",
            "select Fires.FIRE_YEAR, sum(Fires.FIRE_SIZE_CLASS)",
            "select compare Fires.FIRE_YEAR, sum(Fires.FIRE_SIZE)",
            "select sum(Fires.FIRE_SIZE), Fires.FIRE_YEAR",
            "select sum(Fires.CONT_TIME), Fires.FIRE_YEAR"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many acres burned in 2000s and 1990s?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many fire cases occur on the land without any owner?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (Cass), c17: fips_code, c18: fips_name (Cass)).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many fire cases occur on the land without any owner?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (Cass), c17: fips_code, c18: fips_name (Cass)).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), Fires.OWNER_CODE",
            "select count(*), Fires.LATITUDE",
            "select count(*), Fires.OWNER_DESCR",
            "select count(*), Fires.LONGITUDE",
            "select count(*), Fires.DISCOVERY_DATE",
            "select count(*), Fires.FIRE_SIZE",
            "select count(*), Fires.STAT_CAUSE_DESCR"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many fire cases occur on the land without any owner?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county (Cass), c17: fips_code, c18: fips_name (Cass)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the latitudinal band that is most likely to experience wildfires in the USA?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GEOGRAPHY-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GEOGRAPHY-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the latitudinal band that is most likely to experience wildfires in the USA?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "select t0.c11",
        "label": "select t0.c11",
        "score": true,
        "real_pred": "select Fires.LATITUDE",
        "real_label": "select Fires.LATITUDE",
        "topk_preds": [
            "select Fires.LATITUDE",
            "select Fires.LATITUDE, Fires.LONGITUDE",
            "select Fires.LATITUDE, Fires.OWNER_CODE",
            "select Fires.DISCOVERY_DATE, Fires.LONGITUDE",
            "select Fires.LATITUDE-c13",
            "select Fires.DISCOVERY_DATE, Fires.DISCOVERY_DOY",
            "select Fires.LATITUDE - Fires.OWNER_CODE",
            "select Fires.LATITUDE - Fires.LONGITUDE"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the latitudinal band that is most likely to experience wildfires in the USA?, database: Database: USWildFires. t0: fires(c0: fire_year, c1: discovery_date, c2: discovery_doy, c3: discovery_time, c4: stat_cause_code, c5: stat_cause_descr, c6: cont_date, c7: cont_doy, c8: cont_time, c9: fire_size, c10: fire_size_class, c11: latitude, c12: longitude, c13: owner_code, c14: owner_descr, c15: state, c16: county, c17: fips_code, c18: fips_name).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "Fires",
        "real_label": "Fires",
        "topk_preds": [
            "Fires",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: what year was each specific entry released?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released, release), c1: totalsnatched, c2: artist (specifics), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM",
        "score": true,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-UNION-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: what year was each specific entry released?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released, release), c1: totalsnatched, c2: artist (specifics), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t0.c3",
        "label": "select t0.c0, t0.c3",
        "score": false,
        "real_pred": "select torrents.groupYear",
        "real_label": "select torrents.groupName, torrents.groupYear",
        "topk_preds": [
            "select torrents.groupYear",
            "select torrents.groupName, torrents.groupYear",
            "select distinct torrents.groupYear",
            "select torrents.groupYear, torrents.releaseType",
            "select exact(torrents.groupYear)",
            "select distinct torrents.groupName, torrents.groupYear",
            "select specific torrents.groupYear",
            "select date(torrents.groupYear)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: what year was each specific entry released?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released, release), c1: totalsnatched, c2: artist (specifics), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "torrents tags",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: what are the entries by each specific artist/group?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname, c1: totalsnatched, c2: artist (specifics), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM-GROUP BY",
        "label": "SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY UNION-SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY (ORDER BY",
            "SELECT-FROM-GROUP BY -ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: what are the entries by each specific artist/group?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname, c1: totalsnatched, c2: artist (specifics), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t0.c2, count(*)",
        "label": "select t0.c0, t0.c2",
        "score": false,
        "real_pred": "select torrents.artist, count(*)",
        "real_label": "select torrents.groupName, torrents.artist",
        "topk_preds": [
            "select torrents.artist, count(*)",
            "select torrents.artist, count(*), torrents.groupId",
            "select count(*), torrents.artist",
            "select torrents.totalSnatched, torrents.artist",
            "select torrents.artist, count(*), torrents.groupYear",
            "select torrents.groupName, torrents.artist",
            "select torrents.artist, max(torrents.groupId)",
            "select distinct torrents.artist, count(*)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: what are the entries by each specific artist/group?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname, c1: totalsnatched, c2: artist (specifics), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: which tags exist?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (exis, exit), c1: totalsnatched, c2: artist (exist), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM",
        "score": true,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM UNION-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM (EXCEPT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: which tags exist?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (exis, exit), c1: totalsnatched, c2: artist (exist), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select distinct t1.c2",
        "label": "select distinct t1.c2",
        "score": true,
        "real_pred": "select distinct tags.tag",
        "real_label": "select distinct tags.tag",
        "topk_preds": [
            "select distinct tags.tag",
            "select tags.tag",
            "select exist(tags.tag)",
            "select tags.id, tags.tag",
            "select distinct tags.tag, tags.id",
            "select distinct tags.tag, tags.index",
            "select unique tags.tag",
            "select count(*)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: which tags exist?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (exis, exit), c1: totalsnatched, c2: artist (exist), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "tags",
        "real_label": "tags",
        "topk_preds": [
            "tags",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: what release types are captured in this data set?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (captured, capture), c1: totalsnatched, c2: artist (capture, type), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM",
        "score": true,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM",
            "SELECT-FROM UNION-SELECT-FROM",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: what release types are captured in this data set?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (captured, capture), c1: totalsnatched, c2: artist (capture, type), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select distinct t0.c4",
        "label": "select distinct t0.c4",
        "score": true,
        "real_pred": "select distinct torrents.releaseType",
        "real_label": "select distinct torrents.releaseType",
        "topk_preds": [
            "select distinct torrents.releaseType",
            "select count(distinct torrents.releaseType)",
            "select torrents.releaseType",
            "select distinct torrents.releaseType, torrents.groupId",
            "select list(distinct torrents.releaseType)",
            "select different torrents.releaseType",
            "select distinct torrents.releaseType, torrents.id",
            "select unique torrents.releaseType"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: what release types are captured in this data set?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (captured, capture), c1: totalsnatched, c2: artist (capture, type), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "torrents tags",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Find me top 5 most popular releases after 2000?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (find, populair), c1: totalsnatched, c2: artist (fiend, topr), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (tope)).",
        "prediction": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Find me top 5 most popular releases after 2000?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (find, populair), c1: totalsnatched, c2: artist (fiend, topr), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (tope)).",
        "prediction": "select t0.c4",
        "label": "select t0.c0",
        "score": false,
        "real_pred": "select torrents.releaseType",
        "real_label": "select torrents.groupName",
        "topk_preds": [
            "select torrents.releaseType",
            "select torrents.groupId",
            "select torrents.groupName",
            "select torrents.totalSnatched",
            "select torrents.groupName, torrents.releaseType",
            "select torrents.groupName, torrents.totalSnatched",
            "select torrents.groupName, torrents.artist",
            "select torrents.totalSnatched, torrents.artist"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Find me top 5 most popular releases after 2000?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (find, populair), c1: totalsnatched, c2: artist (fiend, topr), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (tope)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "",
            "torrents tags",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which albums have been downloaded more than 100 times?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (album, time), c1: totalsnatched, c2: artist (time), c3: groupyear, c4: releasetype (album), c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (album, download)).",
        "prediction": "SELECT-FROM-GROUP BY-HAVING",
        "label": "SELECT-FROM-WHERE",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-HAVING",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INSERT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-EXCEPT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-HAVING-INSTALL-SELECT-FROM-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which albums have been downloaded more than 100 times?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (album, time), c1: totalsnatched, c2: artist (time), c3: groupyear, c4: releasetype (album), c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (album, download)).",
        "prediction": "select t0.c0",
        "label": "select distinct t0.c0",
        "score": false,
        "real_pred": "select torrents.groupName",
        "real_label": "select distinct torrents.groupName",
        "topk_preds": [
            "select torrents.groupName",
            "select torrents.totalSnatched",
            "select tags.tag",
            "select torrents.groupName, tags.tag",
            "select torrents.totalSnatched, tags.tag",
            "select torrents.releaseType",
            "select torrents.artist",
            "select torrents.groupId"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which albums have been downloaded more than 100 times?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (album, time), c1: totalsnatched, c2: artist (time), c3: groupyear, c4: releasetype (album), c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (album, download)).",
        "prediction": "t0 t1",
        "label": "t0",
        "score": false,
        "real_pred": "torrents tags",
        "real_label": "torrents",
        "topk_preds": [
            "torrents tags",
            "tags",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Name the most popular release on houston., database: Database: WhatCDHipHop. t0: torrents(c0: groupname (houston, the most), c1: totalsnatched, c2: artist (houston, namek), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (houston)).",
        "prediction": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Name the most popular release on houston., database: Database: WhatCDHipHop. t0: torrents(c0: groupname (houston, the most), c1: totalsnatched, c2: artist (houston, namek), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (houston)).",
        "prediction": "select t1.c2",
        "label": "select t0.c0",
        "score": false,
        "real_pred": "select tags.tag",
        "real_label": "select torrents.groupName",
        "topk_preds": [
            "select tags.tag",
            "select torrents.totalSnatched",
            "select torrents.groupName, tags.tag",
            "select tags.tag, torrents.groupYear",
            "select tags.id",
            "select tags.tag, torrents.groupName",
            "select tags.tag, torrents.releaseType",
            "select tags.tag, torrents.groupId"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Name the most popular release on houston., database: Database: WhatCDHipHop. t0: torrents(c0: groupname (houston, the most), c1: totalsnatched, c2: artist (houston, namek), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (houston)).",
        "prediction": "t0",
        "label": "t0 t1",
        "score": false,
        "real_pred": "torrents",
        "real_label": "torrents tags",
        "topk_preds": [
            "torrents",
            "torrents tags",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Name the most popular and least popular releases of lasean camry?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, populair), c1: totalsnatched, c2: artist (lasean camry, namek), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Name the most popular and least popular releases of lasean camry?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, populair), c1: totalsnatched, c2: artist (lasean camry, namek), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t0.c0, t0.c1",
        "label": "select t0.c0",
        "score": false,
        "real_pred": "select torrents.groupName, torrents.totalSnatched",
        "real_label": "select torrents.groupName",
        "topk_preds": [
            "select torrents.groupName, torrents.totalSnatched",
            "select torrents.groupName, torrents.releaseType",
            "select torrents.groupName, torrents.artist",
            "select torrents.totalSnatched, torrents.artist",
            "select torrents.groupName, torrents.groupYear",
            "select torrents.groupName, torrents.id",
            "select torrents.groupName, min(torrents.artist)",
            "select torrents.groupName, torrents.totalSnatched1"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Name the most popular and least popular releases of lasean camry?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, populair), c1: totalsnatched, c2: artist (lasean camry, namek), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "torrents tags",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Find me top 10 albums ranked by their popularity., database: Database: WhatCDHipHop. t0: torrents(c0: groupname (find, album), c1: totalsnatched, c2: artist (fiend, topr), c3: groupyear, c4: releasetype (album), c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (album, tope)).",
        "prediction": "SELECT-FROM-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Find me top 10 albums ranked by their popularity., database: Database: WhatCDHipHop. t0: torrents(c0: groupname (find, album), c1: totalsnatched, c2: artist (fiend, topr), c3: groupyear, c4: releasetype (album), c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (album, tope)).",
        "prediction": "select t0.c4",
        "label": "select t0.c0",
        "score": false,
        "real_pred": "select torrents.releaseType",
        "real_label": "select torrents.groupName",
        "topk_preds": [
            "select torrents.releaseType",
            "select torrents.totalSnatched",
            "select torrents.groupId, torrents.id",
            "select torrents.groupName, tags.tag",
            "select torrents.groupId",
            "select torrents.totalSnatched, torrents.artist",
            "select torrents.groupId, t0.c7",
            "select torrents.totalSnatched, tags.tag"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Find me top 10 albums ranked by their popularity., database: Database: WhatCDHipHop. t0: torrents(c0: groupname (find, album), c1: totalsnatched, c2: artist (fiend, topr), c3: groupyear, c4: releasetype (album), c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (album, tope)).",
        "prediction": "t1",
        "label": "t0",
        "score": false,
        "real_pred": "tags",
        "real_label": "torrents",
        "topk_preds": [
            "tags",
            "",
            "",
            "",
            "",
            "",
            "torrents tags",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Find me the most popular topics since 2010., database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, topics), c1: totalsnatched, c2: artist (fiend), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-POPULATION-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Find me the most popular topics since 2010., database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, topics), c1: totalsnatched, c2: artist (fiend), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t0.c0",
        "label": "select t1.c2",
        "score": false,
        "real_pred": "select torrents.groupName",
        "real_label": "select tags.tag",
        "topk_preds": [
            "select torrents.groupName",
            "select torrents.groupName, torrents.groupYear",
            "select torrents.totalSnatched",
            "select torrents.groupName, torrents.artist",
            "select topmost, torrents.groupName",
            "select torrents.groupName, torrents.totalSnatched",
            "select top10(torrents.artist)",
            "select top10(torrents.groupName)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Find me the most popular topics since 2010., database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, topics), c1: totalsnatched, c2: artist (fiend), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0 t1",
        "score": false,
        "real_pred": "torrents",
        "real_label": "torrents tags",
        "topk_preds": [
            "torrents",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which year had the minimum number of releases?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (minimum, numbers), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which year had the minimum number of releases?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (minimum, numbers), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t0.c3",
        "label": "select t0.c3",
        "score": true,
        "real_pred": "select torrents.groupYear",
        "real_label": "select torrents.groupYear",
        "topk_preds": [
            "select torrents.groupYear",
            "select torrents.groupYear, torrents.releaseType",
            "select torrents.groupYear, count(*)",
            "select torrents.groupYear, max(torrents.releaseType)",
            "select torrents.groupYear, max(torrents.groupYear)",
            "select torrents.groupYear, max(torrents.id)",
            "select torrents.groupYear, torrents.artist",
            "select torrents.groupYear, min(torrents.releaseType)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which year had the minimum number of releases?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (minimum, numbers), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "torrents tags",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which release is being downloaded the most?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, released), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (download)).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-T0-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which release is being downloaded the most?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, released), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (download)).",
        "prediction": "select t0.c0",
        "label": "select t0.c0",
        "score": true,
        "real_pred": "select torrents.groupName",
        "real_label": "select torrents.groupName",
        "topk_preds": [
            "select torrents.groupName",
            "select torrents.totalSnatched",
            "select torrents.releaseType",
            "select torrents.groupName, torrents.releaseType",
            "select torrents.groupName, tags.tag",
            "select torrents.totalSnatched, torrents.artist",
            "select torrents.artist",
            "select torrents.groupName, torrents.artist"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which release is being downloaded the most?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, released), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (download)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "torrents tags",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Who or which group is most popular in 2015?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (populair), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT (SELECT-FROM-WHERE)",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Who or which group is most popular in 2015?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (populair), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t0.c0",
        "label": "select t0.c2",
        "score": false,
        "real_pred": "select torrents.groupName",
        "real_label": "select torrents.artist",
        "topk_preds": [
            "select torrents.groupName",
            "select torrents.groupName, torrents.groupYear",
            "select torrents.groupName, torrents.groupId",
            "select torrents.groupName ou torrents.groupId",
            "select torrents.groupName, torrents.artist",
            "select torrents.groupName ou torrents.artist",
            "select torrents.groupName, t0.c7",
            "select torrents.groupName ou torrents.totalSnatched"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Who or which group is most popular in 2015?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (populair), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which tag is used for which release title?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released, titles), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM",
        "score": true,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-UNION-SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which tag is used for which release title?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released, titles), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t1.c2",
        "label": "select t1.c2, t0.c0",
        "score": false,
        "real_pred": "select tags.tag",
        "real_label": "select tags.tag, torrents.groupName",
        "topk_preds": [
            "select tags.tag",
            "select tags.tag, torrents.releaseType",
            "select tags.tag, torrents.groupYear",
            "select tags.tag, torrents.groupName",
            "select tags.id, tags.tag",
            "select tags.tag, torrents.id",
            "select tags.tag, torrents.groupId",
            "select tags.tag, torrents.totalSnatched"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which tag is used for which release title?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released, titles), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0 t1",
        "label": "t0 t1",
        "score": true,
        "real_pred": "torrents tags",
        "real_label": "torrents tags",
        "topk_preds": [
            "torrents tags",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which year has the most released song?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released, the most), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (sonig)).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which year has the most released song?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released, the most), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (sonig)).",
        "prediction": "select t0.c3",
        "label": "select t0.c3",
        "score": true,
        "real_pred": "select torrents.groupYear",
        "real_label": "select torrents.groupYear",
        "topk_preds": [
            "select torrents.groupYear",
            "select torrents.groupYear, torrents.releaseType",
            "select torrents.groupName, torrents.groupYear",
            "select torrents.groupYear, tags.tag",
            "select torrents.groupYear, torrents.artist",
            "select torrents.groupYear, torrents.groupId",
            "select torrents.groupYear, torrents.id",
            "select torrents.groupYear, t2.c2"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which year has the most released song?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released, the most), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (sonig)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "torrents tags",
            "",
            "",
            "",
            "",
            "",
            "tags"
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which artist/group is most productive?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname, c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which artist/group is most productive?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname, c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t0.c2, t0.c0",
        "label": "select t0.c2",
        "score": false,
        "real_pred": "select torrents.artist, torrents.groupName",
        "real_label": "select torrents.artist",
        "topk_preds": [
            "select torrents.artist, torrents.groupName",
            "select torrents.artist, torrents.groupYear",
            "select torrents.artist, torrents.totalSnatched",
            "select torrents.groupName, torrents.artist",
            "select torrents.artist, torrents.releaseType",
            "select torrents.totalSnatched, torrents.artist",
            "select torrents.artist, torrents.groupId",
            "select torrents.artist ou torrents.groupName"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which artist/group is most productive?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname, c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which artist/group has the highest average download of songs?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (songs, downloads), c1: totalsnatched, c2: artist (average., sons), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (download)).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUPS-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which artist/group has the highest average download of songs?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (songs, downloads), c1: totalsnatched, c2: artist (average., sons), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (download)).",
        "prediction": "select t0.c2, t0.c0",
        "label": "select t0.c2",
        "score": false,
        "real_pred": "select torrents.artist, torrents.groupName",
        "real_label": "select torrents.artist",
        "topk_preds": [
            "select torrents.artist, torrents.groupName",
            "select torrents.artist",
            "select torrents.artist, torrents.groupYear",
            "select torrents.groupName, torrents.artist",
            "select torrents.artist ou torrents.groupName",
            "select torrents.artist, torrents.releaseType",
            "select torrents.artist, torrents.totalSnatched",
            "select torrents.totalSnatched, torrents.artist"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which artist/group has the highest average download of songs?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (songs, downloads), c1: totalsnatched, c2: artist (average., sons), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (download)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which year has the most CDs released?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released, the most), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-",
            "SELECT-FROM-GROUPS-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which year has the most CDs released?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released, the most), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t0.c3",
        "label": "select t0.c3",
        "score": true,
        "real_pred": "select torrents.groupYear",
        "real_label": "select torrents.groupYear",
        "topk_preds": [
            "select torrents.groupYear",
            "select torrents.groupYear, torrents.releaseType",
            "select torrents.groupName, torrents.groupYear",
            "select torrents.groupYear, torrents.groupId",
            "select torrents.groupYear, torrents.artist",
            "select torrents.groupYear, torrents.id",
            "select torrents.groupYear (released, the most)",
            "select torrents.groupYear, t0.c7"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which year has the most CDs released?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released, the most), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "torrents tags",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which CD has been downloaded the most times?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, time), c1: totalsnatched, c2: artist (time), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (download)).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-ORDER BY-LIMIT",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which CD has been downloaded the most times?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, time), c1: totalsnatched, c2: artist (time), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (download)).",
        "prediction": "select t1.c2",
        "label": "select t0.c0",
        "score": false,
        "real_pred": "select tags.tag",
        "real_label": "select torrents.groupName",
        "topk_preds": [
            "select tags.tag",
            "select tags.tag, torrents.groupYear",
            "select tags.id",
            "select tags.tag, torrents.totalSnatched",
            "select torrents.groupName, tags.tag",
            "select tags.tag, torrents.groupName",
            "select tags.id, torrents.artist",
            "select tags.tag, torrents.groupId"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which CD has been downloaded the most times?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, time), c1: totalsnatched, c2: artist (time), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (download)).",
        "prediction": "t0 t1",
        "label": "t0",
        "score": false,
        "real_pred": "torrents tags",
        "real_label": "torrents",
        "topk_preds": [
            "torrents tags",
            "torrents",
            "tags",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which kind of release type is the most popular?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, populair), c1: totalsnatched, c2: artist (type, kid), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which kind of release type is the most popular?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, populair), c1: totalsnatched, c2: artist (type, kid), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select torrents.releaseType",
        "real_label": "select torrents.releaseType",
        "topk_preds": [
            "select torrents.releaseType",
            "select torrents.releaseType, torrents.groupId",
            "select torrents.groupYear, torrents.releaseType",
            "select torrents.releaseType, torrents.groupYear",
            "select torrents.groupName, torrents.releaseType",
            "select torrents.releaseType, torrents.id",
            "select torrents.totalSnatched, torrents.artist",
            "select torrents.totalSnatched, torrents.releaseType"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which kind of release type is the most popular?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, populair), c1: totalsnatched, c2: artist (type, kid), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "torrents tags",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Whose CDs sells best?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (besta), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Whose CDs sells best?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (besta), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t0.c2",
        "label": "select t0.c2",
        "score": true,
        "real_pred": "select torrents.artist",
        "real_label": "select torrents.artist",
        "topk_preds": [
            "select torrents.artist",
            "select tags.tag",
            "select t2.c2",
            "select torrents.artist, torrents.groupYear",
            "select torrents.totalSnatched, torrents.artist",
            "select t3.c2",
            "select torrents.groupName",
            "select torrents.artist/, torrents.groupYear"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Whose CDs sells best?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (besta), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "torrents tags",
            "tags",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the downloaded numbers and their release types?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (numbers, released), c1: totalsnatched, c2: artist (type), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (download)).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM-GROUP BY",
        "score": false,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM-GROUP BY",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM t0.C0, SELECT-FROM",
            "SELECT-FROM t0.c0, SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the downloaded numbers and their release types?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (numbers, released), c1: totalsnatched, c2: artist (type), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (download)).",
        "prediction": "select t0.c0, t0.c4",
        "label": "select sum(t0.c1), t0.c4",
        "score": false,
        "real_pred": "select torrents.groupName, torrents.releaseType",
        "real_label": "select sum(torrents.totalSnatched), torrents.releaseType",
        "topk_preds": [
            "select torrents.groupName, torrents.releaseType",
            "select count(*), torrents.releaseType",
            "select tags.tag, torrents.releaseType",
            "select groupname(torrents.groupName), torrents.releaseType",
            "select count(torrents.groupName), torrents.releaseType",
            "select released torrents.groupName, torrents.releaseType",
            "select t2.c0, torrents.releaseType",
            "select torrents.totalSnatched, torrents.releaseType"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the downloaded numbers and their release types?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (numbers, released), c1: totalsnatched, c2: artist (type), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (download)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the downloaded numbers of 2000s and before 2000?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (numbers), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (2000s, download)).",
        "prediction": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-DISPLAY-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-DISCOVER-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-DISTINCT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the downloaded numbers of 2000s and before 2000?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (numbers), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (2000s, download)).",
        "prediction": "select sum(t1.c6)",
        "label": "select sum(t0.c1)",
        "score": false,
        "real_pred": "select sum(t1.c6)",
        "real_label": "select sum(torrents.totalSnatched)",
        "topk_preds": [
            "select sum(t1.c6)",
            "select sum(tags.tag)",
            "select sum(t1.c4)",
            "select tags.tag",
            "select sum(t1.c8)",
            "select sum(t1.c5)",
            "select count(*)",
            "select sum(t1.c3)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the downloaded numbers of 2000s and before 2000?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (numbers), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (2000s, download)).",
        "prediction": "t1",
        "label": "t0",
        "score": false,
        "real_pred": "tags",
        "real_label": "torrents",
        "topk_preds": [
            "tags",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many same release titles are there in the table?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (titles, released), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM",
        "score": true,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many same release titles are there in the table?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (titles, released), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(distinct torrents.groupName)",
            "select count(same torrents.groupName)",
            "select count(distinct torrents.totalSnatched)",
            "select count(distinct torrents.releaseType)",
            "select count(distinct torrents.id)",
            "select count(distinct torrents.artist)",
            "select count(same torrents.releaseType)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many same release titles are there in the table?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (titles, released), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which artist release the most CDs?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, artist), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which artist release the most CDs?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, artist), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t0.c2",
        "label": "select t0.c2",
        "score": true,
        "real_pred": "select torrents.artist",
        "real_label": "select torrents.artist",
        "topk_preds": [
            "select torrents.artist",
            "select torrents.groupName, torrents.artist",
            "select torrents.artist, torrents.groupYear",
            "select torrents.artist, torrents.totalSnatched",
            "select torrents.artist, torrents.groupId",
            "select torrents.artist, t0.c7",
            "select torrents.artist, torrents.releaseType",
            "select torrents.artist, tags.tag"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which artist release the most CDs?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (the most, artist), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "torrents tags",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many downloads of ep and album respectively?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (downloads, album), c1: totalsnatched, c2: artist (ep), c3: groupyear, c4: releasetype (album, ep), c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (album, download)).",
        "prediction": "SELECT-FROM-GROUP BY",
        "label": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY",
        "real_label": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-GROUP BY (t0.c4), count(*)",
            "SELECT-FROM-GROUP BY (t0.c4) et t0.c4"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many downloads of ep and album respectively?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (downloads, album), c1: totalsnatched, c2: artist (ep), c3: groupyear, c4: releasetype (album, ep), c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (album, download)).",
        "prediction": "select t0.c4, count(*)",
        "label": "select sum(t0.c1)",
        "score": false,
        "real_pred": "select torrents.releaseType, count(*)",
        "real_label": "select sum(torrents.totalSnatched)",
        "topk_preds": [
            "select torrents.releaseType, count(*)",
            "select count(*), torrents.releaseType",
            "select torrents.artist, torrents.releaseType, count(*)",
            "select torrents.totalSnatched, torrents.artist",
            "select releasetype(torrents.releaseType), count(*)",
            "select torrents.artist, torrents.groupYear",
            "select torrents.releaseType, count(*), torrents.groupId",
            "select torrents.groupName, count(*)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many downloads of ep and album respectively?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (downloads, album), c1: totalsnatched, c2: artist (ep), c3: groupyear, c4: releasetype (album, ep), c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag (album, download)).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the artist/groups that released only one CD?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (only one, released), c1: totalsnatched, c2: artist (oner), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM-GROUP BY-HAVING",
        "label": "SELECT-FROM-GROUP BY-HAVING",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-HAVING",
        "real_label": "SELECT-FROM-GROUP BY-HAVING",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the artist/groups that released only one CD?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (only one, released), c1: totalsnatched, c2: artist (oner), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t0.c2, t0.c0",
        "label": "select t0.c2",
        "score": false,
        "real_pred": "select torrents.artist, torrents.groupName",
        "real_label": "select torrents.artist",
        "topk_preds": [
            "select torrents.artist, torrents.groupName",
            "select torrents.artist, torrents.groupYear",
            "select torrents.groupName, torrents.artist",
            "select torrents.artist, torrents.totalSnatched",
            "select torrents.totalSnatched, torrents.artist",
            "select torrents.artist.c2, torrents.groupName",
            "select t0.c 2, torrents.groupName",
            "select torrents.artist-, torrents.groupName"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the artist/groups that released only one CD?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (only one, released), c1: totalsnatched, c2: artist (oner), c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What are the actors who have had releases after 2010?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE-GROUP BY",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE-GROUP BY",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ACT-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ACT-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What are the actors who have had releases after 2010?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "select t0.c2",
        "label": "select t0.c2",
        "score": true,
        "real_pred": "select torrents.artist",
        "real_label": "select torrents.artist",
        "topk_preds": [
            "select torrents.artist",
            "select distinct torrents.artist",
            "select torrents.artist, torrents.groupYear",
            "select torrents.artist, torrents.releaseType",
            "select torrents.artist, torrents.groupId",
            "select distinct torrents.artist, torrents.groupYear",
            "select torrents.artist, torrents.id",
            "select torrents.artist, t0.c7"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What are the actors who have had releases after 2010?, database: Database: WhatCDHipHop. t0: torrents(c0: groupname (released), c1: totalsnatched, c2: artist, c3: groupyear, c4: releasetype, c5: groupid, c6: id) (c6) refers to t1(c1). t1: tags(c0: index, c1: id, c2: tag).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "torrents",
        "real_label": "torrents",
        "topk_preds": [
            "torrents",
            "",
            "torrents tags",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the away team against Omiya Ardija in 2018?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam (Omiya Ardija), c7: awayteam (Omiya Ardija), c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE (ORDER BY-LIMIT)",
            "SELECT-FROM-WHERE-ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the away team against Omiya Ardija in 2018?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam (Omiya Ardija), c7: awayteam (Omiya Ardija), c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "select t1.c7",
        "label": "select t1.c7",
        "score": true,
        "real_pred": "select football_data.AwayTeam",
        "real_label": "select football_data.AwayTeam",
        "topk_preds": [
            "select football_data.AwayTeam",
            "select football_data.AwayTeam, football_data.HomeTeam",
            "select avg(football_data.AwayTeam)",
            "select football_data.AwayTeam, betfront.AWAY_OPENING",
            "select football_data.AwayTeam, betfront.HOME_OPENING",
            "select football_data.AwayTeam, betfront.COUNTRY",
            "select football_data.AwayTeam, football_data.BWH",
            "select football_data.AwayTeam, betfront.DATETIME"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the away team against Omiya Ardija in 2018?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam (Omiya Ardija), c7: awayteam (Omiya Ardija), c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "t0 t1",
        "label": "t1",
        "score": false,
        "real_pred": "betfront football_data",
        "real_label": "football_data",
        "topk_preds": [
            "betfront football_data",
            "",
            "",
            "",
            "football_data",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many matches in Spain in 2010?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country (spain), c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country (Spain), c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE (SQL-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE (SQL-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many matches in Spain in 2010?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country (spain), c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country (Spain), c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(betfront.MATCH)",
            "select count(*), betfront.COUNTRY",
            "select count(*), betfront.COUNTRY, football_data.Country",
            "select count(*), betfront.COUNTRY, betfront.MATCH",
            "select count(*), betfront.DATETIME, betfront.COUNTRY",
            "select count(*), betfront.COMPETION, betfront.MATCH",
            "select count(*), betfront.YEAR, football_data.Country"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many matches in Spain in 2010?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country (spain), c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country (Spain), c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "t0",
        "label": "t1",
        "score": false,
        "real_pred": "betfront",
        "real_label": "football_data",
        "topk_preds": [
            "betfront",
            "betfront football_data",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which matches has the highest draw opening so far?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "SELECT-FROM-ORDER BY-LIMIT",
        "label": "SELECT-FROM-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-ORDER BY-LIMIT (SELECT-FROM-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which matches has the highest draw opening so far?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "select t0.c4",
        "label": "select t0.c4",
        "score": true,
        "real_pred": "select betfront.MATCH",
        "real_label": "select betfront.MATCH",
        "topk_preds": [
            "select betfront.MATCH",
            "select betfront.MATCH, betfront.DRAW_OPENING",
            "select betfront.MATCH, betfront.HOME_OPENING",
            "select betfront.HOME_OPENING, betfront.DRAW_OPENING",
            "select betfront.DATETIME, betfront.COUNTRY",
            "select betfront.MATCH, betfront.COMPETION",
            "select betfront.DATETIME, betfront.MATCH",
            "select betfront.MATCH, betfront.AWAY_OPENING"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which matches has the highest draw opening so far?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "betfront",
        "real_label": "betfront",
        "topk_preds": [
            "betfront",
            "",
            "",
            "",
            "",
            "",
            "betfront football_data",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Which year has most matches?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "score": true,
        "real_pred": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "real_label": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT (SELECT-FROM-GROUP BY-LIMIT)",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT, SELECT-FROM-GROUP BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Which year has most matches?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "select t0.c0",
        "label": "select t0.c0",
        "score": true,
        "real_pred": "select betfront.YEAR",
        "real_label": "select betfront.YEAR",
        "topk_preds": [
            "select betfront.YEAR",
            "select betfront.YEAR, betfront.MATCH",
            "select betfront.YEAR, betfront.COMPETION, betfront.MATCH",
            "select betfront.YEAR, betfront.COUNTRY, betfront.MATCH",
            "select betfront.YEAR, betfront.DATETIME",
            "select betfront.YEAR, betfront.COUNTRY",
            "select betfront.YEAR, betfront.COMPETION",
            "select betfront.YEAR, betfront.DATETIME, betfront.MATCH"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Which year has most matches?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "t0",
        "label": "t0",
        "score": true,
        "real_pred": "betfront",
        "real_label": "betfront",
        "topk_preds": [
            "betfront",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many matches did Pinnacle have betting records?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many matches did Pinnacle have betting records?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(distinct betfront.MATCH)",
            "select count(betfront.MATCH)",
            "select count(*), betfront.MATCH",
            "select count(*), betfront.COUNTRY",
            "select count(*), betfront.COMPETION",
            "select count(*), betfront.HOME_OPENING",
            "select count(betfront.c4)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many matches did Pinnacle have betting records?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "t0",
        "label": "t1",
        "score": false,
        "real_pred": "betfront",
        "real_label": "football_data",
        "topk_preds": [
            "betfront",
            "",
            "betfront football_data",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many matches did Bet365 gives higher home win odds than Pinnacle?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam (Odd), c7: awayteam (Odd), c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many matches did Bet365 gives higher home win odds than Pinnacle?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam (Odd), c7: awayteam (Odd), c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), betfront.MATCH",
            "select count(*), football_data.HomeTeam",
            "select count(*), betfront.HOME_OPENING",
            "select count(distinct betfront.MATCH)",
            "select count(*) betfront.MATCH",
            "select count(*), t2.c0",
            "select count(betfront.MATCH)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many matches did Bet365 gives higher home win odds than Pinnacle?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam (Odd), c7: awayteam (Odd), c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "t0 t1",
        "label": "t1",
        "score": false,
        "real_pred": "betfront football_data",
        "real_label": "football_data",
        "topk_preds": [
            "betfront football_data",
            "betfront",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many games that the total number of goals exceed 5?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "SELECT-FROM-GROUP BY-HAVING",
        "label": "SELECT-FROM-WHERE",
        "score": false,
        "real_pred": "SELECT-FROM-GROUP BY-HAVING",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GAMES-GROUP BY-HAVING",
            "SELECT-FROM-GROUPS-GROUP BY-HAVING",
            "SELECT-FROM-GAMMA-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM a GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many games that the total number of goals exceed 5?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), betfront.MATCH",
            "select count(distinct betfront.MATCH)",
            "select count(betfront.MATCH)",
            "select count(*) dependant on betfront.MATCH",
            "select count(*), betfront.HOME_OPENING",
            "select count(*), betfront.COMPETION",
            "select count(*) the betfront.MATCH"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many games that the total number of goals exceed 5?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "t0",
        "label": "t1",
        "score": false,
        "real_pred": "betfront",
        "real_label": "football_data",
        "topk_preds": [
            "betfront",
            "betfront football_data",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What is the highest home losing odds in Bet365 ever?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam (Odd), c7: awayteam (Odd), c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM",
        "score": false,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-HIGH-ORDER BY-LIMIT",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-HIGH-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-HIGHEST"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What is the highest home losing odds in Bet365 ever?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam (Odd), c7: awayteam (Odd), c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "select max(t1.c6)",
        "label": "select max(t1.c19)",
        "score": false,
        "real_pred": "select max(football_data.HomeTeam)",
        "real_label": "select max(football_data.B365A)",
        "topk_preds": [
            "select max(football_data.HomeTeam)",
            "select min(football_data.HomeTeam)",
            "select football_data.HomeTeam",
            "select record(football_data.HomeTeam)",
            "select max(t2.c6)",
            "select betfront.DRAW_OPENING",
            "select max(football_data.AwayTeam)",
            "select betfront.HOME_OPENING"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What is the highest home losing odds in Bet365 ever?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam (Odd), c7: awayteam (Odd), c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "t0 t1",
        "label": "t1",
        "score": false,
        "real_pred": "betfront football_data",
        "real_label": "football_data",
        "topk_preds": [
            "betfront football_data",
            "football_data",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many number of games ended in a 0-0 tie?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE (count(*)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many number of games ended in a 0-0 tie?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "select count(*)",
        "label": "select count(*)",
        "score": true,
        "real_pred": "select count(*)",
        "real_label": "select count(*)",
        "topk_preds": [
            "select count(*)",
            "select count(*), betfront.MATCH",
            "select count(*), betfront.HOME_OPENING",
            "select count(*), betfront.COMPETION",
            "select count(*), betfront.DRAW_OPENING",
            "select count(*), betfront.AWAY_OPENING",
            "select count(*) I, betfront.MATCH",
            "select count(betfront.MATCH)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many number of games ended in a 0-0 tie?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "t0",
        "label": "t1",
        "score": false,
        "real_pred": "betfront",
        "real_label": "football_data",
        "topk_preds": [
            "betfront",
            "betfront football_data",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: How many league division does football_data database has?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league (Division 3, League 2), c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "SELECT-FROM",
        "label": "SELECT-FROM",
        "score": true,
        "real_pred": "SELECT-FROM",
        "real_label": "SELECT-FROM",
        "topk_preds": [
            "SELECT-FROM",
            "SELECT-FROM (Number(distinct t1.c2)",
            "SELECT-FROM (no. distinct t1.c2)",
            "SELECT-FROM (Num(distinct t1.c2)",
            "SELECT-FROM (Number(distinct t1.c4)",
            "SELECT-FROM (distinct t1.c2)",
            "SELECT-FROM (no. distinct t1.c4)",
            "SELECT-FROM (Num(distinct t1.c4)"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: How many league division does football_data database has?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league (Division 3, League 2), c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "select count(distinct t1.c2)",
        "label": "select count(t1.c2)",
        "score": false,
        "real_pred": "select count(distinct football_data.Div)",
        "real_label": "select count(football_data.Div)",
        "topk_preds": [
            "select count(distinct football_data.Div)",
            "select count(distinct football_data.League)",
            "select count(distinct football_data.Country)",
            "select count(distinct football_data.Referee)",
            "select count(distinct football_data.HomeTeam)",
            "select count(distinct t1.c)",
            "select count(distinct football_data.FTHG)",
            "select count (distinct football_data.Div)"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: How many league division does football_data database has?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country, c4: league (Division 3, League 2), c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "football_data",
        "real_label": "football_data",
        "topk_preds": [
            "football_data",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: Do other leagues have referee name records outside of Scotland and England?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country (england, scotland), c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country (England, Scotland), c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-ACT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: Do other leagues have referee name records outside of Scotland and England?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country (england, scotland), c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country (England, Scotland), c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "select t1.c4, t1.c5",
        "label": "select count(t1.c4)",
        "score": false,
        "real_pred": "select football_data.League, football_data.Referee",
        "real_label": "select count(football_data.League)",
        "topk_preds": [
            "select football_data.League, football_data.Referee",
            "select football_data.League",
            "select distinct football_data.Referee",
            "select other football_data.League, football_data.Referee",
            "select new football_data.League, football_data.Referee",
            "select football_data.Country, football_data.Referee",
            "select football_data.Country, football_data.League",
            "select football_data.League-, football_data.Referee"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: Do other leagues have referee name records outside of Scotland and England?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country (england, scotland), c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season, c1: datetime, c2: div, c3: country (England, Scotland), c4: league, c5: referee, c6: hometeam, c7: awayteam, c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "t1",
        "label": "t1",
        "score": true,
        "real_pred": "football_data",
        "real_label": "football_data",
        "topk_preds": [
            "football_data",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "input": "Translate the question into a SQL structure according to the database. question: What's the odds for draw on Bet365 for the game Swindon v.s. Millwall for 2016/2017 season?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season (2016/2017), c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam (Millwall, Swindon), c7: awayteam (Millwall, Swindon), c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "SELECT-FROM-WHERE",
        "label": "SELECT-FROM-WHERE",
        "score": true,
        "real_pred": "SELECT-FROM-WHERE",
        "real_label": "SELECT-FROM-WHERE",
        "topk_preds": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ]
    },
    {
        "input": "Generate the SELECT sub-clause of this question according to the database. question: What's the odds for draw on Bet365 for the game Swindon v.s. Millwall for 2016/2017 season?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season (2016/2017), c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam (Millwall, Swindon), c7: awayteam (Millwall, Swindon), c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "select t3.c6",
        "label": "select t1.c18",
        "score": false,
        "real_pred": "select t3.c6",
        "real_label": "select football_data.B365D",
        "topk_preds": [
            "select t3.c6",
            "select betfront.DRAW_OPENING",
            "select football_data.HomeTeam, football_data.AwayTeam",
            "select football_data.HomeTeam, football_data.BWA",
            "select football_data.HomeTeam, football_data.Div7",
            "select football_data.HomeTeam, football_data.BWH",
            "select football_data.HomeTeam, football_data.BWD",
            "select football_data.HomeTeam, football_data.B365H"
        ]
    },
    {
        "input": "Generate the relevant tables of this question according to the database. question: What's the odds for draw on Bet365 for the game Swindon v.s. Millwall for 2016/2017 season?, database: Database: WorldSoccerDataBase. t0: betfront(c0: year, c1: datetime, c2: country, c3: competion, c4: match, c5: home_opening, c6: draw_opening, c7: away_opening, c8: home_closing, c9: draw_closing, c10: away_closing). t1: football_data(c0: season (2016/2017), c1: datetime, c2: div, c3: country, c4: league, c5: referee, c6: hometeam (Millwall, Swindon), c7: awayteam (Millwall, Swindon), c8: fthg, c9: ftag, c10: ftr, c11: hthg, c12: htag, c13: htr, c14: psh, c15: psd, c16: psa, c17: b365h, c18: b365d, c19: b365a, c20: lbh, c21: lbd, c22: lba, c23: bwh, c24: bwd, c25: bwa).",
        "prediction": "t0 t1",
        "label": "t1",
        "score": false,
        "real_pred": "betfront football_data",
        "real_label": "football_data",
        "topk_preds": [
            "betfront football_data",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    }
]