[
    {
        "question": "What is the name and size of the stadium that recorded the highest average attendance?",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, avg(stadium.Average)",
            "select stadium.Location, stadium.Capacity",
            "select stadium.Stadium_ID, stadium.Name, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9916069507598877,
            9.235240577254444e-05,
            0.006844234652817249,
            6.404449231922626e-05,
            0.001364974188618362,
            7.159910455811769e-05,
            0.0021143932826817036,
            0.00010363588080508634
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the name of the singer and his or her nationality who sung the song 'Hey' as part of the name.",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select singer.Name, singer.Country, singer.Song_Name",
            "select singer.Name, singer.Country, singer.Singer_ID",
            "select singer.Name, singer.Country,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9721027612686157,
            0.000143956727697514,
            0.00025496972375549376,
            6.86653729644604e-05,
            0.00018741676467470825,
            7.094466855050996e-05,
            0.002750764600932598,
            7.430780533468351e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know the name of the singer and his or her nationality who sang the song 'Hey' as part of the name.",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select singer.Name, singer.Country, singer.Song_Name",
            "select singer.Name, singer.Country, singer.Singer_ID",
            "select singer.Name, singer.Country, max(singer.Song_Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9720472097396851,
            0.00018129980890080333,
            0.0004408801905810833,
            7.485508103854954e-05,
            0.00023635406978428364,
            7.712322985753417e-05,
            0.00018753207405097783,
            5.59112559130881e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the name of the singer and her nationality who sang the song 'Hey' as part of the name.",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select singer.Name, singer.Country, singer.Singer_ID",
            "select singer.Name, singer.Country, singer.Song_Name",
            "select singer.Name, singer.Country, max(singer.Song_Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9590263366699219,
            0.0001784871274139732,
            0.00017259674496017396,
            6.724071863573045e-05,
            0.00022101332433521748,
            6.657137419097126e-05,
            0.00013527701958082616,
            5.311173663358204e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the name of the singer and his or her nationality who sang the song 'Hey' as part of the name.",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select singer.Name, singer.Country, singer.Singer_ID",
            "select singer.Name, singer.Country, singer.Song_Name",
            "select singer.Name, singer.Country, max(singer.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.970280110836029,
            0.00014824529353063554,
            0.00019520566274877638,
            7.167664443841204e-05,
            0.00026364121004007757,
            6.94310074322857e-05,
            0.00017371335707139224,
            6.236990157049149e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The first names and sexes of the students who have more than one pet.",
        "gold_select": "select Student.Fname, Student.Sex",
        "select_candidates": [
            "select Student.Fname, Student.Sex",
            "select distinct Student.Fname, Student.Sex",
            "select Student.LName, Student.Sex",
            "select Student.Fname.c2, Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Student Has_Pet",
            "Student Pets"
        ],
        "align_scores": [
            0.9937601685523987,
            9.68270906014368e-05,
            0.0013565632980316877,
            5.863860860699788e-05,
            0.000654013070743531,
            7.28576778783463e-05,
            0.0002812752209138125,
            6.137525633675978e-05
        ],
        "align_select": "select Student.Fname, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the number of pets that weigh more than 10.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9901679754257202,
            0.00019511058053467423,
            0.00023244803014677018,
            0.001184307038784027,
            0.00023244803014677018,
            0.001184307038784027,
            0.00022968665871303529,
            0.021680917590856552
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many animals weigh more than 10 kgs?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*) the SELECT-FROM-WHERE"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9924184083938599,
            0.00033542842720635235,
            0.00028716985252685845,
            0.022581279277801514,
            0.00028716985252685845,
            0.022581279277801514,
            0.00045934884110465646,
            0.00010014858708018437
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know the weight of the youngest dog.",
        "gold_select": "select Pets.weight",
        "select_candidates": [
            "select Pets.weight",
            "select Pets.weight, Pets.pet_age",
            "select max(Pets.weight)",
            "select min(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9933978319168091,
            0.7656493186950684,
            0.0007980000809766352,
            0.00031254548230208457,
            0.00038212627987377346,
            0.0009173244470730424,
            0.0011804855894297361,
            0.9753427505493164
        ],
        "align_select": "select Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "I want you to find the maximum weight for each kind of pet. List them.",
        "gold_select": "select max(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, max(Pets.weight)",
            "select max(Pets.weight), Pets.PetType",
            "select maximum(Pets.weight), Pets.PetType",
            "select Pets.PetType.c1, max(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9935818910598755,
            0.0003351318300701678,
            0.9922888875007629,
            0.0001857237657532096,
            0.001177423051558435,
            0.00018829156761057675,
            0.0017082480480894446,
            0.00017563969595357776
        ],
        "align_select": "select Pets.PetType, max(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "I need to count the number of female dogs being raised by female students (gender F) if such information exists.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(*), Student.StuID",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9931952953338623,
            0.10645511746406555,
            0.00039089369238354266,
            0.2435348927974701,
            0.0004978105425834656,
            0.001318416208960116,
            0.00047232132055796683,
            0.00476623373106122
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For each category of pets, what is the average weight?",
        "gold_select": "select avg(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.weight)",
            "select avg(Pets.weight), Pets.PetType",
            "select Pets.PetType, avg(Pets.weight)",
            "select Pets.PetType.c1, avg(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9822558164596558,
            0.00030647762469016016,
            0.9917859435081482,
            0.00018057279521599412,
            0.9822558164596558,
            0.00030647762469016016,
            0.010553644970059395,
            0.00021788528829347342
        ],
        "align_select": "select Pets.PetType, avg(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Enter the names and sexes of students who have more than one pet below.",
        "gold_select": "select Student.Fname, Student.Sex",
        "select_candidates": [
            "select Student.Fname, Student.Sex",
            "select Student.Fname, Student.LName, Student.Sex",
            "select Student.Fname, Student.Age, Student.Sex",
            "select Student.LName, Student.Fname, Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Student Has_Pet",
            "Student Pets"
        ],
        "align_scores": [
            0.9730615615844727,
            0.00012005402095383033,
            0.9750714302062988,
            0.00012752512702718377,
            0.00015063460159581155,
            6.303900590864941e-05,
            0.9748083353042603,
            0.00013608667359221727
        ],
        "align_select": "select Student.Fname, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me information on the acceleration that the car makes when it has the AMC Hornet Sportabout (S).",
        "gold_select": "select cars_data.Accelerate",
        "select_candidates": [
            "select cars_data.Accelerate",
            "select avg(cars_data.Accelerate)",
            "select max(cars_data.Accelerate)",
            "select accel(cars_data.Accelerate)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9764337539672852,
            0.00014122862194199115,
            0.029835956171154976,
            6.236615445232019e-05,
            0.003982041496783495,
            6.789988401578739e-05,
            0.001013654051348567,
            7.808668306097388e-05
        ],
        "align_select": "select cars_data.Accelerate",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the acceleration value of the car that makes AMC Hornet Sportabout (SW)?",
        "gold_select": "select cars_data.Accelerate",
        "select_candidates": [
            "select avg(cars_data.Accelerate)",
            "select cars_data.Accelerate",
            "select cars_data.Id, avg(cars_data.Accelerate)",
            "select accel(cars_data.Accelerate)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.003054308006539941,
            6.425278843380511e-05,
            0.9695964455604553,
            0.00010361611930420622,
            0.0002827634452842176,
            6.220750219654292e-05,
            0.0010222820565104485,
            8.003898983588442e-05
        ],
        "align_select": "select cars_data.Accelerate",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the names of the car manufacturers that made cars in 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Id, car_makers.Maker, car_makers.FullName",
            "select car_makers.Id, car_makers.FullName, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "car_makers model_list car_names",
            "continents car_makers car_names"
        ],
        "align_scores": [
            0.00045327297993935645,
            7.298019045265391e-05,
            0.00035527313593775034,
            7.390083919744939e-05,
            0.00017129415937233716,
            7.49979808460921e-05,
            0.0001931282749865204,
            7.702893344685435e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the names of the car manufacturers who made cars in 1970.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Id, car_makers.FullName, car_makers.Maker",
            "select car_makers.Id, car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.0003792921779677272,
            6.571376434294507e-05,
            0.0003350056940689683,
            6.841203867224976e-05,
            0.00017293295240961015,
            6.968618254177272e-05,
            0.00015133574197534472,
            6.98608419043012e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What were the names of the car-manufacturers that produced cars in 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select distinct car_makers.FullName, car_makers.Maker",
            "select car_makers.Id, car_makers.FullName, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers car_names",
            "car_makers cars_data",
            "car_makers car_makers car_names cars_data",
            "car_makers model_list car_names",
            "car_makers model_list car_names cars_data"
        ],
        "align_scores": [
            0.0004417956224642694,
            6.951381510589272e-05,
            0.00040898227598518133,
            7.211577030830085e-05,
            0.0004408682289067656,
            6.684254913125187e-05,
            0.0001970585435628891,
            7.22525583114475e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which are the car manufacturers that produced a car in 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Maker, car_makers.FullName, car_makers.Country",
            "select car_makers.FullName, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9547979235649109,
            0.0004430605040397495,
            0.0004580067761708051,
            7.883291982579976e-05,
            0.00023510443861596286,
            6.740732351318002e-05,
            0.000574701523873955,
            7.97831016825512e-05
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which automobile company made cars in 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.FullName",
            "select car_makers.Maker",
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "model_list car_makers car_names cars_data",
            "car_makers car_names"
        ],
        "align_scores": [
            0.7539989948272705,
            0.0001806465006666258,
            0.9897005558013916,
            0.0001220703707076609,
            0.0003106670919805765,
            6.38220299151726e-05,
            0.00028337686671875417,
            6.689330621156842e-05
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of car manufacturers that made cars in 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Id, car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName, car_makers.Country"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "car_makers model_list car_names",
            "continents car_makers car_names"
        ],
        "align_scores": [
            0.00036247671232558787,
            6.782947457395494e-05,
            0.0003299004165455699,
            7.034571171971038e-05,
            0.0001787282817531377,
            7.112865569069982e-05,
            0.0001891190477181226,
            6.644168024649844e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In 1970, what manufacturer did they produce cars?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker",
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.FullName",
            "select car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_names cars_data",
            "countries car_makers car_names",
            "continents car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names"
        ],
        "align_scores": [
            0.8468493223190308,
            7.548076973762363e-05,
            0.00022199240629561245,
            6.38246419839561e-05,
            0.06544508785009384,
            0.00010241455311188474,
            0.00020762477652169764,
            6.75191986374557e-05
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need a list of car manufacturers who made a car in 1970.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Maker, car_makers.FullName, car_makers.Country",
            "select car_makers.Maker, car_makers.FullName, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_names cars_data",
            "continents car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_makers car_names cars_data",
            "car_makers car_names",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9421736001968384,
            0.005753058474510908,
            0.00035386663512326777,
            7.672468927921727e-05,
            0.00022495943994726986,
            6.744982238160446e-05,
            0.000163322314620018,
            6.987836968619376e-05
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much power does the car with the fastest acceleration have?",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select sum(cars_data.Horsepower)",
            "select cars_data.Horsepower, t5.diff(cars_data.Accelerate)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9913409352302551,
            8.182431338354945e-05,
            0.0008493694476783276,
            6.297844083746895e-05,
            0.4038878381252289,
            6.431795191019773e-05,
            0.0001741629675962031,
            8.868535951478407e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please indicate which car has the highest horsepower among those cars with the highest acceleration.",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model-, car_names.Make",
            "select car_names.Model, car_names.MakeId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "model_list cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.44162073731422424,
            0.0001639925321796909,
            0.0010361172026023269,
            6.762900011381134e-05,
            0.00041301065357401967,
            5.248784145805985e-05,
            0.0005065342993475497,
            7.442531932611018e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the horsepower of the car that has the most acceleration.",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select cars_data.Id, cars_data.Horsepower",
            "select cars_data.Id, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9895057082176208,
            7.586677384097129e-05,
            0.0006400857819244266,
            6.020360888214782e-05,
            0.0002371744194533676,
            6.929408118594438e-05,
            0.00019409984815865755,
            6.60772857372649e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which are all the manufacturers and models?",
        "gold_select": "select model_list.Maker, model_list.Model",
        "select_candidates": [
            "select model_list.Maker, model_list.Model",
            "select car_makers.Maker, model_list.Model",
            "select car_names.Make, model_list.Model",
            "select car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "model_list car_names",
            "car_makers model_list car_names",
            "car_makers model_list",
            "countries model_list car_names",
            "continents car_makers model_list car_names",
            "continents car_makers model_list",
            "countries model_list",
            "continents model_list car_names"
        ],
        "align_scores": [
            0.9897083640098572,
            0.00013998271606396884,
            0.9792910218238831,
            0.00012615985178854316,
            0.9139677286148071,
            0.00017027505964506418,
            0.000885748362634331,
            0.00020998837135266513
        ],
        "align_select": "select model_list.Maker, model_list.Model",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me all the brands and models?",
        "gold_select": "select model_list.Maker, model_list.Model",
        "select_candidates": [
            "select car_names.Make, car_names.Model",
            "select distinct car_names.Make, car_names.Model",
            "select count(distinct car_names.Make), count(distinct car_names.Model)",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "model_list car_names",
            "car_makers model_list car_names",
            "countries model_list car_names",
            "continents model_list car_names",
            "countries car_names",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9568483233451843,
            0.00015115288260858506,
            0.004587754141539335,
            0.00011396242189221084,
            0.013078094460070133,
            0.00010645698057487607,
            0.9887101054191589,
            0.00015431716747116297
        ],
        "align_select": "select car_names.Make, car_names.Model",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list all the brands and models here?",
        "gold_select": "select model_list.Maker, model_list.Model",
        "select_candidates": [
            "select car_names.Make, car_names.Model",
            "select distinct car_names.Make, car_names.Model",
            "select model_list.Model, model_list.Maker",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "model_list car_names",
            "car_makers model_list car_names",
            "countries model_list car_names",
            "continents model_list car_names",
            "countries car_names"
        ],
        "align_scores": [
            0.9568061828613281,
            0.00012422607687767595,
            0.00493660056963563,
            0.00012063883332302794,
            0.45575278997421265,
            0.00015319048543460667,
            0.9833663702011108,
            0.0001364456838928163
        ],
        "align_select": "select car_names.Make, car_names.Model",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list all the manufacturers and models.",
        "gold_select": "select model_list.Maker, model_list.Model",
        "select_candidates": [
            "select model_list.Maker, model_list.Model",
            "select car_makers.Maker, model_list.Model",
            "select car_names.Make, model_list.Model",
            "select car_names.Make, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "model_list car_names",
            "car_makers model_list car_names",
            "countries model_list car_names",
            "continents car_makers model_list car_names",
            "car_makers model_list",
            "continents car_makers model_list",
            "countries model_list",
            "model_list car_makers car_names"
        ],
        "align_scores": [
            0.9889206290245056,
            0.0017901882529258728,
            0.5168635845184326,
            0.0009704207186587155,
            0.7199141979217529,
            0.0019810693338513374,
            0.9864825010299683,
            0.003299689618870616
        ],
        "align_select": "select model_list.Maker, model_list.Model",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the makes as well as their models.",
        "gold_select": "select model_list.Maker, model_list.Model",
        "select_candidates": [
            "select car_names.Make, car_names.Model",
            "select car_names.Model, car_names.Make",
            "select model_list.Maker, model_list.Model",
            "select model_list.Maker, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "model_list car_names",
            "car_makers model_list car_names",
            "continents model_list car_names"
        ],
        "align_scores": [
            0.9944578409194946,
            0.10002239793539047,
            0.9942150712013245,
            0.921600341796875,
            0.9923290610313416,
            0.9725028276443481,
            0.3511216342449188,
            0.08864062279462814
        ],
        "align_select": "select car_names.Make, car_names.Model",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For each model that has three cylinders, list the maximum power output and the make of the car.",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select car_names.Model, max(cars_data.Horsepower), car_names.Make",
            "select car_names.Model, max(cars_data.Horsepower)",
            "select max(cars_data.Accelerate), car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9910298585891724,
            0.9739121198654175,
            0.06590180099010468,
            0.0016239593969658017,
            0.9953216910362244,
            0.9949724674224854,
            0.08417325466871262,
            0.04381923750042915
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "What are the highest power output and the brand for the three cylinder vehicles?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), car_names.Model",
            "select cars_data.Horsepower, car_names.Make",
            "select max(cars_data.Accelerate), car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9949374198913574,
            0.00013402134936768562,
            0.9959188103675842,
            0.00013984461838845164,
            0.49999019503593445,
            0.9943055510520935,
            0.990623414516449,
            0.00020272526307962835
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the max power output and the make of the cars which are three cylinder engines?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select avg(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Accelerate), car_names.Make",
            "select cars_data.Horsepower, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9935944676399231,
            0.00011815896141342819,
            0.00042299306369386613,
            8.09433258837089e-05,
            0.9741809368133545,
            0.00010861949704121798,
            0.9891259670257568,
            0.000166837839060463
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average mpg for the cars with four cylinders?",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9959378242492676,
            0.00011269513925071806,
            0.0004128610307816416,
            0.00010450709669385105,
            0.9959378242492676,
            0.00011269513925071806,
            0.9959378242492676,
            0.00011269513925071806
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need the average fuel efficiency of the cars with four cylinders.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9961638450622559,
            0.0001199306789203547,
            0.00042368739377707243,
            0.0001167818481917493,
            0.9961638450622559,
            0.0001199306789203547,
            0.9961638450622559,
            0.0001199306789203547
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "If some cars had been made in 1970, please let me know what manufacturers produced them.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Maker",
            "select car_makers.FullName",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "model_list car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.00039280494092963636,
            7.162526162574068e-05,
            0.8558471202850342,
            0.00012278470967430621,
            0.4984229505062103,
            0.0001790945534594357,
            0.0005239192396402359,
            8.98966463864781e-05
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the name of the producer of those made cars in the year 1970.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.FullName",
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.5893996357917786,
            0.0018217484466731548,
            0.00037670452729798853,
            8.414129843004048e-05,
            0.0003095793363172561,
            7.949162682052702e-05,
            0.9439501166343689,
            0.0015067934291437268
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Provide me the list of car producers that made their products back in the year 1970.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Maker, car_makers.FullName, car_makers.Country",
            "select car_makers.Maker, car_makers.FullName, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "model_list car_makers car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.841423749923706,
            0.0003306072612758726,
            0.00030480383429676294,
            7.664674922125414e-05,
            0.00023444229736924171,
            6.778679380659014e-05,
            0.00017649724031798542,
            6.595080776605755e-05
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to find the manufacturers of the automobiles that were made in the year 1970.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Maker, car_makers.FullName, car_makers.Country",
            "select car_makers.Maker, car_makers.FullName, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "car_names cars_data",
            "model_list car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "model_list car_names cars_data"
        ],
        "align_scores": [
            0.9913508892059326,
            0.00020637265697587281,
            0.0004507467965595424,
            7.666765304747969e-05,
            0.00042102750740014017,
            6.729048618581146e-05,
            0.00021647386893164366,
            6.862798909423873e-05
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the names of the producers who made an automobile in the year of 1970.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.FullName, car_makers.Maker",
            "select distinct car_makers.FullName, car_makers.Maker",
            "select distinct car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.00039703346556052566,
            7.086015830282122e-05,
            0.0004653609939850867,
            6.701027450617403e-05,
            0.0004012355930171907,
            5.871862231288105e-05,
            0.00036059037665836513,
            6.025173934176564e-05
        ],
        "align_select": "select car_makers.Maker, car_makers.FullName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please find the names of the manufacturers that made some vehicles in the year of 1970.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select distinct car_makers.FullName, car_makers.Maker",
            "select distinct car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.000565648078918457,
            7.35717621864751e-05,
            0.0004272465594112873,
            7.733702659606934e-05,
            0.00048922433052212,
            6.365748413372785e-05,
            0.00042692816350609064,
            6.66655832901597e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the names of car manufacturers that produced some cars in the year of 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.FullName, car_makers.Maker",
            "select distinct car_makers.FullName, car_makers.Maker",
            "select distinct car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_makers cars_data",
            "car_makers car_names"
        ],
        "align_scores": [
            0.0003984933428000659,
            0.00010291755461366847,
            0.00048192593385465443,
            0.00010721146827563643,
            0.0004241228161845356,
            7.892514258855954e-05,
            0.0003785965673159808,
            7.832577830413356e-05
        ],
        "align_select": "select car_makers.Maker, car_makers.FullName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the car manufacturers that made some vehicles in the year 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select distinct car_makers.FullName, car_makers.Maker",
            "select distinct car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "car_makers car_names"
        ],
        "align_scores": [
            0.0005566738545894623,
            7.551202725153416e-05,
            0.0004991645109839737,
            7.507669215556234e-05,
            0.00046641420340165496,
            6.419196142815053e-05,
            0.00040325793088413775,
            6.774835492251441e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me information about cars made by either the car-maker General Motors or weighing more than 3500 kg.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select *",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Make",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9796987771987915,
            0.00200091116130352,
            0.00041143212001770735,
            0.0001785106142051518,
            0.0003422103764023632,
            0.00014732833369635046,
            0.0024231465067714453,
            0.0016903452342376113
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The types of automobiles made either by the manufacturer General Motors (GM) or weighing more than 3.500 kg.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct car_names.Model",
            "select distinct car_names.Model, car_names.Make",
            "select car_names.Model",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names"
        ],
        "align_scores": [
            0.06478597223758698,
            0.00016051121929194778,
            0.0002703020581975579,
            8.63570676301606e-05,
            0.9488551020622253,
            0.004454051610082388,
            0.00022744029411114752,
            9.863304148893803e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The earliest year in which this car was manufactured was when and what make was it?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select cars_data.Year, car_names.Make",
            "select min(cars_data.Year), car_names.Make",
            "select max(cars_data.Year), car_names.Make",
            "select t4.c7, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.032780591398477554,
            6.86008352204226e-05,
            0.00012230724678374827,
            6.61150406813249e-05,
            0.0003733388730324805,
            7.196669321274385e-05,
            0.0004979213117621839,
            8.118047117022797e-05
        ],
        "align_select": "select cars_data.Year, car_names.Make",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What was the first year of production of that car and what company manufactured it?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select cars_data.Year, car_makers.FullName",
            "select cars_data.Year, car_makers.Maker",
            "select cars_data.Year, car_names.Make",
            "select cars_data.Year, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_names cars_data",
            "model_list car_makers car_names cars_data",
            "countries car_names cars_data",
            "model_list car_names cars_data"
        ],
        "align_scores": [
            0.31162819266319275,
            8.25020470074378e-05,
            0.13400746881961823,
            8.912340854294598e-05,
            0.03849457949399948,
            7.877242751419544e-05,
            0.0016027092933654785,
            6.156213203212246e-05
        ],
        "align_select": "select cars_data.Year, car_makers.FullName",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What car was produced in the earliest year and what year was that?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_names.Model, cars_data.Year",
            "select car_names.Make, cars_data.Year",
            "select car_names.MakeId, cars_data.Year",
            "select cars_data.MPG, cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data",
            "countries cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.98943030834198,
            7.258402911247686e-05,
            0.9877788424491882,
            7.023531361483037e-05,
            0.03222387284040451,
            6.718045915476978e-05,
            0.0007562519749626517,
            0.00010403956548543647
        ],
        "align_select": "select car_names.Model, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What was the make of the car manufactured in the earliest year and what was the year when it was made?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_names.Make, cars_data.Year",
            "select car_names.Model, cars_data.Year",
            "select car_names.MakeId, car_names.Make, cars_data.Year",
            "select car_makers.FullName, cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9877890944480896,
            7.509344140999019e-05,
            0.961043119430542,
            8.022436668397859e-05,
            0.0003893289540428668,
            6.473224493674934e-05,
            0.961125910282135,
            8.219562732847407e-05
        ],
        "align_select": "select car_names.Make, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "The first car that was manufactured by which company and when was it made?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_makers.Maker, cars_data.Year",
            "select car_makers.Maker, t4.c7",
            "select car_makers.FullName, t4.c7",
            "select car_makers.FullName, cars_data.Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_names cars_data",
            "countries car_makers car_names",
            "countries car_makers car_names cars_data",
            "car_names cars_data",
            "continents car_makers car_names cars_data",
            "model_list car_makers car_names cars_data",
            "model_list car_makers car_names"
        ],
        "align_scores": [
            0.9932689070701599,
            7.887675747042522e-05,
            0.0006426592590287328,
            9.400559065397829e-05,
            0.0007634843932464719,
            9.23880870686844e-05,
            0.9775153994560242,
            7.863013888709247e-05
        ],
        "align_select": "select car_makers.Maker, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What was the brand or company that manufactured the car made in the earlier year and what was the year when this car was first made?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_names.Make, cars_data.Year",
            "select car_names.Make, car_names.Model, cars_data.Year",
            "select car_names.Make, car_names.Model, t4.c7",
            "select car_names.Make, t4.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names"
        ],
        "align_scores": [
            0.42011094093322754,
            0.9443095922470093,
            0.01672147400677204,
            0.0017446032725274563,
            0.0003275277849752456,
            0.0004018202889710665,
            0.0007187842857092619,
            0.0007472385768778622
        ],
        "align_select": "select car_names.Make, cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the make (make = brand/model) of the car that was manufactured in the earliest year and what year did it come out?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_names.Make, cars_data.Year",
            "select car_names.Make, t4.c7",
            "select car_names.Model, t4.c7",
            "select car_names.Make, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9615687131881714,
            0.00011776851897593588,
            0.0007392075494863093,
            0.00010719388228608295,
            0.0007753976387903094,
            0.0001186353838420473,
            0.6652674078941345,
            0.00046893805847503245
        ],
        "align_select": "select car_names.Make, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "For the car manufactured in the earliest year, list the make that made it and in what year was it produced.",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_names.Make, cars_data.Year",
            "select car_names.Make, t4.c7",
            "select car_names.Model, t4.c7",
            "select car_names.Model, cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9867754578590393,
            8.21274661575444e-05,
            0.0006809273618273437,
            0.00010022328933700919,
            0.0008809590945020318,
            9.482867608312517e-05,
            0.7864929437637329,
            8.971277566161007e-05
        ],
        "align_select": "select car_names.Make, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Select for me models having the largest horse power among those that belong to four-cylinder engines.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Make",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "cars_data car_names"
        ],
        "align_scores": [
            0.9464598298072815,
            0.5965129733085632,
            0.8982630968093872,
            0.10718829929828644,
            0.0005627709906548262,
            0.00021599617321044207,
            0.0005250186077319086,
            0.0001999086089199409
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "How many vehicles have a larger acceleration rate than the vehicle with the highest horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Horsepower",
            "select count(distinct cars_data.Id)",
            "select count(*), cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9712828993797302,
            0.0008591584046371281,
            0.000459942762972787,
            0.00023895941558293998,
            0.0009031964000314474,
            8.058949606493115e-05,
            0.00042125931940972805,
            0.00015089208318386227
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like you to tell me about the cars with higher accelerations than the one that has the highest horsepower.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select cars_data.Id",
            "select cars_data.MPG",
            "select car_names.Model, car_names.Make",
            "select car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.0011868128785863519,
            0.0020703873597085476,
            0.0017515434883534908,
            0.0015558410668745637,
            0.00035718304570764303,
            0.0011358768679201603,
            0.009818644262850285,
            0.21396511793136597
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which car has a greater acceleration than the car that had the greatest horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select cars_data.MPG",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "cars_data car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.4585907757282257,
            8.759750926401466e-05,
            0.0007476067985408008,
            6.677227793261409e-05,
            0.0013728877529501915,
            7.555501360911876e-05,
            0.002965878462418914,
            7.248712063301355e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What kind of car has the least horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Make",
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9775224328041077,
            6.975406722631305e-05,
            0.9182996153831482,
            7.177732913987711e-05,
            0.0036838725209236145,
            5.530756607186049e-05,
            0.01686040498316288,
            5.753345976700075e-05
        ],
        "align_select": "select car_names.Make",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the model of the car that has the smallest amount of power?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents model_list car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9816557765007019,
            7.55558066884987e-05,
            0.9811477065086365,
            6.964931526454166e-05,
            0.0005168772186152637,
            5.646335193887353e-05,
            0.00035154903889633715,
            5.867295112693682e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Write down the model of the smallest-powered car please.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model",
            "select car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "countries car_names cars_data",
            "countries model_list cars_data",
            "continents model_list cars_data",
            "model_list cars_data car_names",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9926592707633972,
            0.9909238219261169,
            0.00023040652740746737,
            0.00017981372366193682,
            0.00035297611611895263,
            0.0002683224156498909,
            0.9940098524093628,
            0.9939279556274414
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please show me the model of the car that weighs less than the average.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Model, model_list.Model",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9721124172210693,
            0.8280491828918457,
            0.9827532768249512,
            0.887213945388794,
            0.00022277502284850925,
            0.0002849354350473732,
            0.0002149113133782521,
            0.0005071270861662924
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the models of cars that weigh less than the average one.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.Model, car_names.Model",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "countries car_names cars_data",
            "car_names cars_data",
            "continents model_list cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9799363613128662,
            0.00015926564810797572,
            0.9816946387290955,
            0.0001704670867184177,
            0.0003087495861109346,
            6.419111014110968e-05,
            0.0002543760638218373,
            6.949750968487933e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please find the model or make of the car that weighs below the average model.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model, car_names.Make",
            "select car_names.Model ou car_names.Make",
            "select distinct car_names.Model, car_names.Make",
            "select car_names.Make, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.8431099057197571,
            0.00010334070975659415,
            0.9784591197967529,
            0.0001304055767832324,
            0.021004844456911087,
            8.651606185594574e-05,
            0.8281275033950806,
            0.00011843418178614229
        ],
        "align_select": "select car_names.Model, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the model of the car that weighs less than the average one?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.978801965713501,
            0.9117785692214966,
            0.9855241179466248,
            0.9307317733764648,
            0.0002632438263390213,
            0.000554037222173065,
            0.00022228385205380619,
            0.0002904326538555324
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model for the car that weighs less than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9853830337524414,
            7.252646901179105e-05,
            0.9891576766967773,
            6.835243402747437e-05,
            0.00018859037663787603,
            6.024587491992861e-05,
            0.0001930426515173167,
            6.021015360602178e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the model and year of the car produced in the earliest years.",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_names.Model, cars_data.Year",
            "select car_names.Model, t4.c7",
            "select car_names.Model, cars_data.Year",
            "select car_makers.FullName, cars_data.Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9477298259735107,
            7.748245116090402e-05,
            0.0003939494490623474,
            8.607564814155921e-05,
            0.9477298259735107,
            7.748245116090402e-05,
            0.0004618675448000431,
            7.69493417465128e-05
        ],
        "align_select": "select car_names.Model, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What cars models were produced after 1980?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select distinct car_names.Model",
            "select model_list.Model",
            "select specific car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list car_names cars_data",
        "table_candidates": [
            "model_list car_names",
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_names",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9905650615692139,
            9.575216245139018e-05,
            0.04510285332798958,
            7.934925088193268e-05,
            0.9868451356887817,
            9.115271677728742e-05,
            0.0025107087567448616,
            7.992321479832754e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What models of cars have been manufactured since 1980?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select distinct car_names.Model",
            "select model_list.Model",
            "select distinct model_list.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list car_names",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "car_makers model_list car_names",
            "car_names"
        ],
        "align_scores": [
            0.9786473512649536,
            0.00011776199971791357,
            0.06681454926729202,
            0.00010140272934222594,
            0.9448955655097961,
            0.00010832252155523747,
            0.07534214854240417,
            9.232881711795926e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me which cars models were assembled after 1980.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select distinct car_names.Model",
            "select car_names.MakeId, car_names.Model",
            "select car_names.MakeId, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "model_list cars_data",
            "model_list car_names"
        ],
        "align_scores": [
            0.9912216663360596,
            9.893852984532714e-05,
            0.09247954189777374,
            0.00011614329559961334,
            0.0002707761595956981,
            7.536289194831625e-05,
            0.0002259812317788601,
            6.706588465021923e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me the acceleration value for the AMC Hornet Sportabout.",
        "gold_select": "select cars_data.Accelerate",
        "select_candidates": [
            "select avg(cars_data.Accelerate)",
            "select cars_data.Accelerate",
            "select accel(cars_data.Accelerate)",
            "select max(cars_data.Accelerate)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.0036291214637458324,
            5.6731325457803905e-05,
            0.9943016767501831,
            0.0001101372399716638,
            0.0010046671377494931,
            6.80526063661091e-05,
            0.0011250135721638799,
            6.340714026009664e-05
        ],
        "align_select": "select cars_data.Accelerate",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me about the acceleration of an AMC Hornet Sportabout (SW).",
        "gold_select": "select cars_data.Accelerate",
        "select_candidates": [
            "select avg(cars_data.Accelerate)",
            "select cars_data.Accelerate",
            "select max(cars_data.Accelerate)",
            "select accel(cars_data.Accelerate)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.009913047775626183,
            5.930675251875073e-05,
            0.9928183555603027,
            0.00011837908823508769,
            0.001066750381141901,
            6.669813592452556e-05,
            0.001017438480630517,
            6.992848648224026e-05
        ],
        "align_select": "select cars_data.Accelerate",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the cars that are equipped with four-cylinder engines, what is the average MPG?",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9940856695175171,
            0.00012772201444022357,
            0.9940856695175171,
            0.00012772201444022357,
            0.0004962932434864342,
            0.00011867428838741034,
            0.9940856695175171,
            0.00012772201444022357
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The average fuel efficiency for vehicles with four-cylinder engines is what?",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9958987832069397,
            0.00016537988267373294,
            0.0004463130026124418,
            0.00013811769895255566,
            0.9958987832069397,
            0.00016537988267373294,
            0.9958987832069397,
            0.00016537988267373294
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please provide the average miles per gallon for the cars with four cylinders.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.995859682559967,
            0.00016406823124270886,
            0.0004419384349603206,
            0.00012511946260929108,
            0.0004904322559013963,
            0.00011908284068340436,
            0.995859682559967,
            0.00016406823124270886
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me an approximate average miles per gallon value for all four-cylinder engine cars.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.99101722240448,
            0.00018649210687726736,
            0.00041506465640850365,
            0.00011704718781402335,
            0.99101722240448,
            0.00018649210687726736,
            0.99101722240448,
            0.00018649210687726736
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average miles per gallon for the four-cylinder engine?",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9964176416397095,
            0.00013593482435680926,
            0.0004277670232113451,
            0.00012239240459166467,
            0.0004740242147818208,
            0.00011430207814555615,
            0.9964176416397095,
            0.00013593482435680926
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much was the minimum weight for the eight-cylinder car made in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9883906841278076,
            7.887637912062928e-05,
            0.0001460350031265989,
            6.766872684238479e-05,
            0.00017614955140743405,
            6.361190025927499e-05,
            0.00023418581986334175,
            6.695910269627348e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Provide me the number of the cars that were made with engines over 150 HP's.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) dependant on cars_data.Id",
            "select count(*) depreciated car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "cars_data car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9809019565582275,
            0.0002988369669765234,
            0.00027507319464348257,
            0.007272355258464813,
            0.0006141446647234261,
            0.0004369226808194071,
            0.00031456415308639407,
            0.00018524941697251052
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the number of cars with an engine power larger than 150?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), t5.datum(cars_data.Id)",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9936752915382385,
            0.00010984680557157844,
            0.00022614933550357819,
            0.000671920133754611,
            0.0002150773216271773,
            0.0001372370752505958,
            0.0002086456079268828,
            0.00035093005863018334
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which model has the highest mpg?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "car_makers model_list cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents model_list cars_data"
        ],
        "align_scores": [
            0.9918639659881592,
            6.904521433170885e-05,
            0.9913662075996399,
            5.998972847010009e-05,
            0.00048007568693719804,
            5.800380677101202e-05,
            0.00029846769757568836,
            6.0727339587174356e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the models which can give the highest mileage for a gallon of gas consumed?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "countries model_list cars_data",
            "countries car_names cars_data",
            "continents model_list cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9438947439193726,
            6.522902549477294e-05,
            0.879989504814148,
            7.893342262832448e-05,
            0.0014128003967925906,
            6.726251740474254e-05,
            0.0005400991067290306,
            6.270326412050053e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which model has the highest mpg rating?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "continents model_list cars_data"
        ],
        "align_scores": [
            0.9869404435157776,
            7.135883060982451e-05,
            0.9845467209815979,
            6.319580279523507e-05,
            0.000538522785063833,
            5.935258377576247e-05,
            0.00030886795138940215,
            6.209595449035987e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What model offers the highest mileage?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "countries car_names cars_data",
            "continents model_list cars_data",
            "countries model_list cars_data",
            "car_names cars_data",
            "countries model_list car_names cars_data"
        ],
        "align_scores": [
            0.990796685218811,
            6.710920570185408e-05,
            0.9913267493247986,
            7.36324000172317e-05,
            0.000508759927470237,
            6.0489095631055534e-05,
            0.0003116201551165432,
            6.334531644824892e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the car model that has the best fuel economy.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model (car_names.Make)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9779896140098572,
            7.565855048596859e-05,
            0.00040062866173684597,
            6.0812351875938475e-05,
            0.0005560828140005469,
            6.556428706971928e-05,
            0.0020996069069951773,
            6.382860010489821e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "The model with the highest fuel efficiency is...",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "car_makers model_list cars_data",
            "countries model_list cars_data",
            "continents model_list cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9939397573471069,
            6.018535350449383e-05,
            0.9930612444877625,
            6.613742880290374e-05,
            0.00022061435447540134,
            6.08204172749538e-05,
            0.00025400693994015455,
            5.684618736268021e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What was the average power output of automobiles before 1980?",
        "gold_select": "select avg(cars_data.Horsepower)",
        "select_candidates": [
            "select avg(cars_data.Horsepower)",
            "select an avg(cars_data.Horsepower)",
            "select  avg(cars_data.Horsepower)",
            "select avg(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9960464835166931,
            0.0002199397567892447,
            0.0004272187070455402,
            0.000164069322636351,
            0.9960464835166931,
            0.0002199397567892447,
            0.9960464835166931,
            0.0002199397567892447
        ],
        "align_select": "select avg(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average engine power of cars before 1980.",
        "gold_select": "select avg(cars_data.Horsepower)",
        "select_candidates": [
            "select avg(cars_data.Horsepower)",
            "select an avg(cars_data.Horsepower)",
            "select  avg(cars_data.Horsepower)",
            "select avg(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9964433312416077,
            0.0001562591060064733,
            0.0003623671655077487,
            0.00013982687960378826,
            0.9964433312416077,
            0.0001562591060064733,
            0.9964433312416077,
            0.0001562591060064733
        ],
        "align_select": "select avg(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average power output for cars manufactured before 1980?",
        "gold_select": "select avg(cars_data.Horsepower)",
        "select_candidates": [
            "select avg(cars_data.Horsepower)",
            "select an avg(cars_data.Horsepower)",
            "select avg(avg(cars_data.Horsepower)",
            "select  avg(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9961400628089905,
            0.00011853881733259186,
            0.0004066760011482984,
            0.00011842920503113419,
            0.00046175133320502937,
            9.672981104813516e-05,
            0.9961400628089905,
            0.00011853881733259186
        ],
        "align_select": "select avg(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want to see the maximum acceleration for different numbers of cylinders.",
        "gold_select": "select max(cars_data.Accelerate), cars_data.Cylinders",
        "select_candidates": [
            "select max(cars_data.Accelerate), cars_data.Cylinders",
            "select cars_data.Cylinders, max(cars_data.Accelerate)",
            "select maximum(cars_data.Accelerate), cars_data.Cylinders",
            "select maxima(cars_data.Accelerate), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9949669241905212,
            0.00011711461411323398,
            0.9960021376609802,
            0.00015881647414062172,
            0.001208896399475634,
            0.00010556780034676194,
            0.0010765105253085494,
            0.00010016644228016958
        ],
        "align_select": "select max(cars_data.Accelerate), cars_data.Cylinders",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please list all of the maximum accelerations for each of the different cylinders.",
        "gold_select": "select max(cars_data.Accelerate), cars_data.Cylinders",
        "select_candidates": [
            "select max(cars_data.Accelerate), cars_data.Cylinders",
            "select cars_data.Cylinders, max(cars_data.Accelerate)",
            "select maximum(cars_data.Accelerate), cars_data.Cylinders",
            "select Max(cars_data.Accelerate), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.937458336353302,
            0.0001271439832635224,
            0.9938403367996216,
            0.00019586549024097621,
            0.0011829924769699574,
            0.0001261706493096426,
            0.937458336353302,
            0.0001271439832635224
        ],
        "align_select": "select max(cars_data.Accelerate), cars_data.Cylinders",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please provide the maximum acceleration for each cylinder.",
        "gold_select": "select max(cars_data.Accelerate), cars_data.Cylinders",
        "select_candidates": [
            "select max(cars_data.Accelerate), cars_data.Cylinders",
            "select cars_data.Cylinders, max(cars_data.Accelerate)",
            "select maximum(cars_data.Accelerate), cars_data.Cylinders",
            "select max(cars_data.Accelerate), cars_data.Cylinders."
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9944062232971191,
            0.00014894780179020017,
            0.9957008957862854,
            0.0001904254750115797,
            0.0014182323357090354,
            0.000117155046609696,
            0.0019024802604690194,
            0.00011536059901118279
        ],
        "align_select": "select max(cars_data.Accelerate), cars_data.Cylinders",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many four-cylinder engines are there on the roads?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.986422061920166,
            0.00035062109236605465,
            0.00037100998451933265,
            0.04610054939985275,
            0.00030136300483718514,
            0.0018564385827630758,
            0.00037951424019411206,
            0.0001714711106615141
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Identify all car models made by the company General Motors according to their weight exceeding 1,500 kilograms.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_makers.FullName",
            "select distinct car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_makers model_list cars_data",
            "car_makers model_list car_makers car_names",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.9620763063430786,
            0.00018908661149907857,
            0.9294463396072388,
            0.00020160416897851974,
            0.0002691253612283617,
            8.950189658207819e-05,
            0.03305651992559433,
            9.055923146661371e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "When was cars of the weight of 3,000 to 4,000 kg made.",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select t4.c7",
            "select t7.c7",
            "select t8.c7"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list cars_data",
            "countries car_names cars_data",
            "countries cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.99201899766922,
            0.00017693366680759937,
            0.0007186798029579222,
            8.675440767547116e-05,
            0.0004530962905846536,
            7.302920857910067e-05,
            0.0007445347146131098,
            7.853264105506241e-05
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Tell me about the years in which the cars weight less than 4000 and also cars weight more than 3000",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select cars_data.Year, t5.c8",
            "select cars_data.Year, cars_data.Accelerate",
            "select cars_data.Year, cars_data.MPG0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9933716058731079,
            0.12185212969779968,
            0.00021091602684464306,
            0.0001465072709834203,
            0.00016947262338362634,
            0.00011961067502852529,
            0.00011727397213689983,
            0.00010817884322023019
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "The model with the highest amount of power from the four cylindrical engines is.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, cars_data.Horsepower"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "continents model_list cars_data",
            "countries model_list cars_data",
            "car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9920146465301514,
            0.00011336564784869552,
            0.9908260703086853,
            0.00014681169704999775,
            0.00024041516007855535,
            7.321279554162174e-05,
            0.004353820811957121,
            7.577638461953029e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Of the four-cylinder cars, which model has the highest power output?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9864686727523804,
            0.00011804363020928577,
            0.0007329114014282823,
            7.213606295408681e-05,
            0.00045057563693262637,
            6.718392251059413e-05,
            0.0007258744444698095,
            8.539527334505692e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For all models that are four-cylinder engines, which model gives the most power?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, cars_data.Horsepower"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "countries model_list cars_data",
            "car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9242647886276245,
            0.00018136654398404062,
            0.9243990778923035,
            0.0001659001427469775,
            0.0005063590360805392,
            9.103439515456557e-05,
            0.0029609263874590397,
            9.264614345738664e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "The cars with more than lowest horsepower are those that don't have more than three cylinders. Please list the brand of the vehicle as well as the make id.",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.Make, car_names.MakeId",
            "select car_names.Model, car_names.MakeId",
            "select distinct car_names.Make, car_names.MakeId",
            "select car_names.Make, car_names.MakeId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "model_list cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.8825797438621521,
            0.0007256748504005373,
            0.0021661175414919853,
            0.00026420081849209964,
            0.023038970306515694,
            0.00014932721387594938,
            0.8825797438621521,
            0.0007256748504005373
        ],
        "align_select": "select car_names.Make, car_names.MakeId",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of the cars with eight cylinders or manufactured before 1980, what was the maximum mileage per gallon?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Cylinders",
            "select max(avg(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9922147393226624,
            0.0007493222365155816,
            0.00024440939887426794,
            9.908997890306637e-05,
            0.0017759520560503006,
            0.00010879644105443731,
            0.0001880841446109116,
            9.175566810881719e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the maximum mileage of vehicles with 8 cylinders or manufactured before 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Cylinders",
            "select max(cars_data.MPG), cars_data.Year",
            "select max(cars_data.MPG), cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9952738881111145,
            0.00012164031795691699,
            0.00015053038077894598,
            6.11080031376332e-05,
            0.00014780125638935715,
            5.8545909269014373e-05,
            0.0001881022471934557,
            5.891488035558723e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know the highest fuel economy for cars which were built before 1980 or had eight cylinders.",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Cylinders",
            "select cars_data.MPG",
            "select min(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "car_makers cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9932518601417542,
            0.00033155319397337735,
            0.000211319827940315,
            0.00012047672498738393,
            0.021228907629847527,
            0.8120357394218445,
            0.021726183593273163,
            0.000567702460102737
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For what manufacturer makes at least two models and produces more than three cars please give me their model IDs and manufacturer name.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select model_list.ModelId, car_makers.FullName",
            "select model_list.ModelId, car_makers.Maker",
            "select model_list.Model, car_makers.Maker",
            "select car_makers.Id, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "car_makers model_list car_makers car_names"
        ],
        "align_scores": [
            0.18614132702350616,
            0.015158850699663162,
            0.234197735786438,
            0.011217787861824036,
            0.49993258714675903,
            0.01962011121213436,
            0.0004023908404633403,
            0.00021246839605737478
        ],
        "align_select": "select model_list.Model, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Enter below the ids and names of all the companies which have at least two different models of cars produced in their factories as well as making more than three vehicles.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.FullName",
            "select car_makers.Id, car_makers.FullName, car_makers.Country",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Id, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.8580940961837769,
            0.8718348741531372,
            0.00014367219409905374,
            0.00017285811190959066,
            0.21270537376403809,
            0.03823550045490265,
            0.8598512411117554,
            0.8151135444641113
        ],
        "align_select": "select car_makers.Id, car_makers.FullName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please list the id and name of the countries that have at least three car manufacturers or produce cars under the model 'Fiat'.",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryId, countries.CountryName",
            "select car_makers.Id, countries.CountryName",
            "select countries.CountryId, countries.CountryName, car_makers.Country",
            "select countries.CountryName, countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries car_makers"
        ],
        "align_scores": [
            0.9844584465026855,
            0.3348519802093506,
            0.24431923031806946,
            0.023118870332837105,
            0.0005669661913998425,
            0.0007158711086958647,
            0.9863055944442749,
            0.34910646080970764
        ],
        "align_select": "select countries.CountryId, countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the acronym for JetBlue Airways?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline",
            "select avg(airlines.Abbreviation)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9942640662193298,
            0.00013319934078026563,
            0.00024481286527588964,
            6.223711534403265e-05,
            0.0002505347947590053,
            6.741496326867491e-05,
            0.000809895689599216,
            6.0629194194916636e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the short form of Airline \"JetBlue Airways\".",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline",
            "select airlines.Airline-, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9886584877967834,
            0.00012850410712417215,
            0.0002360757061978802,
            6.765659782104194e-05,
            0.000263702793745324,
            7.005350198596716e-05,
            0.00018603603530209512,
            6.779002433177084e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the short form for the full name of JetBlue Airways?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline",
            "select airlines.Abbreviation, airlines.Country"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.0002668070956133306,
            6.403973384294659e-05,
            0.971007227897644,
            0.00010812005348270759,
            0.000329756730934605,
            6.630786811001599e-05,
            0.00024092383682727814,
            6.319947715383023e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the numbers for the flights coming from Aberdeen?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select distinct flights.FlightNo",
            "select flights.FlightNo, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9952247142791748,
            0.00014193008246365935,
            0.00021086396009195596,
            6.166742241475731e-05,
            0.016910964623093605,
            8.57455816003494e-05,
            0.00014313957944978029,
            5.875738861504942e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like you to display (or return) the codes of the flights from Aberdeen Airport.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.AirportCode",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo (or return flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9920105934143066,
            0.3149590492248535,
            0.000261250592302531,
            0.00014128263865131885,
            0.00025624671252444386,
            0.00014358508633449674,
            0.49902862310409546,
            0.0001099909350159578
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find every company that has routes from both of airports' 'APG' and 'CVO'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select flights.FlightNo",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights",
            "flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9887210726737976,
            0.9887210726737976,
            0.9885278940200806,
            0.9885278940200806,
            0.2919565439224243,
            0.2919565439224243,
            0.0004187048471067101,
            0.0004187048471067101
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the list of all the companies which fly from both airports 'APG' and 'CVO'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select flights.FlightNo",
            "select flights.Airline, flights.SourceAirport",
            "select airlines.Airline"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights",
            "flights"
        ],
        "align_scores": [
            0.993465006351471,
            0.993465006351471,
            0.13584385812282562,
            0.13584385812282562,
            0.0002710871631279588,
            0.0002710871631279588,
            0.9932947754859924,
            0.9932947754859924
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the letters that correspond to Jetblue Airways?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline",
            "select airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.8642939329147339,
            9.286133717978373e-05,
            0.00025468351668678224,
            5.975621024845168e-05,
            0.00029741806793026626,
            6.253617175389081e-05,
            0.0560920350253582,
            8.918130333768204e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of the flights out of AHD, how many were 'United Airlines'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), flights.SourceAirport",
            "select count(*), airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "airlines airports"
        ],
        "align_scores": [
            0.9890784621238708,
            0.0003679276560433209,
            0.0003482740430627018,
            0.08263417333364487,
            0.00029390474082902074,
            0.0012588331010192633,
            0.0003482740430627018,
            0.08263417333364487
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of the flight out of AHD, how many are United Airlines?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select flights.Airline, count(*)",
            "select airlines.Airline, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9682000279426575,
            8.054724457906559e-05,
            0.0004387415829114616,
            6.573607970494777e-05,
            0.0014072988415136933,
            7.270747300935909e-05,
            0.0014564077137038112,
            7.502552034566179e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of all the flights coming out of 'AHD', how many were 'United Airlines'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), flights.SourceAirport",
            "select count(*), flights.SourceAirport, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9909906387329102,
            0.0015536124119535089,
            0.00040451696258969605,
            0.35386380553245544,
            0.00039234186988323927,
            0.0031966331880539656,
            0.00010810335515998304,
            0.0001855692098615691
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of the flights out of AHD, how many were United Airlines?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(distinct flights.Airline)",
            "select count(distinct flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9888719916343689,
            8.698734745848924e-05,
            0.0003727108705788851,
            6.550354009959847e-05,
            0.00232621724717319,
            7.355303387157619e-05,
            0.0023882475215941668,
            7.207899034256116e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many of the flights out of 'AHD' were United Airlines?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(distinct flights.Airline)",
            "select count(distinct flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9927634596824646,
            0.0008219648152589798,
            0.0003490292583592236,
            0.0005640314193442464,
            0.002595997415482998,
            8.951581548899412e-05,
            0.001249062130227685,
            0.00010190747707383707
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Provide all the numbers for all flights that are departing from Aberdeen.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.AirportName",
            "select distinct flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9815191030502319,
            0.00014729055692441761,
            0.00024258854682557285,
            6.149969703983516e-05,
            0.00018713051395025104,
            5.659186717821285e-05,
            0.0675821378827095,
            0.00013075920287519693
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me all the airlines that fly into 'AHD'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select flights.Airline, airlines.Airline",
            "select flights.Airline, flights.SourceAirport",
            "select airlines.Airline"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights",
            "flights"
        ],
        "align_scores": [
            0.9930003881454468,
            0.00014214598922990263,
            0.0003116320585832,
            7.379365706583485e-05,
            0.00016399800369981676,
            6.926627247594297e-05,
            0.9922089576721191,
            0.00014369477867148817
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the airlines that fly into 'AHD'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select flights.Airline, airlines.Airline"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.994088888168335,
            0.5607596635818481,
            0.9927918910980225,
            0.3903079628944397,
            0.0002569971256889403,
            0.00017118704272434115,
            0.00029545361758209765,
            0.00011958421237068251
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me all the information regarding to airlines landing at airport 'AHD'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select *",
            "select flights.Airline, flights.DestAirport",
            "select flights.Airline, flights.SourceAirport",
            "select detailed info(flights.Airline)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9898900985717773,
            0.00013984741235617548,
            0.0002202547329943627,
            0.00010077405022457242,
            0.0002836736966855824,
            0.0001366051728837192,
            0.0017039745580404997,
            0.00021527839999180287
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines fly into  AHD '?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, airports.AirportName",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.7460136413574219,
            0.03012153133749962,
            0.7879093885421753,
            0.025186307728290558,
            0.0001712902303552255,
            9.464059985475615e-05,
            0.00029361151973716915,
            0.0001308285427512601
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list all airlines that fly into 'AHD'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select flights.Airline, airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights",
            "flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9935519695281982,
            0.7894478440284729,
            0.992901086807251,
            0.7297489643096924,
            0.00029775372240692377,
            0.00012865896860603243,
            0.0002746457466855645,
            0.00017947422747965902
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I am interested in knowing about which companies operate flights to '' AHD ''.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select flights.Airline, flights.FlightNo",
            "select flights.Airline, flights.DestAirport",
            "select flights.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9036148190498352,
            0.9876726269721985,
            0.00020367599790915847,
            0.00013711884093936533,
            0.0013122988166287541,
            0.00022359067224897444,
            0.0005393639439716935,
            0.00018506844935473055
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airports doesn't have any outgoing or incoming flights?",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airports"
        ],
        "align_scores": [
            0.07411772757768631,
            0.873360812664032,
            0.010153217241168022,
            0.23058176040649414,
            0.0004859713662881404,
            0.001194641343317926,
            0.013860180042684078,
            0.2043135166168213
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Please tell me the airports that do not have any incoming or outgoing flight.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports",
            "airports flights"
        ],
        "align_scores": [
            0.027712849900126457,
            0.769279956817627,
            0.0069480352103710175,
            0.04170168191194534,
            0.0003668404242489487,
            0.000617088342551142,
            0.00734237814322114,
            0.029867999255657196
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Give me all the airports that do not have a flight taking off or landing at them.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airports"
        ],
        "align_scores": [
            0.08407136797904968,
            0.6631450057029724,
            0.005880031269043684,
            0.06128373369574547,
            0.00038355658762156963,
            0.00040334236109629273,
            0.007342079188674688,
            0.0339517667889595
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What are the names of the airports that do not have flights arriving into them and departing to them?",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportName, flights.SourceAirport",
            "select airports.AirportName, airports.Country",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airports"
        ],
        "align_scores": [
            0.3133336305618286,
            0.5488331913948059,
            0.0014407850103452802,
            0.0017919648671522737,
            0.00020941194088663906,
            0.00024189770920202136,
            0.0020794461015611887,
            0.0020025079138576984
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Of these airports, list the ones that have no incoming or outgoing flights.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports",
            "airports flights"
        ],
        "align_scores": [
            0.04644012078642845,
            0.5224646925926208,
            0.000430011103162542,
            0.0004961224040016532,
            0.0025469674728810787,
            0.033966220915317535,
            0.0033132790122181177,
            0.010081969201564789
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "I would like to find out if there are any airports without any incoming or outgoing flights.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportName, airports.AirportCode",
            "select airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airports"
        ],
        "align_scores": [
            0.03916829451918602,
            0.9165958166122437,
            0.0050634825602173805,
            0.18446485698223114,
            0.004190407693386078,
            0.10111293196678162,
            0.0007314865360967815,
            0.0010683758882805705
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which company does UAL belong to?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Country",
            "select airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9013040661811829,
            0.004291827324777842,
            0.0016161298844963312,
            0.0012501529417932034,
            0.5134173631668091,
            0.0024644299410283566,
            0.00019450299441814423,
            9.376333036925644e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need to find the acronym and country of the airline that had the least number of flights.",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.uid, airlines.Abbreviation, airlines.Country",
            "select airlines.Country, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9925369620323181,
            7.81165508669801e-05,
            0.001232502399943769,
            8.190971857402474e-05,
            0.0003735955979209393,
            7.35261055524461e-05,
            0.9936264753341675,
            8.367984992219135e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List airlines who had taken off from airport 'AHD'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select flights.Airline, flights.SourceAirport",
            "select flights.Airline, airlines.Airline"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9926924109458923,
            0.00015660739154554904,
            0.9920238256454468,
            0.000168691374710761,
            0.00016941205831244588,
            7.412669947370887e-05,
            0.0002604244218673557,
            7.562111568404362e-05
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines flew from Airport 'AHD'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select flights.FlightNo",
            "select airlines.Airline, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9941405653953552,
            0.0004106782143935561,
            0.9954050779342651,
            0.0012336276704445481,
            0.005478994455188513,
            0.015263357199728489,
            0.00018068250210490078,
            9.28445952013135e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Provide a list of airlines that fly to the airport of AHD.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, airports.AirportName",
            "select flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.9672525525093079,
            0.0004642975691240281,
            0.9730894565582275,
            0.001121850567869842,
            0.00016412082186434418,
            8.493907807860523e-05,
            0.002728142309933901,
            0.03187141939997673
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of the airlines having flights to AHD.'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country",
            "select airlines.Airline, flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.20682501792907715,
            0.000567236973438412,
            0.0002581245207693428,
            8.156131661962718e-05,
            0.00017445981211494654,
            9.614018199499696e-05,
            0.00030533730750903487,
            0.00010047217801911756
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all those airlines that fly out of CVO but not out of APG below.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select flights.Airline, airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines flights",
            "airports flights",
            "flights"
        ],
        "align_scores": [
            0.9356194734573364,
            0.9356194734573364,
            0.9597185254096985,
            0.9597185254096985,
            0.00035329489037394524,
            0.00035329489037394524,
            0.00046247951104305685,
            0.00046247951104305685
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me a list of the airlines which have flown out of CVO but not APG.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select flights.Airline, flights.SourceAirport",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "flights",
            "airports flights"
        ],
        "align_scores": [
            0.9337688684463501,
            0.9337688684463501,
            0.9563425183296204,
            0.9563425183296204,
            0.00026742008049041033,
            0.00026742008049041033,
            0.0005273607675917447,
            0.0005273607675917447
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "I need to find all airlines that fly out of 'CVO' but do not go out of 'APG'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select flights.Airline, airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "flights",
            "airports flights"
        ],
        "align_scores": [
            0.9952782392501831,
            0.9952782392501831,
            0.9947192668914795,
            0.9947192668914795,
            0.00029943243134766817,
            0.00029943243134766817,
            0.00032980606192722917,
            0.00032980606192722917
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "The flight numbers of the flights out of \"APG\" are listed below.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, flights.SourceAirport, flights.DestAirport",
            "select flights.FlightNo, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights"
        ],
        "align_scores": [
            0.9864258766174316,
            0.06213095411658287,
            0.00024395051877945662,
            0.00017641985323280096,
            0.00025531151914037764,
            0.00014197733253240585,
            0.00033166984212584794,
            0.00020481855608522892
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me the numbers of the flights flying out of APG.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.SourceAirport, flights.DestAirport",
            "select flights.FlightNo, flights.SourceAirport",
            "select count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9907621741294861,
            0.0001237549149664119,
            0.00030346630956046283,
            5.988410339341499e-05,
            0.00022208367590792477,
            6.113587005529553e-05,
            0.9926647543907166,
            9.174762817565352e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need the flight numbers for all flights that landed in 'APG'.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.DestAirport",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, flights.SourceAirport, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9941370487213135,
            0.00011082496348535642,
            0.00015260906366165727,
            5.917214002693072e-05,
            0.00015601195627823472,
            5.842249083798379e-05,
            0.0002815724874380976,
            5.657739893649705e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many stores are found at each area?",
        "gold_select": "select count(*), shop.Location",
        "select_candidates": [
            "select shop.Location, count(*)",
            "select shop.District, count(*)",
            "select shop.Location.c3, count(*)",
            "select shop_shop.Location, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9930967688560486,
            0.00020422223315108567,
            0.9906216859817505,
            0.0001509866415290162,
            0.0005808558198623359,
            0.0002051332121482119,
            0.004335696808993816,
            0.00014330427802633494
        ],
        "align_select": "select shop.Location, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What's the name of the boss and district of this store which sold the most products?",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Manager_name, shop.Location",
            "select shop.Location, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.8062378168106079,
            0.00010783330071717501,
            0.0019360956503078341,
            9.083235636353493e-05,
            0.8646824955940247,
            0.00016059420886449516,
            0.8201571702957153,
            0.00018573526176624
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the maximum and minimum number of items across all shops?",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select max(shop.Number_products), min(shop.Number_products)",
            "select max(t1.c6), min(shop.Number_products)",
            "select max(shop.Manager_name), min(shop.Number_products)",
            "select max(t1.c8), min(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9927855730056763,
            0.0001653827348491177,
            0.0005550880450755358,
            0.00010993210889864713,
            0.0005169032956473529,
            9.710910671856254e-05,
            0.0005144387832842767,
            0.00010131699673365802
        ],
        "align_select": "select max(shop.Number_products), min(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "The minimum and maximum number of goods across all the stores is given here.",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select min(shop.District), max(shop.Number_products)",
            "select min(shop.Location), max(shop.Number_products)",
            "select min(shop.Manager_name), max(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9913002848625183,
            8.034035272430629e-05,
            0.00038982994738034904,
            7.853451825212687e-05,
            0.0007456743041984737,
            0.00011588927736738697,
            0.00039223654312081635,
            9.475763363298029e-05
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please sort all the shops that contain products in descending order by product count, return the name of the store, the location of the store, and the name of its district.",
        "gold_select": "select shop.Name, shop.Location, shop.District",
        "select_candidates": [
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.District, shop.Location",
            "select shop.Name, shop.Location and shop.District",
            "select shop.Name, shop.Location, shop.District"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9873180985450745,
            0.6256939172744751,
            0.9883447885513306,
            0.7172408699989319,
            0.9763168096542358,
            0.11213178187608719,
            0.9873180985450745,
            0.6256939172744751
        ],
        "align_select": "select shop.Name, shop.Location, shop.District",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "For getting sorted shops, sort them by their total product count in descending order, and for each shop, list its name, location and the district where it is located.",
        "gold_select": "select shop.Name, shop.Location, shop.District",
        "select_candidates": [
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.Location and shop.District"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9929913282394409,
            0.9929913282394409,
            0.9929913282394409,
            0.9929913282394409,
            0.9929913282394409,
            0.9929913282394409,
            0.9924048781394958,
            0.9924048781394958
        ],
        "align_select": "select shop.Name, shop.Location, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Find the names of stores which have more products than the average product count.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9508804082870483,
            6.980130274314433e-05,
            0.0002499187830835581,
            7.405942596960813e-05,
            0.00020587112521752715,
            6.768770253984258e-05,
            0.00021162368648219854,
            6.059503721189685e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "To find the name of the store which sells in quantity of more than the average total number of items.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9228798747062683,
            0.7849688529968262,
            0.0005523649742826819,
            0.00021003362780902535,
            0.0004999635275453329,
            0.00020833748567383736,
            0.00036971925874240696,
            0.00019082189828623086
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Of the shops' products, which ones are above the average? Provide the names of those businesses.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Number_products",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring",
            "shop hiring evaluation",
            "shop evaluation"
        ],
        "align_scores": [
            0.036555007100105286,
            0.0002565811446402222,
            0.00020950000907760113,
            9.450964716961607e-05,
            0.00028840728919021785,
            0.00011701258335961029,
            0.00030328580760397017,
            0.00010920366912614554
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all template types and their description.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select t0.c2, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description."
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.0031428434886038303,
            0.0004381054895929992,
            0.00029777499730698764,
            0.00013330989168025553,
            0.0004066463152412325,
            0.00022078647452872247,
            0.0005317562026903033,
            0.00016710421186871827
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "I would like you to show me all template type ids and their descriptions.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Documents.Document_Name, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.02259867824614048,
            0.0006250041187740862,
            0.2562873065471649,
            0.0005388480494730175,
            0.003984410315752029,
            0.0014177333796396852,
            0.0002703569480217993,
            0.0002008076262427494
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please show all template type descriptions and their template types.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description, Templates.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Description, Documents.Document_Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types Templates",
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.9875997304916382,
            0.9873436689376831,
            0.9434142112731934,
            0.9621495604515076,
            0.9926931858062744,
            0.9691466689109802,
            0.0003759313840419054,
            0.0007004878716543317
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list all template types and their description.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select t0.c2, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description."
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.000838515697978437,
            0.00042222003685310483,
            0.00026245543267577887,
            0.00013514126476366073,
            0.0004610159667208791,
            0.0002163496392313391,
            0.00051114585949108,
            0.00015759727102704346
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the list of all template types as well as their description.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select t0.c2, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, t0.c2"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.00034229017910547554,
            0.00016795657575130463,
            0.00029430820723064244,
            9.99833137029782e-05,
            0.0003199292696081102,
            0.00015492104284930974,
            0.00020463429973460734,
            0.00015660110511817038
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please give me the codes, names and descriptions of all documents.",
        "gold_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Template_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Template_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Template_ID, Documents.Document_Description, Documents.Document_Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.0004349877417553216,
            0.00010462375939823687,
            0.5527329444885254,
            0.0001176229416159913,
            0.0004349877417553216,
            0.00010462375939823687,
            0.0005866028950549662,
            9.612203575670719e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all template types ids and their corresponding numbers of templates.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code.c2, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, count(**)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9957269430160522,
            0.00022240130056161433,
            0.0003436939441598952,
            0.00013127092097420245,
            0.00029156540404073894,
            0.00014396193728316575,
            0.9944045543670654,
            0.00021078212012071162
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "I need you to show me all template style code and their count for each template design.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, count(**)",
            "select Documents.Document_Name, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.021215377375483513,
            0.000351569993654266,
            0.0015151436673477292,
            0.00016403304471168667,
            0.026024745777249336,
            0.0003844417806249112,
            0.15908236801624298,
            0.0020086790900677443
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Enter all template type ids and the number of templates used for each.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select Templates.Template_Type_Code.c2, count(*)",
            "select Templates.Template_Type_Code, count(**)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9935958981513977,
            0.00030227695242501795,
            0.00035420749918557703,
            0.00015136590809561312,
            0.0003409064083825797,
            0.00013762732851319015,
            0.9919092059135437,
            0.00029252711101435125
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me a list of the codes for which template types described with \"Presentation.\"",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, t0.c2",
            "select t0.c, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9888142943382263,
            9.647226397646591e-05,
            0.00012844199954997748,
            6.337993545457721e-05,
            0.000320396909955889,
            8.080419502221048e-05,
            0.0002364925021538511,
            7.732390076853335e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me back the type ids of the template which has a description \"Book\"?",
        "gold_select": "select Ref_Template_Types.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9893316030502319,
            0.0001583788252901286,
            0.00016796843556221575,
            7.7235177741386e-05,
            0.3467654883861542,
            0.0001351902465103194,
            0.00028873191331513226,
            6.692406896036118e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please return the type ids of the template type, which has the description Book'.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types Templates",
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.9762699007987976,
            0.00011421557428548113,
            0.00021618983009830117,
            7.041315984679386e-05,
            0.00018794125935528427,
            7.441736670443788e-05,
            0.9629318714141846,
            9.819598926696926e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like you to send me the document ID, Template ID, and description for the Robbin CV document.",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID.c1, Documents.Document_Description",
            "select t2, Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID-, Documents.Template_ID, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9936099648475647,
            9.942104225046933e-05,
            0.002186864148825407,
            8.078030805336311e-05,
            0.0003479687438812107,
            6.797257083235309e-05,
            0.0017974379006773233,
            7.883412763476372e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Could you show me one of your document ID, Template ID as well as the Description of a document you created called 'Robbin CV'.",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID as well as Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID & Documents.Document_Description",
            "select t2, Documents.Document_ID, Documents.Template_ID, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.940647304058075,
            0.00011504061694722623,
            0.8067086338996887,
            0.00010574410407571122,
            0.885978102684021,
            9.198362386086956e-05,
            0.0002566350158303976,
            7.506937981816009e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the document ID, template ID, and the description of the document that has the title 'Robbin CV'.",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID.c1, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID & Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9943206310272217,
            0.0001225096348207444,
            0.006036058999598026,
            9.504550689598545e-05,
            0.959880530834198,
            9.260506340069696e-05,
            0.994114339351654,
            0.00018189995898865163
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want to see the IDs, versions, and type ids for each template.",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number.c1, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9937500357627869,
            8.529442129656672e-05,
            0.9937500357627869,
            8.529442129656672e-05,
            0.0026433670427650213,
            8.070308831520379e-05,
            0.9948638081550598,
            8.810601138975471e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the ids, versions, and type codes of all templates.",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number.c1, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9949729442596436,
            9.734339255373925e-05,
            0.9949729442596436,
            9.734339255373925e-05,
            0.0023163456935435534,
            7.774526602588594e-05,
            0.9953482747077942,
            8.401703234994784e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the ids of templates with the tag (PP)or (PPT)?",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Date_Effective_From",
            "select Templates.Template_ID, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Ref_Template_Types Templates",
            "Templates Documents Paragraphs",
            "Templates Documents"
        ],
        "align_scores": [
            0.9903439283370972,
            0.0014798527117818594,
            0.00012167884415248409,
            8.253178384620696e-05,
            0.00018555524002294987,
            8.564798918087035e-05,
            0.00016304300515912473,
            8.28104602987878e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I am looking for templates with template type ID PP or PPT",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_Details",
            "select Templates.Version_Number",
            "select Templates.Template_ID",
            "select Templates.Version_Number, Templates.Template_Type_Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.7239497900009155,
            0.001099603483453393,
            0.011663625948131084,
            0.0014839041978120804,
            0.035403940826654434,
            0.0010425359942018986,
            0.00016380376473534852,
            8.643286128062755e-05
        ],
        "align_select": "select Templates.Template_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For template CV code, how many templates are there?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Version_Number, count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select Templates.Template_ID, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.00032814190490171313,
            0.0002888370945584029,
            0.0002893635828513652,
            0.0001590216561453417,
            0.0002270611294079572,
            0.0004384332860354334,
            0.0003106200019828975,
            0.00017911453323904425
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know the amount of templates tagged with 'CV' below.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9926968216896057,
            0.00014414353063330054,
            0.00018972900579683483,
            0.0009936046553775668,
            0.0001619304093765095,
            0.0002084833540720865,
            0.00017001776723191142,
            0.0005682998453266919
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of all the template types, which one had a higher number of documents?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Version_Number",
            "select Templates.Template_Type_Code, Documents.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9628647565841675,
            0.00011243473272770643,
            0.0002117865951731801,
            5.9735863032983616e-05,
            0.000658983422908932,
            5.8021843869937584e-05,
            0.00033051930950023234,
            6.417256372515112e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What's the lowest version number as well as its corresponding model type code?",
        "gold_select": "select min(Templates.Version_Number), Templates.Template_Type_Code",
        "select_candidates": [
            "select min(Templates.Version_Number), min(Templates.Template_Type_Code)",
            "select min(Templates.Version_Number), Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select min(Templates.Version_Number)., min(Templates.Template_Type_Code)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.00018362971604801714,
            0.0002459175593685359,
            0.00015203737711999565,
            0.00010907025716733187,
            0.1473781317472458,
            0.769213080406189,
            0.00012260802031960338,
            0.00011131046630907804
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which template type is being used by the file named \"data base\"?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_ID",
            "select Ref_Template_Types.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.97672438621521,
            9.870538633549586e-05,
            0.02572290413081646,
            0.00010485986422281712,
            0.988183319568634,
            9.100159513764083e-05,
            0.023831967264413834,
            9.059603326022625e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The template type for the file named \"Data Base\" is...",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_ID",
            "select Templates.Version_Number",
            "select Ref_Template_Types.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9913699626922607,
            8.380818326259032e-05,
            0.004229647107422352,
            7.457485480699688e-05,
            0.00047177710803225636,
            6.898638093844056e-05,
            0.991063117980957,
            7.76688611949794e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the model type of the template associated with data base file?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_ID",
            "select Documents.Document_Name",
            "select Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.6898077130317688,
            0.00011542255379026756,
            0.0006653369637206197,
            0.0002004671114264056,
            0.0005419068038463593,
            0.00013132022286299616,
            0.0004515524778980762,
            8.220988820539787e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all template types and the number of files that use each type.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(Documents.Template_ID)",
            "select Templates.Template_Type_Code, count(*), Documents.Template_ID",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9945894479751587,
            0.00021815636137034744,
            0.003915087785571814,
            0.0001895635505206883,
            0.00018865476886276156,
            9.929106454364955e-05,
            0.0002546978648751974,
            0.00011460745736258104
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Display the template type ids for the templates which aren't currently being used by documents.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Templates"
        ],
        "align_scores": [
            0.9385455250740051,
            0.9484740495681763,
            0.0005163559690117836,
            0.00046803956502117217,
            0.00041956809582188725,
            0.000349312846083194,
            0.0006784254219383001,
            0.0005694677238352597
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you provide codes for template categories which have no documents associated with them?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Documents.Document_Description",
            "select Templates.Version_Number, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.4966427683830261,
            0.9852854609489441,
            0.000621252169366926,
            0.0003431890800129622,
            0.0011708077508956194,
            0.0009993754792958498,
            0.0003343949210830033,
            0.00031971008866094053
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please provide the type numbers and their accompanying descriptions for all of the listed template types.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select Documents.Document_Name, Ref_Template_Types.Template_Type_Description",
            "select t0.c2, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.0010979755315929651,
            0.0003009819774888456,
            0.6568010449409485,
            0.000928106252104044,
            0.0003917832800652832,
            0.00025020490284077823,
            0.0005384080577641726,
            0.00032612564973533154
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For every template type that you have, state their type numbers and definitions here.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select Documents.Document_Name, Ref_Template_Types.Template_Type_Description",
            "select Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types Templates",
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.0005236821016296744,
            0.00032446737168356776,
            0.004210941027849913,
            0.005423850379884243,
            0.00027112389216199517,
            0.00019892481213901192,
            0.0005247018416412175,
            0.0005584429600276053
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What template type descriptor is for template type code AD?",
        "gold_select": "select Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, t0.c2",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9961338043212891,
            6.682355160592124e-05,
            0.0001529923902126029,
            6.433960516005754e-05,
            0.0003388511831872165,
            8.407745917793363e-05,
            0.00012241318472661078,
            6.453519745264202e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the template type code for the template type described as \"Book\" here.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code",
            "select t0.c, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code (symbol Ref_Template_Types.Template_Type_Description)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9955310225486755,
            8.265190263045952e-05,
            0.0002160624717362225,
            7.8445220424328e-05,
            0.00014078023377805948,
            6.432070949813351e-05,
            0.00024698665947653353,
            8.326544775627553e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need to find the template IDs which describe Presentations.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select Templates.Template_ID, t0.c2",
            "select Templates.Template_ID, Ref_Template_Types.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9955331087112427,
            0.00017443268734496087,
            0.00039367389399558306,
            7.043028745101765e-05,
            0.00048642788897268474,
            7.384680066024885e-05,
            0.00020523044804576784,
            6.55760450172238e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For each presentation template that has a name of 'Presentation', return the code assigned to it.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_ID",
            "select Templates.Version_Number",
            "select Templates.Date_Effective_From"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.20689833164215088,
            0.00012687088747043163,
            0.9842798709869385,
            0.0003051731619052589,
            0.018099598586559296,
            0.00012624094961211085,
            0.0004077170742675662,
            6.665910041192546e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return to me the code for the Presentation Template.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Details",
            "select Documents.Document_Name",
            "select Templates.Template_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9187846779823303,
            0.00011479843669803813,
            0.5686527490615845,
            8.109243208309636e-05,
            0.09399351477622986,
            8.223474287660792e-05,
            0.0038820249028503895,
            8.889932360034436e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Could you count the number of paragraphs in the document called Summer Show?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(distinct Paragraphs.Paragraph_Text)",
            "select count(*), Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9950398802757263,
            8.211579552153125e-05,
            0.00017726091027725488,
            6.565795047208667e-05,
            0.0012420257553458214,
            7.021200872259215e-05,
            0.0001938056229846552,
            6.218454655027017e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me an exact count of the number of paragraphs in the document called Summer Show.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Document_Name",
            "select count(*), Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.994027853012085,
            9.551750554237515e-05,
            0.00015758254448883235,
            8.360687206732109e-05,
            0.000190367762115784,
            7.788663788232952e-05,
            0.00017986207967624068,
            7.984170224517584e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like you to count the number of paragraphs in the document titled 'Summer Show'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9951562881469727,
            7.868721877457574e-05,
            0.00015982518380042166,
            6.260616646613926e-05,
            0.00019436671573203057,
            6.948637746972963e-05,
            0.00030303580570034683,
            6.836376996943727e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show the additional information for the paragraph with'Korea '.",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9911096096038818,
            0.00011560296843526885,
            0.00028773059602826834,
            0.00010541168012423441,
            0.00019844420603476465,
            8.842838724376634e-05,
            0.0002064630389213562,
            0.00010703381849452853
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need further details on the paragraph that mentions the word Korea.",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9928981065750122,
            0.000147831131471321,
            0.00046181734069250524,
            9.610077540855855e-05,
            0.0003697480133268982,
            9.704487456474453e-05,
            0.0003190748975612223,
            8.902903209673241e-05
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please provide the details about the paragraph that contains the word Korea.",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9939659237861633,
            0.00013020665210206062,
            0.0003328536113258451,
            8.600335422670469e-05,
            0.00026276640710420907,
            9.12948526092805e-05,
            0.00038521437090821564,
            8.147083281073719e-05
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the paragraph that has the word Korea in it?",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID",
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.09416940063238144,
            0.00017393477901350707,
            0.0035981673281639814,
            0.00013780868903268129,
            0.9949369430541992,
            0.00010426570224808529,
            0.00015832085045985878,
            6.771262997062877e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to get more information on the paragraph that contains the word 'Korea'.",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9943189024925232,
            9.910178778227419e-05,
            0.00043911190005019307,
            9.317719377577305e-05,
            0.00037576319300569594,
            8.484096179017797e-05,
            0.00046689482405781746,
            8.526173769496381e-05
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please find the detail for the passage that mentions Korea below.",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9914109706878662,
            8.463975973427296e-05,
            0.0002573004167061299,
            6.779345858376473e-05,
            0.00020858754578512162,
            7.455645391019061e-05,
            0.00020680406305473298,
            7.589136657770723e-05
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me all the paragraphs that are in the document \"Customer Reviews\"",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Paragraphs.Document_ID",
            "select Paragraphs.Paragraph_Text, Paragraphs.Paragraph_ID",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9950270056724548,
            0.00018714694306254387,
            0.00014171941438689828,
            7.201303378678858e-05,
            0.0001661071873968467,
            7.652726344531402e-05,
            0.00030303120729513466,
            7.463014480890706e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the paragraphs with the phrase \"customer reviews\" as title.",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID",
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9662612676620483,
            8.183335739886388e-05,
            0.00032072028261609375,
            6.321268301689997e-05,
            0.0019100740319117904,
            9.323408448835835e-05,
            0.00016221786790993065,
            7.181033288361505e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list all paragraphs of the \"Customer Reviews\" document.",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Document_ID",
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9957102537155151,
            0.0001556045754114166,
            0.0002569679927546531,
            7.789754454279318e-05,
            0.00013223514542914927,
            7.029200060060248e-05,
            0.00019138732750434428,
            8.68153219926171e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all paragraphs from the document \"Customer Reviews\"",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Paragraphs.Paragraph_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.9962648749351501,
            0.00011549852206371725,
            0.0001233370421687141,
            6.505068449769169e-05,
            0.00019074641750194132,
            6.957642472116277e-05,
            0.00013126753037795424,
            6.476293492596596e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Below, you can find the ids of documents contain the content 'Brazil' and Ireland'.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9645183682441711,
            0.011511524207890034,
            0.969955325126648,
            0.01061223167926073,
            0.00017065019346773624,
            9.019072604132816e-05,
            0.00022294522204902023,
            9.287612920161337e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What's document IDs contain the paragraph containing the sentences Brazil and Ireland?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Paragraph_ID, Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.900304913520813,
            9.70219261944294e-05,
            0.0001183881176984869,
            6.161698547657579e-05,
            0.8320590257644653,
            0.00011269879905739799,
            0.00018118784646503627,
            8.031025208765641e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the ages and origins of every instructor listed.",
        "gold_select": "select teacher.Age, teacher.Hometown",
        "select_candidates": [
            "select teacher.Age, teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select distinct teacher.Age, teacher.Hometown",
            "select teacher.Age, teacher.Hometown, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9886742234230042,
            0.00010455504525452852,
            0.9920961856842041,
            0.00012925549526698887,
            0.012212664820253849,
            0.00010932745499303564,
            0.00019282392167951912,
            8.124428131850436e-05
        ],
        "align_select": "select teacher.Age, teacher.Hometown",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "I'd like to know each teacher's age along with his or her birthplace.",
        "gold_select": "select teacher.Age, teacher.Hometown",
        "select_candidates": [
            "select teacher.Age, teacher.Hometown",
            "select teacher.Teacher_ID, teacher.Age, teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9946017265319824,
            0.00010229390318272635,
            0.00027579112793318927,
            9.725367999635637e-05,
            0.9940442442893982,
            0.0001053674568538554,
            0.00044347246875986457,
            9.595315350452438e-05
        ],
        "align_select": "select teacher.Age, teacher.Hometown",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For each city, how many teachers are from there?",
        "gold_select": "select teacher.Hometown, count(*)",
        "select_candidates": [
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, count(*), teacher.Teacher_ID",
            "select teacher.Hometown.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9951549768447876,
            0.00032211514189839363,
            0.9951549768447876,
            0.00032211514189839363,
            0.00020141011918894947,
            0.00011447530414443463,
            0.0005176172708161175,
            0.000330007984302938
        ],
        "align_select": "select teacher.Hometown, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For every town, how many teachers are from there?",
        "gold_select": "select teacher.Hometown, count(*)",
        "select_candidates": [
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, count(*), teacher.Teacher_ID",
            "select count(*), teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9955713152885437,
            0.0003007097984664142,
            0.9955713152885437,
            0.0003007097984664142,
            0.00023875148326624185,
            0.00010305827163392678,
            0.9950690269470215,
            0.00026405625976622105
        ],
        "align_select": "select teacher.Hometown, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please show the names of the teachers and their classes they will be teaching.",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select course_arrange.Teacher_ID, course.Course",
            "select teacher.Name, course.Course, course_arrange.Teacher_ID",
            "select teacher.Name, course.Staring_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9879298210144043,
            0.9682450890541077,
            0.0009733485640026629,
            0.0007739920984022319,
            0.00015930361405480653,
            0.00017910325550474226,
            0.014945521019399166,
            0.009051996283233166
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list the names of the teachers and their teaching subjects below.",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course_arrange.Grade",
            "select teacher.Name, course.Course",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, t3.c2"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.0007616335060447454,
            0.0006482073804363608,
            0.9938507080078125,
            0.9813721179962158,
            0.00046180677600204945,
            0.0005555166862905025,
            0.002082560444250703,
            0.001305395271629095
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show all of the teacher's information such as their name and what classes they are teaching.",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Course, teacher.Hometown",
            "select distinct teacher.Name, course.Course",
            "select course_arrange.Teacher_ID, teacher.Name, course.Course"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.833636999130249,
            0.8846316337585449,
            0.00040786986937746406,
            0.000210463025723584,
            0.002144197002053261,
            0.0019068506080657244,
            0.00033199001336470246,
            0.00017575327365193516
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Enter teachers who are not born in Little Lever Urban District below.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Teacher_ID",
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.0030558721628040075,
            0.006013443227857351,
            0.6429471373558044,
            0.01120800245553255,
            0.00017602027219254524,
            0.00015348466695286334,
            0.00019454455468803644,
            0.00012050684017594904
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please enter teachers who were born outside Little Lever Urban District below.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Teacher_ID",
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.007197514176368713,
            0.00016298658738378435,
            0.8106622099876404,
            0.00019474831060506403,
            0.00019292304932605475,
            8.493672794429585e-05,
            0.0002201317111030221,
            8.413728937739506e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please enter teachers who were not born in Little Lever Urban District below.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Teacher_ID",
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.007941441610455513,
            0.00041681461152620614,
            0.8504470586776733,
            0.00040658359648659825,
            0.0002024751011049375,
            0.00010378917068010196,
            0.00020009167201351374,
            9.26287320908159e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to see the names of all teachers who were not born in Little Lever Urban District.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Name (or teacher.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.977665901184082,
            0.1140986755490303,
            0.0002115714451065287,
            0.000280188542092219,
            0.00016213839990086854,
            0.00016512730508111417,
            0.0005473354831337929,
            0.00059752247761935
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the names of the teachers whose birthplace was not Little Lever Urban District below.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Name - teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.7303436398506165,
            0.0001497898338129744,
            0.00024539264268241823,
            8.940515544964e-05,
            0.00019694246293511242,
            7.116156484698877e-05,
            0.00026265671476721764,
            7.769256626488641e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which are the teachers whose place of birth is not Little Lever Urban District?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.8798205852508545,
            0.005515281111001968,
            0.00021589321841020137,
            0.00012069094373146072,
            0.00020859509822912514,
            9.04384141904302e-05,
            0.014202876947820187,
            0.0035798654425889254
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know who are the teachers whose birthplace was not Little Lever Urban District.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Teacher_ID, teacher.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9645772576332092,
            0.0001889244158519432,
            0.00032797554740682244,
            8.616573177278042e-05,
            0.0002063779829768464,
            6.817199027864262e-05,
            0.00035337338340468705,
            8.366931433556601e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please enter the youngest teacher's city of origin below.",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Age, teacher.Hometown",
            "select teacher.Hometown, max(teacher.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9885048270225525,
            7.083421951392666e-05,
            0.00029182544676586986,
            6.98436560924165e-05,
            0.00024255963217001408,
            7.294526585610583e-05,
            0.0002357252815272659,
            7.020257908152416e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "I want to know which are the most common cities that some teachers come from.",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, t1.c4",
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.8352633118629456,
            8.627195347798988e-05,
            0.0007075532921589911,
            6.220204522833228e-05,
            0.0037700976245105267,
            5.7830715377349406e-05,
            0.00022455441649071872,
            5.530988710233942e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please show the name of the teacher taking math class.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Staring_Date",
            "select teacher.Name, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.982028603553772,
            0.0017231159145012498,
            0.0001553621987113729,
            8.53084129630588e-05,
            0.00023119035176932812,
            8.205224003177136e-05,
            0.0001520711521152407,
            8.069915929809213e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the name of the teacher who taught the math class.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, course_arrange.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9819880127906799,
            7.36666115699336e-05,
            0.00016238409443758428,
            5.798390702693723e-05,
            0.00017312828276772052,
            5.564031744142994e-05,
            0.00017778259643819183,
            6.20584178250283e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the name of your instructor for the Math class.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course_arrange.Teacher_ID",
            "select teacher.Name, course.Course",
            "select teacher.Name, course_arrange.Grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.957884669303894,
            7.485251262551174e-05,
            0.0001583995035616681,
            6.099971869844012e-05,
            0.00016204704297706485,
            5.938684262218885e-05,
            0.00017699101590551436,
            6.122343620518222e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the name of the person teaching the math class.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Course, teacher.Hometown",
            "select teacher.Name, course.Course, teacher.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9919334053993225,
            7.170398748712614e-05,
            0.00015616154996678233,
            5.9133330069016665e-05,
            0.00017508924065623432,
            6.0548598412424326e-05,
            0.00013696777750737965,
            6.199554627528414e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please display the name of the teacher for the maths class.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course_arrange.Teacher_ID",
            "select teacher.Name, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9943138360977173,
            8.267245721071959e-05,
            0.00015017567784525454,
            6.090247552492656e-05,
            0.00016611162573099136,
            6.417519762180746e-05,
            0.00017066630243789405,
            5.9402136685093865e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of people who are members but not higher than Level four, how old are they on average?",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select avg(visitor.Age)",
            "select an avg(visitor.Age)",
            "select  avg(visitor.Age)",
            "select Avg(visitor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.03741521015763283,
            0.00029901880770921707,
            0.000563931418582797,
            0.00022008489759173244,
            0.03741521015763283,
            0.00029901880770921707,
            0.03741521015763283,
            0.00029901880770921707
        ],
        "align_select": "select avg(visitor.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please find the names and levels of the people who are higher than level four and then sort them from oldest to youngest.",
        "gold_select": "select visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.Name, visitor.Level_of_membership, visitor.Age",
            "select visitor.Name, t1.c4",
            "select visitor.Name, visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9923721551895142,
            0.0009245961555279791,
            0.00038692649104632437,
            0.00010319989087292925,
            0.0006473272806033492,
            0.00020039717492181808,
            0.0009478493011556566,
            0.0002646717766765505
        ],
        "align_select": "select visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "What's the ID and name of the museum that has the highest number of employees?",
        "gold_select": "select museum.Museum_ID, museum.Name",
        "select_candidates": [
            "select museum.Museum_ID, museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Museum_ID, museum.Name, museum.Num_of_Staff",
            "select museum.Num_of_Staff, museum.Name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.5321404933929443,
            8.387325215153396e-05,
            0.5921599864959717,
            8.826730481814593e-05,
            0.00044413478462956846,
            7.560157973784953e-05,
            0.004323966801166534,
            7.551475573563948e-05
        ],
        "align_select": "select museum.Museum_ID, museum.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "please find the average number of employees which had been employed in the museums opened before 2009",
        "gold_select": "select avg(museum.Num_of_Staff)",
        "select_candidates": [
            "select avg(museum.Num_of_Staff)",
            "select avg(t0.c4)",
            "select an avg(museum.Num_of_Staff)",
            "select  avg(museum.Num_of_Staff)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9938279986381531,
            0.00019322680600453168,
            0.0009804589208215475,
            0.00017980480333790183,
            0.0004501462681218982,
            0.00013819491141475737,
            0.9938279986381531,
            0.00019322680600453168
        ],
        "align_select": "select avg(museum.Num_of_Staff)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The average number of employees working at the museums being built before 2009 should be mentioned.",
        "gold_select": "select avg(museum.Num_of_Staff)",
        "select_candidates": [
            "select avg(museum.Num_of_Staff)",
            "select avg(t0.c4)",
            "select an avg(museum.Num_of_Staff)",
            "select avg(museum.Open_Year)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9924769997596741,
            0.00022540496138390154,
            0.0009759346139617264,
            0.00018394201470073313,
            0.0004930167342536151,
            0.0001571602770127356,
            0.0007572074537165463,
            0.0002651898539625108
        ],
        "align_select": "select avg(museum.Num_of_Staff)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the year when the building now known as Plaza Museum opened and how many staff it had?",
        "gold_select": "select museum.Num_of_Staff, museum.Open_Year",
        "select_candidates": [
            "select museum.Open_Year, museum.Num_of_Staff",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Name, museum.Open_Year, museum.Num_of_Staff",
            "select museum.Museum_ID, museum.Open_Year, museum.Num_of_Staff"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9935903549194336,
            7.575543713755906e-05,
            0.001172273070551455,
            7.123318209778517e-05,
            0.00028784392634406686,
            6.496705464087427e-05,
            0.00022433507547248155,
            6.193544686539099e-05
        ],
        "align_select": "select museum.Open_Year, museum.Num_of_Staff",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please fill in the names of museums that had more staff than the amount for all museums established after 2010.",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Name, museum.Num_of_Staff, museum.Open_Year",
            "select museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.7138333916664124,
            0.0006163579528219998,
            0.00033078284468501806,
            8.097218960756436e-05,
            0.0001530583540443331,
            7.033471047179773e-05,
            0.00023789869737811387,
            9.103786578634754e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the list of museums with more staff members than the minimum amount of staff members for all museums opened after 2010.",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Museum_ID, museum.Name",
            "select museum.Museum_ID, museum.Name, museum.Num_of_Staff"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.3101661503314972,
            0.0002547143667470664,
            0.00027012222562916577,
            9.016605326905847e-05,
            0.0002932755451183766,
            0.00012192506255814806,
            0.000136001588543877,
            7.813583215465769e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please calculate the averages and maximums about num of ticket sold.",
        "gold_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "select_candidates": [
            "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
            "select avg(t2.c8), max(visit.Num_of_Ticket)",
            "select avg(t2.c6), max(visit.Num_of_Ticket)",
            "select avg(t2.c5), max(visit.Num_of_Ticket)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visit",
        "table_candidates": [
            "visit"
        ],
        "align_scores": [
            0.9912950992584229,
            9.470109216636047e-05,
            0.0006871717632748187,
            0.00010846371878869832,
            0.0006524541531689465,
            0.00011111523053841665,
            0.0006291370955295861,
            0.00011205957707716152
        ],
        "align_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find out the total amount of money that was spent on tickets for member level 1.",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent), visitor.ID",
            "select sum(visit.Total_spent), visitor.Level_of_membership",
            "select sum(visit.Total_spent) dependant on visitor.Level_of_membership"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9953722357749939,
            0.0003864907776005566,
            0.00013226452574599534,
            0.005534256808459759,
            0.00012684729881584644,
            0.010299508459866047,
            0.00024151380057446659,
            0.00011229801020817831
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The total amount of money spent on tickets for those who are at level 1 should be written here.",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent), visitor.ID",
            "select sum(visit.Total_spent) descripted in visitor.Name",
            "select sum(visit.Total_spent) descripted by visitor.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9896730184555054,
            0.000820659042801708,
            0.00014707553782500327,
            0.0020543262362480164,
            0.0005032113404013216,
            0.000421359931351617,
            0.00046315754298120737,
            0.0003711009048856795
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need to find out the total amount spent on tickets for the members of level 1.",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent), visitor.ID",
            "select sum(visit.Total_spent) descripted in visitor.ID",
            "select sum(visit.Total_spent) descripted in visitor.Level_of_membership"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9947294592857361,
            0.01641951873898506,
            0.00012955038982909173,
            0.002597839804366231,
            0.00044963040272705257,
            0.00031903080525808036,
            0.0005533801158890128,
            0.00025974304298870265
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me the total expenditure on tickets for those people whose membership level is one.",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent), visitor.ID",
            "select sum(visit.Total_spent), visitor.Name",
            "select sum(visit.Total_spent) descripted in visitor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.992344081401825,
            0.0040390100330114365,
            0.0001619301037862897,
            0.016718950122594833,
            0.00016759024583734572,
            0.010544761084020138,
            0.0005876790382899344,
            0.0007184969144873321
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The amount of money that was spent on tickets for the members who are in level one.",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent) denoted by visit.Num_of_Ticket",
            "select sum(visit.Total_spent) delegated to visit.Num_of_Ticket",
            "select sum(visit.Total_spent), visitor.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9015586376190186,
            7.9449346230831e-05,
            0.00040682294638827443,
            7.084833487169817e-05,
            0.0003298893861938268,
            7.050494605209678e-05,
            0.0001604849094292149,
            6.203605880727991e-05
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all those that won the most times, their names and their ranking points.",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select rankings.player_id, rankings.player_id7, rankings.ranking_points",
            "select matches.draw_size, players.last_name, rankings.ranking_points",
            "select rankings.player_id, players.first_name, players.last_name, rankings.ranking_points",
            "select matches.draw_size, matches.loser_age, rankings.ranking_points"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "rankings"
        ],
        "align_scores": [
            0.0002970734494738281,
            6.145753286546096e-05,
            0.00041826325468719006,
            8.771067950874567e-05,
            0.045485712587833405,
            7.659566472284496e-05,
            0.00022450409596785903,
            8.74332690727897e-05
        ],
        "align_select": "select rankings.player_id, rankings.player_id7, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please find the name and ranking points of the player who has won the most times.",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select players.first_name, players.last_name, rankings.ranking_points",
            "select rankings.ranking, rankings.player_id",
            "select matches.draw_size, players.last_name, rankings.ranking_points",
            "select t3.c1, players.first_name, players.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches rankings",
            "players rankings",
            "players matches"
        ],
        "align_scores": [
            0.991312563419342,
            9.52925329329446e-05,
            0.36479452252388,
            0.00010030972043750808,
            0.00028537423349916935,
            7.851137343095616e-05,
            0.0002625955967232585,
            7.494228339055553e-05
        ],
        "align_select": "select players.first_name, players.last_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please find the average rank for each player and his or her first name here.",
        "gold_select": "select avg(rankings.ranking), players.first_name",
        "select_candidates": [
            "select avg(rankings.ranking), players.first_name",
            "select rankings.ranking, players.first_name",
            "select players.player_id, players.first_name",
            "select players.player_id, players.first_name, avg(rankings.ranking)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9939945340156555,
            0.0001851183915277943,
            0.013043883256614208,
            0.0021051589865237474,
            0.0008292509010061622,
            0.021339720115065575,
            0.0019763363525271416,
            0.00013142357056494802
        ],
        "align_select": "select avg(rankings.ranking), players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the average age of people who lost and won during all matches.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age), avg(matches.winner_age)",
            "select avg(matches.loser_age), avg(matches.winner_age",
            "select avg(matches.loser_age), avg(matches.loser_age)",
            "select avg(matches.loser_age), avg(matches.loser_entry)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.8896740078926086,
            0.9919103980064392,
            0.5137914419174194,
            0.9596067667007446,
            0.0003849155909847468,
            0.0005866395658813417,
            0.00020461808890104294,
            0.00026093891938216984
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the average ages of players that lost (and won) each match.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age), avg(matches.winner_age)",
            "select avg(matches.loser_age), avg(matches.winner_age), matches.match_num",
            "select matches.loser_age, avg(matches.winner_age)",
            "select avg(matches.loser_age), avg(matches.loser_age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9948362112045288,
            0.00439127953723073,
            0.991381824016571,
            0.0006908758659847081,
            0.9855107069015503,
            0.0037449097726494074,
            0.000466074823634699,
            0.0002012018667301163
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "I am looking for the average age of those who lost and won in all games.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age), avg(matches.winner_age)",
            "select avg(matches.loser_age), avg(matches.winner_age",
            "select avg(matches.loser_age), avg(matches.loser_age)",
            "select avg(matches.loser_age), avg(matches.loser_entry)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.7887662649154663,
            0.0008311808342114091,
            0.33636292815208435,
            0.0004250452038832009,
            0.0004344146582297981,
            0.0001935457985382527,
            0.00023103784769773483,
            0.00010280231072101742
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "The average ages of players on the winning and losing sides of alll matches are listed here.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.winner_age, avg(matches.loser_age)",
            "select avg(matches.winner_age - matches.loser_age)",
            "select avg(matches.loser_age), matches.winner_age",
            "select avg(matches.winner_age - avg(matches.loser_age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.005524107255041599,
            0.00015224293747451156,
            0.008450244553387165,
            0.00019149592844769359,
            0.8801485896110535,
            0.00016077683540061116,
            0.0010975159239023924,
            0.00012044755567330867
        ],
        "align_select": "select avg(matches.loser_age), matches.winner_age",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "I would like to know the name of the winner who won the most matches and how many point he/she had.",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select matches.winner_name, matches.winner_rank_points",
            "select matches.winner_name, matches.winner_seed",
            "select matches.loser_name, matches.winner_rank_points",
            "select matches.loser_ioc, matches.winner_rank_points"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9816681742668152,
            0.00011471800826257095,
            0.0008397030760534108,
            6.459004362113774e-05,
            0.0007581284735351801,
            7.126988202799112e-05,
            0.00027758837677538395,
            5.606032209470868e-05
        ],
        "align_select": "select matches.winner_name, matches.winner_rank_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the name of the winner who had the highest rank points and participated in the Australian Open tournament.",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select matches.winner_name, rankings.ranking_points",
            "select matches.winner_name, rankings.player_id",
            "select matches.winner_name, matches.winner_rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9045314192771912,
            0.2804490625858307,
            0.000619754137005657,
            0.0010820872848853469,
            0.0004294241080060601,
            0.0005006466526538134,
            0.00033386709401383996,
            0.00034363954910077155
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you please find the name of the winner who had the highest rank points and played in the Australian Open tournament?",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select matches.winner_name, rankings.ranking_points",
            "select matches.winner_name, matches.winner_rank",
            "select matches.winner_name, matches.winner_ioc"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9030008316040039,
            0.054998915642499924,
            0.0007109985454007983,
            0.0010945704998448491,
            0.0004282149311620742,
            0.0003920006565749645,
            0.00042827968718484044,
            0.0002505132870282978
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name of the winner who had the highest rank points and played in the Australian Open tournament.",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select matches.winner_name, rankings.ranking_points",
            "select matches.winner_name, rankings.player_id",
            "select matches.winner_name, matches.winner_rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.8809582591056824,
            0.08364426344633102,
            0.0006983638741075993,
            0.0011371769942343235,
            0.0005303009529598057,
            0.0005463142297230661,
            0.0004129016015212983,
            0.0004035269666928798
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who was the winner who had the most points and was playing at the Australian Open tournament.",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select matches.winner_name, matches.winner_ioc",
            "select matches.winner_name, matches.winner_rank",
            "select matches.winner_name, matches.winner_rank_points"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.8837924599647522,
            0.9333601593971252,
            0.00042571144877001643,
            0.000323709798976779,
            0.00031343233422376215,
            0.0003305340651422739,
            0.0002740532800089568,
            0.00034861540189012885
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Let's find the winner and loser with the highest amount of time on the field of play in a particular game.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.winner_name, matches.loser_name",
            "select matches.winner_rank, matches.loser_rank",
            "select matches.winner_hand, matches.loser_name",
            "select matches.minutes, matches.loser_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9756636619567871,
            0.8339422345161438,
            0.8668424487113953,
            0.5754105448722839,
            0.025841964408755302,
            0.019758081063628197,
            0.0009593063150532544,
            0.0006894153775647283
        ],
        "align_select": "select matches.winner_name, matches.loser_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Let's find out the names of the loser and winner that were on the pitch for the longest time.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.loser_name, matches.winner_name",
            "select matches.loser_ioc, matches.loser_name",
            "select matches.loser_name, t1.c 27",
            "select matches.loser_name, matches.loser_ioc"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9744705557823181,
            0.0002693733258638531,
            0.0004893788136541843,
            9.574303112458438e-05,
            0.0004895728197880089,
            0.0001256002433365211,
            0.0005268104141578078,
            0.00011045853898394853
        ],
        "align_select": "select matches.loser_name, matches.winner_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please give the names of the player who won and lost for the longest duration of time.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select matches.winner_name, players.last_name",
            "select rankings.ranking, players.last_name",
            "select t3.c1, players.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.5225263237953186,
            0.9623036980628967,
            0.00048285876982845366,
            0.0005562298465520144,
            0.0003787173191085458,
            0.00026572917704470456,
            0.00044683495070785284,
            0.00014367479889187962
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please provide me information regarding the total score for each player and his or her first name.",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select sum(matches.score), players.first_name",
            "select matches.score, players.first_name",
            "select sum(matches.loser_ht), players.first_name",
            "select players.player_id, sum(matches.score)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9958051443099976,
            0.00032824990921653807,
            0.9936875700950623,
            0.012520607560873032,
            0.3560274839401245,
            0.0002506767341401428,
            0.0003321739786770195,
            0.00016527836851309985
        ],
        "align_select": "select sum(matches.score), players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "I need the total ranking score for each player and his or her first name.",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select sum(rankings.ranking), players.first_name",
            "select sum(rankings.ranking_points), players.first_name",
            "select rankings.ranking, players.first_name",
            "select sum(rankings.player_id), players.first_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9962460398674011,
            0.0002626506902743131,
            0.996396005153656,
            0.0002534848463255912,
            0.9886316657066345,
            0.0016066549578681588,
            0.0002325382229173556,
            0.0001629433681955561
        ],
        "align_select": "select sum(rankings.ranking), players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please find the first name, country code and birth date of the winner who was ranked the highest in all matches.",
        "gold_select": "select players.first_name, players.country_code, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.country_code, players.birth_date",
            "select players.first_name, players.birth_date, players.country_code",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.country_code, players.birth_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.9469716548919678,
            0.002189221093431115,
            0.9452699422836304,
            0.002784332260489464,
            0.0005474649369716644,
            0.00013262902211863548,
            0.9469716548919678,
            0.002189221093431115
        ],
        "align_select": "select players.first_name, players.country_code, players.birth_date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Search for the first name, country code and birth date of the player with the highest points after winning all matches.",
        "gold_select": "select players.first_name, players.country_code, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.country_code, players.birth_date",
            "select players.first_name, players.birth_date, players.country_code",
            "select players.first_name, players.country_code, players.birth_date",
            "select players.first_name, players.last_name, players.birth_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9788113236427307,
            0.9869039058685303,
            0.981391429901123,
            0.9878828525543213,
            0.9788113236427307,
            0.9869039058685303,
            0.00045945896999910474,
            0.0003313364286441356
        ],
        "align_select": "select players.first_name, players.country_code, players.birth_date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What was the number of people who were injured and killed by the ship with tonnage 't'?",
        "gold_select": "select death.killed, death.injured",
        "select_candidates": [
            "select death.injured, death.killed",
            "select sum(death.injured), sum(death.killed)",
            "select death.killed, death.injured",
            "select sum(death.killed), sum(death.killed)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death"
        ],
        "align_scores": [
            0.9918290972709656,
            0.00012948493531439453,
            0.9884125590324402,
            8.858503861119971e-05,
            0.9924575090408325,
            0.00011704953067237511,
            0.0003976378357037902,
            7.328957144636661e-05
        ],
        "align_select": "select death.injured, death.killed",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people died and were wounded in ships weighing  t'.",
        "gold_select": "select death.killed, death.injured",
        "select_candidates": [
            "select death.killed, death.injured",
            "select sum(death.killed), sum(death.injured)",
            "select death.caused_by_ship_id, death.killed, death.injured",
            "select death.note, death.killed, death.injured"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death"
        ],
        "align_scores": [
            0.9818708896636963,
            0.00011838089267257601,
            0.9490038752555847,
            8.936859376262873e-05,
            0.00022254660143516958,
            6.544559437315911e-05,
            0.00025813066167756915,
            7.300636934814975e-05
        ],
        "align_select": "select death.killed, death.injured",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people have died and been injured due to the ship with tonnage 't'?",
        "gold_select": "select death.killed, death.injured",
        "select_candidates": [
            "select death.killed, death.injured",
            "select sum(death.killed), sum(death.injured)",
            "select death.caused_by_ship_id, death.killed, death.injured",
            "select death.id, death.killed, death.injured"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death"
        ],
        "align_scores": [
            0.9914844632148743,
            0.0001531164307380095,
            0.9816790819168091,
            9.341402619611472e-05,
            0.0003478231083136052,
            8.409637666773051e-05,
            0.00026140359113924205,
            8.645842171972618e-05
        ],
        "align_select": "select death.killed, death.injured",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the highest and lowest number of people killed each incident?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select death.id, max(death.killed), min(death.killed)",
            "select death.caused_by_ship_id, max(death.killed), min(death.killed)",
            "select max(death.killed), min(death.killed), death.caused_by_ship_id",
            "select max(death.killed), min(death.killed), death.id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.9784212112426758,
            0.006044129375368357,
            0.2761708199977875,
            0.0008079423569142818,
            0.15949338674545288,
            0.0005938506801612675,
            0.3943776786327362,
            0.00039020320400595665
        ],
        "align_select": "select death.id, max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How high or low did casualties reach each time?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select death.killed, death.injured",
            "select max(death.killed), min(death.injured)",
            "select death.killed, death.injured, min(death.killed)",
            "select max(death.killed), min(death.killed)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.1521468311548233,
            0.011270951479673386,
            0.004792903549969196,
            0.0018530453089624643,
            0.0002647601068019867,
            0.00010641212429618463,
            0.8997385501861572,
            0.03910285606980324
        ],
        "align_select": "select max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Of the casualties, what is the maximum and minimum number of deaths?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select max(death.killed), min(death.killed)",
            "select max(death.injured), min(death.killed)",
            "select max(t2.c6), min(death.killed)",
            "select max(death.note), min(death.killed)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.9949373006820679,
            0.0008146259351633489,
            0.0005878190859220922,
            0.00033040743437595665,
            0.0005231372779235244,
            0.00010207875311607495,
            0.0005850428715348244,
            0.00018213009752798826
        ],
        "align_select": "select max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What's the highest and lowest number of death per incident?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select max(death.killed), min(death.killed)",
            "select max(death.injured), min(death.killed)",
            "select max(death.killed), min(death.injured)",
            "select max(t2.c6), min(death.killed)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.9929243326187134,
            0.9189679622650146,
            0.0010372783290222287,
            0.0007756467675790191,
            0.0045465389266610146,
            0.0015102928737178445,
            0.0004527015262283385,
            0.0003249468863941729
        ],
        "align_select": "select max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What was the highest and lowest number of deaths during each event?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select battle.name, max(death.killed), min(death.killed)",
            "select battle.date, max(death.killed), min(death.killed)",
            "select max(death.killed), min(death.killed), battle.date",
            "select battle.id, max(death.killed), min(death.killed)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "battle death",
            "battle ship death",
            "ship death"
        ],
        "align_scores": [
            0.9945307374000549,
            0.0002998426789417863,
            0.9711859822273254,
            0.00030864629661664367,
            0.018300266936421394,
            0.00017234428378287703,
            0.9940685033798218,
            0.0003676107444334775
        ],
        "align_select": "select battle.name, max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What were the battle IDs and names where the total number of deaths was more than 10?",
        "gold_select": "select battle.id, battle.name",
        "select_candidates": [
            "select battle.id, battle.name",
            "select battle.name, battle.id",
            "select battle.date, battle.name",
            "select death.id, battle.name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship death",
        "table_candidates": [
            "battle death"
        ],
        "align_scores": [
            0.1456838995218277,
            0.00013328903878573328,
            0.14398187398910522,
            0.00014409281720872968,
            0.0006589953554794192,
            6.973198469495401e-05,
            0.0012049800716340542,
            0.00010621970432111993
        ],
        "align_select": "select battle.id, battle.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the ids or names of battles that resulted in more than 10 deaths in total?",
        "gold_select": "select battle.id, battle.name",
        "select_candidates": [
            "select battle.id, battle.name",
            "select battle.name, battle.id",
            "select battle.id ou battle.name",
            "select battle.id / battle.name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship death",
        "table_candidates": [
            "battle death"
        ],
        "align_scores": [
            0.23944546282291412,
            0.00021978188306093216,
            0.2496470808982849,
            0.00045242111082188785,
            0.6669722199440002,
            0.0004554869665298611,
            0.5679330825805664,
            0.00034828565549105406
        ],
        "align_select": "select battle.id ou battle.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me the names of battles that Bulgarian officer Kaloyan fought against Latin officer Baldwin.",
        "gold_select": "select battle.name",
        "select_candidates": [
            "select battle.name",
            "select battle.name, battle.date",
            "select battle.name, battle.date, battle.bulgarian_commander",
            "select battle.name, battle.date, battle.latin_commander"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle",
            "battle ship",
            "battle death",
            "battle ship death"
        ],
        "align_scores": [
            0.9816799163818359,
            0.00023305698414333165,
            0.0003261837991885841,
            0.0001015098241623491,
            0.00014906059368513525,
            7.434246072079986e-05,
            0.000162446332979016,
            7.781150634400547e-05
        ],
        "align_select": "select battle.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the battle names which are between the Bulgarian leader, Kaloyan, and the Latin leader, Baldwin I.",
        "gold_select": "select battle.name",
        "select_candidates": [
            "select battle.name",
            "select battle.name, battle.bulgarian_commander, battle.latin_commander",
            "select battle.name, battle.date",
            "select battle.name, battle.date, battle.bulgarian_commander"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9863515496253967,
            0.00012416127719916403,
            0.00014635060506407171,
            7.66896628192626e-05,
            0.00023258323199115694,
            8.200006413972005e-05,
            0.00013936113100498915,
            7.192148768808693e-05
        ],
        "align_select": "select battle.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me further information on deaths that contain the word \"East\".",
        "gold_select": "select death.note",
        "select_candidates": [
            "select death.note",
            "select *",
            "select death.caused_by_ship_id, death.note",
            "select death.id, death.note"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death",
            "ship death"
        ],
        "align_scores": [
            0.9917068481445312,
            0.00034634885378181934,
            0.9504836797714233,
            0.00011594299576245248,
            0.00026604405138641596,
            8.267293014796451e-05,
            0.00023086348664946854,
            0.00015986512880772352
        ],
        "align_select": "select death.note",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the names and content of all the sections.",
        "gold_select": "select Sections.section_name, Sections.section_description",
        "select_candidates": [
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_name, Sections.section_description, Sections.other_details",
            "select Sections.section_name, Sections.section_description.",
            "select Sections.course_id, Sections.section_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections"
        ],
        "align_scores": [
            0.8667168021202087,
            0.002169019542634487,
            0.0050436328165233135,
            0.00028748626937158406,
            0.002186506288126111,
            0.0003444823669269681,
            0.00027862589922733605,
            0.0001634195214137435
        ],
        "align_select": "select Sections.section_name, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the descriptions for all math classes?",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select Courses.course_description, Courses.other_details",
            "select Courses.course_description, Courses.course_name",
            "select Courses.course_description, Courses.course_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Departments Sections",
            "Courses Departments Degree_Programs",
            "Courses Student_Enrolment",
            "Courses Departments"
        ],
        "align_scores": [
            0.9956964254379272,
            0.00010751459922175854,
            0.0001824673090595752,
            6.450006185332313e-05,
            0.00013123561802785844,
            6.613780715269968e-05,
            0.00012466264888644218,
            6.261793168960139e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I'm looking for all the addresses on line one and line two.",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.other_address_details",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3",
            "select Addresses.line_1, Addresses.line_2 - Addresses.other_address_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9949508905410767,
            6.415464304154739e-05,
            0.00017559817933943123,
            5.758363477070816e-05,
            0.00027407892048358917,
            5.9093079471495e-05,
            0.00029851263388991356,
            7.738593558315188e-05
        ],
        "align_select": "select Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please provide me with all the addresses including line one and two.",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3",
            "select Addresses.line_1, Addresses.line_2, Addresses.other_address_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9508710503578186,
            8.184725447790697e-05,
            0.00017565980670042336,
            7.559235382359475e-05,
            0.00044335960410535336,
            6.590026896446943e-05,
            0.00024470294010825455,
            5.941776908002794e-05
        ],
        "align_select": "select Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Enter the addresses that include the first line followed by the second line.",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.other_address_details",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id",
            "select Addresses.line_1, Addresses.line_2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9796072244644165,
            0.550295352935791,
            0.0001988136937143281,
            0.000136231305077672,
            0.059553828090429306,
            0.017340952530503273,
            0.9926655888557434,
            0.00043274773634038866
        ],
        "align_select": "select Addresses.other_address_details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are lines 1 and 2 of all addresses?",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select distinct Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9945023059844971,
            8.74763063620776e-05,
            0.00017261120956391096,
            7.005724910413846e-05,
            0.0014134766533970833,
            8.054816134972498e-05,
            0.00019597887876443565,
            6.631697760894895e-05
        ],
        "align_select": "select Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list all the sections and their relevant details here.",
        "gold_select": "select Sections.section_name, Sections.section_description",
        "select_candidates": [
            "select Sections.section_id, Sections.section_name, Sections.section_description, Sections.other_details",
            "select Sections.section_name, Sections.section_description, Sections.other_details",
            "select Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details",
            "select Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections"
        ],
        "align_scores": [
            0.0012953589903190732,
            0.00027124278130941093,
            0.9757866859436035,
            0.0017671013483777642,
            0.0004423993523232639,
            0.0001103260219679214,
            0.00023802326177246869,
            0.00013428587408270687
        ],
        "align_select": "select Sections.section_name, Sections.section_description, Sections.other_details",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the information on the department that uses the word \"computer\"?",
        "gold_select": "select Departments.department_description",
        "select_candidates": [
            "select Departments.department_description",
            "select Departments.other_details",
            "select t2.c4",
            "select t2.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments",
        "table_candidates": [
            "Departments",
            "Courses Departments",
            "Departments Degree_Programs",
            "Departments Transcripts",
            "Addresses Departments",
            "Departments Sections",
            "Departments Student_Enrolment"
        ],
        "align_scores": [
            0.991934061050415,
            0.00010971721349051222,
            0.981648325920105,
            0.00011397633352316916,
            0.000813647173345089,
            7.221665873657912e-05,
            0.0007111125160008669,
            7.130006270017475e-05
        ],
        "align_select": "select Departments.department_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The department which has the substring 'computers' should be described.",
        "gold_select": "select Departments.department_description",
        "select_candidates": [
            "select Departments.department_description",
            "select t2.c5, Departments.department_description",
            "select Departments.department_id, Departments.department_description",
            "select Departments.department_name, Departments.department_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments",
        "table_candidates": [
            "Departments",
            "Departments Transcripts",
            "Courses Departments",
            "Departments Student_Enrolment_Courses",
            "Addresses Departments",
            "Departments Student_Enrolment"
        ],
        "align_scores": [
            0.9952722191810608,
            0.00010732602822827175,
            0.00025579784414730966,
            6.588242104044184e-05,
            0.00014620386355090886,
            6.963244959479198e-05,
            0.0001798816374503076,
            6.72488022246398e-05
        ],
        "align_select": "select Departments.department_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For everybody enrolled in a bachelors program, what are the full names?",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.current_address_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.current_address_id, Students.middle_name, Students.last_name",
            "select distinct Students.first_name, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Departments Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Addresses Students Student_Enrolment"
        ],
        "align_scores": [
            0.989685595035553,
            0.00012217831681482494,
            0.0001887857506517321,
            7.12185210431926e-05,
            0.0003440488362684846,
            7.742158049950376e-05,
            0.007434035651385784,
            6.452042725868523e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please enter the mobile number of the student named Timmy Ward below.",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.cell_mobile_number, Students.date_first_registered",
            "select Students.cell_mobile_number, Students.ssn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment",
            "Addresses Students Student_Enrolment",
            "Semesters Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9936019778251648,
            0.00011552099749678746,
            0.00019322882872074842,
            6.25099492026493e-05,
            0.0001803267514333129,
            6.487574137281626e-05,
            0.00019499285554047674,
            7.179177191574126e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know the cell mobile number of the student named Timmothy Ward.",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.cell_mobile_number, Students.last_name",
            "select Students.cell_mobile_number, Students.date_first_registered"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Addresses Students Student_Enrolment",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.9947821497917175,
            0.00010802906035678461,
            0.00016105549002531916,
            6.022048546583392e-05,
            0.00014453193580266088,
            6.756852235412225e-05,
            0.00020028944709338248,
            6.208695413079113e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which cell number belongs to the student Timothy Ward?",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select t66.c6",
            "select t.c6",
            "select t62.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses",
            "Semesters Students",
            "Students Student_Enrolment",
            "Addresses Students",
            "Courses Students",
            "Sections Students",
            "Degree_Programs Students"
        ],
        "align_scores": [
            0.994051992893219,
            0.00011213589459657669,
            0.001563387457281351,
            0.00010598295193631202,
            0.9049476981163025,
            0.0001399212924297899,
            0.0016759192803874612,
            0.0001114441838581115
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Enter the cell phone number for the student named Timmothy Ward below.",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.cell_mobile_number, Students.first_name, Students.last_name",
            "select Students.cell_mobile_number, Students.email_address, Students.ssn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Addresses Students",
            "Semesters Students",
            "Degree_Programs Students",
            "Courses Students",
            "Sections Students"
        ],
        "align_scores": [
            0.9872265458106995,
            0.00011290552356513217,
            0.00017505150754004717,
            5.938049798714928e-05,
            0.0001898623740999028,
            6.908242357894778e-05,
            0.00017634869436733425,
            6.277325883274898e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the cellphone number of the student called Timothy Ward.",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.cell_mobile_number, Students.date_first_registered",
            "select Students.cell_mobile_number, Students.ssn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.993821382522583,
            0.00012460655125323683,
            0.0001750982628436759,
            6.0027949075447395e-05,
            0.00014901996473781765,
            6.111354741733521e-05,
            0.00020396438776515424,
            7.065624959068373e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "First name, middle name, surname - list those students who came first to be a student on this day.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students"
        ],
        "align_scores": [
            0.9673424363136292,
            0.9518992304801941,
            0.0003483816981315613,
            0.0002590495569165796,
            0.026557933539152145,
            0.012669792398810387,
            0.9673424363136292,
            0.9518992304801941
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please indicate when can be seen the first transcript and provide additional information.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t8.c5, t9.c6",
            "select t8.c5, t10.c6",
            "select t7.c9, Student_Enrolment.degree_program_id0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Transcripts",
            "Courses Student_Enrolment_Courses",
            "Student_Enrolment",
            "Courses",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.003222815226763487,
            6.94050540914759e-05,
            0.004003392998129129,
            7.24917626939714e-05,
            0.001120919012464583,
            6.91054156050086e-05,
            0.0004384744097478688,
            9.992136619985104e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please tell me when the first transcript was released and what information it contains.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t7.c9, Student_Enrolment.degree_program_id0",
            "select t10.c5, t10.c6",
            "select t7.c5, t7.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Addresses Transcripts",
            "Addresses Student_Enrolment_Courses",
            "Addresses",
            "Courses Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0022206634748727083,
            5.555511233978905e-05,
            0.0003749746538233012,
            7.522546366089955e-05,
            0.0029075019992887974,
            5.4793094022898003e-05,
            0.003522338578477502,
            5.497879828908481e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the earliest date of the transcript release, along with all the information about it?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t8.c5, t8.c6, t8.c7",
            "select t14.c5, t14.c6",
            "select t8.c5, t10.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.004042570013552904,
            6.0610294895013794e-05,
            0.020575856789946556,
            6.637827755184844e-05,
            0.0037885450292378664,
            6.034074613125995e-05,
            0.002333097392693162,
            5.995524043100886e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What's the earliest available transcript release, and can you tell me more information about it?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id",
            "select Transcripts.transcript_id, Transcripts.other_details",
            "select t9.c5, t9.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.01875646784901619,
            7.176801591413096e-05,
            0.001801924081519246,
            8.24212038423866e-05,
            0.004318951163440943,
            8.552035433240235e-05,
            0.031625211238861084,
            7.039731281111017e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "On which date was the first transcript released? Please give some more information on this.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5",
            "select t10.c5",
            "select t13.c5",
            "select t12.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Student_Enrolment",
            "Courses"
        ],
        "align_scores": [
            0.0014092138735577464,
            7.501107029384002e-05,
            0.0013367037754505873,
            7.40653631510213e-05,
            0.0014632458332926035,
            7.395879947580397e-05,
            0.0013660404365509748,
            7.40557661629282e-05
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "For the enrollment period, when was it for Master's students and Bachelor's students?",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Students.date_first_registered, Students.date_left",
            "select Students.current_address_id3, Students.current_address_id4",
            "select Student_Enrolment.degree_program_id3, Student_Enrolment.degree_program_id4",
            "select Student_Enrolment.degree_program_id3, Students.current_address_id4"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.00010009358811657876,
            0.002019817242398858,
            0.00030463014263659716,
            0.2769516408443451,
            0.00019254174549132586,
            0.007323135621845722,
            0.0001228891924256459,
            0.00018873930093832314
        ],
        "align_select": "select Students.current_address_id3, Students.current_address_id4",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Please tell me which other information you know about the students in reverse alphabetical order.",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select Students.other_student_details",
            "select Students.last_name, Students.first_name",
            "select Student_Enrolment_Courses.course_id, Students.permanent_address_id",
            "select Student_Enrolment_Courses.course_id, Students.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students"
        ],
        "align_scores": [
            0.9863905906677246,
            0.9863905906677246,
            0.0004888906260021031,
            0.0004888906260021031,
            0.0002287600073032081,
            0.0002287600073032081,
            0.00022055566660128534,
            0.00022055566660128534
        ],
        "align_select": "select Students.other_student_details",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What information do you have on the students that are in reverse alphabetical order please?",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select *",
            "select Students.current_address_id3, Students.current_address_id4",
            "select Students.last_name, Students.first_name",
            "select *, Students.first_name, Students.middle_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9834820032119751,
            0.9661091566085815,
            0.0019621404353529215,
            0.0006318303057923913,
            0.002660438185557723,
            0.00898860115557909,
            0.00030071267974562943,
            0.00024168286472558975
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you give me some more information about the students in reverse alphabetical order?",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select *",
            "select Students.current_address_id3, Students.current_address_id4",
            "select Student_Enrolment_Courses.course_id, Students.first_name, Students.last_name",
            "select Student_Enrolment_Courses.course_id, Students.first_name, Students.middle_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment",
            "Semesters Students Student_Enrolment_Courses",
            "Semesters Students"
        ],
        "align_scores": [
            0.9782649278640747,
            0.9782649278640747,
            0.0006931010284461081,
            0.0006931010284461081,
            0.00018256423936691135,
            0.00018256423936691135,
            0.0001806609652703628,
            0.0001806609652703628
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you provide more information on the students in reverse alphabetical order?",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select *",
            "select Student_Enrolment_Courses.course_id, Students.first_name, Students.middle_name",
            "select Student_Enrolment_Courses.course_id, Students.first_name, Students.last_name",
            "select Students.current_address_id3, Students.current_address_id4"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment",
            "Semesters Students",
            "Semesters Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9307539463043213,
            0.000367606378858909,
            0.00016409842646680772,
            0.0001512575545348227,
            0.0001642607821850106,
            0.00014178306446410716,
            0.0007229832117445767,
            0.00011103462747996673
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you tell me more information about students in reverse alphabetical order?",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select *",
            "select Students.last_name, Students.first_name",
            "select Students.current_address_id3, Students.current_address_id4",
            "select Student_Enrolment_Courses.course_id, Students.first_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students",
            "Courses Students"
        ],
        "align_scores": [
            0.9736781120300293,
            0.004055685829371214,
            0.0018058116547763348,
            0.00015335022180806845,
            0.0008805856923572719,
            0.00015311804600059986,
            0.000161365358508192,
            0.0001050779756042175
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Explain what the section h' means.",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select Sections.section_name",
            "select Sections.course_id",
            "select Sections.section_description",
            "select Sections.section_id, Sections.section_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Student_Enrolment",
            "Degree_Programs Sections",
            "Degree_Programs Student_Enrolment",
            "Degree_Programs Transcripts",
            "Courses Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts"
        ],
        "align_scores": [
            0.10253641754388809,
            6.59984361846e-05,
            0.0011891326867043972,
            7.577616634080186e-05,
            0.9743704795837402,
            7.061313954181969e-05,
            0.00011737533350242302,
            5.6033011787803844e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give us information about section H.",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select *",
            "select Sections.section_name",
            "select Sections.section_name, Sections.section_description",
            "select Sections.course_id, Sections.section_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Degree_Programs Sections",
            "Departments Sections",
            "Addresses Sections",
            "Courses Sections",
            "Courses Student_Enrolment",
            "Departments Student_Enrolment",
            "Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9902961850166321,
            6.271056190598756e-05,
            0.018859107047319412,
            6.562808994203806e-05,
            0.0003358095418661833,
            5.8626865211408585e-05,
            0.00017437516362406313,
            5.757407416240312e-05
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Describe this section called h below.",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_name, Sections.section_description",
            "select Sections.course_id, Sections.section_description",
            "select Sections.section_description, Sections.section_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Sections",
            "Addresses Courses Departments Sections",
            "Addresses Departments Sections",
            "Addresses Courses Sections",
            "Addresses Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.996431827545166,
            7.232079224195331e-05,
            0.00016450513794552535,
            6.217784539330751e-05,
            0.00014301254122983664,
            5.9677273384295404e-05,
            0.0001254770759260282,
            5.699622488464229e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please describe the section named h below.",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_name, Sections.section_description",
            "select Sections.course_id, Sections.section_description",
            "select Sections.section_description, Sections.section_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Courses Departments Sections",
            "Addresses Departments Sections",
            "Addresses Sections",
            "Addresses Courses Sections"
        ],
        "align_scores": [
            0.995978593826294,
            7.355127308983356e-05,
            0.00016498140757903457,
            6.53245733701624e-05,
            0.00014444967382587492,
            6.362045678542927e-05,
            0.00013068267435301095,
            5.864509876118973e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me an information about the section named h.",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_description, Sections.other_details",
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_description, Sections.section_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Sections",
            "Addresses Departments Sections",
            "Addresses Courses Sections",
            "Addresses Courses Departments Sections",
            "Courses Sections"
        ],
        "align_scores": [
            0.9810402989387512,
            9.16623612283729e-05,
            0.00020183960441499949,
            6.679399666609243e-05,
            0.0001518538047093898,
            8.034985512495041e-05,
            0.00013881907216273248,
            7.568424916826189e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please find the first names of students who reside in the country Haiti or have the mobile number 09700166582.",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select Students.first_name, Students.last_name",
            "select Students.student_id, Students.first_name",
            "select Students.first_name, Students.middle_name, Students.cell_mobile_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment",
            "Addresses Semesters Students",
            "Addresses Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9708229303359985,
            0.9764512777328491,
            0.00019550070283003151,
            0.00012034858809784055,
            0.00016857752052601427,
            0.00011091863416368142,
            0.0001404325885232538,
            0.00011444561823736876
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you help me to find the package options and the name of the series of the channel which supports HDTV?",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.series_name",
            "select TV_Channel.Pay_per_view_PPV, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9895718097686768,
            0.0001783126062946394,
            0.9901835322380066,
            0.00013530334399547428,
            0.00042038338142447174,
            0.00012328673619776964,
            0.8264436721801758,
            0.00033133168471977115
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the name of the series supported by high-definition television channel, together with its package options.",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.id, TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.series_name.c1, TV_Channel.Package_Option",
            "select TV_Channel.series_name, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_Channel"
        ],
        "align_scores": [
            0.9852719306945801,
            0.00011716432345565408,
            0.000204837677301839,
            8.821328083286062e-05,
            0.00029073210316710174,
            8.21736830403097e-05,
            0.9852719306945801,
            0.00011716432345565408
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the release date for the TV Series with episode \"A love of a lifetime?\"",
        "gold_select": "select TV_series.Air_Date",
        "select_candidates": [
            "select TV_series.Air_Date",
            "select TV_series.id, TV_series.Air_Date",
            "select TV_series.Rating",
            "select TV_series.18_49_Rating_Share"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9907764792442322,
            7.108485442586243e-05,
            0.00016232307825703174,
            6.276343628996983e-05,
            0.0007559093646705151,
            7.096077752066776e-05,
            0.0004995191702619195,
            6.082499385229312e-05
        ],
        "align_select": "select TV_series.Air_Date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which is the release date of the TV series with with episode title A Love of a Lifetime?",
        "gold_select": "select TV_series.Air_Date",
        "select_candidates": [
            "select TV_series.Air_Date",
            "select TV_series.id, TV_series.Air_Date",
            "select TV_series.Air_Date (or TV_series.Rating)",
            "select TV_series.Air_Date, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9672260284423828,
            8.27418698463589e-05,
            0.00015873288793954998,
            6.477417628047988e-05,
            0.0005637508584186435,
            6.917597784195095e-05,
            0.0001664018927840516,
            5.982142829452641e-05
        ],
        "align_select": "select TV_series.Air_Date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What kind of program are there on Sky Radio?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_series.Share",
            "select TV_series.Episode",
            "select Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.7667564153671265,
            0.006817901041358709,
            0.0021690423600375652,
            0.006252300459891558,
            0.1260581612586975,
            0.006267080083489418,
            0.11817548424005508,
            0.004802930634468794
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What can be found on Sky Radio?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_series.Episode",
            "select Cartoon.Title",
            "select TV_series.Episode, TV_series.Air_Date",
            "select Cartoon.Title, TV_Channel.Country"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.10112415999174118,
            0.032089464366436005,
            0.46346402168273926,
            0.013583576306700706,
            0.00012857580441050231,
            0.00016021977353375405,
            0.00018562709738034755,
            0.00013518740888684988
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which channel has Sky Radio in its name, and what programme do they broadcast there?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.id, TV_Channel.Content",
            "select TV_Channel.series_name, TV_Channel.Content",
            "select TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.Content, TV_Channel.id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.04247822239995003,
            8.788298873696476e-05,
            0.003161156550049782,
            7.78500980231911e-05,
            0.000528213451616466,
            9.173004218610004e-05,
            0.0009957635775208473,
            6.443114398280159e-05
        ],
        "align_select": "select TV_Channel.id, TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Provide me with programs of the television channel called Sky Radio.",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_series.Episode, TV_series.Air_Date",
            "select TV_series.Episode, TV_Channel.Country",
            "select TV_series.Episode, TV_series.Rating"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.8184862732887268,
            6.286065763561055e-05,
            0.00016159232473000884,
            6.043783650966361e-05,
            0.00029319809982553124,
            5.9784473705803975e-05,
            0.00019469409016892314,
            5.692364720744081e-05
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the names of all cartoons in alphabetical order.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9955381751060486,
            0.9955381751060486,
            0.0001545513077871874,
            0.0001545513077871874,
            0.0003519619640428573,
            0.0003519619640428573,
            0.0003365080337971449,
            0.0003365080337971449
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Please give me a list of the titles and the directors of cartoons ordered by their original airing dates.",
        "gold_select": "select Cartoon.Title, Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.id",
            "select Cartoon.Title, Cartoon.Directed_by - Cartoon.Original_air_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9937968254089355,
            0.9937968254089355,
            0.0002778963535092771,
            0.0002778963535092771,
            0.0001484801177866757,
            0.0001484801177866757,
            0.013791467063128948,
            0.013791467063128948
        ],
        "align_select": "select Cartoon.Title, Cartoon.Directed_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "I would like to know the names of the cartoons sorted alphabetically.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Production_code",
            "select Cartoon.Title, t2.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9953304529190063,
            0.00031444543856196105,
            0.00015499122673645616,
            0.0001245609309989959,
            0.00021234140149317682,
            0.00011694298154907301,
            0.0008690700633451343,
            0.00017365852545481175
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "How many comics did Joseph Kuhr write during his career?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.Written_by",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9879140257835388,
            0.0007769524236209691,
            0.00031339944689534605,
            0.0026874192990362644,
            0.0003439011052250862,
            0.0003695047344081104,
            0.00027970143128186464,
            0.000840434746351093
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cartoons did Joseph Kuhr write?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.Written_by",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.9910887479782104,
            0.00042065841262228787,
            0.00023769533436279744,
            0.0008957504760473967,
            0.0002598431019578129,
            0.00017750549886841327,
            0.00022320002608466893,
            0.0004696871619671583
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Here's the list of all the cartoons made under the direction of Ben Jones or Brandon Vietti.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title de, Cartoon.Directed_by",
            "select Cartoon.id, Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.8797826766967773,
            0.0015711176674813032,
            0.0002519216504879296,
            9.922216122504324e-05,
            0.0002597177808638662,
            7.569391163997352e-05,
            0.00034108461113646626,
            9.484459587838501e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all the cartoons made by Ben Jones and Brandon Vietti?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9939886331558228,
            0.0003155382873956114,
            0.0002442533150315285,
            6.23635423835367e-05,
            0.0001571950560901314,
            6.391191709553823e-05,
            0.00025874297716654837,
            6.394477532012388e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the full titles of all the cartoons by directors Brandon Nguyen or Benjamin Jones.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.Written_by",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Original_air_date"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.0002741000789683312,
            7.62823037803173e-05,
            0.0004409302491694689,
            8.697897283127531e-05,
            0.00037886397331021726,
            7.213414210127667e-05,
            0.0001897554175229743,
            7.637736416654661e-05
        ],
        "align_select": "select Cartoon.Title, Cartoon.Written_by",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the title of each cartoon made either by director named either Ben Jones or Brandon Vietti.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9886852502822876,
            0.00030514373793266714,
            0.00018760001694317907,
            6.370995834004134e-05,
            0.0001592399930814281,
            6.697724165860564e-05,
            0.00016701595450285822,
            7.409397221636027e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the package selection for Sky Radio?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.Pay_per_view_PPV",
            "select TV_Channel.Package_Option, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9594854712486267,
            0.00012748208246193826,
            0.00016503223741892725,
            7.230327173601836e-05,
            0.0002117185649694875,
            7.483409717679024e-05,
            0.00016345067706424743,
            6.98423245921731e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What kind of package does 'Sky Radio' come under?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select distinct TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.Package_Option, t0.c9"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9882325530052185,
            0.00014761167403776199,
            0.15116097033023834,
            0.00011679922317853197,
            0.00012587793753482401,
            6.489318911917508e-05,
            0.00037345278542488813,
            8.060133404796943e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which package does the TV channel Sky Radio come under?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.Package_Option, TV_Channel.Pay_per_view_PPV",
            "select TV_Channel.Package_Option, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series Cartoon",
            "TV_Channel TV_series",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9242364764213562,
            0.00011182165326317772,
            0.00011816345795523375,
            5.8171652199234813e-05,
            0.00017818277410697192,
            7.929017738206312e-05,
            0.00012693901953753084,
            6.682412640657276e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which channel has this series called Sky Radio? Explain which packages they offer.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_series.Channel",
            "select TV_Channel.id, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_Channel",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9705881476402283,
            0.00010547944839345291,
            0.00034904785570688546,
            7.380098395515233e-05,
            0.0006354176439344883,
            8.045558206504211e-05,
            0.000209893099963665,
            6.987363303778693e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The maximum and minimum percentage for the TV series, please tell me.",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select max(TV_series.Share), min(TV_series.Share)",
            "select max(TV_series.Rating), min(TV_series.Rating)",
            "select max(TV_series.Rating), min(TV_series.Share)",
            "select max(TV_series.18_49_Rating_Share), min(TV_series.18_49_Rating_Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9951211810112,
            0.0009222316439263523,
            0.9951881170272827,
            0.0014005476841703057,
            0.020317628979682922,
            0.0004004156216979027,
            0.9942535758018494,
            0.002236591652035713
        ],
        "align_select": "select max(TV_series.Share), min(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the highest and lowest percentage achieved for TV show?",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select max(TV_series.Rating), min(TV_series.Rating)",
            "select max(TV_series.Share), min(TV_series.Share)",
            "select max(TV_series.Rating), min(TV_series.Share)",
            "select max(TV_series.18_49_Rating_Share), min(TV_series.18_49_Rating_Share)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9943671822547913,
            0.0005938668618910015,
            0.9942811727523804,
            0.0005161283770576119,
            0.01128170546144247,
            0.0002998349373228848,
            0.992706835269928,
            0.0009430458885617554
        ],
        "align_select": "select max(TV_series.Rating), min(TV_series.Rating)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What's the highest and lowest percentage that could be for TV show?",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select max(TV_series.Share), min(TV_series.Share)",
            "select max(TV_series.Rating), min(TV_series.Rating)",
            "select max(TV_series.Rating), min(TV_series.Share)",
            "select max(TV_series.18_49_Rating_Share), min(TV_series.18_49_Rating_Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9801918268203735,
            0.9742587208747864,
            0.98371821641922,
            0.9753730297088623,
            0.0017103186110034585,
            0.002173889894038439,
            0.9796859622001648,
            0.9694442749023438
        ],
        "align_select": "select max(TV_series.Share), min(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the highest and lowest percentage for the TV show?",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select max(TV_series.Rating), min(TV_series.Rating)",
            "select max(TV_series.Share), min(TV_series.Share)",
            "select max(TV_series.Rating), min(TV_series.Share)",
            "select max(TV_series.18_49_Rating_Share), min(TV_series.18_49_Rating_Share)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9945421814918518,
            0.0005261417245492339,
            0.9942584037780762,
            0.0005796548794023693,
            0.028542686253786087,
            0.00033459102269262075,
            0.9933978319168091,
            0.0009319853852503002
        ],
        "align_select": "select max(TV_series.Rating), min(TV_series.Rating)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Choose the package choice together with the series name of the television channel which broadcasts HDTV.",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.series_name",
            "select TV_Channel.Pay_per_view_PPV, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9902603030204773,
            0.00011149638157803565,
            0.9887663722038269,
            0.00017103235586546361,
            0.0002946409513242543,
            7.415172149194404e-05,
            0.850618302822113,
            0.00017360635683871806
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Let us look for the package selection and series name for the HD TV channel.",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.series_name",
            "select TV_Channel.Pay_per_view_PPV, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9950379729270935,
            0.00013897485041525215,
            0.9952670335769653,
            0.00010730105714173988,
            0.0003054173430427909,
            8.834106847643852e-05,
            0.9874230623245239,
            0.00011396643822081387
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the package name and series of TV channel which uses high definition video format?",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Pay_per_view_PPV, TV_Channel.series_name",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.3194863796234131,
            0.00012367138697300106,
            0.7928615212440491,
            0.00011635367991402745,
            0.29483094811439514,
            0.00010292609658790752,
            0.0003603015502449125,
            7.916604954516515e-05
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which TV channel has high-definition TVs? Please find the package option and the series name of this channel.",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.id, TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9712719917297363,
            0.00014848323189653456,
            0.000234696373809129,
            8.938666724134237e-05,
            0.9789077639579773,
            0.00016404400230385363,
            0.00032387246028520167,
            9.120801405515522e-05
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the package selection and television name of the TV channel that is high definition.",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.Package_Option, TV_Channel.Hight_definition_TV",
            "select TV_Channel.Package_Option, TV_Channel.Country",
            "select TV_Channel.Package_Option, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.002378671197220683,
            0.00013086771650705487,
            0.9882063269615173,
            0.00013749615754932165,
            0.0019755407702177763,
            0.0001045960234478116,
            0.00027174080605618656,
            7.926121907075867e-05
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.Hight_definition_TV",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the name and country of the television channel showing some cartoons directed by Ben Jones and Michael Chang?",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.series_name/series, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.00021993997506797314,
            0.00014496658695861697,
            0.0002107232721755281,
            0.00013235965161584318,
            0.00011129528138553724,
            6.923364708200097e-05,
            0.00015437722322531044,
            9.299222438130528e-05
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "For tv channels that don't use English, please tell me their pixel aspect ratio and country.",
        "gold_select": "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.Language, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9712058305740356,
            0.0001690546196186915,
            0.0003156309248879552,
            8.48313356982544e-05,
            0.00020397041225805879,
            7.78082394390367e-05,
            0.984067440032959,
            0.0001767984067555517
        ],
        "align_select": "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like you to search for the country and the pixel aspect ratio of the channels which are not using the English language.",
        "gold_select": "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Country.c3, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Language, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Country, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9855368733406067,
            0.00019385629275348037,
            0.0004311727825552225,
            0.00010324812319595367,
            0.710247278213501,
            0.00016865404904820025,
            0.0001664928422542289,
            8.202109893318266e-05
        ],
        "align_select": "select TV_Channel.Country, TV_Channel.Pixel_aspect_ratio_PAR",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the image ratio of all television stations which does not speak English, and its country of origin is located?",
        "gold_select": "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR",
            "select avg(TV_Channel.Pixel_aspect_ratio_PAR)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.29708462953567505,
            0.018730061128735542,
            0.0010267612524330616,
            0.00010718427074607462,
            0.00017234068945981562,
            0.00010533349995967001,
            0.004995786119252443,
            0.00020879885414615273
        ],
        "align_select": "select TV_Channel.Pixel_aspect_ratio_PAR",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For The TV Channel That Do Not Have Any Cartoon Directed By Ben Jones Please Enter Packages Below.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.id, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9835029244422913,
            0.005226409062743187,
            0.0004471621650736779,
            0.00026114899083040655,
            0.00019762942974921316,
            0.00014718245074618608,
            0.00039684658986516297,
            0.00016378704458475113
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "List the package types of all TV channels which are not showing cartoons by director Ben Jones.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select distinct TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9845826625823975,
            0.9845826625823975,
            0.00951611902564764,
            0.00951611902564764,
            0.00022133532911539078,
            0.00022133532911539078,
            0.00019869735115207732,
            0.00019869735115207732
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the packages for all the channels of those that do not play cartoons directed by Ben Jones?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Channel",
            "select TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.774798572063446,
            0.00613762391731143,
            0.00020840104843955487,
            0.00013788136129733175,
            0.00040632529999129474,
            0.0001412540877936408,
            0.00013961132208351046,
            0.00011628468928392977
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "The following tv channels don't play any cartoon directed by Ben Jones. Enter the packages.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.id, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9594935178756714,
            0.00017390922585036606,
            0.0001684958697296679,
            8.404186519328505e-05,
            0.00022669466852676123,
            8.870879537425935e-05,
            0.0004839655593968928,
            8.820976654533297e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know the available packages for TV channels that do not show cartoons directed by Ben Jones.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Channel",
            "select TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.8228498697280884,
            0.0026172951329499483,
            0.00016304533346556127,
            0.0001288380881305784,
            0.00031630240846425295,
            0.00012969500676263124,
            0.00011463816917967051,
            0.00011331008863635361
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to see the names of poker players who've earned more than \u00a3300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9741816520690918,
            0.0006252662860788405,
            0.00018994348647538573,
            0.00011010962043656036,
            0.0001970217126654461,
            9.164270159089938e-05,
            0.00019958976190537214,
            0.00010602420661598444
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list poker players whose total winnings amount to more than 300000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.Poker_Player_ID",
            "select poker_player.Poker_Player_ID, sum(poker_player.Earnings)",
            "select poker_player.People_ID",
            "select poker_player.Poker_Player_ID, poker_player.People_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.017534315586090088,
            0.000220549336518161,
            0.0007104885880835354,
            8.492142660543323e-05,
            0.01897875778377056,
            0.0002355697943130508,
            0.00020288075029384345,
            8.085861918516457e-05
        ],
        "align_select": "select poker_player.Poker_Player_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which poker player's total winnings amount to more than 300000?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.Poker_Player_ID",
            "select poker_player.Poker_Player_ID, sum(poker_player.Earnings)",
            "select poker_player.Poker_Player_ID, poker_player.Earnings",
            "select poker_player.People_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.10478799045085907,
            0.0002249289973406121,
            0.0009003582526929677,
            8.167666237568483e-05,
            0.0003995210863649845,
            8.21362336864695e-05,
            0.12912942469120026,
            0.00021251906582619995
        ],
        "align_select": "select poker_player.Poker_Player_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please list down the amount of money that poker players earned in descending order.",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select sum(poker_player.Earnings), poker_player.Poker_Player_ID",
            "select sum(poker_player.Earnings), t0.c6",
            "select sum(poker_player.Earnings), poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9938274025917053,
            0.00027010473422706127,
            8.393678581342101e-05,
            6.9935224018991e-05,
            0.0002495304506737739,
            0.0002455913636367768,
            0.00012960117601323873,
            7.65939912525937e-05
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me the income of poker players, ranked descending by amount.",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Earnings-ORDER BY",
            "select poker_player.Earnings, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9942295551300049,
            0.9942295551300049,
            0.00024695368483662605,
            0.00024695368483662605,
            0.013577276840806007,
            0.013577276840806007,
            0.00024695368483662605,
            0.00024695368483662605
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the common nations of at least two people?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, min(people.Nationality)",
            "select people.Nationality, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9951663017272949,
            8.714111027074978e-05,
            0.00018655223539099097,
            6.069728988222778e-05,
            0.00017028675938490778,
            5.13151207996998e-05,
            0.00016388545918744057,
            5.468123345053755e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are countries which exist at least two people?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, count(*)",
            "select people.Nationality, min(people.Name)",
            "select people.Nationality, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9783046245574951,
            0.00010693639342207462,
            0.006671569310128689,
            7.639178511453792e-05,
            0.00019051902927458286,
            5.6398886954411864e-05,
            0.0005228070076555014,
            7.872204878367484e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the country where the largest group is from?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.Birth_Date",
            "select people.Nationality, people.Name, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9936123490333557,
            6.664442480541766e-05,
            0.00033202479244209826,
            6.33792151347734e-05,
            0.0002580897998996079,
            5.671871986123733e-05,
            0.00019335620163474232,
            5.6693574151722714e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please list the poker players winnings in descending order.",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, t0.c6",
            "select poker_player.Earnings, poker_player.Poker_Player_ID",
            "select poker_player.Earnings, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9955910444259644,
            0.9955910444259644,
            0.0005051179905422032,
            0.0005051179905422032,
            0.00011927831656066701,
            0.00011927831656066701,
            0.00022806742344982922,
            0.00022806742344982922
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "I want to see the amount of money that was earned by the poker players listed in descending order.",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select sum(poker_player.Earnings), poker_player.Poker_Player_ID",
            "select poker_player.Earnings, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9926763772964478,
            0.0002895506622735411,
            0.00024261604994535446,
            7.376804569503292e-05,
            0.00013447078526951373,
            6.339812534861267e-05,
            0.00024261604994535446,
            7.376804569503292e-05
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Return the average payout for each poker player.",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select poker_player.People_ID, avg(poker_player.Earnings)",
            "select poker_player.Poker_Player_ID, avg(poker_player.Earnings)",
            "select poker_player.Final_Table_Made, avg(poker_player.Earnings)",
            "select poker_player.Poker_Player_ID0, avg(poker_player.Earnings)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.052356552332639694,
            0.00010735999967437238,
            0.9227650761604309,
            0.00010023705544881523,
            0.005098481196910143,
            8.704992796992883e-05,
            0.0014851799933239818,
            0.00010938438936136663
        ],
        "align_select": "select poker_player.Poker_Player_ID, avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me average income for all poker players",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select avg(poker_player.Earnings), poker_player.Poker_Player_ID",
            "select avg(poker_player.Earnings), t0.c6",
            "select an avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9962564706802368,
            6.999554898357019e-05,
            0.00010938449122477323,
            5.974378655082546e-05,
            0.00039128382923081517,
            6.465494516305625e-05,
            0.0004532466409727931,
            9.64398859650828e-05
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the money rank of the player who has won the most amount of money during his poker career?",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.Money_Rank, poker_player.Earnings",
            "select poker_player.People_ID, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.3145372271537781,
            8.128024637699127e-05,
            0.0002132959198206663,
            6.98146250215359e-05,
            0.00047980211093090475,
            6.495683192042634e-05,
            0.0002730499836616218,
            7.595776696689427e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please return the rank of the players with the largest income.",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9474875926971436,
            6.683725951006636e-05,
            0.00014084573194850236,
            6.554721767315641e-05,
            0.00032590466435067356,
            6.27779882051982e-05,
            0.00015347075532190502,
            6.675159238511696e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "I need the highest amount of money that was won at the final table among those players which had an income under 200000 and played poker.",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Money_Rank)",
            "select max(poker_player.Earnings)",
            "select max(t0.c6)",
            "select max(poker_player.Money_Rank), poker_player.Earnings"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.2573850154876709,
            0.00038965774001553655,
            0.3337503671646118,
            0.0003393944934941828,
            0.0017546929884701967,
            0.00018969987286254764,
            0.00013739131100010127,
            9.222303924616426e-05
        ],
        "align_select": "select max(poker_player.Money_Rank)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all people who have won over $300000 while playing poker as their occupation.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Nationality, people.Name",
            "select people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "poker_player"
        ],
        "align_scores": [
            0.8873692154884338,
            0.00165538617875427,
            0.0002189458900829777,
            0.00010698391997721046,
            0.00024699349887669086,
            0.0001067035409505479,
            0.004134820774197578,
            0.0008013452170416713
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name the poker players who had winnings of more than $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.People_ID",
            "select poker_player.Poker_Player_ID",
            "select poker_player.People_ID, poker_player.Final_Table_Made",
            "select poker_player.People_ID, people.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "poker_player"
        ],
        "align_scores": [
            0.022195082157850266,
            0.0012137305457144976,
            0.008365689776837826,
            0.001229292363859713,
            0.00017391852452419698,
            7.789480878273025e-05,
            0.0003908046055585146,
            0.00010933308658422902
        ],
        "align_select": "select poker_player.People_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who amongst the people making more than 300,000' are poker professionals?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select distinct people.Name",
            "select poker_player.Poker_Player_ID",
            "select people.Name",
            "select distinct people.Name, people.Birth_Date"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.08395105600357056,
            0.05782250687479973,
            0.006614279933273792,
            0.0017362880753353238,
            0.25638923048973083,
            0.00678259739652276,
            0.0008449007291346788,
            0.0002420181263005361
        ],
        "align_select": "select distinct people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me names of poker players who had more than $300000 in their bankrolls.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9579277634620667,
            0.0005463295965455472,
            0.0001541121891932562,
            8.019300730666146e-05,
            0.00017325280350632966,
            6.794004730181769e-05,
            0.00022723025176674128,
            0.00010058749467134476
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need the birth date of the poker player who has made the lowest amount of money.",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, people.Height",
            "select people.Birth_Date, poker_player.Money_Rank",
            "select people.Birth_Date, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9581114649772644,
            0.00010510413267184049,
            0.00018357073713559657,
            6.733330519637093e-05,
            0.0007560134399682283,
            6.225331890163943e-05,
            0.0008794247405603528,
            8.163943857653067e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "The average income of a player of poker who is over 200 cm tall is what?",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select avg(poker_player.Earnings), people.Height",
            "select an avg(poker_player.Earnings)",
            "select  avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9953727126121521,
            0.00011559084668988362,
            0.00024521464365534484,
            8.49967691465281e-05,
            0.0005040111136622727,
            9.037238487508148e-05,
            0.9953727126121521,
            0.00011559084668988362
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different countries that people originate from and the corresponding number of people from each country?",
        "gold_select": "select people.Nationality, count(*)",
        "select_candidates": [
            "select people.Nationality, count(*)",
            "select people.Nationality, count(*), people.Name",
            "select people.Nationality, count(*), people.Birth_Date",
            "select people.Nationality, count(*), people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9918443560600281,
            0.00042699987534433603,
            0.0002928142494056374,
            0.00015259669453371316,
            0.0001904425589600578,
            0.0001741643063724041,
            0.00035505476989783347,
            0.00015136488946154714
        ],
        "align_select": "select people.Nationality, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the names of people whose country is not Russia.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Height"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9932543635368347,
            0.00014187827764544636,
            0.00020386908727232367,
            6.413579831132665e-05,
            0.0001584129495313391,
            6.167718674987555e-05,
            0.00013790634693577886,
            5.757407416240312e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the names of individuals who do not come from Russia.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select distinct people.Name",
            "select people.Name, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9734330773353577,
            0.0001895040913950652,
            0.00017244211630895734,
            6.757361552445218e-05,
            0.04403315857052803,
            0.0001954570907400921,
            0.00021013498189859092,
            7.289568020496517e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all those who do not come from Russia below.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.People_ID",
            "select people.Name",
            "select people.Nationality",
            "select people.People_ID, people.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people"
        ],
        "align_scores": [
            0.001096588559448719,
            0.0001541875972179696,
            0.753059446811676,
            0.00018684346287045628,
            0.18907715380191803,
            0.0003683562099467963,
            0.00029292679391801357,
            9.672943997429684e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me the last date that new votes for CA were added.",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select VOTES.vote_id, max(VOTES.created)",
            "select VOTES.vote_id, VOTES.created"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.5557028651237488,
            0.0004722801095340401,
            0.09109897166490555,
            0.9932610392570496,
            0.00021928623027633876,
            0.00012287512072362006,
            0.00017987974570132792,
            0.00017843472596723586
        ],
        "align_select": "select VOTES.created",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What was the latest day that CA votes were counted on?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select max(t2.c5)",
            "select max(VOTES.contestant_number)",
            "select max(t2.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.0025306849274784327,
            6.707919237669557e-05,
            0.0008779139607213438,
            8.540853741578758e-05,
            0.0008497191593050957,
            6.623070657951757e-05,
            0.0008016950450837612,
            8.82185049704276e-05
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please enter the vote ids, telephone numbers and states of all votes below.",
        "gold_select": "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
        "select_candidates": [
            "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
            "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
            "select VOTES.vote_id, VOTES.phone_number.c1, VOTES.state",
            "select VOTES.vote_id, VOTES.phone_number, VOTES.state."
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.9931695461273193,
            0.00011855892080347985,
            0.9931695461273193,
            0.00011855892080347985,
            0.0010600726818665862,
            9.693213360151276e-05,
            0.008524644188582897,
            0.00012077649444108829
        ],
        "align_select": "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list the distinct states and their times for each vote.",
        "gold_select": "select distinct VOTES.state, VOTES.created",
        "select_candidates": [
            "select distinct VOTES.state, VOTES.created",
            "select VOTES.state, VOTES.created",
            "select distinct VOTES.state, VOTES.contestant_number",
            "select VOTES.state, VOTES.contestant_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.9765207171440125,
            0.32334572076797485,
            0.6828789710998535,
            0.9921292066574097,
            0.0002095523668685928,
            0.0001836815499700606,
            0.0002761837386060506,
            0.00016326345212291926
        ],
        "align_select": "select distinct VOTES.state, VOTES.created",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please tell me the distinct states and the exact times at which the votes were cast.",
        "gold_select": "select distinct VOTES.state, VOTES.created",
        "select_candidates": [
            "select distinct VOTES.state, VOTES.created",
            "select distinct VOTES.state, VOTES.contestant_number",
            "select distinct VOTES.state, exact(VOTES.created)",
            "select distinct VOTES.state, max(VOTES.created)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.7077503204345703,
            0.01685813069343567,
            0.00021927827037870884,
            0.00015319210069719702,
            0.00828352477401495,
            0.002098863711580634,
            0.0029273719992488623,
            0.0018473407253623009
        ],
        "align_select": "select distinct VOTES.state, VOTES.created",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list the distinct states and times on which each vote was cast in.",
        "gold_select": "select distinct VOTES.state, VOTES.created",
        "select_candidates": [
            "select distinct VOTES.state, VOTES.created",
            "select distinct VOTES.state, VOTES.contestant_number",
            "select distinct VOTES.state, t2.c5",
            "select distinct VOTES.state, VOTES.contestant_number, VOTES.created"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.19974926114082336,
            0.00014316059241537005,
            0.00025085339439101517,
            0.00015000766143202782,
            0.0007364155608229339,
            0.00017597027181182057,
            0.0002068594767479226,
            8.735492883715779e-05
        ],
        "align_select": "select distinct VOTES.state, VOTES.created",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "list down the names of nations where either English or Dutch is their preferred national language",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9661220908164978,
            0.006327691953629255,
            0.00027734367176890373,
            0.00012196891475468874,
            0.0009044713224284351,
            0.00021074376127216965,
            0.000219226029003039,
            0.00016976277402136475
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to learn about all the nations that speak either English or Dutch as an official language.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Continent",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9625425934791565,
            0.7163365483283997,
            0.002003453439101577,
            0.0010291006183251739,
            0.0004889134434051812,
            0.0005554087110795081,
            0.002678329823538661,
            0.0005951484199613333
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the country that has the most land, show name, the head of state and the population?",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Name, country.HeadOfState, country.Population",
            "select country.Name, country.HeadOfState, country.Population",
            "select country.Name, t2.c 12, country.Population",
            "select country.Name, country.Capital, country.Population"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9915087223052979,
            7.930999709060416e-05,
            0.9915087223052979,
            7.930999709060416e-05,
            0.00043916673166677356,
            8.83336688275449e-05,
            0.9877211451530457,
            7.736822590231895e-05
        ],
        "align_select": "select country.Name, country.HeadOfState, country.Population",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please find out average Gross National Product and Total Population for all nations that are considered territories of U.S.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), avg(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select avg(country.LifeExpectancy), avg(country.Population)",
            "select avg(country.SurfaceArea), avg(country.GNP)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9786413311958313,
            0.006508470978587866,
            0.9940798282623291,
            0.04066161811351776,
            0.00022103943047113717,
            0.00011646345956251025,
            0.0002498573448974639,
            0.0001294848188990727
        ],
        "align_select": "select avg(country.GNP), avg(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For nations belonging to the United States, show their mean GDP and their total population.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.SurfaceArea), sum(country.Population)",
            "select avg(country.Population), sum(country.Population)",
            "select avg(country.IndepYear), sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9923833012580872,
            0.0020380381029099226,
            0.0001657044340390712,
            0.00010672909411368892,
            0.00022720577544532716,
            0.00010970047151204199,
            0.0003348061291035265,
            0.00017894076881930232
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need you to provide the population of all the countries that are considered U.S. territory as well as their respective mean gross national products.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select country.Population, avg(country.GNP)",
            "select country.Code, country.Population, avg(country.GNP)",
            "select country.Name, avg(country.GNP)",
            "select country.Code, country.Name, avg(country.Population)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "country countrylanguage",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.1090603619813919,
            0.00018201483180746436,
            0.011863642372190952,
            0.00014420169463846833,
            0.00032228868803940713,
            0.00013469548139255494,
            0.0004455083981156349,
            0.00010212363122263923
        ],
        "align_select": "select country.Population, avg(country.GNP)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Please give me the average GDP per capita and the total population for each of the countries that are considered US territory.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(t3.c8), sum(country.Population)",
            "select country.GNP, sum(country.Population)",
            "select avg(country.GNP), avg(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9929141998291016,
            0.5726096034049988,
            0.0004224668082315475,
            0.0003180080675520003,
            0.7251010537147522,
            0.39172685146331787,
            0.13739953935146332,
            0.021929755806922913
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Give me the average Gross National Product and the total population of those countries that are considered U.S. territories.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select sum(country.Population), avg(country.GNP)",
            "select sum(country.GNP), avg(country.GNP)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9924926161766052,
            0.014983941800892353,
            0.9871473908424377,
            0.015507527627050877,
            0.9932242631912231,
            0.06034816801548004,
            0.0005162188899703324,
            0.0004526822885964066
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me about each individual country that was founded prior to 1930 in terms of its total number of official languages.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select country.Name, sum(countrylanguage.IsOfficial)",
            "select country.Code, sum(countrylanguage.IsOfficial)",
            "select country.Name, sum(country.Continent)",
            "select country.Name, sum(countrylanguage.Percentage)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.00839242897927761,
            0.0003601396456360817,
            0.020362436771392822,
            0.0005989542114548385,
            0.0002631524985190481,
            0.00016078112821560353,
            0.0020047961734235287,
            0.000161619289428927
        ],
        "align_select": "select country.Name, sum(countrylanguage.IsOfficial)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "For countries founded before 1930, what is the total number of official language s?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select sum(countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(distinct countrylanguage.Language, count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.01110154204070568,
            0.00035645425668917596,
            0.013967624865472317,
            0.00014882315008435398,
            0.9055800437927246,
            0.00023020997468847781,
            0.00017247188952751458,
            0.0001327059289906174
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of official languages that were in use for each country that was founded before 1930?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select country.Name, sum(countrylanguage.IsOfficial)",
            "select count(*), country.Name",
            "select sum(countrylanguage.IsOfficial), country.Name",
            "select country.Code, sum(countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.002712125889956951,
            0.0007556306663900614,
            0.9804267883300781,
            0.7810878753662109,
            0.000762725539971143,
            0.00041671330109238625,
            0.0030161808244884014,
            0.0008014995255507529
        ],
        "align_select": "select count(*), country.Name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "What is the total number of different official languages for the countries that existed from 1890 to 1929?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(distinct countrylanguage.Language)."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.992358386516571,
            0.0006048113573342562,
            0.43124738335609436,
            0.0004293191304896027,
            0.0018786615692079067,
            0.0009403738658875227,
            0.0006507154321298003,
            0.00014690106036141515
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "There are some countries which were found before 1930. The total number of all official languages spoken there is equal to?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select sum(countrylanguage.IsOfficial)",
            "select countrylanguage.CountryCode, sum(countrylanguage.IsOfficial)",
            "select sum(countrylanguage.IsOfficial), country.Name",
            "select countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.003055475652217865,
            0.0003972795675508678,
            0.00033036275999620557,
            0.0007164023700170219,
            0.00023354141740128398,
            0.0006463596946559846,
            0.0002590638760011643,
            0.00020173723169136792
        ],
        "align_select": "select sum(countrylanguage.IsOfficial)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the countries that existed before 1930, what is the total number of unique official languages?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select sum(countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.CountryCode)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.059134453535079956,
            0.000341553648468107,
            0.9927478432655334,
            0.00048129225615411997,
            0.0032501504756510258,
            0.0011932388879358768,
            0.0017310245893895626,
            0.0004478108021430671
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many countries were founded before 1930 that had an official language?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), countrylanguage.Language, country.Name",
            "select count(*), country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9719988703727722,
            0.014591640792787075,
            0.00036796805215999484,
            0.004782127682119608,
            0.00017866387497633696,
            0.00026984038413502276,
            0.0003808554320130497,
            0.005510920193046331
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of official languages for all countries that were established before 1930?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select sum(countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.049976836889982224,
            0.0001666939351707697,
            0.00918557494878769,
            0.0014173000818118453,
            0.9848376512527466,
            0.0003895594854839146,
            0.001106297830119729,
            0.00012409051123540848
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want to know the total number of distinct official languages for the countries founded before 1930.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select sum(countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.IsOfficial)."
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.010026662610471249,
            0.0001739434082992375,
            0.9951804876327515,
            0.0002232191909570247,
            0.002073850017040968,
            0.0015840440755710006,
            0.0003739761596079916,
            0.00010707598994486034
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The countries existing prior to 1930, how many official languages did they have?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select country.Name, count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select countrylanguage.CountryCode, count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.00015533642726950347,
            0.00013948623382020742,
            0.0012560267932713032,
            0.0002475657092873007,
            0.00024096730339806527,
            0.0015932770911604166,
            0.001716054161079228,
            0.0003499798767734319
        ],
        "align_select": "select count(distinct countrylanguage.IsOfficial)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "I would like to know the total number of official languages spoken in the countries which were independent in the year 1930 or earlier.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select sum(countrylanguage.IsOfficial)",
            "select count(*)",
            "select count(countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.16883790493011475,
            0.00026061394601128995,
            0.009950650855898857,
            0.0007806133944541216,
            0.9807573556900024,
            0.02306070365011692,
            0.05930589511990547,
            0.0006593202706426382
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of official languages spoken in the countries which are founded before 1930?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.IsOfficial)",
            "select count(count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.09951034933328629,
            0.00016938797489274293,
            0.9940494298934937,
            0.00017780903726816177,
            0.012399973347783089,
            0.00042949948692694306,
            0.0007609523017890751,
            0.0001291529624722898
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Is there more than one continent where Chinese is spoken?",
        "gold_select": "select count( distinct country.Continent)",
        "select_candidates": [
            "select country.Continent",
            "select count(distinct country.Continent)",
            "select count(country.Continent)",
            "select distinct country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.7320355176925659,
            0.4306304156780243,
            0.06138405576348305,
            0.00030218902975320816,
            0.0351022407412529,
            0.0003068600199185312,
            0.9931567311286926,
            0.0010492256842553616
        ],
        "align_select": "select distinct country.Continent",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In the continents where Chinese is the local dialect, just what is the number of them?",
        "gold_select": "select count( distinct country.Continent)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Continent",
            "select count(*) in country.Continent",
            "select count(*), country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9550492167472839,
            0.0008998386329039931,
            0.0004792015242855996,
            0.02511863224208355,
            0.2544933557510376,
            0.0005273912101984024,
            0.00037999465712346137,
            0.0016927504912018776
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The number of distinct continents where Chinese is spoken is how many?",
        "gold_select": "select count( distinct country.Continent)",
        "select_candidates": [
            "select count(distinct country.Continent)",
            "select count(country.Continent)",
            "select count(distinct country.Population)",
            "select count(separate country.Continent)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9965279698371887,
            0.00022172842000145465,
            0.9557887315750122,
            0.031716298311948776,
            0.0005501872510649264,
            0.00014485367864836007,
            0.029467158019542694,
            0.001045040786266327
        ],
        "align_select": "select count(distinct country.Continent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the numbers of the continents where Chinese is spoken?",
        "gold_select": "select count( distinct country.Continent)",
        "select_candidates": [
            "select count(*)",
            "select count(country.Continent)",
            "select count(distinct country.Continent)",
            "select count(*), country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.973777711391449,
            0.003270662622526288,
            0.9868452548980713,
            0.001284776721149683,
            0.9174855351448059,
            0.0001324803743045777,
            0.0006785948644392192,
            0.018086617812514305
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which is the largest nation in Asia by surface area, and what is its population, and average life span?",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.Population, avg(country.LifeExpectancy)",
            "select country.Name, country.SurfaceArea, country.Population, avg(country.LifeExpectancy)",
            "select country.Name, country.Population, avg(country.LifeExpectancy)",
            "select country.Name, country.Population, avg(country.Population)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.11835332959890366,
            0.2202838957309723,
            0.0005221859901212156,
            0.00042225097422488034,
            0.11835332959890366,
            0.2202838957309723,
            0.010624059475958347,
            0.07130245119333267
        ],
        "align_select": "select country.Name, country.Population, avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which of the Asian countries has the biggest territory, show the name, population, and life expectancy?",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.Population, country.LifeExpectancy",
            "select country.Name, country.Code, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6383270621299744,
            0.988962709903717,
            0.6383270621299744,
            0.988962709903717,
            0.00025105554959736764,
            0.0003060732560697943,
            0.0003155846206936985,
            0.0011031967587769032
        ],
        "align_select": "select country.Name, country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the largest country in Asia by land surface area, and what is its population, and life expectancy?",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.Population, country.LifeExpectancy",
            "select country.Name, country.SurfaceArea, country.Population, country.LifeExpectancy",
            "select country.Name, country.Code, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.11079563945531845,
            0.00020282308105379343,
            0.0002831235760822892,
            8.97886129678227e-05,
            0.00047011341666802764,
            7.765923510305583e-05,
            0.00028053467394784093,
            9.627411054680124e-05
        ],
        "align_select": "select country.Name, country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Enter the name, population and head of state for the country that has the largest surface area below.",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.IndepYear, country.Population, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.Code6, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.989094078540802,
            8.747696847422048e-05,
            0.0005656437715515494,
            8.403802348766476e-05,
            0.989094078540802,
            8.747696847422048e-05,
            0.0008294659201055765,
            0.00016822553880047053
        ],
        "align_select": "select country.Name, country.Population, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Enter the name of the country which has the largest surface area, with its population, head of state and name below.",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Population, country.HeadOfState, country.Name",
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.HeadOfState, country.Capital",
            "select country.HeadOfState, country.Population, country.Name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8230980634689331,
            9.262114326702431e-05,
            0.8840194344520569,
            9.044082253240049e-05,
            0.0005789930582977831,
            9.805301669985056e-05,
            0.834018349647522,
            8.662824984639883e-05
        ],
        "align_select": "select country.Population, country.HeadOfState, country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please give the name of the country which has the largest surface area as well as its population, and head of state.",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.IndepYear, country.Population, country.HeadOfState",
            "select country.Name, country.Code6, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9854940176010132,
            8.020448149181902e-05,
            0.00031122227665036917,
            7.800898310961202e-05,
            0.0005941734416410327,
            0.00011784017260652035,
            0.9854940176010132,
            8.020448149181902e-05
        ],
        "align_select": "select country.Name, country.Population, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the name, population, and head of state for the country that has the most land.",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.IndepYear, country.Population, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9886444807052612,
            7.996025669854134e-05,
            0.0006244935211725533,
            7.555386400781572e-05,
            0.9886444807052612,
            7.996025669854134e-05,
            0.00026684728800319135,
            6.592163845198229e-05
        ],
        "align_select": "select country.Name, country.Population, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "I want to find out the country that has the greatest land area, it's population, and the president of this country.",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.Code6, country.HeadOfState",
            "select country.Code, country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0010654162615537643,
            0.00011979672126471996,
            0.0010654162615537643,
            0.00011979672126471996,
            0.00040946167428046465,
            0.0001222261053044349,
            0.0003085403877776116,
            0.00010741918958956376
        ],
        "align_select": "select country.Name, country.Population, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many nations have a republic form?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.GovernmentForm"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9933434724807739,
            0.005681770388036966,
            0.00035855115856975317,
            0.012327169068157673,
            0.0004048134433105588,
            0.008467846550047398,
            0.0004089329158887267,
            0.12057405710220337
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total area of land that comprises the Caribbean countries?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Region",
            "select sum(country.SurfaceArea), country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9951897859573364,
            0.00012693055032286793,
            0.00020028180733788759,
            8.816349873086438e-05,
            0.00025538133922964334,
            7.823157648090273e-05,
            0.0001595371140865609,
            8.128272747853771e-05
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total area of all countries in the Caribbean together?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Code",
            "select sum(country.SurfaceArea), country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.996155321598053,
            0.00013809162192046642,
            0.00015654737944714725,
            9.705282718641683e-05,
            0.0001317428977927193,
            8.803277887636796e-05,
            0.00022630464809481055,
            8.889668970368803e-05
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please find total amount of surface that countries in the Caribbean cover.",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Code",
            "select sum(country.SurfaceArea) descripted in country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9959366321563721,
            0.00013413872511591762,
            0.00017316627781838179,
            0.0015908032655715942,
            0.00014847517013549805,
            0.0009476921404711902,
            0.0004900326603092253,
            9.432706428924575e-05
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much land area do the countries that make up the Carribbean cover altogether?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Code",
            "select sum(country.SurfaceArea)as country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9949260950088501,
            0.00011430927406763658,
            0.0002300702326465398,
            9.74220602074638e-05,
            0.00019457421149127185,
            8.836399501888081e-05,
            0.0004630136536434293,
            0.00015535093552898616
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total area of the Caribbean countries?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Code",
            "select sum(country.SurfaceArea), country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.996614396572113,
            0.0004263978626113385,
            0.00016508465341757983,
            0.008781474083662033,
            0.00013314702664501965,
            0.0017614896642044187,
            0.00021416875824797899,
            0.05742891877889633
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For country that's part of Asia called as having the shortest expected lifespan, please list.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Region",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9668047428131104,
            0.0006008071941323578,
            0.0003508133231662214,
            0.00017502599803265184,
            0.00030024745501577854,
            0.00015939661534503102,
            0.0041461531072855,
            0.00021270006254781038
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "In which Asian country do people live for the least amount of time?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9771589636802673,
            5.9370413509896025e-05,
            0.00048010406317189336,
            6.3195257098414e-05,
            0.000665136321913451,
            6.267194112297148e-05,
            0.00032438355265185237,
            6.0552752984222025e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Please select the Asian country which has the lowest average life span below.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7941306829452515,
            0.9737078547477722,
            0.0012099262094125152,
            0.0003235286567360163,
            0.0004891937715001404,
            0.0002599900180939585,
            0.0005558247794397175,
            0.0002548734482843429
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "I would like to know the total population and greatest national income of Asia.",
        "gold_select": "select sum(country.Population), max(country.GNP)",
        "select_candidates": [
            "select sum(country.Population), max(country.Population)",
            "select max(country.Population), sum(country.Population)",
            "select sum(country.Population), max(country.SurfaceArea)",
            "select country.Population, max(country.SurfaceArea)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0003540581092238426,
            0.00010925324750132859,
            0.00024991112877614796,
            8.64287358126603e-05,
            0.00033407058799639344,
            9.135685832006857e-05,
            0.00026684856857173145,
            9.119157766690478e-05
        ],
        "align_select": "select sum(country.Population), max(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in Asia and what is the largest Gross National Product in this region?",
        "gold_select": "select sum(country.Population), max(country.GNP)",
        "select_candidates": [
            "select country.Population, country.GNP",
            "select country.Code, country.Population",
            "select country.Code, country.Population, country.GNP",
            "select country.Name, country.GNP"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9953128099441528,
            0.00019883720960933715,
            0.0019271922064945102,
            0.00019310212519485503,
            0.00038082728860899806,
            0.00012958276784047484,
            0.0026221692096441984,
            0.00021850380289833993
        ],
        "align_select": "select country.Population, country.GNP",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Among all Asian countries, how many people are living there and what's their largest gross national product?",
        "gold_select": "select sum(country.Population), max(country.GNP)",
        "select_candidates": [
            "select country.Population, country.GNP",
            "select country.Name, country.Population, country.GNP",
            "select country.Population, max(country.GNP)",
            "select country.Name, country.Population, max(country.GNP)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.3105812072753906,
            6.633702287217602e-05,
            0.0005997156258672476,
            8.257034642156214e-05,
            0.00011905671999556944,
            7.415185973513871e-05,
            8.357880869880319e-05,
            7.394849671982229e-05
        ],
        "align_select": "select country.Population, country.GNP",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "How much will the life span be the countries on this continent if they were all republics?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select country.LifeExpectancy",
            "select sum(country.LifeExpectancy)",
            "select max(country.LifeExpectancy)",
            "select country.Code, country.LifeExpectancy"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.884985089302063,
            0.0002697701274883002,
            0.753072202205658,
            7.112960884114727e-05,
            0.007421748246997595,
            6.490921077784151e-05,
            0.00027398616657592356,
            8.047300070757046e-05
        ],
        "align_select": "select country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the average lifespan in African republics above.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.GovernmentForm",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9957914352416992,
            0.0001369471283396706,
            0.00011696830915752798,
            0.0003224746324121952,
            0.0004036817990709096,
            0.0001372249098494649,
            0.00013400075840763748,
            7.880444172769785e-05
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average lifespan for the countries in Africa which are republics?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select the avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9958482980728149,
            0.0005288957036100328,
            0.0004378103476483375,
            0.00014153384836390615,
            0.9958482980728149,
            0.0005288957036100328,
            0.0005067832535132766,
            0.00015136085858102888
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total area of the continents 'Asia' and 'Europe'?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Continent",
            "select sum(country.SurfaceArea) delimited by country.Continent",
            "select sum(country.SurfaceArea) def. country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9959943294525146,
            0.0002866807335522026,
            0.00015144659846555442,
            9.452082304051146e-05,
            0.0006132023991085589,
            9.102155308937654e-05,
            0.0002355368051212281,
            0.00011753011494874954
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know the total land area of the continents Asia and Europe.",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Continent",
            "select sum(country.SurfaceArea) def. country.Continent",
            "select sum(country.SurfaceArea), country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9965687990188599,
            7.453683065250516e-05,
            0.00016040640184655786,
            5.963222429272719e-05,
            0.0002771417493931949,
            0.00013738842972088605,
            0.00016040640184655786,
            5.963222429272719e-05
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want you to display a list containing the average gross national product and the total population in nationa whose government is US territory.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select avg(country.Population), sum(country.Population)",
            "select avg(country.GNP), avg(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9827231168746948,
            0.0009385371813550591,
            0.9816830158233643,
            0.0006538597517646849,
            0.00029564491705968976,
            0.00014052822371013463,
            0.15867500007152557,
            0.0002481082337908447
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For every country in which the United States has some kind of control, what is their gross national product and population?",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select country.GNP, country.Population",
            "select country.Code, country.GNP, country.Population",
            "select country.Name, country.GNP, country.Population",
            "select country.IndepYear, country.GNP, country.Population"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9632643461227417,
            0.3880447447299957,
            0.002054257784038782,
            0.03826126828789711,
            0.003037540940567851,
            0.058133501559495926,
            0.00040762691060081124,
            0.0004882837529294193
        ],
        "align_select": "select country.GNP, country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The average income (GNP) and the total number of inhabitants in all the countries that are governed by the United States should be mentioned here.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select sum(country.GNP), sum(country.Population)",
            "select an avg(country.GNP), sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9925792813301086,
            8.317792526213452e-05,
            0.9010302424430847,
            8.975702803581953e-05,
            0.00045978600974194705,
            7.408810779452324e-05,
            0.00043307174928486347,
            0.00010427873348817229
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average Gross National Product and total population for the countries listed whose governments formed part of US Territory?",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.GNP), avg(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select avg(country.IndepYear), avg(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9738181829452515,
            0.004152357578277588,
            0.9538107514381409,
            0.005160773638635874,
            0.9828491806983948,
            0.037946999073028564,
            0.0002960375277325511,
            0.00014780732453800738
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which nations use English or Dutch as their official tongue?",
        "gold_select": "select *",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9380329251289368,
            0.16520173847675323,
            0.0011488762684166431,
            0.0004699471464846283,
            0.0008990968344733119,
            0.0001985261624213308,
            0.0003168870462104678,
            0.00015497070853598416
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which language is spoken by the largest number of Asian countries?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.993952214717865,
            0.00010313928942196071,
            0.0006031512166373432,
            7.334410474868491e-05,
            0.0002466172445565462,
            6.34589814580977e-05,
            0.0008252795087173581,
            7.12773617124185e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me languages that only one country uses which has a republic structure.",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.009072892367839813,
            0.9924499988555908,
            0.0001433591969544068,
            0.0005599978030659258,
            0.00010705352906370535,
            0.0005572331137955189,
            0.00012356082152109593,
            0.0009837393881753087
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Please find the name, population and expected life span of the Asian country with the largest surface area.",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.Population, country.LifeExpectancy",
            "select country.Name, country.Code, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9821624159812927,
            0.9921454787254333,
            0.9821624159812927,
            0.9921454787254333,
            0.0003644636017270386,
            0.0004080242943018675,
            0.0004723088932223618,
            0.0014354644808918238
        ],
        "align_select": "select country.Name, country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the average age at which people die in which country their mother tongue is not the same as English.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9299283027648926,
            0.611969530582428,
            0.0002451534091960639,
            0.037708982825279236,
            0.0006813434883952141,
            0.00038877816405147314,
            0.0018616607412695885,
            0.6484791040420532
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average life span in the countries that don't use English as an official language?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "country",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.991080105304718,
            0.00032268991344608366,
            0.0001306555059272796,
            0.00028484611539170146,
            0.0004534529580269009,
            0.00014929617464076728,
            0.0001572839537402615,
            0.0005017107469029725
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know the mean life expectancy of countries where English is not the national language",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "country",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9947775602340698,
            8.685986540513113e-05,
            0.0004359643498901278,
            0.0001049492129823193,
            0.000134661968331784,
            0.00014413885946851224,
            0.00017304907669313252,
            0.00018539854499977082
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me information about the national language of the country whose head of state's name is Beatrix.",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9924837946891785,
            0.00014109066978562623,
            0.0002610098454169929,
            7.245138840517029e-05,
            0.0002623338659759611,
            8.291997801279649e-05,
            0.0002295099984621629,
            8.083440479822457e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which African nations contain fewer people than any country in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6270414590835571,
            0.0005717045860365033,
            0.00030686939135193825,
            9.694775508251041e-05,
            0.0004045420209877193,
            7.489713607355952e-05,
            0.0002872046607080847,
            8.870058809407055e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show the names of African countries which have fewer inhabitants than any country in Asia.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7813370227813721,
            0.0006797495880164206,
            0.0002573276578914374,
            9.384187433170155e-05,
            0.0002792588493321091,
            7.873037975514308e-05,
            0.00024101279268506914,
            9.471887460676953e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries belonging to the continents named Africa have even fewer residents than any Asian nations?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Population",
            "select country.Name, country.Continent",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.3838665783405304,
            0.06627597659826279,
            0.0004139621742069721,
            0.00012311273894738406,
            0.0004937390913255513,
            0.00018097426800522953,
            0.0027825916185975075,
            0.0004190864274278283
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Do you have information on which Asian countries have more people than all African countries?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.5115780830383301,
            0.0025007356889545918,
            0.00044209478073753417,
            0.00015601597260683775,
            0.00041723105823621154,
            9.562796913087368e-05,
            0.0003592345747165382,
            0.0001222652499563992
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which are the codes of countries which speak a different language than English and whose government does not follow a republic system of government?.",
        "gold_select": "select country.Code",
        "select_candidates": [
            "select country.Code",
            "select country.Code2",
            "select country.Name",
            "select countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9777587652206421,
            0.9897574186325073,
            0.03827596828341484,
            0.8628467321395874,
            0.004453683737665415,
            0.9932006001472473,
            0.9544728398323059,
            0.9760208129882812
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to see the codes of countries which don't speak English and for whose the government types aren't republics.",
        "gold_select": "select country.Code",
        "select_candidates": [
            "select country.Code",
            "select country.Code, countrylanguage.Language",
            "select country.Name, country.Code2",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9804054498672485,
            0.05872663855552673,
            0.00029087241273373365,
            0.000583008979447186,
            0.00034845739719457924,
            0.0003980529145337641,
            0.0005439099040813744,
            0.0004161509859841317
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please indicate European cities that do not speak English as their mother tongue below.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select distinct city.Name",
            "select city.ID, city.Name",
            "select city.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.7528815269470215,
            0.0026596917305141687,
            0.027968447655439377,
            0.06345000863075256,
            0.0004298138082958758,
            0.00017778054461814463,
            0.0003582955105230212,
            0.00015384524886030704
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different types of governments and what are their populations for those that had an average life expectancy above 72?",
        "gold_select": "select sum(country.Population), country.GovernmentForm",
        "select_candidates": [
            "select country.GovernmentForm, country.Population",
            "select country.Name, country.Population",
            "select country.GNPOld, country.GovernmentForm, country.Population",
            "select country.GovernmentForm, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.845106840133667,
            0.0001704452879494056,
            0.0899970531463623,
            0.00015502478345297277,
            0.00027511041844263673,
            8.255909779109061e-05,
            0.9473647475242615,
            0.00021576666040346026
        ],
        "align_select": "select country.GovernmentForm, country.Population",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me the names of the continents and their populations and lifespans which have an average life expectancy below 72.",
        "gold_select": "select sum(country.Population), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, avg(country.LifeExpectancy)",
            "select country.Name, country.IndepYear, country.Population, avg(country.LifeExpectancy)",
            "select country.Name, country.Continent, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.45888766646385193,
            0.00010958222992485389,
            0.23307769000530243,
            9.286584827350453e-05,
            0.00012840735143981874,
            6.662312807748094e-05,
            0.0025551794096827507,
            9.060069714905694e-05
        ],
        "align_select": "select country.Name, country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "I would like to see the names of the three smallest countries in terms of population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9929038882255554,
            5.8050736697623506e-05,
            0.00046317302621901035,
            5.630914165521972e-05,
            0.0026261580642312765,
            6.0774200392188504e-05,
            0.0008828145219013095,
            5.6669094192329794e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please tell me about all the European nations where their populations that exceed 8000.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select distinct country.Name",
            "select country.Name, country.Continent",
            "select distinct country.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.4608108103275299,
            0.001087107928469777,
            0.08892125636339188,
            0.0006106991204433143,
            0.00020849965221714228,
            0.00010659676627255976,
            0.0002787183620966971,
            0.00011213342804694548
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of all the European countries, give me the exact names. Please show me those countries which have more than 80000 people residing in them.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select distinct country.Name",
            "select exact country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.519581139087677,
            0.0026574612129479647,
            0.00033718516351655126,
            0.00010596880747471005,
            0.05683910474181175,
            0.0011441627284511924,
            0.0012046501506119967,
            0.0005025215796194971
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I am interested in knowing about the total population and average surface area of all countries located on North America whose surface area has exceeded 3000.",
        "gold_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.Population), avg(country.SurfaceArea)",
            "select avg(country.Population), sum(country.Population)",
            "select sum(country.Population), avg(country.Population)",
            "select total(country.Population), avg(country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9871212840080261,
            0.0032559975516051054,
            0.02324308268725872,
            0.0003907422360498458,
            0.0030985642224550247,
            0.00030265928944572806,
            0.0012331166071817279,
            0.00017603689047973603
        ],
        "align_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know which language the largest amount of people speak in each country.",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9937314391136169,
            7.906826795078814e-05,
            0.0013193154009059072,
            7.042611832730472e-05,
            0.00033603596966713667,
            5.787572808912955e-05,
            0.0036948116030544043,
            6.71595917083323e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which countries speak which languages as a predominant language?",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "countrylanguage"
        ],
        "align_scores": [
            0.9870179295539856,
            0.00020062641124241054,
            0.004340396728366613,
            8.074643119471148e-05,
            0.4088411033153534,
            0.00010417099838377908,
            0.0009286662680096924,
            8.724928920855746e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the codes of those countries where the highest proportion of population speak Spanish?",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select country.Code",
            "select country.Name, country.Continent",
            "select country.Name, country.Code2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city countrylanguage"
        ],
        "align_scores": [
            0.9858954548835754,
            0.9177538752555847,
            0.9863163828849792,
            0.9530553221702576,
            0.00028597371419891715,
            0.00034351833164691925,
            0.00042710817069746554,
            0.0007225829176604748
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Please list the record companies that were used by orchestras created before 2003 as well as those created after 2003.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company for both orchestra.Year_of_Founded, orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company for both orchestra.Year_of_Founded, orchestra.Major_Record_Format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.993553638458252,
            0.28846731781959534,
            0.00020647147903218865,
            9.451623191125691e-05,
            0.00028249050956219435,
            0.00016211257025133818,
            0.00012058707216056064,
            9.389342449139804e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "In your opinion, which record companies were used by orchestras made prior to 2003 and those made after 2003?",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company for both orchestra.Year_of_Founded, orchestra.Record_Company",
            "select orchestra.Record_Company for both orchestra.Year_of_Founded, orchestra.Major_Record_Format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.4732874631881714,
            0.9933475852012634,
            0.00017924541316460818,
            0.00019953060836996883,
            0.00010146899876417592,
            0.00020340486662462354,
            0.00010912217112490907,
            0.0001419575564796105
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the names of conductors which do not come from the USA.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.989612877368927,
            0.00010354440746596083,
            0.00017718081653583795,
            6.216207839315757e-05,
            0.00012015779066132382,
            5.759637133451179e-05,
            0.00016068642435129732,
            6.757135997759178e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list all conductors whose countries are not USA below.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra performance",
            "conductor orchestra",
            "conductor orchestra show",
            "conductor performance"
        ],
        "align_scores": [
            0.005103647243231535,
            0.002364105312153697,
            0.9865272641181946,
            0.00035232622758485377,
            0.00021690483845304698,
            8.481103577651083e-05,
            0.00021210363775026053,
            0.00010965926776407287
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Record a list of conductors whose citizenships are not USA below.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Nationality"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.0009443791932426393,
            0.00044105987763032317,
            0.9028536081314087,
            0.00028950790874660015,
            0.00019804367912001908,
            8.178211282938719e-05,
            0.0001798216107999906,
            8.106784662231803e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the list containing the names of conductors which does not belong to 'USA'.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor performance"
        ],
        "align_scores": [
            0.9901641011238098,
            0.000290398282231763,
            0.00020681039313785732,
            8.181057637557387e-05,
            0.00014079769607633352,
            7.930144784040749e-05,
            0.00012258421338628978,
            7.244994048960507e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please return the names of conductors which are not from the USA.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9943897128105164,
            9.316067007603124e-05,
            0.00015288549184333533,
            5.722823698306456e-05,
            0.0001295820256927982,
            5.804885222460143e-05,
            0.00013887826935388148,
            6.199998460942879e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the names of conductors who do not come from the USA.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9870516061782837,
            9.121497714659199e-05,
            0.00017826941621024162,
            6.067251888453029e-05,
            0.00012431554205249995,
            5.630516534438357e-05,
            0.00015591781993862242,
            6.338610546663404e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List down the conductors' names that did not originate from USA.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9896832704544067,
            0.0008894975762814283,
            0.0001650429330766201,
            0.0001231376372743398,
            0.00017813450540415943,
            8.857565990183502e-05,
            0.00017306195513810962,
            0.00012179608893347904
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want to find out the conductors who don't belong to USA.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.0008657046128064394,
            0.13134683668613434,
            0.681901216506958,
            0.3343798518180847,
            0.00019112399604637176,
            0.00012111879186704755,
            0.00025989857385866344,
            0.00031356862746179104
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please return records of orchestras, sorted descending by the years in which they were founded.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Orchestra",
            "select orchestra.Orchestra, orchestra.Year_of_Founded",
            "select orchestra.Orchestra (orchestrated orchestra.Conductor_ID)",
            "select orchestra.Orchestra (orchestrated orchestra.Orchestra_ID)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9916069507598877,
            0.0002484479045961052,
            0.0003295508795417845,
            0.00012684124521911144,
            0.0002433634508633986,
            0.00015592199633829296,
            0.0009441515430808067,
            0.0001368001539958641
        ],
        "align_select": "select orchestra.Orchestra",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Please enter the average number of people who went to these events.",
        "gold_select": "select avg(show.Attendance)",
        "select_candidates": [
            "select avg(show.Attendance)",
            "select an avg(show.Attendance)",
            "select the avg(show.Attendance)",
            "select avg(t3.c8)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "show",
        "table_candidates": [
            "show",
            "performance show",
            "orchestra show"
        ],
        "align_scores": [
            0.9620427489280701,
            0.030644701793789864,
            0.0010769125074148178,
            0.0005484484136104584,
            0.0006403709994629025,
            0.00038590136682614684,
            0.0009729086887091398,
            0.0003956943401135504
        ],
        "align_select": "select avg(show.Attendance)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "I would like to know the maximum and minimum percentage of performances that do not fall under the category of Live final.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(t2.c8), min(t2.c8)",
            "select max(performance.Performance_ID), min(performance.Performance_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9944211840629578,
            0.0005639964365400374,
            0.0010990534210577607,
            0.000906469882465899,
            0.008147958666086197,
            0.0011274457210674882,
            0.0003281062818132341,
            0.00039799712249077857
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the largest and smallest percentage of performances whose type is not \"Live final\"?",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(performance.Weekly_rank), min(performance.Weekly_rank)",
            "select max(performance.Type), min(performance.Official_ratings_in_millions)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9955461025238037,
            0.0006980883772484958,
            0.0009254813776351511,
            0.002013456542044878,
            0.0006068472866900265,
            0.0005456741200760007,
            0.0003371145867276937,
            0.0001414109574398026
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the maximum and minimum values for the ratio of performances whose type is not Live final?",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(t2.c8), min(t2.c8)",
            "select max(performance.Weekly_rank), min(performance.Weekly_rank)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9957911968231201,
            0.000994153437204659,
            0.0010758927091956139,
            0.0020932615734636784,
            0.004044968169182539,
            0.0002877656661439687,
            0.0012026310432702303,
            0.0007306616753339767
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want to see the maximum and minimum stakes on performances which did not have Live Final.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9946664571762085,
            0.00014754300354979932,
            0.0006147912354208529,
            9.535269782645628e-05,
            0.0006079573649913073,
            9.300462988903746e-05,
            0.004123107064515352,
            0.00013574789045378566
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please indicate the name of the conductor who has been appointed to conduct orchestras established after 2008.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, orchestra.Year_of_Founded",
            "select conductor.Name (or conductor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.879650890827179,
            0.0002624018816277385,
            0.000298140337690711,
            8.25302122393623e-05,
            0.0009640864445827901,
            9.243910608347505e-05,
            0.00099376798607409,
            0.00011308482498861849
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need information about the main recording formats for orchestras, according to their popularity.",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, t1.c6",
            "select orchestra.Major_Record_Format, orchestra.Year_of_Founded",
            "select orchestra.Major_Record_Format (ORDER BY-LIMIT)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.08300507813692093,
            9.707643039291725e-05,
            0.00033267910475842655,
            5.9800098824780434e-05,
            0.0002190551022067666,
            5.8684705436462536e-05,
            0.00045576621778309345,
            9.35866410145536e-05
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please list the most common record formats used by orchestras, in descending order.",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select top-ten-record-formats-in-descending-order",
            "select orchestra.Major_Record_Format, t1.c6",
            "select top-ten-record-formats-in-c5-ORDER BY-LIMIT"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.933085024356842,
            0.00010426600783830509,
            0.00021172825654502958,
            0.0001025275923893787,
            0.0003717667714226991,
            7.354076660703868e-05,
            0.00011654444824671373,
            0.00012601340131368488
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the most commonly used orchestra recording formats, sorted by frequency.",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select top-ten-recording-formats-in-GROUP BY-ORDER BY-LIMIT",
            "select top-ten-recording-formats-in-gROUP BY-ORDER BY-LIMIT",
            "select orchestra.Major_Record_Format, t1.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9902065396308899,
            0.0001152246113633737,
            0.00015101084136404097,
            0.00012060777225997299,
            0.00015101084136404097,
            0.00012060777225997299,
            0.00035336014116182923,
            6.746331928297877e-05
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the most common record formats for orchestras, ranked by their occurrence?",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, t1.c6",
            "select orchestra.Major_Record_Format, orchestra.Year_of_Founded",
            "select orchestra.Major_Record_Format, t1.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9793921113014221,
            0.0001305045880144462,
            0.00039090876816771924,
            6.76970012136735e-05,
            0.00020403614325914532,
            6.477930583059788e-05,
            0.0003891611995641142,
            6.801938434364274e-05
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the most frequent record formats for orchestras, sorted by their frequency?",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select top-ten-record-formats-in-GROUP BY-ORDER BY-LIMIT",
            "select top-ten-record-formats-in-gROUP BY-ORDER BY-LIMIT",
            "select top-ten-record-formats-in-c5-ordered by-gROUP BY-LIMIT"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9666473269462585,
            0.00010963468957925215,
            0.00016913683793973178,
            0.00013115217734593898,
            0.00016913683793973178,
            0.00013115217734593898,
            0.00022447051014751196,
            0.0001406095689162612
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which music company has been credited to be involved with the largest quantity of orchestras worldwide?",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company, orchestra.Conductor_ID",
            "select orchestra.Record_Company (http://www.orchestra.Record_Company)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9789242148399353,
            0.00014661179739050567,
            0.0003516792494338006,
            6.443083839258179e-05,
            0.00018217736214865,
            5.985658208373934e-05,
            0.04421009123325348,
            8.402767707593739e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "The records companies which are signed by orchestra created before 2003 and those created after 2004 should be shown.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company, orchestra.Conductor_ID",
            "select orchestra.Record_Company and orchestra.Year_of_Founded"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.030983740463852882,
            0.9942096471786499,
            0.00015611211711075157,
            0.0003011522348970175,
            0.00010610470781102777,
            0.00013192745973356068,
            0.00020848654094152153,
            0.00063579116249457
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Please indicate the number of orchestras on the following table that used the recording medium CD or DVD.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.Major_Record_Format",
            "select count(*),",
            "select count(*) the orchestra.Orchestra_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9912431240081787,
            0.0001107098360080272,
            0.0003487305948510766,
            9.279158257413656e-05,
            0.0014871131861582398,
            0.00010121261584572494,
            0.0003303882840555161,
            9.291049354942515e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I'd like to find the number of orchestras on CD or DVD format.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*) I don't care if they're on a major-record-format (DVD, CD)",
            "select count(*) I don't care if they're on a major-recording-format (DVD, CD)",
            "select count(*) I don't care if they're on a major-record_format (DVD, CD)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9945001602172852,
            0.0005460427491925657,
            0.00867460761219263,
            0.00017152998771052808,
            0.014316277578473091,
            0.00017117349489126354,
            0.0009867693297564983,
            0.00021799583919346333
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please count the number of orchestras that have CD or DVD as their recording medium.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.Major_Record_Format",
            "select count(*),",
            "select count(*), orchestra.Orchestra_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9919050931930542,
            9.509491064818576e-05,
            0.00024831551127135754,
            9.38640660024248e-05,
            0.0006643763626925647,
            8.54797544889152e-05,
            0.00019746669568121433,
            0.00010668188042473048
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the numbers of orchestras which used CDs or DVDs as records.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.Major_Record_Format",
            "select count(distinct orchestra.Orchestra)",
            "select count(*), orchestra.Orchestra_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9777090549468994,
            0.011962423101067543,
            0.0002488649624865502,
            0.012392453849315643,
            0.008150769397616386,
            0.00015169577091000974,
            0.0002459967799950391,
            0.008731712587177753
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Enter the number of orchestras that use CD/DVD as a major format below.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.Major_Record_Format",
            "select count(*) the SELECT-FROM-WHERE",
            "select count(*), orchestra.Major_Record_Format, t1.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9861708879470825,
            0.012408193200826645,
            0.00045887663145549595,
            0.6794323921203613,
            0.001019819057546556,
            0.00030586402863264084,
            0.00023970378970261663,
            0.0001267050247406587
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Enter the email addresses, cell numbers and home phones of each employee here.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
            "select Professionals.email_address, Professionals.home_phone, Professionals.home_phone",
            "select Professionals.email_address, Professionals.professional_id9, Professionals.home_phone",
            "select Professionals.email_address, Professionals.home_phone, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9838666915893555,
            0.020128125324845314,
            0.0011811289004981518,
            0.0002804520772770047,
            0.0004566083080135286,
            0.00021671198192052543,
            0.0006671497831121087,
            0.0001668870245339349
        ],
        "align_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please provide the email addresses, mobile numbers, home phone numbers of all employees in order.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
            "select Professionals.email_address, Professionals.home_phone, Professionals.home_phone",
            "select Professionals.email_address, Professionals.professional_id9, Professionals.home_phone",
            "select Professionals.email_address, Professionals.home_phone, Professionals.home_phone"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.993518054485321,
            0.0002004160633077845,
            0.0008592575322836637,
            0.00028557537007145584,
            0.00042205338831990957,
            0.0003181353968102485,
            0.0008592575322836637,
            0.00028557537007145584
        ],
        "align_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Give me the e-mail, telephone number and home phone of each of your professionals.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.home_phone, Professionals.home_phone",
            "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
            "select Professionals.email_address, Professionals.professional_id9, Professionals.home_phone",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.007562088780105114,
            7.483680383302271e-05,
            0.4953508973121643,
            9.77501695160754e-05,
            0.00035494944313541055,
            0.00010941025539068505,
            0.00491728400811553,
            8.411161979893222e-05
        ],
        "align_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please send me the email address, home phone and cellular number of each professional.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number.",
            "select Professionals.email_address, Professionals.home_phone, Professionals.professional_id",
            "select Professionals.email_address, t 6.c9, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9932714104652405,
            0.00013689021579921246,
            0.0058896723203361034,
            9.828656766330823e-05,
            0.0003394066297914833,
            7.95207524788566e-05,
            0.0005357348709367216,
            8.28558040666394e-05
        ],
        "align_select": "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which is the cell number, home phone or email address of each professional?",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.cell_number, Professionals.home_phone, Professionals.email_address",
            "select Professionals.cell_number, Professionals.home_phone or Professionals.email_address",
            "select Professionals.home_phone, Professionals.email_address",
            "select Professionals.professional_id, Professionals.home_phone, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9826986789703369,
            8.237060683313757e-05,
            0.9919484853744507,
            7.524763350374997e-05,
            0.0012031691148877144,
            0.000139749696245417,
            0.0004627413582056761,
            6.87916690367274e-05
        ],
        "align_select": "select Professionals.cell_number, Professionals.home_phone, Professionals.email_address",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please give the email address, home phone and cell number of each professional.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number.",
            "select Professionals.email_address, Professionals.home_phone, Professionals.professional_id",
            "select Professionals.email_address, t66.c9, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9935908317565918,
            0.0001514688483439386,
            0.006164844613522291,
            0.00010285054304404184,
            0.00030599735327996314,
            8.507201710017398e-05,
            0.0006220709765329957,
            9.292059257859364e-05
        ],
        "align_select": "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please enter the first names of all medical practitioners along with their respective treatments.",
        "gold_select": "select distinct Professionals.first_name, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Professionals.first_name, Treatments.treatment_type_code",
            "select Professionals.first_name, Treatments.dog_id",
            "select Professionals.first_name, Treatments.professional_id",
            "select distinct Professionals.first_name, Treatments.treatment_type_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.8767247200012207,
            0.00016433488053735346,
            0.009276362136006355,
            0.00015933613758534193,
            0.004843483213335276,
            0.00014221499441191554,
            0.016802143305540085,
            0.00010239159018965438
        ],
        "align_select": "select Professionals.first_name, Treatments.treatment_type_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Enter the first names for each professional, followed by a detailed account of their treatment type.",
        "gold_select": "select distinct Professionals.first_name, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Professionals.first_name, Treatment_Types.treatment_type_description",
            "select Professionals.first_name, Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Professionals.first_name, Treatment_Types.treatment_type_description - Treatments.treatment_type_code",
            "select Professionals.first_name, Treatment_Types.treatment_type_code_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9789390563964844,
            0.9225789308547974,
            0.00018423478468321264,
            0.0002595556143205613,
            0.0019696098752319813,
            0.0028535991441458464,
            0.9300540089607239,
            0.8701075911521912
        ],
        "align_select": "select Professionals.first_name, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For those who have operated a treatment which has been less expensive than the average, give me their first and last names.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name",
            "select Professionals.role_code, Owners.last_name",
            "select Professionals.first_name, Owners.last_name",
            "select Professionals.first_name, Professionals.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Owners Professionals Treatments",
            "Owners Treatments",
            "Owners Dogs Professionals Treatments",
            "Sizes Owners Professionals Treatments",
            "Treatment_Types Owners Professionals Treatments",
            "Sizes Owners Treatments",
            "Treatment_Types Owners Treatments"
        ],
        "align_scores": [
            0.8222726583480835,
            0.00018131191609427333,
            0.0003683899703901261,
            8.83642424014397e-05,
            0.005968441721051931,
            0.00019364031322766095,
            0.0010580114321783185,
            0.00010778570867842063
        ],
        "align_select": "select Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need to find out about which therapists treat patients for a low price. Give me their first names and last names.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select Professionals.role_code, Professionals.first_name",
            "select distinct Professionals.first_name, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Owners Professionals Treatments",
            "Treatment_Types Owners Professionals Treatments",
            "Owners Dogs Professionals Treatments",
            "Sizes Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9187984466552734,
            0.004076703451573849,
            0.00043440473382361233,
            0.0002957151154987514,
            0.0003611325810197741,
            0.0002348998823435977,
            0.07226531952619553,
            0.0002491857158020139
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the people who operate the therapy which costs less than the average? Give me their first names and last names.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name",
            "select Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.first_name",
            "select Professionals.first_name, Professionals.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Owners Professionals Treatments",
            "Treatment_Types Owners Professionals Treatments",
            "Dogs Professionals Treatments",
            "Sizes Professionals Treatments",
            "Professionals Treatments",
            "Charges Professionals Treatments",
            "Sizes Treatments",
            "Owners Treatments"
        ],
        "align_scores": [
            0.9541716575622559,
            0.00016526637773495167,
            0.9741748571395874,
            0.00019476765010040253,
            0.0002715786686167121,
            0.0001392106496496126,
            0.0008875029743649065,
            0.00012326733849477023
        ],
        "align_select": "select Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to find out which professionals have been operating treatment that costs less than the average. I need their first names and last names.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select the Professionals.first_name, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.8936933279037476,
            0.0002668282249942422,
            0.1186540275812149,
            9.257592319045216e-05,
            0.0003924389311578125,
            9.727315773488954e-05,
            0.0015398552641272545,
            0.00021141536126378924
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which professional had operated a treatment that was cheaper than the average? Give me their first name and last name.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select t 6.c2, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.9355067014694214,
            0.0020273535046726465,
            0.09483056515455246,
            0.00015844075824134052,
            0.0004487133992370218,
            0.00010482208745088428,
            0.0009250437142327428,
            0.00011865371925523505
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me email addresses, home numbers, and cell phone numbers for all the professionals here.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number.",
            "select Professionals.email_address, t 6.c9, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.988014280796051,
            0.00016956216131802648,
            0.988014280796051,
            0.00016956216131802648,
            0.004434926901012659,
            9.809182665776461e-05,
            0.0007617554510943592,
            8.482050179736689e-05
        ],
        "align_select": "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please enter the email address, home phone and cell phone of each professional below.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number.",
            "select Professionals.email_address, t 6.c9, Professionals.cell_number",
            "select Professionals.email_address, t66.c9, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9829490184783936,
            0.00014224428741727024,
            0.004266250878572464,
            9.27118890103884e-05,
            0.0005631059175357223,
            8.18658372736536e-05,
            0.0004830265243072063,
            7.712154183536768e-05
        ],
        "align_select": "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Enter all the emails, home numbers and cell phones for all the professionals.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number.",
            "select Professionals.email_address, t66.c9, Professionals.cell_number",
            "select Professionals.email_address, t 6.c9, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9108133316040039,
            0.00014532489876728505,
            0.0032672430388629436,
            9.39793317229487e-05,
            0.0005910099716857076,
            9.949008381227031e-05,
            0.0006043490138836205,
            9.675408364273608e-05
        ],
        "align_select": "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List down all the emails, mobile numbers and landlines of all the professional.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
            "select Professionals.email_address, Professionals.home_phone, Professionals.city",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, Professionals.home_phone, Professionals.street"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.985395610332489,
            9.200152271660045e-05,
            0.00042800846858881414,
            9.318572847405449e-05,
            0.9875653386116028,
            0.000101133031421341,
            0.0003293875197414309,
            8.394591714022681e-05
        ],
        "align_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Enter the email, home phone and cell number for the professionals below.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number.",
            "select Professionals.email_address, t66.c9, Professionals.cell_number",
            "select Professionals.email_address, t 6.c9, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9698432683944702,
            0.00012189657718408853,
            0.0048339636996388435,
            8.579489076510072e-05,
            0.0007205728907138109,
            9.309691813541576e-05,
            0.000692384026478976,
            8.63887689774856e-05
        ],
        "align_select": "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please enter the email addresses, home phone numbers and cell phone numbers of all the professionals.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number.",
            "select Professionals.email_address, t 6.c9, Professionals.cell_number",
            "select Professionals.email_address, t66.c9, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.8652809262275696,
            0.00020041168318130076,
            0.0036472862120717764,
            0.00010998788638971746,
            0.0004930327413603663,
            9.128265810431913e-05,
            0.0005504153086803854,
            9.473703539697453e-05
        ],
        "align_select": "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "I would like to find the id, last name and cell number of all professionals that live in the state of Indiana or have performed over two treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select Professionals.role_code, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.42990919947624207,
            0.014801505021750927,
            0.3152945041656494,
            0.01792738400399685,
            0.000347306951880455,
            0.00022930132399778813,
            0.007455687504261732,
            0.0010353728430345654
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please find the ID, last name and cell telephone number of all professionals located in the state of Indiana or have performed more than 2 treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select t8.c2, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.20615096390247345,
            0.0034768490586429834,
            0.04660042002797127,
            0.0030311993323266506,
            0.00024832403869368136,
            0.0001674737868597731,
            0.00021604556241072714,
            0.00012200787750771269
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please find the professional's ID, last name and mobile phone number, if they are located in the state of Indiana and have done more than 2 treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select t8.c2, Professionals.last_name, Professionals.cell_number",
            "select Treatments.dog_id, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.03688952699303627,
            0.00012570424587465823,
            0.8055755496025085,
            0.00016810206579975784,
            0.0007280019344761968,
            8.863658149493858e-05,
            0.000780463800765574,
            9.387354657519609e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "I would like you to find the different breed type and size combination of dogs.",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select distinct Dogs.breed_code, Dogs.size_code",
            "select Dogs.breed_code, Dogs.size_code",
            "select unique Dogs.breed_code, Dogs.size_code",
            "select different Dogs.breed_code, Dogs.size_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9706713557243347,
            0.0003538578748703003,
            0.0363616906106472,
            0.04103606939315796,
            0.0005364295211620629,
            0.0003031138621736318,
            0.9610869288444519,
            0.00040296147926710546
        ],
        "align_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find all the breed types and their corresponding sizes that are listed for dogs.",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select Dogs.breed_code, Dogs.size_code",
            "select distinct Dogs.breed_code, Dogs.size_code",
            "select t5.cbreed_code, Dogs.size_code",
            "select Dogs.owner_id, Dogs.size_code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Sizes Dogs",
            "Sizes Treatment_Types Dogs",
            "Breeds Sizes Dogs",
            "Treatment_Types Dogs",
            "Owners Dogs",
            "Charges Dogs",
            "Charges Treatment_Types Dogs"
        ],
        "align_scores": [
            0.8563178777694702,
            0.9845497608184814,
            0.3604968190193176,
            0.001160219544544816,
            0.0009323685662820935,
            0.0007889163098298013,
            0.001107243006117642,
            0.000769781821873039
        ],
        "align_select": "select Dogs.breed_code, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list the names of the dogs that never broke their owners' bank account over 1000 for treatment.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Treatments.professional_id",
            "select Dogs.name, Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Charges Dogs Treatments",
            "Charges Sizes Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Charges Treatment_Types Dogs Treatments",
            "Charges Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.766833484172821,
            0.014345496892929077,
            0.0003699123044498265,
            0.0003479441802483052,
            0.0002508239704184234,
            0.000253668607911095,
            0.0002849729498848319,
            0.0003436533152125776
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the first, last names of the doctors who treated you for less than average amount of money.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Dogs.owner_id, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Charges Professionals Treatments",
            "Charges Sizes Professionals Treatments",
            "Breeds Charges Professionals Treatments",
            "Charges Sizes Treatments",
            "Charges Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9699478149414062,
            0.00014539183757733554,
            0.0003042220778297633,
            9.440012945560738e-05,
            0.034674953669309616,
            8.26571776997298e-05,
            0.00036289129639044404,
            0.00012284818512853235
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the names of the medical professionals whom you have treated at a price lower than average.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select the Professionals.first_name, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.46043065190315247,
            0.21789385378360748,
            0.09886427223682404,
            0.002154229674488306,
            0.0007417515153065324,
            0.0009534917771816254,
            0.0013239942491054535,
            0.0005182244931347668
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the first and last names of the medical professionals whom you have treated at a price lower than average.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select the Professionals.first_name, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Sizes Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.5132805109024048,
            0.00022328519844450057,
            0.10336866229772568,
            0.00012291569146327674,
            0.0005364989629015326,
            0.00010215733345830813,
            0.001514156931079924,
            0.00013038220640737563
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know the names of the dogs that do not cost more than $1000 for treatment.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Treatments.dog_id, Dogs.abandoned_yn",
            "select Dogs.name, Treatments.dog_id, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Breeds Dogs Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.8110632300376892,
            0.38960427045822144,
            0.0002641502069309354,
            0.0004884111112914979,
            0.00015904985775705427,
            0.0001364367053611204,
            0.00016030810365919024,
            0.00012275204062461853
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the list of the dogs that the owners did not pay over $1000 for the treatment.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.dog_id",
            "select Dogs.dog_id, Dogs.owner_id",
            "select Dogs.dog_id, Dogs.owner_id, Dogs.breed_code",
            "select Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Sizes Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Owners Dogs Treatments",
            "Breeds Dogs Treatments"
        ],
        "align_scores": [
            0.043537430465221405,
            0.01274742092937231,
            0.00020830768335144967,
            0.0002518001419957727,
            0.000169160237419419,
            0.00022592606546822935,
            9.63463171501644e-05,
            0.00012799342221114784
        ],
        "align_select": "select Dogs.dog_id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Please provide me with the list of dogs for which the owner did not pay more than 1 000 for treatment.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.dog_id",
            "select Dogs.dog_id, Dogs.owner_id",
            "select Dogs.dog_id, Treatments.dog_id",
            "select Dogs.dog_id, Charges.charge_amount"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Sizes Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Breeds Dogs Treatments",
            "Owners Dogs Treatments"
        ],
        "align_scores": [
            0.013735827058553696,
            0.00889106560498476,
            0.00013801633031107485,
            0.00019181831157766283,
            0.00019764770695474,
            0.00035483375540934503,
            0.00024417461827397346,
            0.00017654604744166136
        ],
        "align_select": "select Dogs.dog_id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the identification, role and e-mail address of the professionals who did not provide any service on the dogs.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.email_address",
            "select Professionals.role_code, Professionals.first_name, Professionals.email_address",
            "select Professionals.first_name, Professionals.role_code, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.8989313244819641,
            0.03082815557718277,
            0.0006170465494506061,
            0.0001771274401107803,
            0.0009827548637986183,
            0.0002167778875445947,
            0.001403320929966867,
            0.0002879127860069275
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Please give me the e-mail address, role code and professional ID of all those who did not treat any dogs.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "select_candidates": [
            "select Professionals.email_address, Professionals.role_code, Professionals.professional_id",
            "select Professionals.email_address, Professionals.first_name, Professionals.professional_id",
            "select Professionals.email_address, Professionals.professional_id, Professionals.role_code",
            "select Professionals.email_address, Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.8185118436813354,
            0.7334575653076172,
            0.0003640846989583224,
            0.0003303051053080708,
            0.8400641679763794,
            0.7616153955459595,
            0.00029560207622125745,
            0.00024653965374454856
        ],
        "align_select": "select Professionals.email_address, Professionals.role_code, Professionals.professional_id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Give me information about the treatment type that has the lowest price in total.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Owners.first_name, Treatments.treatment_type_code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatments",
            "Treatment_Types Treatments",
            "Dogs Treatments",
            "Owners Treatments",
            "Dogs Professionals Treatments",
            "Professionals Treatments",
            "Charges Treatments",
            "Owners Professionals Treatments"
        ],
        "align_scores": [
            0.0010874506551772356,
            8.388813148485497e-05,
            0.9937585592269897,
            9.420526475878432e-05,
            0.00016867753583937883,
            5.9703517763409764e-05,
            0.00045240341569297016,
            7.966997509356588e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Describe the cheapest treatment type in terms of the amount spent to treat it.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9920660853385925,
            0.9946474432945251,
            0.00035098526859655976,
            0.00030542552121914923,
            0.0005411944002844393,
            0.0004278061678633094,
            0.00012497436546254903,
            9.752150799613446e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Describe which ones of these treatment types costs the least amount of money.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.0006394342635758221,
            0.000553418300114572,
            0.00054155383259058,
            0.0005231981631368399,
            0.9878286123275757,
            0.9937624335289001,
            0.00013922990183345973,
            0.0001159095045295544
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "The treatment that has the lowest cost, describe it to me.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_description, Treatments.dog_id",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Owners Treatments"
        ],
        "align_scores": [
            0.9904128909111023,
            6.43569728708826e-05,
            0.00015559897292405367,
            5.745626549469307e-05,
            0.00021195648878347129,
            5.710927871405147e-05,
            0.0007243866566568613,
            5.549893103307113e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me which dog owner has spent the most on veterinary bills so far? Show the owner ID and ZIP code.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code",
            "select Sizes.size_code, Owners.zip_code",
            "select Charges.charge_type, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Charges Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.9832911491394043,
            0.00011170345533173531,
            0.426676869392395,
            0.00011533244833117351,
            0.0005255252472124994,
            9.466389019507915e-05,
            0.0004774634726345539,
            8.679851453052834e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "The owner who spent most on their dogs can be found here. Give me their ID and their ZIP Code.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code",
            "select Treatments.dog_id, Owners.zip_code",
            "select t8.c1, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Charges Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Breeds Owners Dogs Treatments"
        ],
        "align_scores": [
            0.9841788411140442,
            0.9561701416969299,
            0.5360390543937683,
            0.08594677597284317,
            0.010771675035357475,
            0.0026618405245244503,
            0.0006038532010279596,
            0.0007792922551743686
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "I would like to get the ids and mobile phone numbers for professionals who did at least two types of treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.cell_number",
            "select Professionals.first_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.cell_number",
            "select Professionals.role_code, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.9771421551704407,
            0.0028113736771047115,
            0.0004245732561685145,
            8.669767703395337e-05,
            0.9517987966537476,
            0.0014884958509355783,
            0.017630524933338165,
            0.0007046973914839327
        ],
        "align_select": "select Professionals.professional_id, Professionals.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which professionals have completed at least two treatments? Enter their professional ids and mobile numbers.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.cell_number",
            "select Professionals.first_name, Professionals.cell_number",
            "select Professionals.role_code, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Charges Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.7535359859466553,
            0.00014428737631533295,
            0.25118231773376465,
            0.0001625169679755345,
            0.0002953798102680594,
            9.149259858531877e-05,
            0.004535502754151821,
            0.00014553594519384205
        ],
        "align_select": "select Professionals.professional_id, Professionals.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please find the cell number and professional ID of those professionals who work in two or more different types of treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.cell_number, Professionals.professional_id",
            "select Professionals.cell_number, Treatments.professional_id",
            "select Professionals.home_phone, Professionals.professional_id",
            "select Professionals.professional_id, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9882900714874268,
            0.005558946169912815,
            0.9844226241111755,
            0.007174449507147074,
            0.0005661778268404305,
            0.0005445432616397738,
            0.98944491147995,
            0.0074936882592737675
        ],
        "align_select": "select Professionals.cell_number, Professionals.professional_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please find the ID and cell number of the professionals who work on two or more types of treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.cell_number",
            "select Professionals.first_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.cell_number",
            "select Professionals.role_code, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.977835476398468,
            0.0010336865670979023,
            0.0006264290423132479,
            9.019897697726265e-05,
            0.7276175022125244,
            0.0006060147425159812,
            0.08052118122577667,
            0.00036917178658768535
        ],
        "align_select": "select Professionals.professional_id, Professionals.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please inform me about the price for the latest medical care.",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code",
            "select Treatments.cost_of_treatment, t7.c6",
            "select Treatments.cost_of_treatment, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Owners Treatments",
            "Dogs Professionals Treatments",
            "Charges Treatments",
            "Professionals Treatments",
            "Treatment_Types Treatments"
        ],
        "align_scores": [
            0.0015444755554199219,
            0.9784481525421143,
            0.00011071648623328656,
            0.00015656005416531116,
            0.0002143121528206393,
            0.00047500611981377006,
            0.00011160667781950906,
            0.00013423903146758676
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the cost of the latest treatment.",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select max(Treatments.cost_of_treatment)",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code",
            "select Treatments.cost_of_treatment, Treatments.date_of_treatment"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Breeds Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.006850843317806721,
            6.649212446063757e-05,
            7.184498099377379e-05,
            6.277846841840073e-05,
            0.0002606449997983873,
            5.617280839942396e-05,
            0.0002598805003799498,
            6.0238926380407065e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please list the price for each charge category and total cost.",
        "gold_select": "select Charges.charge_type, Charges.charge_amount",
        "select_candidates": [
            "select Charges.charge_type, sum(Charges.charge_amount)",
            "select Charges.charge_id, Charges.charge_type, sum(Charges.charge_amount)",
            "select Charges.charge_amount, sum(Charges.charge_amount)",
            "select Charges.charge_type.c2, sum(Charges.charge_amount)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.8206566572189331,
            0.00046643102541565895,
            0.0005959906266070902,
            0.0001348365913145244,
            0.9645197987556458,
            0.0006879081483930349,
            0.00046196309267543256,
            0.00018323445692658424
        ],
        "align_select": "select Charges.charge_type, sum(Charges.charge_amount)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please state every combination of breed and size codes.",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select Dogs.breed_code, Dogs.size_code",
            "select distinct Dogs.breed_code, Dogs.size_code",
            "select every Dogs.breed_code, Dogs.size_code",
            "select unique Dogs.breed_code, Dogs.size_code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.43622925877571106,
            9.554811549605802e-05,
            0.13428671658039093,
            0.00010109599679708481,
            0.0048424676060676575,
            0.00010113862663274631,
            0.0014774490846320987,
            0.00011830979201477021
        ],
        "align_select": "select Dogs.breed_code, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the list of all possible combination of breed and size codes.",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select Dogs.breed_code, Dogs.size_code",
            "select distinct Dogs.breed_code, Dogs.size_code",
            "select possible Dogs.breed_code, Dogs.size_code",
            "select every possible Dogs.breed_code, Dogs.size_code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Treatment_Types Dogs",
            "Sizes Dogs",
            "Owners Dogs",
            "Charges Dogs",
            "Sizes Treatment_Types Dogs",
            "Sizes Treatment_Types Owners"
        ],
        "align_scores": [
            0.521075963973999,
            8.577647531637922e-05,
            0.05601465702056885,
            8.874144987203181e-05,
            0.0018897904083132744,
            0.00010097229824168608,
            0.5314468145370483,
            8.480125688947737e-05
        ],
        "align_select": "select Dogs.breed_code, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me a list containing all possible breed and size combinations.",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select Dogs.breed_code, Dogs.size_code",
            "select possible Dogs.breed_code, Dogs.size_code",
            "select distinct Dogs.breed_code, Dogs.size_code",
            "select unique Dogs.breed_code, Dogs.size_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Sizes Dogs",
            "Breeds Sizes Dogs",
            "Treatment_Types Dogs",
            "Sizes Treatment_Types Dogs",
            "Charges Sizes Dogs",
            "Charges Dogs",
            "Owners Dogs"
        ],
        "align_scores": [
            0.8935083150863647,
            9.817315003601834e-05,
            0.0015887899789959192,
            0.00010583156836219132,
            0.423937052488327,
            8.4446590335574e-05,
            0.0007496949983760715,
            8.314034494105726e-05
        ],
        "align_select": "select Dogs.breed_code, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For each professional, please give their first name and describe the treatments that they have done.",
        "gold_select": "select distinct Professionals.first_name, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Professionals.first_name, Treatments.treatment_type_code",
            "select Professionals.first_name, Treatments.dog_id",
            "select Professionals.first_name, Treatments.professional_id",
            "select Professionals.first_name, Treatment_Types.treatment_type_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Sizes Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9882392883300781,
            0.9729655981063843,
            0.00531285023316741,
            0.0036076477263122797,
            0.002459919545799494,
            0.0012802216224372387,
            0.9821707010269165,
            0.9909090399742126
        ],
        "align_select": "select Professionals.first_name, Treatments.treatment_type_code",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me singers in ascending order of wealth.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID, singer.Name",
            "select singer.Singer_ID, singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9958406090736389,
            0.00021140064927749336,
            0.00029553810600191355,
            0.0001533537288196385,
            0.000344727945048362,
            0.0001339731679763645,
            0.00020077086810488254,
            0.0001270071807084605
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Please enter singers according to their wealth.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID",
            "select singer.Name",
            "select singer.Singer_ID, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.0005366923287510872,
            0.0003790629853028804,
            0.022330179810523987,
            0.0046358490362763405,
            0.9915708303451538,
            0.9161630868911743,
            0.00020887490245513618,
            0.0003600975906010717
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Please put the names of singers ranked by their wealth in ascending order below.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name in singer.Net_Worth_Millions",
            "select singer.Name de-facto-ORDER BY"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9927293658256531,
            0.0003490440431050956,
            0.00030299913487397134,
            0.00016647631127852947,
            0.0011680200695991516,
            0.00028094128356315196,
            0.009351321496069431,
            0.0002039412356680259
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show the different nationalities, and their numbers of singers of each.",
        "gold_select": "select singer.Citizenship, count(*)",
        "select_candidates": [
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship., count(*)",
            "select singer.Citizenship, t0.c5, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9928856492042542,
            0.00020320946350693703,
            0.9928856492042542,
            0.00020320946350693703,
            0.0023619451094418764,
            0.00026420888025313616,
            0.00029003722011111677,
            0.00021364253188949078
        ],
        "align_select": "select singer.Citizenship, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me different nationalities and their numbers of singers in each.",
        "gold_select": "select singer.Citizenship, count(*)",
        "select_candidates": [
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship, count(*), singer.Citizenship",
            "select singer.Citizenship., count(*)",
            "select singer.Citizenship, count(*), t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9939938187599182,
            0.00023726849758531898,
            0.0003591155691538006,
            0.00015448883641511202,
            0.00330886198207736,
            0.0002905797155108303,
            0.00022648469894193113,
            0.00012297007197048515
        ],
        "align_select": "select singer.Citizenship, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Of the singers, what are their birth years and nationalities?",
        "gold_select": "select singer.Birth_Year, singer.Citizenship",
        "select_candidates": [
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Singer_ID, singer.Birth_Year, singer.Citizenship",
            "select singer.Name, singer.Birth_Year, singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9905462265014648,
            0.002064964035525918,
            0.0002663902414496988,
            0.0001374492421746254,
            0.0003899983421433717,
            0.00015709736908320338,
            0.9914678335189819,
            0.0016406180802732706
        ],
        "align_select": "select singer.Birth_Year, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "I want to know the birth year and nationality of singers.",
        "gold_select": "select singer.Birth_Year, singer.Citizenship",
        "select_candidates": [
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Singer_ID, singer.Birth_Year, singer.Citizenship",
            "select singer.Name, singer.Birth_Year, singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9952576756477356,
            0.0016332726227119565,
            0.00017697465955279768,
            0.00012356223305687308,
            0.00020530656911432743,
            0.0001360285677947104,
            0.9958589673042297,
            0.002863613422960043
        ],
        "align_select": "select singer.Birth_Year, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "I need to know the birth years and countries of the singers above.",
        "gold_select": "select singer.Birth_Year, singer.Citizenship",
        "select_candidates": [
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Singer_ID, singer.Birth_Year, singer.Citizenship",
            "select singer.Name, singer.Birth_Year, singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.976664662361145,
            0.00011971929779974744,
            0.000182308693183586,
            8.385182445636019e-05,
            0.000243153321207501,
            8.829399303067476e-05,
            0.9829339385032654,
            0.00011973413347732276
        ],
        "align_select": "select singer.Birth_Year, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "I need to know the birth years and nationalities of the singers.",
        "gold_select": "select singer.Birth_Year, singer.Citizenship",
        "select_candidates": [
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Singer_ID, singer.Birth_Year, singer.Citizenship",
            "select singer.Name, singer.Birth_Year, singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9936050772666931,
            0.00011774121958296746,
            0.00019223116396460682,
            8.443323167739436e-05,
            0.00030484513263218105,
            8.984616579255089e-05,
            0.9943353533744812,
            0.00011426655692048371
        ],
        "align_select": "select singer.Birth_Year, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please enter the birth years and nationalities of the singers below.",
        "gold_select": "select singer.Birth_Year, singer.Citizenship",
        "select_candidates": [
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Singer_ID, singer.Birth_Year, singer.Citizenship",
            "select singer.Name, singer.Birth_Year, singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9889743328094482,
            0.00012926127237733454,
            0.00019050395349040627,
            8.808467828202993e-05,
            0.0003179219493176788,
            9.72848356468603e-05,
            0.9901228547096252,
            0.00012577067536767572
        ],
        "align_select": "select singer.Birth_Year, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the birth years and nationalities of the singers.",
        "gold_select": "select singer.Birth_Year, singer.Citizenship",
        "select_candidates": [
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Singer_ID, singer.Birth_Year, singer.Citizenship",
            "select singer.Name, singer.Birth_Year, singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9934087991714478,
            0.0024432127829641104,
            0.0001841304765548557,
            0.00012185324158053845,
            0.0003093356208410114,
            0.00014584949531126767,
            0.9937043786048889,
            0.0030084564350545406
        ],
        "align_select": "select singer.Birth_Year, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list the birth years and nationalities of the singers.",
        "gold_select": "select singer.Birth_Year, singer.Citizenship",
        "select_candidates": [
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Singer_ID, singer.Birth_Year, singer.Citizenship",
            "select singer.Name, singer.Birth_Year, singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9927873015403748,
            0.00011825317778857425,
            0.0001911874278448522,
            8.579571294831112e-05,
            0.000356106465915218,
            9.452353697270155e-05,
            0.9932785630226135,
            0.00011777559120673686
        ],
        "align_select": "select singer.Birth_Year, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Could you add the names of those singers whose country is not France below?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9655606150627136,
            0.00010495490278117359,
            0.00018364479183219373,
            7.387371442746371e-05,
            0.00022386159980669618,
            7.229582843137905e-05,
            0.00017385650426149368,
            7.380295573966578e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the names of singers who are not citizens of France below.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9205611348152161,
            0.00029498778167180717,
            0.00022897821327205747,
            7.770828233333305e-05,
            0.00025006322539411485,
            9.627118561184034e-05,
            0.00022264401195570827,
            7.529393042204902e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me names of singers who are not citizens of France below.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.634463369846344,
            0.0002714130387175828,
            0.00023750841501168907,
            7.41368712624535e-05,
            0.00022137902851682156,
            8.392846211791039e-05,
            0.00020769407274201512,
            7.014843140495941e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please enter singers whose passport is not French below.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Singer_ID",
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.0017750306287780404,
            0.0001315859699388966,
            0.780567467212677,
            0.00013080783537589014,
            0.00023712193069513887,
            7.783287583151832e-05,
            0.00017811193538364023,
            7.126593845896423e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers are not French Citizens?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select singer.Name",
            "select distinct singer.Name, singer.Birth_Year",
            "select distinct singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.1412864476442337,
            0.11590893566608429,
            0.8718038201332092,
            0.44080013036727905,
            0.0006843901355750859,
            0.0002731686981860548,
            0.0007628465536981821,
            0.00015167478704825044
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the singers who do not hold French citizenship here?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select distinct singer.Name",
            "select distinct singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.7988384962081909,
            0.00926889292895794,
            0.0002817451604641974,
            0.00017692589608486742,
            0.10713957995176315,
            0.0608120933175087,
            0.00045964273158460855,
            0.00015626968524884433
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Write down the names of singers who do not hold French citizenship.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.945151150226593,
            0.005190510302782059,
            0.00019596167840063572,
            0.0001512079470558092,
            0.0002167580387322232,
            0.00010852021659957245,
            0.00024116953136399388,
            0.00011930061009479687
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers do not hold French citizenship?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select distinct singer.Name",
            "select singer.Singer_ID",
            "select distinct singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.7981411814689636,
            0.4053378999233246,
            0.11825083196163177,
            0.16253039240837097,
            0.009017645381391048,
            0.022152617573738098,
            0.00048133626114577055,
            0.00018623925279825926
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the name of the highest-paid musician?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.9864935874938965,
            6.304285489022732e-05,
            0.0005979656707495451,
            5.91437092225533e-05,
            0.00032429146813228726,
            5.3392457630252466e-05,
            0.0005979656707495451,
            5.91437092225533e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who is the richest singer at present?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9730377197265625,
            6.264528201427311e-05,
            0.0004812795959878713,
            5.962676368653774e-05,
            0.001107861171476543,
            5.837136632180773e-05,
            0.0004812795959878713,
            5.962676368653774e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What's the name of the highest-paid singer in the world?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name (or singer.Birth_Year)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9743313193321228,
            6.169811240397394e-05,
            0.0006003155140206218,
            6.130635301815346e-05,
            0.0003831261128652841,
            5.515472003025934e-05,
            0.0008133042138069868,
            6.506836507469416e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "For each nationality, how many singers originate from that country?",
        "gold_select": "select singer.Citizenship, count(*)",
        "select_candidates": [
            "select singer.Citizenship, count(*)",
            "select count(*), singer.Citizenship",
            "select singer.Citizenship.c4, count(*)",
            "select singer.Citizenship, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9949624538421631,
            0.0003165500529576093,
            0.994648277759552,
            0.0002707854437176138,
            0.0011643115431070328,
            0.0002635426935739815,
            0.9949624538421631,
            0.0003165500529576093
        ],
        "align_select": "select singer.Citizenship, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me information about the most common citizen of singers.",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, singer.Name",
            "select singer.Citizenship, t0.c5",
            "select singer.Citizenship, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9952003955841064,
            6.611427670577541e-05,
            0.0002060242841253057,
            5.907701779506169e-05,
            0.00030784786213189363,
            7.046448445180431e-05,
            0.006035933271050453,
            6.133651186246425e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please tell me the singers of which nationality are the most common.",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship, singer.Name",
            "select singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9909441471099854,
            6.472539098467678e-05,
            0.06436178833246231,
            5.7827190175885335e-05,
            0.0006555222789756954,
            6.0129248595330864e-05,
            0.000562950735911727,
            6.281505920924246e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which is the most common passport for singers?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship de facto-dominance-gROUP BY-ORDER BY-LIMIT",
            "select singer.Citizenship de facto-dominance-GROUP BY-ORDER BY-LIMIT",
            "select singer.Citizenship, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9946000576019287,
            6.790635961806402e-05,
            0.0008676382130943239,
            0.00011646768689388409,
            0.0008676382130943239,
            0.00011646768689388409,
            0.0003824127488769591,
            6.545358337461948e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the maximum wealth for each category according to their nationality.",
        "gold_select": "select singer.Citizenship, max(singer.Net_Worth_Millions)",
        "select_candidates": [
            "select max(singer.Net_Worth_Millions), singer.Citizenship",
            "select singer.Citizenship, max(singer.Net_Worth_Millions)",
            "select maximum(singer.Net_Worth_Millions), singer.Citizenship",
            "select min(singer.Net_Worth_Millions), singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9884496927261353,
            0.00016022771887946874,
            0.9916439652442932,
            0.00023164620506577194,
            0.000684232625644654,
            0.00010787978681037202,
            0.000257296982454136,
            0.00011565149907255545
        ],
        "align_select": "select max(singer.Net_Worth_Millions), singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me all the singers whose songs sold more than 300,000 copies.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select song.Singer_ID",
            "select song.Singer_ID, song.Title",
            "select song.Singer_ID, song.Sales",
            "select distinct song.Singer_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "song",
            "singer song",
            "song singer song",
            "song singer"
        ],
        "align_scores": [
            0.14358322322368622,
            0.0010630706092342734,
            0.00018035221728496253,
            7.760978769510984e-05,
            0.0002623438776936382,
            7.420540350722149e-05,
            0.8038842678070068,
            0.00032590061891824007
        ],
        "align_select": "select distinct song.Singer_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to see different names of singers that had songs which sold over 300 000 copies.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select different singer.Name",
            "select singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9922139048576355,
            0.009033170528709888,
            0.00033923788578249514,
            0.0002132839144906029,
            0.9062600135803223,
            0.024170901626348495,
            0.3304302990436554,
            0.8907610774040222
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the names of singers who had their songs sold more than 300,000 copies.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.7697784304618835,
            0.8894518613815308,
            0.0002923657011706382,
            0.0007729904027655721,
            0.05820293352007866,
            0.23417583107948303,
            0.00020530539040919393,
            0.00036809645825996995
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me about the different names of those singers whose songs sold more than 300 000.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select count(distinct singer.Name)",
            "select distinct singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9835890531539917,
            0.00016983530076686293,
            0.00034066246007569134,
            8.771486318437383e-05,
            0.008695405907928944,
            8.549891936127096e-05,
            0.00021653475414495915,
            8.219060691772029e-05
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like details about all the properties under that particular property type code.",
        "gold_select": "select Ref_Property_Types.property_type_description",
        "select_candidates": [
            "select Properties.other_property_details",
            "select Properties.property_type_code, Properties.other_property_details",
            "select Properties.property_type_code, Properties.date_on_market",
            "select Properties.property_address, Properties.other_property_details"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Ref_Property_Types Properties",
        "table_candidates": [
            "Properties",
            "Properties Other_Property_Features"
        ],
        "align_scores": [
            0.9795311689376831,
            0.05589732900261879,
            0.0003859244752675295,
            0.013366696424782276,
            0.0001776892167981714,
            0.000258747924817726,
            0.00023462699027732015,
            0.0003635366738308221
        ],
        "align_select": "select Properties.other_property_details",
        "align_structure": "SELECT-FROM-WHERE"
    }
]