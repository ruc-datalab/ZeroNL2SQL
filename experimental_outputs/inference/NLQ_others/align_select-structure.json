[
    {
        "question": "Give me all the names of the countries where the singers above age 20 come from.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select singer.Country, singer.Is_male",
            "select singer.Country, singer.Song_Name",
            "select singer.Country, singer.Age"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8489680886268616,
            0.00019849663658533245,
            0.00018702812667470425,
            6.753425986971706e-05,
            0.00021719789947383106,
            6.722725083818659e-05,
            0.00018482666928321123,
            6.95814669597894e-05
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the countries where the singers above age 20 are from.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select distinct singer.Country",
            "select singer.Country, singer.Is_male",
            "select singer.Country, singer.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer concert singer_in_concert"
        ],
        "align_scores": [
            0.8308455348014832,
            0.51411372423172,
            0.8346729874610901,
            0.00043441797606647015,
            0.0001603343989700079,
            0.00018255988834425807,
            0.00015821233682800084,
            0.0001334139087703079
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the names of countries where singers above age 20 come from?",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select singer.Country, singer.Is_male",
            "select singer.Country, singer.Song_Name",
            "select singer.Country, singer.Age"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9643657803535461,
            0.00024162849877029657,
            0.0001891057036118582,
            7.480148633476347e-05,
            0.00019632618932519108,
            6.570210825884715e-05,
            0.00017277109145652503,
            7.163434929680079e-05
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all distinct countries where singers above the age of 20 are from.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select distinct singer.Country",
            "select distinct singer.Country, singer.Age",
            "select distinct singer.Country, count(distinct singer.Age)",
            "select distinct singer.Country, count(distinct singer.Singer_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9839396476745605,
            0.0004126096027903259,
            0.0001225470332428813,
            9.54147326410748e-05,
            0.0001485169486841187,
            9.966899233404547e-05,
            0.00011772505240514874,
            8.318570326082408e-05
        ],
        "align_select": "select distinct singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me your data on the average, minimum, and maximum ages of all singers from France.",
        "gold_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "select_candidates": [
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age) and max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Is_male)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9889294505119324,
            9.279273945139721e-05,
            0.9889294505119324,
            9.279273945139721e-05,
            0.9644467234611511,
            8.322235225932673e-05,
            0.00021499162539839745,
            7.279482088051736e-05
        ],
        "align_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the names of the singers and concert amount for each person.",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, sum(concert.Stadium_ID)",
            "select singer.Name, sum(concert.Year)",
            "select singer.Name, sum(t2.c5)",
            "select singer.Name, sum(concert.concert_Name)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer concert singer_in_concert",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.010796497575938702,
            0.00019351921218913049,
            0.0012609607074409723,
            0.00020771070558112115,
            0.0010788248619064689,
            0.00025808022473938763,
            0.002563666319474578,
            0.00018245860701426864
        ],
        "align_select": "select singer.Name, sum(concert.Stadium_ID)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the name and number of concerts for each singer.",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select singer.Name, count(*), concert.Stadium_ID",
            "select singer.Name, count(*), concert.concert_Name",
            "select singer.Name, count(*), concert.concert_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer singer_in_concert",
            "singer concert singer_in_concert"
        ],
        "align_scores": [
            0.9925762414932251,
            0.00013968987332191318,
            0.00026202338631264865,
            0.00014675907732453197,
            0.0003906133642885834,
            8.969414193416014e-05,
            0.0001797504664864391,
            0.00011898012598976493
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many singers belong to this group?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), singer.Singer_ID",
            "select count(*), singer.Is_male",
            "select count(distinct singer.Singer_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9684910178184509,
            0.9914984107017517,
            0.00038105680141597986,
            0.0016384200425818563,
            0.0003838214324787259,
            0.02019030787050724,
            0.0006013301899656653,
            0.0010605879360809922
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you tell me the total number of singers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), singer.Singer_ID",
            "select count(*), singer_in_concert.concert_ID",
            "select count(*), singer_in_concert.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9926384687423706,
            8.490021718898788e-05,
            0.00017702477634884417,
            7.154574268497527e-05,
            0.00013716773537453264,
            6.655824108747765e-05,
            0.0001905128447106108,
            7.597616786370054e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the total number of singers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), singer.Singer_ID",
            "select count(*), singer_in_concert.concert_ID",
            "select count(*), singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9930353760719299,
            8.741693454794586e-05,
            0.00016268675972241908,
            7.024147635092959e-05,
            0.00012649159180000424,
            6.744448182871565e-05,
            0.00026619547861628234,
            7.686640310566872e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please show me the name, age, and country of all the singers, ordered by age from the oldest to the youngest.",
        "gold_select": "select singer.Name, singer.Country, singer.Age",
        "select_candidates": [
            "select singer.Name, singer.Age, singer.Country",
            "select singer.Name, singer.Age.c2, singer.Age",
            "select singer.Name, singer.Age, singer.Country",
            "select singer.Name, singer.Age.c6, singer.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9709118008613586,
            0.9709118008613586,
            0.0006283724796958268,
            0.0006283724796958268,
            0.9709118008613586,
            0.9709118008613586,
            0.0005378518253564835,
            0.0005378518253564835
        ],
        "align_select": "select singer.Name, singer.Age, singer.Country",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all the names, ages, and countries of all singers in descending order of age.",
        "gold_select": "select singer.Name, singer.Country, singer.Age",
        "select_candidates": [
            "select singer.Name, singer.Age, singer.Country",
            "select singer.Name, singer.Age.c6, singer.Country",
            "select singer.Name, singer.Age, singer.Country",
            "select singer.Name, singer.Age, singer.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9946666955947876,
            0.9946666955947876,
            0.0005433098995126784,
            0.0005433098995126784,
            0.9946666955947876,
            0.9946666955947876,
            0.9946666955947876,
            0.9946666955947876
        ],
        "align_select": "select singer.Name, singer.Age, singer.Country",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Give the name, country and age of every singer in descending order of age.",
        "gold_select": "select singer.Name, singer.Country, singer.Age",
        "select_candidates": [
            "select singer.Name, singer.Country, singer.Age",
            "select singer.Name, singer.Country & singer.Age",
            "select singer.Name, singer.Country and singer.Age",
            "select singer.Name, singer.Country., singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9948346614837646,
            0.9948346614837646,
            0.9907666444778442,
            0.9907666444778442,
            0.9929177761077881,
            0.9929177761077881,
            0.08114434033632278,
            0.08114434033632278
        ],
        "align_select": "select singer.Name, singer.Country, singer.Age",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the name, country, age, and age of each singer in descending order?",
        "gold_select": "select singer.Name, singer.Country, singer.Age",
        "select_candidates": [
            "select singer.Name, singer.Country, singer.Age",
            "select singer.Name, singer.Country, singer.Age, singer.Is_male",
            "select singer.Name, singer.Country, singer.Age, singer.Singer_ID",
            "select singer.Name, singer.Country, singer.Age, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.0018590771360322833,
            0.0018590771360322833,
            0.00017841890803538263,
            0.00017841890803538263,
            0.00015886977780610323,
            0.00015886977780610323,
            0.00017841890803538263,
            0.00017841890803538263
        ],
        "align_select": "select singer.Name, singer.Country, singer.Age",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list down the names, nations, and ages of every singer in descending order of age?",
        "gold_select": "select singer.Name, singer.Country, singer.Age",
        "select_candidates": [
            "select singer.Name, singer.Country, singer.Age",
            "select singer.Name, singer.Country, singer.Age",
            "select singer.Name, singer.Country, singer.Age",
            "select singer.Name, singer.Country., singer.Age"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9893303513526917,
            0.9893303513526917,
            0.9893303513526917,
            0.9893303513526917,
            0.9893303513526917,
            0.9893303513526917,
            0.016241278499364853,
            0.016241278499364853
        ],
        "align_select": "select singer.Name, singer.Country, singer.Age",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you tell me the average, minimum, and maximum age for all French singers?",
        "gold_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "select_candidates": [
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Is_male), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age) and max(singer.Age)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9945711493492126,
            0.9945711493492126,
            0.9945711493492126,
            0.9945711493492126,
            0.00019781134324148297,
            0.00019781134324148297,
            0.9546841382980347,
            0.9546841382980347
        ],
        "align_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For all French singers, what is the minimum age, the average age, and the maximum age?",
        "gold_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "select_candidates": [
            "select min(singer.Age), avg(singer.Age), max(singer.Age)",
            "select min(singer.Is_male), avg(singer.Age), max(singer.Age)",
            "select min(singer.Age), avg(singer.Age), max(singer.Age)",
            "select min(singer.Age), avg(singer.Age) and max(singer.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9941615462303162,
            0.000580132647883147,
            0.00019364012405276299,
            0.00012235785834491253,
            0.9941615462303162,
            0.000580132647883147,
            0.9645131230354309,
            0.0003040785086341202
        ],
        "align_select": "select min(singer.Age), avg(singer.Age), max(singer.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want to see the name and release year of the youngest singer's song.",
        "gold_select": "select singer.Song_Name, singer.Song_release_year",
        "select_candidates": [
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Country, singer.Song_release_year",
            "select singer.Song_Name, t1.1.c4",
            "select singer.Song_Name), singer.Song_release_year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9944317936897278,
            6.921707972651348e-05,
            0.0007950111175887287,
            8.160767902154475e-05,
            0.0004888332332484424,
            0.00013438375026453286,
            0.0034873923286795616,
            6.584097718587145e-05
        ],
        "align_select": "select singer.Song_Name, singer.Song_release_year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name and release year of the youngest singer song?",
        "gold_select": "select singer.Song_Name, singer.Song_release_year",
        "select_candidates": [
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Country, singer.Song_release_year",
            "select singer.Song_Name, t1.1.c4",
            "select singer.Song_Name, t01.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9910675883293152,
            7.218422251753509e-05,
            0.0004836837761104107,
            8.423835970461369e-05,
            0.000543063972145319,
            0.00011358173651387915,
            0.0004487664846237749,
            0.00010865314834518358
        ],
        "align_select": "select singer.Song_Name, singer.Song_release_year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give me the names and release years for all the songs by the youngest singer?",
        "gold_select": "select singer.Song_Name, singer.Song_release_year",
        "select_candidates": [
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Country, singer.Song_release_year",
            "select singer.Song_Name, t1.1.c4",
            "select singer.Song_Name, t01.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9903297424316406,
            8.491268090438098e-05,
            0.000662284204736352,
            8.448364678770304e-05,
            0.0005304074147716165,
            0.00014320987975224853,
            0.0005222265608608723,
            0.0001216687451233156
        ],
        "align_select": "select singer.Song_Name, singer.Song_release_year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the names and release years for all the songs by the youngest singer?",
        "gold_select": "select singer.Song_Name, singer.Song_release_year",
        "select_candidates": [
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Country, singer.Song_Name, singer.Song_release_year",
            "select singer.Country, singer.Song_release_year",
            "select singer.Song_Name, t1.1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9891074895858765,
            8.660610910737887e-05,
            0.0002150888176402077,
            8.044153946684673e-05,
            0.0006254918989725411,
            8.250519749708474e-05,
            0.0005144897731952369,
            0.00013522490917239338
        ],
        "align_select": "select singer.Song_Name, singer.Song_release_year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the list of the different countries where singers above the age of 20 live.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select distinct singer.Country",
            "select count(distinct singer.Country)",
            "select distinct singer.Country, singer.Age",
            "select singer.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.957800567150116,
            0.0002764115633908659,
            0.0030127817299216986,
            8.223403710871935e-05,
            0.00013570219743996859,
            7.254437514347956e-05,
            0.534266471862793,
            0.0016087773256003857
        ],
        "align_select": "select distinct singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Display the list of countries and the number of singers in each country.",
        "gold_select": "select singer.Country, count(*)",
        "select_candidates": [
            "select singer.Country, count(*)",
            "select singer.Country, count(*), singer.Singer_ID",
            "select singer.Country, count(*), singer.Song_Name",
            "select singer.Country., count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9960591793060303,
            0.00016941156354732811,
            0.00014945770089980215,
            8.521638665115461e-05,
            0.00013005886285100132,
            0.00010283406300004572,
            0.00259956531226635,
            0.00019773648818954825
        ],
        "align_select": "select singer.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you show me the list of countries and the number of singers from each country?",
        "gold_select": "select singer.Country, count(*)",
        "select_candidates": [
            "select singer.Country, count(*)",
            "select singer.Country, count(*), singer.Singer_ID",
            "select singer.Country, count(*), singer.Song_Name",
            "select singer.Country, count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9962289929389954,
            0.00023143604630604386,
            0.0002060616243397817,
            0.00012041127047268674,
            0.0001592785702086985,
            0.00011990483471890911,
            0.0013804750051349401,
            0.00014582823496311903
        ],
        "align_select": "select singer.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "In the list, find out the number of singers from each country.",
        "gold_select": "select singer.Country, count(*)",
        "select_candidates": [
            "select singer.Country, count(*)",
            "select count(*), singer.Country",
            "select singer.Country, count(*), singer.Singer_ID",
            "select singer.Country, count(*), singer.Song_Name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9962014555931091,
            0.00017143352306447923,
            0.9962683916091919,
            0.00018421720596961677,
            0.00014814891619607806,
            8.803488162811846e-05,
            0.0001414214784745127,
            9.89752370514907e-05
        ],
        "align_select": "select singer.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is a list of the song names of singers above the average age?",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Is_male",
            "select singer.Song_Name, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9926048517227173,
            0.00011119122063973919,
            0.00013196218060329556,
            5.8855355746345595e-05,
            0.00015286175766959786,
            6.04097185714636e-05,
            0.00017096732335630804,
            6.605378439417109e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers are older than the average age? Show all the song names by them.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Age",
            "select singer.Name, singer.Song_Name",
            "select singer.Song_Name, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.990646243095398,
            0.00018010115309152752,
            0.00025070729316212237,
            7.185224239947274e-05,
            0.00034803972812369466,
            9.787086310097948e-05,
            0.00023624638561159372,
            7.815477147232741e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me all the stadiums with a capacity between 5000 and 10000? Give their names and locations.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Name, stadium.Location",
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Name, stadium.Location"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9919821619987488,
            0.00028212633333168924,
            0.9937847852706909,
            0.0002228729717899114,
            0.0006127152009867132,
            0.00010501437645871192,
            0.0005217705620452762,
            0.0001222792488988489
        ],
        "align_select": "select stadium.Name, stadium.Location",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the locations and names of all stadiums with a capacity between 5000 and 10000?",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0, stadium.Location, stadium.Name",
            "select stadium.Location, stadium.Name, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9942882061004639,
            0.00034695808426477015,
            0.028492756187915802,
            0.0001536285999463871,
            0.0003667930141091347,
            7.331382221309468e-05,
            0.00021164103236515075,
            7.402412302326411e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me the name and location of all stations with a capacity between 5000 and 10000.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Name, stadium.Location",
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Name, stadium.Location"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9443252086639404,
            0.00026453303871676326,
            0.9785708785057068,
            0.0002483742719050497,
            0.0003183987573720515,
            9.307321306550875e-05,
            0.00030245681409724057,
            9.41297403187491e-05
        ],
        "align_select": "select stadium.Name, stadium.Location",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find stations with a capacity between 5000 and 10000? List them by location and name.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select stadium.Name, stadium.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9874359369277954,
            0.9683445692062378,
            0.00019551637524273247,
            0.00019276438979431987,
            0.024109255522489548,
            0.0072156162932515144,
            0.9795732498168945,
            0.9270045757293701
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me all the stations with capacity between 5000 and 10000 along with their names and locations?",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Name, stadium.Location",
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Name, stadium.Location",
            "select stadium.Stadium_ID, stadium.Location, stadium.Name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.31387248635292053,
            0.0005274155410006642,
            0.8271798491477966,
            0.0005343983066268265,
            0.000894838129170239,
            0.0001970750599866733,
            0.0018346512224525213,
            0.00019519338093232363
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me information about maximum capacity and average capacity for all stadiums.",
        "gold_select": "select max(stadium.Capacity), stadium.Average",
        "select_candidates": [
            "select stadium.Highest, stadium.Average",
            "select max(stadium.Capacity), avg(stadium.Capacity)",
            "select stadium.Capacity, stadium.Highest, stadium.Average",
            "select max(stadium.Highest), avg(stadium.Capacity)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.974224865436554,
            0.0012044411851093173,
            0.9951668977737427,
            0.00026154887746088207,
            0.000393829308450222,
            0.00015347515000030398,
            0.0010503627127036452,
            0.00013981794472783804
        ],
        "align_select": "select stadium.Highest, stadium.Average",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please tell me, what is the maximum capacity and the average of all stadiums?",
        "gold_select": "select max(stadium.Capacity), stadium.Average",
        "select_candidates": [
            "select max(stadium.Capacity), avg(stadium.Capacity)",
            "select stadium.Capacity, stadium.Highest, stadium.Average",
            "select stadium.Capacity, max(stadium.Capacity), avg(stadium.Capacity)",
            "select max(stadium.Capacity), avg(stadium.Average)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9942026734352112,
            6.605013186344877e-05,
            0.00027795491041615605,
            0.00010026582458522171,
            0.00018493914103601128,
            8.647779759485275e-05,
            0.0024511467199772596,
            6.436433613998815e-05
        ],
        "align_select": "select max(stadium.Capacity), avg(stadium.Capacity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the average and maximum capacity of all the stadiums in the world.",
        "gold_select": "select avg(stadium.Capacity), max(stadium.Capacity)",
        "select_candidates": [
            "select avg(stadium.Average), max(stadium.Capacity)",
            "select stadium.Average, stadium.Highest",
            "select avg(stadium.Capacity), max(stadium.Capacity)",
            "select stadium.Average, stadium.Capacity"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.0006113391718827188,
            0.0006113391718827188,
            0.7894862294197083,
            0.7894862294197083,
            0.9905283451080322,
            0.9905283451080322,
            0.15899287164211273,
            0.15899287164211273
        ],
        "align_select": "select avg(stadium.Capacity), max(stadium.Capacity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the average capacity of all stadiums and the maximum capacity.",
        "gold_select": "select avg(stadium.Capacity), max(stadium.Capacity)",
        "select_candidates": [
            "select avg(stadium.Capacity), max(stadium.Capacity)",
            "select avg(stadium.Average), max(stadium.Capacity)",
            "select stadium.Average, stadium.Highest",
            "select stadium.Average, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium",
            "stadium singer",
            "stadium concert",
            "stadium singer_in_concert"
        ],
        "align_scores": [
            0.9956486821174622,
            8.916914521250874e-05,
            0.00041984437848441303,
            9.308333392255008e-05,
            0.9929786324501038,
            8.542613068129867e-05,
            0.01007977593690157,
            0.0003672499442473054
        ],
        "align_select": "select avg(stadium.Capacity), max(stadium.Capacity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the name and capacity of the stadium with the highest average attendance?",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Stadium_ID, stadium.Name, stadium.Capacity",
            "select stadium.Location, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, avg(stadium.Average)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9933978319168091,
            9.593376307748258e-05,
            0.001155821606516838,
            9.940985910361633e-05,
            0.0008399856160394847,
            6.752100307494402e-05,
            0.0008254037820734084,
            5.91793614148628e-05
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many concerts are there in any of the years 2014 or 2015?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), concert.Year",
            "select count(*), concert.concert_ID",
            "select count(*), concert.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert",
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.9309812784194946,
            0.00040866422932595015,
            0.00023904144472908229,
            0.00015920886653475463,
            0.00018252719019073993,
            0.00010327687778044492,
            0.00017178959387820214,
            0.00019126143888570368
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In the year 2014 or 2015, how many concerts were there?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), concert.Year",
            "select count(*), concert.concert_ID",
            "select count(*), concert.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert",
            "stadium concert",
            "stadium singer concert",
            "singer concert"
        ],
        "align_scores": [
            0.9912678599357605,
            0.0035943672992289066,
            0.0002594331745058298,
            0.00023823122319299728,
            0.00018905218166764826,
            0.00014896143693476915,
            0.00015767768491059542,
            0.00032237565028481185
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Either in 2014 or 2015, how many concerts were there?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), concert.Year",
            "select concert.concert_ID, count(*)",
            "select count(*) in concert.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert"
        ],
        "align_scores": [
            0.9908513426780701,
            0.7933898568153381,
            0.00027580661117099226,
            0.00013308683992363513,
            0.00028499276959337294,
            0.00022072689898777753,
            0.0007336941780522466,
            0.00017158346599899232
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many concerts had there been either in 2014 or in 2015?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), concert.Year",
            "select count(*), concert.concert_ID",
            "select count(*), concert.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert",
            "stadium concert",
            "stadium singer concert",
            "singer concert"
        ],
        "align_scores": [
            0.9676817655563354,
            0.006209470331668854,
            0.0003124108479823917,
            0.00017892882169689983,
            0.00017387823027092963,
            0.00013937707990407944,
            0.0001472008298151195,
            0.00028785463655367494
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the stadium names, and the numbers of concerts for each one?",
        "gold_select": "select stadium.Name, count(*)",
        "select_candidates": [
            "select stadium.Name, count(*)",
            "select stadium.Name, count(*), concert.Stadium_ID",
            "select stadium.Name, count(*)",
            "select stadium.Name., count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9953032732009888,
            0.00021512368402909487,
            0.0002198284346377477,
            9.927988867275417e-05,
            0.9953032732009888,
            0.00021512368402909487,
            0.0027870649937540293,
            0.0002015993813984096
        ],
        "align_select": "select stadium.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each stadium name, how many concerts were played there?",
        "gold_select": "select stadium.Name, count(*)",
        "select_candidates": [
            "select stadium.Name, count(*)",
            "select stadium.Name.c2, count(*)",
            "select stadium.Name, count(*), concert.Stadium_ID",
            "select stadium.Name.c0, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9879410862922668,
            0.0001418851752532646,
            0.0007015891605988145,
            0.0001142945620813407,
            0.00016660400433465838,
            8.012008765945211e-05,
            0.0005994407692924142,
            0.00013559407670982182
        ],
        "align_select": "select stadium.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you show me the stadium name and capacity with most number of concerts in the year 2014 or after?",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, stadium.Average",
            "select stadium.Location, stadium.Capacity",
            "select stadium.Name.c2, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9891546368598938,
            0.0002335256285732612,
            0.00034865608904510736,
            6.679833313683048e-05,
            0.001184516935609281,
            0.00010538313654251397,
            0.000869833049364388,
            8.887914736988023e-05
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What was the name and capacity of the stadium where the most concerts took place after 2013?",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Location, stadium.Capacity",
            "select stadium.Name., stadium.Capacity",
            "select stadium.Capacity, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9856878519058228,
            0.0002454270434100181,
            0.0011776374885812402,
            0.00010521644435357302,
            0.011340733617544174,
            0.00027888634940609336,
            0.988338053226471,
            0.0002832947648130357
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the name and capacity of the stadium which has hosted the most concerts after 2013?",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Location, stadium.Capacity",
            "select stadium.Name., stadium.Capacity",
            "select stadium.Capacity, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.9820854067802429,
            0.809429943561554,
            0.0009691212326288223,
            0.0007310109795071185,
            0.007515337783843279,
            0.005485261790454388,
            0.9849433898925781,
            0.8423944711685181
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the year of most number of concerts?",
        "gold_select": "select concert.Year",
        "select_candidates": [
            "select concert.Year",
            "select concert.Stadium_ID, concert.Year",
            "select concert.Year, concert.Stadium_ID",
            "select concert.Year, t2.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert"
        ],
        "align_scores": [
            0.9957783222198486,
            5.5303346016444266e-05,
            0.00024868277250789106,
            5.454837446450256e-05,
            0.0001358574372716248,
            5.034410423832014e-05,
            0.0006199367344379425,
            6.07329529884737e-05
        ],
        "align_select": "select concert.Year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the year with most number of concerts?",
        "gold_select": "select concert.Year",
        "select_candidates": [
            "select concert.Year",
            "select concert.Year, concert.Stadium_ID",
            "select concert.Stadium_ID, concert.Year",
            "select concert.Year, t2.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert"
        ],
        "align_scores": [
            0.9911012053489685,
            5.470298128784634e-05,
            0.0001322625030297786,
            5.092726132716052e-05,
            0.0001795435673557222,
            5.768365736003034e-05,
            0.0006239610956981778,
            5.8271645684726536e-05
        ],
        "align_select": "select concert.Year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which year did there happen most number of concerts?",
        "gold_select": "select concert.Year",
        "select_candidates": [
            "select concert.Year",
            "select concert.Stadium_ID, concert.Year",
            "select concert.Year, concert.Stadium_ID",
            "select concert.Year, t2.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert"
        ],
        "align_scores": [
            0.9926786422729492,
            5.134919047122821e-05,
            0.00023797900939825922,
            5.4764470405643806e-05,
            0.0001425255904905498,
            4.819640889763832e-05,
            0.0005299068870954216,
            6.140254117781296e-05
        ],
        "align_select": "select concert.Year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which year did the most concerts occur?",
        "gold_select": "select concert.Year",
        "select_candidates": [
            "select concert.Year",
            "select concert.Year, concert.Stadium_ID",
            "select concert.Stadium_ID, concert.Year",
            "select concert.Year, concert.concert_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert"
        ],
        "align_scores": [
            0.9952130317687988,
            5.245982174528763e-05,
            0.0001449250994483009,
            5.130792487761937e-05,
            0.0002120543213095516,
            5.96683967160061e-05,
            0.00020516412041615695,
            5.40237597306259e-05
        ],
        "align_select": "select concert.Year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which year had the most concerts occurred.",
        "gold_select": "select concert.Year",
        "select_candidates": [
            "select concert.Year",
            "select concert.Year, concert.Stadium_ID",
            "select concert.Year, concert.concert_Name",
            "select concert.Year, t2.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert"
        ],
        "align_scores": [
            0.9924817085266113,
            5.0958744395757094e-05,
            0.00014248606748878956,
            4.9378504627384245e-05,
            0.00020340195624157786,
            5.261212572804652e-05,
            0.000574758043512702,
            6.504962948383763e-05
        ],
        "align_select": "select concert.Year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What was the year that has the most number of concerts?",
        "gold_select": "select concert.Year",
        "select_candidates": [
            "select concert.Year",
            "select concert.Year, concert.Stadium_ID",
            "select concert.Stadium_ID, concert.Year",
            "select concert.Year, t2.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert"
        ],
        "align_scores": [
            0.9815430045127869,
            5.777785190730356e-05,
            0.0001388446253258735,
            5.489288014359772e-05,
            0.00019201355462428182,
            5.9646099543897435e-05,
            0.0006117307930253446,
            5.885288555873558e-05
        ],
        "align_select": "select concert.Year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you show me the stadium names without any concert?",
        "gold_select": "select stadium.Name",
        "select_candidates": [
            "select stadium.Name",
            "select stadium.Stadium_ID, stadium.Name",
            "select stadium.Location, stadium.Name",
            "select stadium.Name, stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium",
            "stadium concert"
        ],
        "align_scores": [
            0.9942832589149475,
            0.0003853421949315816,
            0.00022127138799987733,
            8.835169137455523e-05,
            0.00016836979193612933,
            8.371688454644755e-05,
            0.00014314721920527518,
            6.524756463477388e-05
        ],
        "align_select": "select stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the name of the stadiums without concerts?",
        "gold_select": "select stadium.Name",
        "select_candidates": [
            "select stadium.Name",
            "select stadium.Stadium_ID, stadium.Name",
            "select stadium.Name, stadium.Capacity",
            "select stadium.Location, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium",
            "stadium concert"
        ],
        "align_scores": [
            0.8186503648757935,
            0.13339434564113617,
            0.00024490064242854714,
            0.00028356959228403866,
            0.00013982180098537356,
            0.0002629827067721635,
            0.0001599473034730181,
            0.0002065073058474809
        ],
        "align_select": "select stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the countries where a singer above age 40 and a singer below age 30 are from.",
        "gold_select": "select singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select singer.Country, singer.Age",
            "select singer.Country, singer.Song_Name",
            "select singer.Country, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9938645958900452,
            0.9875643849372864,
            0.00025329639902338386,
            0.0003032450331375003,
            0.00014904186537023634,
            0.0001869537663878873,
            0.00022005659411661327,
            0.00032400744385086
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show stadium names excluding those with a concert held in the year 2014.",
        "gold_select": "select stadium.Name",
        "select_candidates": [
            "select stadium.Name",
            "select stadium.Stadium_ID, stadium.Name",
            "select stadium.Name, concert.Stadium_ID",
            "select stadium.Location, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9875373244285583,
            0.9875373244285583,
            0.0004072032170370221,
            0.0004072032170370221,
            0.00033716941834427416,
            0.00033716941834427416,
            0.0003197253099642694,
            0.0003197253099642694
        ],
        "align_select": "select stadium.Name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all stadiums except for those having concerts in year 2014?",
        "gold_select": "select stadium.Name",
        "select_candidates": [
            "select stadium.Name",
            "select stadium.Stadium_ID, stadium.Name",
            "select stadium.Location, stadium.Name",
            "select stadium.Name, concert.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9847822785377502,
            0.9894243478775024,
            0.0005130069912411273,
            0.000528684991877526,
            0.0003039628791157156,
            0.00028674196801148355,
            0.000295387115329504,
            0.00033328606514260173
        ],
        "align_select": "select stadium.Name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give me all the stadium names whose concerts did not happen in 2014.",
        "gold_select": "select stadium.Name",
        "select_candidates": [
            "select stadium.Name",
            "select stadium.Stadium_ID, stadium.Name",
            "select stadium.Name, concert.Stadium_ID",
            "select stadium.Location, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9819304347038269,
            0.020246941596269608,
            0.0004396123986225575,
            0.0002638302685227245,
            0.0004656524979509413,
            0.0002595895202830434,
            0.00033881032140925527,
            0.00020582952129188925
        ],
        "align_select": "select stadium.Name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the stadium names which did not host any concerts in 2014.",
        "gold_select": "select stadium.Name",
        "select_candidates": [
            "select stadium.Name",
            "select stadium.Stadium_ID, stadium.Name",
            "select stadium.Location, stadium.Name",
            "select stadium.Name, concert.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9827309250831604,
            0.019496560096740723,
            0.0003886847698595375,
            0.0002468494058120996,
            0.00040998990880325437,
            0.0002150865620933473,
            0.00032738447771407664,
            0.00023242719180416316
        ],
        "align_select": "select stadium.Name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which stadium did not hold concerts in 2014? List his name.",
        "gold_select": "select stadium.Name",
        "select_candidates": [
            "select stadium.Name",
            "select stadium.Stadium_ID, stadium.Name",
            "select stadium.Name, concert.Stadium_ID",
            "select stadium.Location, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9306923151016235,
            0.019386939704418182,
            0.00043655469198711216,
            0.0003683945396915078,
            0.00046185788232833147,
            0.00038322294130921364,
            0.00040199229260906577,
            0.0003099998866673559
        ],
        "align_select": "select stadium.Name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names and themes for all the concerts and the number of singers in each?",
        "gold_select": "select concert.concert_Name, concert.Theme, count(*)",
        "select_candidates": [
            "select concert.concert_Name, concert.Theme, count(*)",
            "select concert.concert_Name, concert.Theme, count(*), concert.concert_ID",
            "select concert.concert_Name, concert.Theme, count(*),",
            "select concert.concert_Name, concert.Theme, count(*), singer_in_concert.concert_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert"
        ],
        "align_scores": [
            0.9934212565422058,
            0.0004634393553715199,
            0.0002779832575470209,
            0.00011464265116956085,
            0.0037536481395363808,
            0.0001607196609256789,
            0.0005935361259616911,
            0.00011508998431963846
        ],
        "align_select": "select concert.concert_Name, concert.Theme, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the names, themes, and numbers of the singers performing at every concert?",
        "gold_select": "select concert.concert_Name, concert.Theme, count(*)",
        "select_candidates": [
            "select singer.Name, concert.Theme, count(*)",
            "select singer.Name, concert.Theme, count(*)",
            "select singer.Name, concert.Theme, count(distinct singer_in_concert.Singer_ID)",
            "select concert.concert_Name, concert.Theme, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "concert singer_in_concert",
        "table_candidates": [
            "singer concert singer_in_concert"
        ],
        "align_scores": [
            0.07289748638868332,
            0.07289748638868332,
            0.07289748638868332,
            0.07289748638868332,
            0.06332051008939743,
            0.06332051008939743,
            0.737699031829834,
            0.737699031829834
        ],
        "align_select": "select concert.concert_Name, concert.Theme, count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the name, theme, and number of each singer for every concert?",
        "gold_select": "select concert.concert_Name, concert.Theme, count(*)",
        "select_candidates": [
            "select concert.concert_Name, concert.Theme, count(*)",
            "select concert.concert_Name, concert.Theme, count(distinct singer_in_concert.Singer_ID)",
            "select concert.concert_Name, concert.Theme, singer_in_concert.Singer_ID",
            "select concert.concert_Name, concert.Theme, count(*), singer_in_concert.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert"
        ],
        "align_scores": [
            0.9887824654579163,
            0.00038456934271380305,
            0.0929287001490593,
            0.00017823815869633108,
            0.9947570562362671,
            0.002410151995718479,
            0.9936435222625732,
            0.0003204078820999712
        ],
        "align_select": "select concert.concert_Name, concert.Theme, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me the list of singer names and number of concerts for each singer.",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select singer.Name, count(*), concert.concert_Name",
            "select singer.Name, count(*), concert.concert_ID",
            "select singer.Name, count(*), concert.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer concert singer_in_concert",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9921377301216125,
            0.00016964141104836017,
            0.00031132056028582156,
            0.00011137406545458362,
            0.00026291876565665007,
            0.00013588141882792115,
            0.00039716597530059516,
            0.00019530208373907954
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you list the name and number of concerts for each singer?",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select singer.Name, count(*), concert.Stadium_ID",
            "select singer.Name, count(*), concert.concert_ID",
            "select singer.Name, count(*), concert.concert_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer singer_in_concert",
            "singer concert singer_in_concert"
        ],
        "align_scores": [
            0.9920944571495056,
            0.00015488502685911953,
            0.0003054607368540019,
            0.00016058440087363124,
            0.00022674073989037424,
            0.0001322515308856964,
            0.0005255608120933175,
            9.935830166796222e-05
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the name and number of concerts per singer.",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select singer.Name, count(*), concert.concert_Name",
            "select singer.Name, count(*), concert.concert_ID",
            "select singer.Name, count(*), singer_in_concert.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer concert singer_in_concert",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9956766963005066,
            0.00019091526337433606,
            0.0007536468328908086,
            9.295807831222191e-05,
            0.00017545290756970644,
            0.00012623950897250324,
            0.0010182171827182174,
            0.00010775888949865475
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each singer, list their name and number of concerts they performed.",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select singer.Name, count(*), concert.Stadium_ID",
            "select singer.Name, count(*), concert.concert_ID",
            "select singer.Name, count(*), concert.concert_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer singer_in_concert",
            "singer concert singer_in_concert"
        ],
        "align_scores": [
            0.9725257158279419,
            0.00018875622481573373,
            0.0003412722726352513,
            0.00013263127766549587,
            0.00038607316673733294,
            0.0001289801875827834,
            0.0006370785413309932,
            0.00011541375715751201
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you list singer name and number of concerts for each singer?",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select singer.Name, count(*), concert.concert_ID",
            "select singer.Name, count(*), concert.concert_Name",
            "select singer.Name, count(*), concert.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer concert singer_in_concert",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9953125715255737,
            0.0001683556620264426,
            0.00024116308486554772,
            0.00013624169514514506,
            0.0003442287852521986,
            0.0001051921644830145,
            0.0003426148323342204,
            0.00018644357623998076
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me the list of all singer names in concerts held in year 2014.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, concert.concert_Name",
            "select singer.Name, concert.concert_ID",
            "select singer.Name, concert.Theme"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "singer concert singer_in_concert",
            "stadium singer concert singer_in_concert"
        ],
        "align_scores": [
            0.9871693849563599,
            0.0013457739260047674,
            0.00024345211568288505,
            0.0001254417875315994,
            0.0001739891740726307,
            9.390354534843937e-05,
            0.0002558663545642048,
            0.00015601269842591137
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list all singer names listed in concerts in year 2014.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, concert.concert_Name",
            "select singer.Name, concert.concert_ID",
            "select singer.Name, concert.Theme"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "singer concert singer_in_concert"
        ],
        "align_scores": [
            0.9797635078430176,
            0.00025483727222308517,
            0.00025667459703981876,
            6.866851617814973e-05,
            0.0001795767602743581,
            7.374989945674315e-05,
            0.0002407922875136137,
            7.972514868015423e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the names of the singers who performed in the concert held in 2014?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Country",
            "select concert.concert_Name, singer.Name",
            "select singer.Name, singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "singer concert singer_in_concert"
        ],
        "align_scores": [
            0.9324078559875488,
            0.025682397186756134,
            0.00042891062912531197,
            0.00020017524366267025,
            0.00041821037302725017,
            0.0001497792691225186,
            0.00021139802993275225,
            0.00013943915837444365
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers have 'Hey' in their song's name? List their name and nation.",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select count(*), singer.Name, singer.Country",
            "select singer.Name, singer.Country, singer.Song_Name",
            "select singer.Name, singer.Country, singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9816505908966064,
            0.00018830251065082848,
            0.00037601060466840863,
            7.897286559455097e-05,
            0.00022996975167188793,
            8.088922186288983e-05,
            0.00020175993267912418,
            8.973554213298485e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers have 'Hey' in their songs' names? List their name and nation.",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select singer.Name, singer.Country, singer.Song_Name",
            "select distinct singer.Name, singer.Country",
            "select count(*), singer.Name, singer.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.983069658279419,
            0.00016288620827253908,
            0.00023672598763369024,
            7.867941167205572e-05,
            0.04825936257839203,
            8.806637197267264e-05,
            0.0003668898716568947,
            7.900390482973307e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers have songs with the word 'Hey' in the title? List their name and country.",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select count(*), singer.Name, singer.Country",
            "select singer.Name, singer.Country, singer.Song_Name",
            "select distinct singer.Name, singer.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9748465418815613,
            0.0002450608881190419,
            0.0004477814945857972,
            8.788651030045003e-05,
            0.00027261374634690583,
            9.337510709883645e-05,
            0.05240340158343315,
            9.884046448860317e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers have songs with 'Hey' in their titles? List their name and country.",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select singer.Name, singer.Country, singer.Song_Name",
            "select distinct singer.Name, singer.Country",
            "select singer.Name, singer.Country - singer.Song_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9780802726745605,
            0.00022505276137962937,
            0.0002690414839889854,
            8.74809775268659e-05,
            0.05049676075577736,
            9.132933337241411e-05,
            0.00043494507553987205,
            7.426792581100017e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name and location of the stadiums where some concerts took place in the years of both 2014 and 2015?",
        "gold_select": "select stadium.Name, stadium.Location",
        "select_candidates": [
            "select stadium.Name, stadium.Location",
            "select stadium.Location, stadium.Name",
            "select stadium.Name., stadium.Location",
            "select stadium.Stadium_ID, stadium.Name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9382203221321106,
            0.04694821685552597,
            0.9647215604782104,
            0.039408281445503235,
            0.005961721763014793,
            0.00034576590405777097,
            0.0005086714518256485,
            0.0001370012032566592
        ],
        "align_select": "select stadium.Name, stadium.Location",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the name and location of the stadiums where some concerts took place in the years of both 2014 and 2015?",
        "gold_select": "select stadium.Name, stadium.Location",
        "select_candidates": [
            "select stadium.Name, stadium.Location",
            "select stadium.Location, stadium.Name",
            "select stadium.Name., stadium.Location",
            "select stadium.Stadium_ID, stadium.Name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9008334279060364,
            0.10701746493577957,
            0.9555337429046631,
            0.05513995140790939,
            0.004138953518122435,
            0.000429034378612414,
            0.0003659775829873979,
            0.00013215710350777954
        ],
        "align_select": "select stadium.Name, stadium.Location",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names and locations of the stadiums where at least one concert took place in 2014 and 2015?",
        "gold_select": "select stadium.Name, stadium.Location",
        "select_candidates": [
            "select stadium.Name, stadium.Location",
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Name, stadium.Location",
            "select stadium.Name, stadium.Location, min(concert.Stadium_ID)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.2377641797065735,
            0.9035455584526062,
            0.20186345279216766,
            0.9203360080718994,
            0.0004237704270053655,
            0.0012963926419615746,
            0.00021738145733252168,
            0.0002601812593638897
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Can you give me the names and locations of the stadiums where there were concerts in both 2014 and 2015?",
        "gold_select": "select stadium.Name, stadium.Location",
        "select_candidates": [
            "select stadium.Name, stadium.Location",
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Name, stadium.Location",
            "select stadium.Name, stadium.Location, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9687265157699585,
            0.1161874309182167,
            0.9829410910606384,
            0.06243496015667915,
            0.00048061736742965877,
            0.00021917710546404123,
            0.00024100176233332604,
            0.00019422500918153673
        ],
        "align_select": "select stadium.Name, stadium.Location",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the stadium name and location for every concert that occurred in 2014 and 2015.",
        "gold_select": "select stadium.Name, stadium.Location",
        "select_candidates": [
            "select stadium.Name, stadium.Location",
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Name, stadium.Location",
            "select stadium.Name, stadium.Location, concert.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9885080456733704,
            0.06533431261777878,
            0.9906781911849976,
            0.01818954013288021,
            0.0003388540935702622,
            0.0001958296197699383,
            0.00017692235996946692,
            0.00011526527669047937
        ],
        "align_select": "select stadium.Name, stadium.Location",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names and locations of all the stadiums where concerts took place in 2014 and 2015.",
        "gold_select": "select stadium.Name, stadium.Location",
        "select_candidates": [
            "select stadium.Name, stadium.Location",
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Name, stadium.Location",
            "select stadium.Name., stadium.Location"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9769385457038879,
            0.095081627368927,
            0.9827914834022522,
            0.026232965290546417,
            0.00048178431461565197,
            0.00041205956949852407,
            0.00842366088181734,
            0.000697879760991782
        ],
        "align_select": "select stadium.Name, stadium.Location",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names and locations of the stadium that hosted concerts that occurred in both 2014 and 2015.",
        "gold_select": "select stadium.Name, stadium.Location",
        "select_candidates": [
            "select stadium.Name, stadium.Location",
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Name, stadium.Location",
            "select stadium.Name, stadium.Location, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9528735280036926,
            0.9528735280036926,
            0.9746816158294678,
            0.9746816158294678,
            0.00038613411015830934,
            0.00038613411015830934,
            0.0002177519490942359,
            0.0002177519490942359
        ],
        "align_select": "select stadium.Name, stadium.Location",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the number of concerts happening in the stadium with the highest capacity?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select concert.Stadium_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.8152034282684326,
            0.9618601202964783,
            0.02339724637567997,
            0.0015335360076278448,
            0.0017123944126069546,
            0.00033378342050127685,
            0.9507368803024292,
            0.011814817786216736
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you find the number of concerts in the stadium with the highest capacity?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select count(*), stadium.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.9363657832145691,
            0.980156660079956,
            0.010130545124411583,
            0.0011416836641728878,
            0.0011038107331842184,
            0.00023220347065944225,
            0.0006439212593249977,
            0.0003083609917666763
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the number of concerts in the stadium with the highest capacity?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select count(*), stadium.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.9167603850364685,
            0.9788498282432556,
            0.011456731706857681,
            0.001211147871799767,
            0.0012134704738855362,
            0.00023798446636646986,
            0.0010739455465227365,
            0.000299360224744305
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the number of concerts which happened in the stadium with the highest capacity.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select concert.Stadium_ID, count(*)",
            "select count(*), stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.8594465851783752,
            0.9706108570098877,
            0.1128520518541336,
            0.001776853110641241,
            0.9369990825653076,
            0.01924518309533596,
            0.0032885423861443996,
            0.0003647357225418091
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please tell me the number of concerts that took place in the stadium with the largest capacity.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select concert.Stadium_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.8690385818481445,
            0.9485118985176086,
            0.024161530658602715,
            0.0021619030740112066,
            0.0028671612963080406,
            0.00041632557986304164,
            0.8621843457221985,
            0.009028419852256775
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List all students with more than one pet by first name and sex.",
        "gold_select": "select Student.Fname, Student.Sex",
        "select_candidates": [
            "select Student.Fname, Student.Sex",
            "select Student.StuID, Student.Fname, Student.Sex",
            "select Student.LName, Student.Sex",
            "select Student.Fname.c2, Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9939297437667847,
            0.9906410574913025,
            0.00017815759929362684,
            0.00019701343262568116,
            0.0005633415421471,
            0.0008288752869702876,
            0.00032355799339711666,
            0.00029832005384378135
        ],
        "align_select": "select Student.Fname, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you find out the first name and gender of student with more than one pet?",
        "gold_select": "select Student.Fname, Student.Sex",
        "select_candidates": [
            "select Student.Fname, Student.Sex",
            "select Student.StuID, Student.Fname, Student.Sex",
            "select Student.Fname, Student.Age, Student.Sex",
            "select Student.LName, Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.9934813976287842,
            0.00020342056814115494,
            0.0002848080766852945,
            8.046886068768799e-05,
            0.0002553322119638324,
            6.16718316450715e-05,
            0.0006369143957272172,
            0.00013585783017333597
        ],
        "align_select": "select Student.Fname, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the first names of students who have pet dogs or cats.",
        "gold_select": "select distinct Student.Fname",
        "select_candidates": [
            "select distinct Student.Fname",
            "select Student.Fname",
            "select distinct Student.LName",
            "select unique Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.09946426749229431,
            0.00036108435597270727,
            0.9527694582939148,
            0.05083085596561432,
            0.10442781448364258,
            0.0005257657030597329,
            0.0025585892144590616,
            0.00020594651869032532
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the first names of all students owning pets, with dogs or cats as these pets.",
        "gold_select": "select distinct Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select distinct Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.Fname, Student.LName"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9807671308517456,
            0.00019733229419216514,
            0.05930784344673157,
            0.00014686785289086401,
            0.000223752751480788,
            7.13708795956336e-05,
            0.00012269202852621675,
            6.384545122273266e-05
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which students have pet dogs or cats? Show the first names of those students.",
        "gold_select": "select distinct Student.Fname",
        "select_candidates": [
            "select distinct Student.Fname",
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select distinct Student.Fname, Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.03266705945134163,
            0.00031051840051077306,
            0.9627927541732788,
            0.0016379817388951778,
            0.00020125690207351,
            9.905415936373174e-05,
            0.00023072859039530158,
            6.702983228024095e-05
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the first names of all the students with pets if they're dogs or cats.",
        "gold_select": "select distinct Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select distinct Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.Fname, Student.LName"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9883898496627808,
            0.0156644806265831,
            0.07979980856180191,
            0.00029678133432753384,
            0.0001825209183152765,
            8.223576151067391e-05,
            0.00013549778668675572,
            8.27839394332841e-05
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the list of first names of students who have pet dogs or cats.",
        "gold_select": "select distinct Student.Fname",
        "select_candidates": [
            "select distinct Student.Fname",
            "select Student.Fname",
            "select separate Student.Fname",
            "select unique Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.064545638859272,
            0.0004890371928922832,
            0.880596935749054,
            0.028642579913139343,
            0.014156279154121876,
            0.0001722772722132504,
            0.0019415018614381552,
            0.000313944328809157
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets weigh more than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9937345385551453,
            0.0007522592204622924,
            0.00032509624725207686,
            0.012522849254310131,
            0.00032509624725207686,
            0.012522849254310131,
            0.00022847486252430826,
            0.16462647914886475
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The number of pets with a greater weight than 10 is how many?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*) the SELECT-FROM-WHERE",
            "select count(*), Pets.PetID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9912105798721313,
            0.00040745484875515103,
            0.00020149424381088465,
            0.00010584509436739609,
            0.0006240954389795661,
            0.0001143354456871748,
            0.00020149424381088465,
            0.00010584509436739609
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of pets which have greater weights than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9881906509399414,
            0.00013464194489642978,
            0.00024398147070314735,
            0.00140277948230505,
            0.00024398147070314735,
            0.00140277948230505,
            0.00023639733262825757,
            0.04424425587058067
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Do you know how many pets have a greater weight than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9829043745994568,
            0.0002498170651961118,
            0.00027953641256317496,
            0.0031563732773065567,
            0.00027953641256317496,
            0.0031563732773065567,
            0.00022145417460706085,
            0.03463276848196983
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The youngest dog weighs how much?",
        "gold_select": "select Pets.weight",
        "select_candidates": [
            "select Pets.weight",
            "select min(Pets.weight)",
            "select max(Pets.weight)",
            "select Pets.weight, max(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.9933589100837708,
            0.5980596542358398,
            0.0003955122083425522,
            0.15648095309734344,
            0.0003373101935721934,
            0.0007007095264270902,
            0.00012823505676351488,
            0.00014420801016967744
        ],
        "align_select": "select Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the maximum pet weight for each pet type. List the weight and pet types.",
        "gold_select": "select max(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select max(Pets.weight), Pets.PetType",
            "select Pets.weight, Pets.PetType",
            "select maximum(Pets.weight), Pets.PetType",
            "select min(Pets.weight), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9887698888778687,
            0.9887698888778687,
            0.9785217046737671,
            0.9785217046737671,
            0.0007005338557064533,
            0.0007005338557064533,
            0.000564042420592159,
            0.000564042420592159
        ],
        "align_select": "select max(Pets.weight), Pets.PetType",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show all pet types with their maximum weight.",
        "gold_select": "select max(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, max(Pets.weight)",
            "select Pets.PetType.c1, max(Pets.weight)",
            "select Pets.PetType, Max(Pets.weight)",
            "select t2.c 1, max(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9938175082206726,
            0.00023468115250580013,
            0.0006466555059887469,
            0.0001272019580937922,
            0.9938175082206726,
            0.00023468115250580013,
            0.00042666986701078713,
            0.00016415477148257196
        ],
        "align_select": "select Pets.PetType, max(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you give me the list of the maximum weights for each type of pet?",
        "gold_select": "select max(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, max(Pets.weight)",
            "select max(Pets.weight), Pets.PetType",
            "select maximum(Pets.weight), Pets.PetType",
            "select Pets.PetType.c1, max(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9919874668121338,
            0.0002312331198481843,
            0.9902594685554504,
            0.00016814244736451656,
            0.001978999935090542,
            0.00012066540512023494,
            0.0018759634112939239,
            0.00017022814427036792
        ],
        "align_select": "select Pets.PetType, max(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Describe the maximum weights and types for all pet types.",
        "gold_select": "select max(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select max(Pets.weight), max(Pets.PetType), Pets.PetType",
            "select max(Pets.weight), max(Pets.PetType),",
            "select max(Pets.weight), min(Pets.PetType), Pets.PetType",
            "select max(Pets.weight), max(Pets.PetType)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.0031509387772530317,
            0.00010824219498317689,
            0.0016217406373471022,
            7.345798803726211e-05,
            9.853178926277906e-05,
            6.738167576259002e-05,
            0.9854655265808105,
            0.00017715277499519289
        ],
        "align_select": "select max(Pets.weight), max(Pets.PetType)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the maximum weight for each pet type?",
        "gold_select": "select max(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, max(Pets.weight)",
            "select max(Pets.weight), Pets.PetType",
            "select maximum(Pets.weight), Pets.PetType",
            "select min(Pets.weight), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.993687093257904,
            0.00021933516836725175,
            0.9934027791023254,
            0.00014423427637666464,
            0.0017720457399263978,
            0.00011809315765276551,
            0.00046774427755735815,
            0.00011766423267545179
        ],
        "align_select": "select Pets.PetType, max(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Locate the number of pets of those students older than 20 years old.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(distinct Has_Pet.PetID)",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.8688324093818665,
            0.0016436082078143954,
            0.0002212895342381671,
            0.00026714662089943886,
            0.028620216995477676,
            0.0006034732214175165,
            0.0002548887860029936,
            0.0009063956676982343
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the total number of pets owned by students older than 20.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9852496981620789,
            0.0018543032929301262,
            0.00029392269789241254,
            0.0003447546041570604,
            0.00010869232937693596,
            0.0001213891155202873,
            0.0005217521684244275,
            0.04196775704622269
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In how many students whose age is greater than 20 do there exist pets?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(distinct Has_Pet.StuID)",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.8647566437721252,
            0.0021250389982014894,
            0.0003659960930235684,
            0.000601332460064441,
            0.44424018263816833,
            0.0006350111216306686,
            0.0004608059534803033,
            0.15291206538677216
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets does a student having an age greater than 20 owns?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9530179500579834,
            0.050652265548706055,
            0.0003029064100701362,
            0.00042632874101400375,
            0.0001268488704226911,
            0.00011470564641058445,
            0.00029531787731684744,
            0.0005860354285687208
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets do student with an age greater than 20 own?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName",
            "select count(distinct Pets.PetType)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9855005145072937,
            0.006698343437165022,
            0.00025331569486297667,
            0.00019378290744498372,
            0.000284322421066463,
            0.0014857746427878737,
            0.016652902588248253,
            0.00031310858321376145
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of dogs raised by female students with sex F?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.Sex",
            "select count(distinct Pets.PetType)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9919973015785217,
            0.0022108035627752542,
            0.00039034493966028094,
            0.0005940823466517031,
            0.0002648904046509415,
            0.004885929636657238,
            0.013645279221236706,
            0.0004993848851881921
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the numbers of dogs owned by female students (sex F).",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(*), Student.StuID",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9889152646064758,
            0.02858133055269718,
            0.000271386350505054,
            0.004411240108311176,
            0.0002968534827232361,
            0.00040092511335387826,
            0.0002791779406834394,
            0.0010040297638624907
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "There are how many dog pets raised by female students?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(*), Student.StuID",
            "select count(*), Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9888989329338074,
            0.00012997888552490622,
            0.00042791629675775766,
            7.989943696884438e-05,
            0.00037230178713798523,
            7.326748891500756e-05,
            0.00042791629675775766,
            7.989943696884438e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out how many dogs are raised by female students.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(distinct Pets.PetType)",
            "select count(*), Student.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9846354722976685,
            0.20579198002815247,
            0.000547642121091485,
            0.890077531337738,
            0.004581881687045097,
            0.0006340218242257833,
            0.00033319968497380614,
            0.0005459783715195954
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the number of distinct types of pets?",
        "gold_select": "select count(distinct Pets.PetType)",
        "select_candidates": [
            "select count(distinct Pets.PetType)",
            "select count (distinct Pets.PetType)",
            "select count(distinct Pets.PetType).",
            "select count(distinct Pets.PetType),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9952514171600342,
            0.9952514171600342,
            0.0044900900684297085,
            0.0044900900684297085,
            0.000413526373449713,
            0.000413526373449713,
            0.00029125146102160215,
            0.00029125146102160215
        ],
        "align_select": "select count(distinct Pets.PetType)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of different types of pets.",
        "gold_select": "select count(distinct Pets.PetType)",
        "select_candidates": [
            "select count(distinct Pets.PetType)",
            "select count(distinct Pets.PetType).",
            "select count (distinct Pets.PetType)",
            "select count(distinct Pets.PetID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9958628416061401,
            0.9958628416061401,
            0.00045754879829473794,
            0.00045754879829473794,
            0.015207563526928425,
            0.015207563526928425,
            0.08304907381534576,
            0.08304907381534576
        ],
        "align_select": "select count(distinct Pets.PetType)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of types of pets?",
        "gold_select": "select count(distinct Pets.PetType)",
        "select_candidates": [
            "select count(distinct Pets.PetType)",
            "select count(distinct Pets.PetType).",
            "select count(distinct Pets.PetID)",
            "select count(different Pets.PetType)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9954570531845093,
            0.9954570531845093,
            0.0006179953343234956,
            0.0006179953343234956,
            0.013463982380926609,
            0.013463982380926609,
            0.0010163274127990007,
            0.0010163274127990007
        ],
        "align_select": "select count(distinct Pets.PetType)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the first names of every student whose pet is a cat or dog.",
        "gold_select": "select distinct Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select distinct Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.LName, Student.Fname"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.990835428237915,
            0.0005020408425480127,
            0.05399569869041443,
            0.00019646907458081841,
            0.0001870520500233397,
            6.975592987146229e-05,
            0.0002177556889364496,
            8.016593346837908e-05
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the student first names matching students who have pet dogs or cats.",
        "gold_select": "select distinct Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select distinct Student.Fname",
            "select matching Student.Fname",
            "select match Student.Fname"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.8919793963432312,
            0.011773371137678623,
            0.12732702493667603,
            0.00039118091808632016,
            0.003208138747140765,
            0.00026649259962141514,
            0.002717656781896949,
            0.0001665247546043247
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all students who have both a cat and a dog as pets. Give the list of their first names.",
        "gold_select": "select Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.Fname, Student.LName",
            "select Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9904868006706238,
            0.02300199307501316,
            0.00015580370381940156,
            0.00010588053555693477,
            0.0005466798902489245,
            0.00014481764810625464,
            0.00032036518678069115,
            0.0001174273929791525
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the list of first names of students who own both cat and dog pets?",
        "gold_select": "select Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.Fname, Student.LName",
            "select Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9933857321739197,
            0.9933857321739197,
            0.0001276620023418218,
            0.0001276620023418218,
            0.00017760384071152657,
            0.00017760384071152657,
            0.00020857559866271913,
            0.00020857559866271913
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the first names of students who also have both pet dogs and cats.",
        "gold_select": "select Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.Fname, Student.LName",
            "select Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9901173710823059,
            0.4074999690055847,
            0.00013695366214960814,
            9.318519732914865e-05,
            0.00013776282139588147,
            9.516740101389587e-05,
            0.00018890279170591384,
            0.00012490096560213715
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the first names of students who have both cat and dog pets?",
        "gold_select": "select Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.Fname, Student.LName",
            "select Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9941787719726562,
            0.9941787719726562,
            0.00013849449169356376,
            0.00013849449169356376,
            0.00020983864669688046,
            0.00020983864669688046,
            0.0002585572947282344,
            0.0002585572947282344
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first names of students who have both pet dogs and pet cats.",
        "gold_select": "select Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.Fname, Student.LName",
            "select Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9947040677070618,
            0.02227207086980343,
            0.0001303475146414712,
            7.7320437412709e-05,
            0.0001319345028605312,
            7.461234781658277e-05,
            0.9897419214248657,
            0.034363754093647
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the students with cats and dogs as pets? List their first names.",
        "gold_select": "select Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.Fname, Student.LName",
            "select Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.991661548614502,
            0.00020718853920698166,
            0.0001131155586335808,
            7.950042345328256e-05,
            0.00025218623341061175,
            8.441125828539953e-05,
            0.00019667710876092315,
            7.951832230901346e-05
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which students' first names match those that have pets of cats and dogs?",
        "gold_select": "select Student.Fname",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.Fname, Student.LName",
            "select Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.6816518902778625,
            0.0008049875614233315,
            0.00012037452688673511,
            7.208812894532457e-05,
            0.0001231908390764147,
            7.423329225275666e-05,
            0.00015171644918154925,
            7.175788778113201e-05
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which students have no cat pets? List their major and age.",
        "gold_select": "select Student.Major, Student.Age",
        "select_candidates": [
            "select Student.Major, Student.Age",
            "select Student.Fname, Student.Major, Student.Age",
            "select distinct Student.Major, Student.Age",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.08967027813196182,
            0.0060165682807564735,
            0.0005333145381882787,
            0.0003228502464480698,
            0.010045954957604408,
            0.000512686267029494,
            0.00022932211868464947,
            0.00012197380419820547
        ],
        "align_select": "select Student.Major, Student.Age",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the major and age for students who do not have pet cats?",
        "gold_select": "select Student.Major, Student.Age",
        "select_candidates": [
            "select Student.Major, Student.Age",
            "select Student.Fname, Student.Age, Student.Major",
            "select distinct Student.Major, Student.Age",
            "select Student.Fname, Student.Major, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.2873034179210663,
            0.0017835389589890838,
            0.0002554641687311232,
            0.00012855460227001458,
            0.011710247956216335,
            0.00014957830717321485,
            0.00019801384769380093,
            0.00013447707169689238
        ],
        "align_select": "select Student.Major, Student.Age",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the major and age of students who don't own any pet cats?",
        "gold_select": "select Student.Major, Student.Age",
        "select_candidates": [
            "select Student.Major, Student.Age",
            "select Student.Fname, Student.Age, Student.Major",
            "select distinct Student.Major, Student.Age",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.021651431918144226,
            0.021651431918144226,
            0.0001818458695197478,
            0.0001818458695197478,
            0.0033572197426110506,
            0.0033572197426110506,
            0.00022983344388194382,
            0.00022983344388194382
        ],
        "align_select": "select Student.Major, Student.Age",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the major and ages of students who don't have cat pets.",
        "gold_select": "select Student.Major, Student.Age",
        "select_candidates": [
            "select Student.Major, Student.Age",
            "select distinct Student.Major, Student.Age",
            "select Student.Fname, Student.Major, Student.Age",
            "select Student.Fname, Student.Age, Student.Major"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.3923192024230957,
            0.3923192024230957,
            0.011164920404553413,
            0.011164920404553413,
            0.00028847658541053534,
            0.00028847658541053534,
            0.0003925440541934222,
            0.0003925440541934222
        ],
        "align_select": "select Student.Major, Student.Age",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "For which students does not have a pet cat? Show me their major and age.",
        "gold_select": "select Student.Major, Student.Age",
        "select_candidates": [
            "select Student.Major, Student.Age",
            "select distinct Student.Major, Student.Age",
            "select Student.Fname, Student.Major, Student.Age",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet",
            "Student Pets"
        ],
        "align_scores": [
            0.5598446726799011,
            0.0020177094265818596,
            0.008099379949271679,
            0.0005106452153995633,
            0.02023513801395893,
            0.0004873159050475806,
            0.00030067082843743265,
            0.00011453862680355087
        ],
        "align_select": "select Student.Major, Student.Age",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "For students who do not have pet cats, in which major are they, how old are they?",
        "gold_select": "select Student.Major, Student.Age",
        "select_candidates": [
            "select Student.Major, Student.Age",
            "select Student.Fname, Student.Age",
            "select Student.LName, Student.Age",
            "select Student.StuID, Student.Major, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9731715321540833,
            0.003307643346488476,
            0.0017061455873772502,
            0.0005876356735825539,
            0.000949553563259542,
            0.00041589303873479366,
            0.0002866752911359072,
            0.00012637946929316968
        ],
        "align_select": "select Student.Major, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the id of students who have no cat pets?",
        "gold_select": "select Student.StuID",
        "select_candidates": [
            "select Has_Pet.StuID",
            "select Student.StuID",
            "select Has_Pet.StuID, Pets.PetType",
            "select t1, Has_Pet.StuID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9832420349121094,
            0.001161932828836143,
            0.835611879825592,
            0.0022943331860005856,
            0.0005255533033050597,
            0.00016111938748508692,
            0.0007225946174003184,
            0.00014282313350122422
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the student id where students do not have a cat as a pet?",
        "gold_select": "select Student.StuID",
        "select_candidates": [
            "select Has_Pet.StuID",
            "select Student.StuID",
            "select Student.StuID, Has_Pet.StuID",
            "select Student.StuID, Student.Fname"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9786762595176697,
            0.001541046891361475,
            0.5888558030128479,
            0.0022693402133882046,
            0.00033219988108612597,
            0.00011726446246029809,
            0.00020772218704223633,
            0.0001323316537309438
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the student ids that don't have a pet cat.",
        "gold_select": "select Student.StuID",
        "select_candidates": [
            "select Student.StuID",
            "select Has_Pet.StuID",
            "select t1, Student.StuID",
            "select Student.StuID, Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.5665163397789001,
            0.003936427645385265,
            0.9850249290466309,
            0.00351779256016016,
            0.0006433923845179379,
            0.000127570383483544,
            0.0006342466222122312,
            0.00022178253857418895
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all student ids matching students who do not have pet cats.",
        "gold_select": "select Student.StuID",
        "select_candidates": [
            "select Student.StuID",
            "select Has_Pet.StuID",
            "select t1, Student.StuID",
            "select Student.StuID, Has_Pet.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.5584784150123596,
            0.5584784150123596,
            0.9557774066925049,
            0.9557774066925049,
            0.0004858898464590311,
            0.0004858898464590311,
            0.0003845216706395149,
            0.0003845216706395149
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "How can I find the id of students who do not have a cat pet?",
        "gold_select": "select Student.StuID",
        "select_candidates": [
            "select Has_Pet.StuID",
            "select Student.StuID",
            "select t1, Student.StuID",
            "select Student.StuID, Has_Pet.StuID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9900345206260681,
            0.0012096507707610726,
            0.9161165356636047,
            0.003513759933412075,
            0.0005092545761726797,
            0.00014406273839995265,
            0.00040296203223988414,
            0.00015557966253254563
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all the student ids matching students who do not have pet cats.",
        "gold_select": "select Student.StuID",
        "select_candidates": [
            "select Student.StuID",
            "select Has_Pet.StuID",
            "select t1, Student.StuID",
            "select Student.StuID, Has_Pet.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.5534383058547974,
            0.5534383058547974,
            0.9562326073646545,
            0.9562326073646545,
            0.0004573390178848058,
            0.0004573390178848058,
            0.0003644646203611046,
            0.0003644646203611046
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all the student ids that match students who do not have pet cats.",
        "gold_select": "select Student.StuID",
        "select_candidates": [
            "select Student.StuID",
            "select Has_Pet.StuID",
            "select t1, Student.StuID",
            "select Student.StuID, Has_Pet.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.6195420622825623,
            0.6195420622825623,
            0.9647245407104492,
            0.9647245407104492,
            0.000492926046717912,
            0.000492926046717912,
            0.0004323642933741212,
            0.0004323642933741212
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all the student ids which don't match the students who doesn't own a cat.",
        "gold_select": "select Student.StuID",
        "select_candidates": [
            "select Student.StuID",
            "select Has_Pet.StuID",
            "select Student.StuID, Has_Pet.StuID",
            "select Pets.PetID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.6790692806243896,
            0.015999557450413704,
            0.8546938896179199,
            0.009445538744330406,
            0.0003923506010323763,
            0.0002162821765523404,
            0.00862348172813654,
            0.0009568498935550451
        ],
        "align_select": "select Student.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all the student ids that do not have cat as pets.",
        "gold_select": "select Student.StuID",
        "select_candidates": [
            "select Has_Pet.StuID",
            "select Student.StuID",
            "select Has_Pet.StuID, Pets.PetType",
            "select Has_Pet.StuID, Has_Pet.PetID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9763167500495911,
            0.0015952072571963072,
            0.5642989277839661,
            0.003380000125616789,
            0.00043769352487288415,
            0.00017528969328850508,
            0.0001288191560888663,
            8.556195098208264e-05
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Please find the first name and age of all students who have dogs but no cats as pets.",
        "gold_select": "select Student.Fname, Student.Age",
        "select_candidates": [
            "select Student.Fname, Student.Age",
            "select Student.LName, Student.Age",
            "select Student.StuID, Student.Fname, Student.Age",
            "select distinct Student.Fname, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.8487995862960815,
            0.00923221930861473,
            0.0019460254115983844,
            0.00042659504106268287,
            0.00016315450193360448,
            0.00012970589159522206,
            0.0024552077520638704,
            0.0035761951003223658
        ],
        "align_select": "select Student.Fname, Student.Age",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "For every student who has a dog but does not have a cat, what is his/her first name?",
        "gold_select": "select Student.Fname, Student.Age",
        "select_candidates": [
            "select Student.Fname",
            "select Student.LName, Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.StuID, Student.LName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9757121205329895,
            0.91032475233078,
            0.0004459379706531763,
            0.0004141117969993502,
            0.0001830420078476891,
            0.00019505940144881606,
            0.00015817959501873702,
            0.00014968861069064587
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the first names of every student who has a dog but no cat.",
        "gold_select": "select Student.Fname, Student.Age",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.LName, Student.Fname",
            "select Student.Fname, Student.LName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9801120162010193,
            0.7853836417198181,
            0.00017095475050155073,
            0.0001479051570640877,
            0.00022188997536431998,
            0.00021389772882685065,
            0.0001520146179245785,
            0.00014494764036498964
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the first names of all the students who have dogs but don't have cats?",
        "gold_select": "select Student.Fname, Student.Age",
        "select_candidates": [
            "select Student.Fname",
            "select Student.StuID, Student.Fname",
            "select Student.Fname, Student.LName",
            "select Student.LName, Student.Fname"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9777036309242249,
            0.9558719396591187,
            0.00018355462816543877,
            0.00018809561152011156,
            0.0002237047447124496,
            0.00021002882567699999,
            0.000301916355965659,
            0.0003135031438432634
        ],
        "align_select": "select Student.Fname",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the pet type and weight of the youngest pet?",
        "gold_select": "select Pets.PetType, Pets.weight",
        "select_candidates": [
            "select Pets.PetType, Pets.weight",
            "select Pets.PetType, Pets.weight, Pets.pet_age",
            "select Pets.PetType, Pets.weight)",
            "select Pets.PetType.c1, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9923787117004395,
            6.90557571942918e-05,
            0.00023491801402997226,
            5.561855869018473e-05,
            0.002662651939317584,
            5.870608947589062e-05,
            0.0023835862521082163,
            6.493063119705766e-05
        ],
        "align_select": "select Pets.PetType, Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How can I get the type and weight of the youngest pet?",
        "gold_select": "select Pets.PetType, Pets.weight",
        "select_candidates": [
            "select Pets.PetType, Pets.weight",
            "select Pets.PetID, Pets.PetType, Pets.weight",
            "select Pets.PetType, Pets.weight, Pets.pet_age",
            "select Pets.PetType, Pets.weight)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9897857904434204,
            6.921813474036753e-05,
            0.00039488758193328977,
            7.173025369411334e-05,
            0.0001541262899991125,
            5.480344407260418e-05,
            0.001799939782358706,
            5.788400812889449e-05
        ],
        "align_select": "select Pets.PetType, Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the youngest pet's type and weight.",
        "gold_select": "select Pets.PetType, Pets.weight",
        "select_candidates": [
            "select Pets.PetType, Pets.weight",
            "select min(Pets.PetType), min(Pets.weight)",
            "select Pets.PetType, Pets.weight)",
            "select Pets.PetType.c1, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9874356985092163,
            6.246918928809464e-05,
            0.001293630339205265,
            8.048535528359935e-05,
            0.0021388318855315447,
            5.5490883823949844e-05,
            0.001577685121446848,
            6.031232260284014e-05
        ],
        "align_select": "select Pets.PetType, Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me which type of pet has the youngest animal and how much it weighs?",
        "gold_select": "select Pets.PetType, Pets.weight",
        "select_candidates": [
            "select Pets.PetType, Pets.weight",
            "select Pets.PetType.c1, Pets.weight",
            "select Pets.PetType, Pets.weight)",
            "select t2.ctype, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9017932415008545,
            5.9627160226227716e-05,
            0.001419560518115759,
            6.0425387346185744e-05,
            0.005771617870777845,
            5.354603854357265e-05,
            0.0008441861136816442,
            6.076168574509211e-05
        ],
        "align_select": "select Pets.PetType, Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the pet type of the youngest animal and how much it weighs.",
        "gold_select": "select Pets.PetType, Pets.weight",
        "select_candidates": [
            "select Pets.PetType, Pets.weight",
            "select Pets.PetType, Pets.weight)",
            "select Pets.PetType.c1, Pets.weight",
            "select Pets.PetType, Pets.weight."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9891980290412903,
            5.937432433711365e-05,
            0.0031578452326357365,
            5.734930164180696e-05,
            0.0011454308405518532,
            5.8925394114339724e-05,
            0.011781384237110615,
            5.576854891842231e-05
        ],
        "align_select": "select Pets.PetType, Pets.weight",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List all the id's and weights of pets whose ages are older than 1?",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetID, Pets.weight,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9670658707618713,
            0.00016615567437838763,
            0.002646977547556162,
            9.645092359278351e-05,
            0.0013118734350427985,
            9.454941027797759e-05,
            0.002133684465661645,
            7.137734064599499e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all pets whose age is older than 1. List their weights and id numbers.",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.weight, Pets.PetID",
            "select Pets.PetType, Pets.weight, Pets.PetID",
            "select Pets.weight), Pets.PetID",
            "select Pets.weight.c0, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9895598888397217,
            0.00014081003610044718,
            0.0004516133922152221,
            7.349350926233456e-05,
            0.002272099256515503,
            8.574507955927402e-05,
            0.0003129244432784617,
            7.088042912073433e-05
        ],
        "align_select": "select Pets.weight, Pets.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Search all pets whose age is older than 1, find their id and weight.",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetID, Pets.weight,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9349467754364014,
            0.0001200186597998254,
            0.0030441931448876858,
            8.848726429278031e-05,
            0.001182602602057159,
            8.495025394950062e-05,
            0.0018478233832865953,
            7.329347863560542e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all the pets' ids and weights which are older than 1 years old?",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetID, Pets.weight,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9033704996109009,
            0.00017797527834773064,
            0.003529334906488657,
            0.00010142739483853802,
            0.001710621640086174,
            9.751052857609466e-05,
            0.0031635721679776907,
            7.263153383973986e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all pets whose age is older than 1 and give their id and weight.",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetID, Pets.weight,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.7361505031585693,
            0.00014034222112968564,
            0.0035338487941771746,
            9.103995398618281e-05,
            0.001327106379903853,
            8.534926746506244e-05,
            0.0020386602263897657,
            7.089199061738327e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the pet age, ID and weight of every pet older than 1?",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.pet_age, Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.pet_age, Pets.weight",
            "select Pets.pet_age, Pets.PetID, Pets.weight",
            "select Pets.PetType, Pets.PetID, Pets.weight"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9656792879104614,
            0.00013567089627031237,
            0.984281599521637,
            0.00013728720659855753,
            0.9656792879104614,
            0.00013567089627031237,
            0.0010660539846867323,
            8.483465353492647e-05
        ],
        "align_select": "select Pets.pet_age, Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average age, the maximum age and each of the types of pets.",
        "gold_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
        "select_candidates": [
            "select avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
            "select max(Pets.pet_age), avg(Pets.pet_age), Pets.PetType",
            "select count(*), avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
            "select the avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9859390258789062,
            0.00016656715888530016,
            0.9880286455154419,
            0.00015315486234612763,
            0.0005087259341962636,
            0.0001014115332509391,
            0.00046717660734429955,
            0.00016497309843543917
        ],
        "align_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each pet type, find the average and maximum age.",
        "gold_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
            "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
            "select for Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
            "select avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9884139895439148,
            0.9884139895439148,
            0.9884139895439148,
            0.9884139895439148,
            0.00025639974046498537,
            0.00025639974046498537,
            0.9926718473434448,
            0.9926718473434448
        ],
        "align_select": "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each type of pet, find the average and maximum age for that pet.",
        "gold_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
            "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
            "select avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
            "select for Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9870836734771729,
            0.00031575854518450797,
            0.9870836734771729,
            0.00031575854518450797,
            0.991524338722229,
            0.00020735176804009825,
            0.00033014771179296076,
            0.0001183662170660682
        ],
        "align_select": "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each of the given pet types, find the average and maximum ages.",
        "gold_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
            "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
            "select avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
            "select for Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9848662614822388,
            0.9848662614822388,
            0.9848662614822388,
            0.9848662614822388,
            0.9910362958908081,
            0.9910362958908081,
            0.0002674096031114459,
            0.0002674096031114459
        ],
        "align_select": "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For pets with a pet type, find the average and maximum age.",
        "gold_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
        "select_candidates": [
            "select avg(Pets.pet_age), max(Pets.pet_age)",
            "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
            "select an avg(Pets.pet_age), max(Pets.pet_age)",
            "select avg(Pets.pet_age), max(Pets.pet_age) dependant on Pets.PetType"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.7863808274269104,
            0.19026397168636322,
            0.0012696214253082871,
            0.9876936674118042,
            0.00019310414791107178,
            0.00035550756729207933,
            0.006904942914843559,
            0.008412810042500496
        ],
        "align_select": "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you tell me what the average and maximum ages per pet type are?",
        "gold_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
            "select avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
            "select min(Pets.pet_age), avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
            "select pettype, avg(Pets.pet_age), max(Pets.pet_age)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9890360236167908,
            0.0002342814113944769,
            0.9908345937728882,
            0.00015812244964763522,
            0.002458608243614435,
            9.023942402563989e-05,
            0.02381306141614914,
            0.00018604224896989763
        ],
        "align_select": "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each pet type, what is the average age and maximum age?",
        "gold_select": "select avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
            "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
            "select for Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
            "select count(*), avg(Pets.pet_age), max(Pets.pet_age), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9889580011367798,
            0.9889580011367798,
            0.9889580011367798,
            0.9889580011367798,
            0.00031531997956335545,
            0.00031531997956335545,
            0.0009136390872299671,
            0.0009136390872299671
        ],
        "align_select": "select Pets.PetType, avg(Pets.pet_age), max(Pets.pet_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Locate the average of each pet type for weight.",
        "gold_select": "select avg(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.weight)",
            "select avg(Pets.weight), Pets.PetType",
            "select Pets.PetType.c1, avg(Pets.weight)",
            "select Pets.PetType, Avg(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9912105798721313,
            0.00014699787425342947,
            0.9920647740364075,
            0.00012755919306073338,
            0.0007939678034745157,
            0.00011887001164723188,
            0.9912105798721313,
            0.00014699787425342947
        ],
        "align_select": "select Pets.PetType, avg(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For (1) which pet types have the average weight? List the average weight for each.",
        "gold_select": "select avg(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.weight)",
            "select Pets.PetType.c1, avg(Pets.weight)",
            "select Pets.PetType, Avg(Pets.weight)",
            "select Pets.PetType, avg(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.010293589904904366,
            4.7441622882615775e-05,
            0.0001317058631684631,
            4.414796057972126e-05,
            0.010293589904904366,
            4.7441622882615775e-05,
            0.010293589904904366,
            4.7441622882615775e-05
        ],
        "align_select": "select Pets.PetType, avg(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the average weight for pet types?",
        "gold_select": "select avg(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select avg(Pets.weight)",
            "select Pets.PetType, avg(Pets.weight)",
            "select avg(Pets.weight), Pets.PetType",
            "select an avg(Pets.weight)"
        ],
        "select_labels": [
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9962466359138489,
            0.03428715094923973,
            0.9938473105430603,
            0.005488032940775156,
            0.9940557479858398,
            0.0014822599478065968,
            0.0004159383533988148,
            0.00025675419601611793
        ],
        "align_select": "select avg(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each pet type, find its average weight.",
        "gold_select": "select avg(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.weight)",
            "select Pets.PetType, avg(Pets.weight)",
            "select Pets.PetType.c1, avg(Pets.weight)",
            "select Pets.PetType, Avg(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9925233721733093,
            0.00032954770722426474,
            0.9925233721733093,
            0.00032954770722426474,
            0.0009761322871781886,
            0.0001403047499479726,
            0.9925233721733093,
            0.00032954770722426474
        ],
        "align_select": "select Pets.PetType, avg(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the average weights for each type of pet? List the average weight for each pet type.",
        "gold_select": "select avg(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.weight)",
            "select avg(Pets.weight), Pets.PetType",
            "select Pets.PetType, Avg(Pets.weight)",
            "select the Pets.PetType, avg(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9888637065887451,
            0.00038290012162178755,
            0.9887601137161255,
            0.00019696290837600827,
            0.9888637065887451,
            0.00038290012162178755,
            0.0008631726377643645,
            0.0002940067497547716
        ],
        "align_select": "select Pets.PetType, avg(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average weight of the pet in each category?",
        "gold_select": "select avg(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select avg(Pets.weight), Pets.PetType",
            "select Pets.PetType, avg(Pets.weight)",
            "select pettype, avg(Pets.weight)",
            "select avg(Pets.weight), Pets.pet_age"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.989874005317688,
            0.00013794949336443096,
            0.97940593957901,
            0.00023297609004657716,
            0.014292409643530846,
            0.0003243520332034677,
            0.0015594704309478402,
            0.00010740648576756939
        ],
        "align_select": "select avg(Pets.weight), Pets.PetType",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me an estimate of the average weight of every type of pet.",
        "gold_select": "select avg(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.weight)",
            "select avg(Pets.weight), Pets.PetType",
            "select Pets.PetType.c1, avg(Pets.weight)",
            "select Pets.PetType, avg(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9935431480407715,
            0.00025564691168256104,
            0.9932916164398193,
            0.0001256366667803377,
            0.0015100956661626697,
            0.00012495838745962828,
            0.9935431480407715,
            0.00025564691168256104
        ],
        "align_select": "select Pets.PetType, avg(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you tell me the average weight per pet type?",
        "gold_select": "select avg(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.weight)",
            "select avg(Pets.weight), Pets.PetType",
            "select pettype, avg(Pets.weight)",
            "select Pets.PetType, Avg(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9940240979194641,
            0.00021979027951601893,
            0.9939194917678833,
            0.00013214752834755927,
            0.023665044456720352,
            0.0002288620889885351,
            0.9940240979194641,
            0.00021979027951601893
        ],
        "align_select": "select Pets.PetType, avg(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you find out the first names and ages of students who have pets?",
        "gold_select": "select distinct Student.Fname, Student.Age",
        "select_candidates": [
            "select distinct Student.Fname, Student.Age",
            "select Student.Fname, Student.Age",
            "select unique Student.Fname, Student.Age",
            "select distinct Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.03783761337399483,
            0.0007921582437120378,
            0.9822328090667725,
            0.00016950623830780387,
            0.0008671542746014893,
            0.00015002110740169883,
            0.0029460489749908447,
            0.0005515207885764539
        ],
        "align_select": "select Student.Fname, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the first name and age of all students who have pet?",
        "gold_select": "select distinct Student.Fname, Student.Age",
        "select_candidates": [
            "select Student.Fname, Student.Age",
            "select distinct Student.Fname, Student.Age",
            "select Student.LName, Student.Age",
            "select unique Student.Fname, Student.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9902822971343994,
            0.00016434113786090165,
            0.024841919541358948,
            7.53756903577596e-05,
            0.000905366672668606,
            0.00012938742293044925,
            0.0010167118161916733,
            9.264861728297547e-05
        ],
        "align_select": "select Student.Fname, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first names and ages of the students having a pet.",
        "gold_select": "select distinct Student.Fname, Student.Age",
        "select_candidates": [
            "select distinct Student.Fname, Student.Age",
            "select Student.Fname, Student.Age",
            "select distinct Student.LName, Student.Age",
            "select unique Student.Fname, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.07950858026742935,
            0.10019006580114365,
            0.9738253951072693,
            0.9182108640670776,
            0.00262804445810616,
            0.002207792131230235,
            0.0032187355682253838,
            0.0047968532890081406
        ],
        "align_select": "select Student.Fname, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ages and first names of the students who have pets?",
        "gold_select": "select distinct Student.Fname, Student.Age",
        "select_candidates": [
            "select distinct Student.Age, Student.Fname",
            "select Student.Age, Student.Fname",
            "select distinct Student.Fname, Student.Age",
            "select Student.Fname, Student.Age"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.042561858892440796,
            0.05087149888277054,
            0.9881415367126465,
            0.9627755880355835,
            0.0413719043135643,
            0.06504262238740921,
            0.9890652894973755,
            0.92670738697052
        ],
        "align_select": "select Student.Fname, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the first names and ages of students who own pet.",
        "gold_select": "select distinct Student.Fname, Student.Age",
        "select_candidates": [
            "select Student.Fname, Student.Age",
            "select distinct Student.Fname, Student.Age",
            "select Student.LName, Student.Age",
            "select unique Student.Fname, Student.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9570914506912231,
            0.986233115196228,
            0.054617900401353836,
            0.025908291339874268,
            0.0011244467459619045,
            0.0011877267388626933,
            0.0014002922689542174,
            0.0007257699617184699
        ],
        "align_select": "select Student.Fname, Student.Age",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the first names and ages of the students who have pets.",
        "gold_select": "select distinct Student.Fname, Student.Age",
        "select_candidates": [
            "select distinct Student.Fname, Student.Age",
            "select Student.Fname, Student.Age",
            "select unique Student.Fname, Student.Age",
            "select distinct Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.1296563744544983,
            0.18873950839042664,
            0.984034538269043,
            0.9447948932647705,
            0.0024470018688589334,
            0.005259320139884949,
            0.007142162881791592,
            0.002907079178839922
        ],
        "align_select": "select Student.Fname, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which students have pets? Mention their first name & age.",
        "gold_select": "select distinct Student.Fname, Student.Age",
        "select_candidates": [
            "select distinct Student.Fname, Student.Age",
            "select distinct Student.Fname & Student.Age",
            "select Student.Fname, Student.Age",
            "select distinct Student.Fname  & Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.034024398773908615,
            0.014117542654275894,
            0.028194425627589226,
            0.016409266740083694,
            0.9432964324951172,
            0.9828438758850098,
            0.028194425627589226,
            0.016409266740083694
        ],
        "align_select": "select Student.Fname, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the different first names and ages (age) of the students who have pets.",
        "gold_select": "select distinct Student.Fname, Student.Age",
        "select_candidates": [
            "select distinct Student.Fname, Student.Age",
            "select distinct Student.Fname.c2, Student.Age",
            "select distinct Student.Fname, Student.Age, Has_Pet.StuID",
            "select different Student.Fname, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9814780950546265,
            0.9855555295944214,
            0.00033084905589930713,
            0.0003371742204762995,
            0.0001576522772666067,
            0.00017324469808954746,
            0.0022684915456920862,
            0.02057112194597721
        ],
        "align_select": "select distinct Student.Fname, Student.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For those students who have pets, what is the age and first name?",
        "gold_select": "select distinct Student.Fname, Student.Age",
        "select_candidates": [
            "select Student.Age, Student.Fname",
            "select Student.Fname, Student.Age",
            "select Has_Pet.StuID, Student.Age, Student.Fname",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9026472568511963,
            0.9899320602416992,
            0.9295380711555481,
            0.9899783134460449,
            0.0004587023286148906,
            0.00032538469531573355,
            0.0015698979841545224,
            0.0018258335767313838
        ],
        "align_select": "select Student.Age, Student.Fname",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the id of the student's pet when their last name appears Smith?",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.PetID, Student.StuID",
            "select Has_Pet.PetID, Student.Fname",
            "select Has_Pet.PetID, Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.44679000973701477,
            8.263794734375551e-05,
            0.00020585583115462214,
            6.996063893893734e-05,
            0.00025478770839981735,
            6.553783896379173e-05,
            0.0002627969952300191,
            7.043492223601788e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find the pet id for student whose last name is smith?",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.StuID, Has_Pet.PetID",
            "select Has_Pet.PetID, Student.StuID",
            "select Has_Pet.PetID, Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.027109280228614807,
            8.748648542677984e-05,
            0.00020832079462707043,
            7.216056110337377e-05,
            0.00015911947411950678,
            7.434501458192244e-05,
            0.00017323366773780435,
            7.765473128529266e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the id of the pet of student whose last name is 'Smith'.",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.PetID, Student.Fname",
            "select Has_Pet.PetID, Student.StuID",
            "select Has_Pet.PetID, Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.06942801177501678,
            8.856088243192062e-05,
            0.00015150872059166431,
            6.675515760434791e-05,
            0.0001716669648885727,
            6.691129965474829e-05,
            0.00018678023479878902,
            7.38187154638581e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the pet id of student whose last name is 'Smith'.",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.PetID, Student.StuID",
            "select Has_Pet.StuID, Has_Pet.PetID",
            "select Has_Pet.PetID, Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.06757676601409912,
            8.213098772102967e-05,
            0.00014304433716461062,
            6.29408605163917e-05,
            0.00017261730681639165,
            6.462005694629624e-05,
            0.00017157023830804974,
            7.103863754309714e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the id of the pet owned by student whose last name is 'Smith'?",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.PetID, Student.StuID",
            "select Has_Pet.PetID, Student.Fname",
            "select Has_Pet.PetID, Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.13792133331298828,
            0.00014063062553759664,
            0.00024808975285850465,
            8.894681377569214e-05,
            0.0002141644508810714,
            7.766086491756141e-05,
            0.00024883149308152497,
            8.717660966794938e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which pets do the students whose last names start with 'Smith' own? List their ids.",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.StuID, Has_Pet.PetID",
            "select distinct Has_Pet.PetID",
            "select Has_Pet.PetID, Student.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.2093711495399475,
            0.0001794311247067526,
            0.0002929052570834756,
            9.40317622735165e-05,
            0.13226138055324554,
            9.12896211957559e-05,
            0.0004512002633418888,
            0.00010257668327540159
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the pet id of the student whose last name is 'Smith'?",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.StuID, Has_Pet.PetID",
            "select Has_Pet.PetID, Student.StuID",
            "select Has_Pet.PetID, Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.10151784867048264,
            7.703893061261624e-05,
            0.00019731948850676417,
            6.44389510853216e-05,
            0.00015587234520353377,
            6.253730680327863e-05,
            0.00017805640527512878,
            7.01426833984442e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the pet id of the student whose last name is 'Smith'.",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.PetID",
            "select Has_Pet.PetID, Student.StuID",
            "select Has_Pet.StuID, Has_Pet.PetID",
            "select Has_Pet.PetID, Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.04619105905294418,
            7.997451757546514e-05,
            0.00015030174108687788,
            6.190735439304262e-05,
            0.0001910201390273869,
            6.316212238743901e-05,
            0.00018150046525988728,
            7.186485890997574e-05
        ],
        "align_select": "select Has_Pet.PetID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which students has 'Smith' as their last name? List them by their pet IDs.",
        "gold_select": "select Has_Pet.PetID",
        "select_candidates": [
            "select Has_Pet.StuID",
            "select Has_Pet.StuID, Has_Pet.PetID",
            "select distinct Has_Pet.StuID",
            "select Has_Pet.StuID,"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.02470243349671364,
            0.00012983063061255962,
            0.00035962602123618126,
            8.52193043101579e-05,
            0.07977679371833801,
            8.539453847333789e-05,
            0.002873444464057684,
            9.047947969520465e-05
        ],
        "align_select": "select Has_Pet.StuID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me how to find the number of pets for each student ID and pet.",
        "gold_select": "select count(*), Student.StuID",
        "select_candidates": [
            "select Has_Pet.StuID, Has_Pet.PetID, count(*)",
            "select count(*), Has_Pet.StuID, Has_Pet.PetID",
            "select Has_Pet.StuID, Has_Pet.PetID",
            "select Has_Pet.StuID, t1.c2, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Has_Pet",
            "Has_Pet Pets",
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9942949414253235,
            0.00024380144895985723,
            0.9866006970405579,
            0.0001489648420829326,
            0.08673558384180069,
            0.01003837026655674,
            0.0002791829756461084,
            0.00015501146845053881
        ],
        "align_select": "select Has_Pet.StuID, Has_Pet.PetID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which students have pets? List their student ids and the number of pets they own.",
        "gold_select": "select count(*), Student.StuID",
        "select_candidates": [
            "select Has_Pet.StuID, count(*)",
            "select Student.StuID, count(*)",
            "select Has_Pet.StuID, count(Has_Pet.PetID)",
            "select Pets.PetID, count(*)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Has_Pet",
            "Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.8925489783287048,
            0.0013902143109589815,
            0.6652330756187439,
            0.00043953736894764006,
            0.007620842661708593,
            0.00025724252918735147,
            0.0008011421305127442,
            0.00041130304452963173
        ],
        "align_select": "select Has_Pet.StuID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For students who have pets, how many pets do they possess? List their ids instead of names.",
        "gold_select": "select count(*), Student.StuID",
        "select_candidates": [
            "select count(*), Has_Pet.StuID",
            "select Has_Pet.StuID",
            "select Has_Pet.StuID, count(*)",
            "select count(*), Student.StuID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9528042674064636,
            0.00020790788403246552,
            0.10720010846853256,
            0.3370925486087799,
            0.8858751058578491,
            0.00023860721557866782,
            0.009481399320065975,
            0.0001915556495077908
        ],
        "align_select": "select count(*), Has_Pet.StuID",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For students who have pets, how many pets do they have? List their ids instead of names.",
        "gold_select": "select count(*), Student.StuID",
        "select_candidates": [
            "select count(*), Has_Pet.StuID",
            "select Has_Pet.StuID, count(*)",
            "select Has_Pet.StuID",
            "select count(*), Student.StuID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9743277430534363,
            0.00019609999435488135,
            0.9260686039924622,
            0.00021438286057673395,
            0.07874550670385361,
            0.4696350693702698,
            0.00781386997550726,
            0.00018203600484412163
        ],
        "align_select": "select count(*), Has_Pet.StuID",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you tell me the first names and genders of all the students with more than one pet?",
        "gold_select": "select Student.Fname, Student.Sex",
        "select_candidates": [
            "select Student.Fname, Student.Sex",
            "select count(*), Student.Fname, Student.Sex",
            "select distinct Student.Fname, Student.Sex",
            "select Student.LName, Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Student Has_Pet"
        ],
        "align_scores": [
            0.988787829875946,
            0.00014649692457169294,
            0.00032623353763483465,
            7.450804696418345e-05,
            0.0061021409928798676,
            6.89999942551367e-05,
            0.0014803529484197497,
            0.00010963520617224276
        ],
        "align_select": "select Student.Fname, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For each student who has more than one pet, list their first name and gender.",
        "gold_select": "select Student.Fname, Student.Sex",
        "select_candidates": [
            "select Student.Fname, Student.Sex",
            "select Student.StuID, Student.Fname, Student.Sex",
            "select Student.LName, Student.Sex",
            "select Student.Sex, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9925544857978821,
            0.00010073888552142307,
            0.0003515106509439647,
            7.708065822953358e-05,
            0.013291136361658573,
            8.938572864281014e-05,
            0.9934145212173462,
            9.970759128918871e-05
        ],
        "align_select": "select Student.Fname, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Is the last name of the student whose pet is age 3 'Cat'?",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname",
            "select Student.LName, Pets.PetType",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.9895193576812744,
            0.0006655532633885741,
            0.00014404872490558773,
            9.478619176661596e-05,
            0.00027319241780787706,
            9.938351286109537e-05,
            0.0002033222554018721,
            9.416617831448093e-05
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find last name of student who has the pet cat age 3.",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname, Student.Age",
            "select Student.LName, Student.Fname",
            "select Student.LName, Student.Fname, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9870923757553101,
            0.000808393640909344,
            0.00011961384734604508,
            7.013465801719576e-05,
            0.00016563555982429534,
            9.396813402418047e-05,
            0.00011961384734604508,
            7.013465801719576e-05
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the last name of the student whose pet is age 3 and whose pet type is cat?",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname",
            "select Student.LName, Student.Fname, Student.Age",
            "select Student.LName, Student.Fname, Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.9878974556922913,
            0.9854505062103271,
            0.0001786349166650325,
            0.00014736443699803203,
            0.0001653158979024738,
            9.72626730799675e-05,
            0.00016157705977093428,
            8.392086601816118e-05
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The student whose pet is aged 3 owns a cat, can you give me his/her last name?",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname",
            "select Student.LName, t1.c2",
            "select Student.StuID, Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.8681871294975281,
            0.00025005225325003266,
            0.00032308947993442416,
            7.539322541560978e-05,
            0.0006432731752283871,
            9.01033854461275e-05,
            0.0002579232968855649,
            7.757649291306734e-05
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which student has a cat that is 3 years old? Give their last name.",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname",
            "select Student.LName, Student.Fname, Student.Age",
            "select Student.StuID, Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.8692663311958313,
            0.0006527956575155258,
            0.00019830216479022056,
            8.375920151593164e-05,
            0.00012125237844884396,
            6.531055987579748e-05,
            0.0002512847713660449,
            9.188999683829024e-05
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the last name of the student with a cat which is 3 years old.",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname, Student.Age",
            "select Student.LName, Student.Fname",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9801766872406006,
            0.0022266895975917578,
            0.00011720421753125265,
            7.290117355296388e-05,
            0.0001663195580476895,
            0.00010477911564521492,
            0.00018050911603495479,
            9.339852840639651e-05
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the last name for that student whose cats were ages 3 years?",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname, Student.Age",
            "select Student.LName, Student.Fname",
            "select Student.LName Student.Fname, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.9902294278144836,
            0.023678449913859367,
            0.00013734442472923547,
            8.590450306655839e-05,
            0.00018268771236762404,
            0.00018760627426672727,
            0.00027194918948225677,
            0.00011619102588156238
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the last name of the student with a cat 3 years old?",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname, Student.Age",
            "select Student.LName, Student.Fname",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9842309355735779,
            0.0027930522337555885,
            0.00015149428509175777,
            7.969087164383382e-05,
            0.00020299528841860592,
            0.00014305170043371618,
            0.00023091059119906276,
            0.00010366008791606873
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average age of the students who have no pets.",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select avg(Student.Age), Student.StuID",
            "select an avg(Student.Age)",
            "select avg(Student.Age), Has_Pet.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student",
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9943814873695374,
            0.00020132372446823865,
            0.00012695463374257088,
            0.00010056563041871414,
            0.0005121941212564707,
            0.0001345391501672566,
            0.00016719249833840877,
            0.0005847334978170693
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For all the students who don't have any pet, find their average age.",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select avg(Student.Age), Student.StuID",
            "select an avg(Student.Age)",
            "select avg(Student.Age), Has_Pet.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student",
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.990371584892273,
            0.0009804541477933526,
            0.0001229896442964673,
            0.00017769633268471807,
            0.00045881691039539874,
            0.00022941875795368105,
            0.00033428400638513267,
            0.0033065902534872293
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average age of students without a pet.",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select an avg(Student.Age)",
            "select avg(Student.Age), Student.StuID",
            "select avg(Student.Age), Has_Pet.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student",
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9961010217666626,
            0.0001996369828702882,
            0.0004695186798926443,
            0.00011828137940028682,
            0.00014475040370598435,
            8.698485908098519e-05,
            0.00015662949590478092,
            0.00029340304899960756
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average student age for students who don't own any pets.",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select avg(Student.Age), Student.StuID",
            "select avg(Student.Age), Student.Sex",
            "select an avg(Student.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student",
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9932671785354614,
            0.000507581396959722,
            0.00014215234841685742,
            0.00011190548684680834,
            0.00012913302634842694,
            0.0001944062241818756,
            0.000538016902282834,
            0.00018279817595612258
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the average age for all students who do not have any pets?",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select avg(Student.Age), Student.StuID",
            "select an avg(Student.Age)",
            "select avg(Student.Age), Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student",
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9935374855995178,
            0.00036638512392528355,
            0.00014091400953475386,
            0.00011408190766815096,
            0.0005698021850548685,
            0.000209401550819166,
            0.00013338998542167246,
            0.00019982703088317066
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The average age among the students who do not own any pets is which age?",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select avg(Student.Age), Student.StuID",
            "select an avg(Student.Age)",
            "select avg(Student.Age), Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student",
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9931073784828186,
            8.392718154937029e-05,
            0.0001693724625511095,
            6.712027243338525e-05,
            0.0005055879009887576,
            9.407948527950794e-05,
            0.00015696381160523742,
            6.69110449962318e-05
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of car models that are made by each maker and also list their IDs and full names.",
        "gold_select": "select count(*), car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select count(*), car_makers.Id, car_makers.FullName",
            "select car_makers.Id, car_makers.Maker, car_makers.FullName",
            "select car_names.Model, car_makers.FullName, count(*)",
            "select count(*), car_makers.Id, car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9859218001365662,
            0.00025913160061463714,
            0.0008366745314560831,
            0.00011657200957415625,
            0.00030087438062764704,
            0.0002174096298404038,
            0.002965475432574749,
            0.00012413974036462605
        ],
        "align_select": "select count(*), car_makers.Id, car_makers.FullName",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me the number of cars model made by each maker and the id and full name of each maker.",
        "gold_select": "select count(*), car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select count(*), car_makers.Id, car_makers.FullName",
            "select car_makers.Id, car_makers.Maker, car_makers.FullName",
            "select count(*), car_makers.Id, car_makers.Maker, car_makers.FullName",
            "select count(*), car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9743936061859131,
            0.0002057159144897014,
            0.0003841354919131845,
            0.00011176215775776654,
            0.0023893225006759167,
            0.00010567757271928713,
            0.008258149027824402,
            0.00012341648107394576
        ],
        "align_select": "select count(*), car_makers.Id, car_makers.FullName",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the number of car models produced by each maker? List them and also give the id and full names of each maker.",
        "gold_select": "select count(*), car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select count(*), car_makers.Id, car_makers.FullName",
            "select car_makers.Id, car_makers.Maker, car_makers.FullName",
            "select car_names.Model, car_makers.Maker, car_makers.FullName",
            "select car_names.Model, car_makers.Id, car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9645830988883972,
            0.0002314086741534993,
            0.0006785618606954813,
            0.00017068877059500664,
            0.0005366348195821047,
            0.00014397456834558398,
            0.001622259384021163,
            0.0002602387685328722
        ],
        "align_select": "select count(*), car_makers.Id, car_makers.FullName",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the number of cars manufactured by this company with the full name 'American Motor Company'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Maker",
            "select count(*), car_makers.Maker, car_makers.FullName",
            "select count(*), car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers",
            "car_makers model_list car_names",
            "car_makers car_makers car_names"
        ],
        "align_scores": [
            0.9477372169494629,
            0.0002031742042163387,
            0.0004733861715067178,
            0.06534254550933838,
            0.0001360806927550584,
            0.00021190394181758165,
            0.00037416693521663547,
            0.0005850251181982458
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the models which are made by the company General Motors, weigh more than 3500.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.Model, car_makers.Maker",
            "select car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "car_makers model_list car_names cars_data"
        ],
        "align_scores": [
            0.9502115249633789,
            0.0006089025991968811,
            0.9553192853927612,
            0.0012249413412064314,
            0.00020492833573371172,
            0.00013247884635347873,
            0.30455827713012695,
            0.001481122919358313
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which model has the most make of cars?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select model_list.Model, car_names.Make",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model (car_names.Model)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names",
        "table_candidates": [
            "model_list car_names",
            "car_makers model_list car_names",
            "car_makers car_names",
            "continents model_list car_names",
            "countries car_names",
            "car_names"
        ],
        "align_scores": [
            0.9840796589851379,
            8.522971620550379e-05,
            0.01923571527004242,
            8.410985174123198e-05,
            0.0006283287075348198,
            7.049895793898031e-05,
            0.0013458862667903304,
            5.9427453379612416e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the years when there were cars made that weighed less than 4000 kg and those that weighed more than 3000 kg.",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select cars_data.Year (interval between cars_data.Weight, cars_data.Accelerate)",
            "select cars_data.Year (interval between cars_data.Id, cars_data.Weight)",
            "select cars_data.Year (interval between cars_data.Id, cars_data.MPG)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "cars_data car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9551777839660645,
            0.2847535312175751,
            0.00011508252646308392,
            9.00120212463662e-05,
            0.00013408281665761024,
            0.00010670659685274586,
            0.00015610406990163028,
            0.00011227637878619134
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "In which years there were cars weighed less than 4000 lbs? Also some cars weighed more than 3000 lbs.?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select cars_data.Year, cars_data.Accelerate",
            "select cars_data.Year, t5.c8"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.30496567487716675,
            0.9814403057098389,
            0.017524821683764458,
            0.0009780342224985361,
            0.0003163452201988548,
            0.00017022312385961413,
            0.0006043006433174014,
            0.00023994478397071362
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give me all the years in which there was car production. Show me all cars weighing less than 4000 and also cars weighing more than 3000.",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select distinct cars_data.Year",
            "select cars_data.Year",
            "select distinct cars_data.Year, t5.c8",
            "select distinct cars_data.Year, cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "cars_data car_names",
            "countries cars_data"
        ],
        "align_scores": [
            0.00311634736135602,
            0.004216432571411133,
            0.4213514029979706,
            0.10136202722787857,
            0.00011712656851159409,
            0.00010869005200220272,
            0.00012794777285307646,
            0.0001372942642774433
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Name all the years when the weight of cars was less than 4000 and more than 3000.",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select years(cars_data.Year)",
            "select cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.7077097296714783,
            0.9736849069595337,
            0.21211375296115875,
            0.0015239111380651593,
            0.0009655231260694563,
            0.0004720240249298513,
            0.7077097296714783,
            0.9736849069595337
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Could you show me the different years in which cars produced weighed less than 4000 and also cars that weighted more than 3000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select distinct cars_data.Year",
            "select cars_data.Year",
            "select distinct cars_data.Year, t5.c8",
            "select distinct cars_data.Year, cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.0038289588410407305,
            0.026862051337957382,
            0.9440734386444092,
            0.967741072177887,
            0.00011831656593130901,
            0.00012126023648306727,
            0.00012579275062307715,
            0.00016366963973268867
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "How many continents exist in the world?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct continents.Continent)",
            "select count(continents.ContId, continents.Continent)",
            "select count(*), continents.ContId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents",
        "table_candidates": [
            "continents"
        ],
        "align_scores": [
            0.7984656095504761,
            8.71754382387735e-05,
            0.2144547998905182,
            6.314489291980863e-05,
            0.00014007175923325121,
            5.7797631598077714e-05,
            0.0006388932815752923,
            6.864107854198664e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the number of continents?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct continents.Continent)",
            "select count(*), continents.ContId",
            "select count(continents.ContId, continents.Continent)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "continents",
        "table_candidates": [
            "continents"
        ],
        "align_scores": [
            0.9779931306838989,
            0.9779931306838989,
            0.007428657729178667,
            0.007428657729178667,
            0.00024735479382798076,
            0.00024735479382798076,
            0.00013623676204588264,
            0.00013623676204588264
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me how many continents there are in our world?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct continents.Continent)",
            "select count(continents.ContId, continents.Continent)",
            "select count(*), continents.ContId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents",
        "table_candidates": [
            "continents"
        ],
        "align_scores": [
            0.7843952178955078,
            0.9817407131195068,
            0.37024179100990295,
            0.00574518833309412,
            0.00014305647346191108,
            0.00013309445057529956,
            0.0009324734564870596,
            0.00036350308801047504
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "There are how many continents?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct continents.Continent)",
            "select count(*), continents.ContId",
            "select count(continents.ContId, continents.Continent)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "continents",
        "table_candidates": [
            "continents"
        ],
        "align_scores": [
            0.9872000217437744,
            0.9872000217437744,
            0.04491310566663742,
            0.04491310566663742,
            0.0004493889573495835,
            0.0004493889573495835,
            0.00014417088823392987,
            0.00014417088823392987
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the number of continents on Earth?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct continents.Continent)",
            "select count(*), continents.ContId",
            "select count(*), continents.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents",
        "table_candidates": [
            "continents",
            "continents countries"
        ],
        "align_scores": [
            0.8834903240203857,
            9.516313002677634e-05,
            0.6126256585121155,
            7.319863652810454e-05,
            0.0003758480597753078,
            6.501440657302737e-05,
            0.0004286560579203069,
            8.259035530500114e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In the world, what is the number of continents?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct continents.Continent)",
            "select count(*), continents.ContId",
            "select count(*), continents.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents",
        "table_candidates": [
            "continents"
        ],
        "align_scores": [
            0.7655529975891113,
            0.00010277231194777414,
            0.10709785670042038,
            6.645503890467808e-05,
            0.0002969155029859394,
            7.326357444981113e-05,
            0.00035058544017374516,
            9.494061669101939e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please tell me the number of continents.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct continents.Continent)",
            "select count(*), continents.ContId",
            "select count(continents.ContId, continents.Continent)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents",
        "table_candidates": [
            "continents"
        ],
        "align_scores": [
            0.9803923964500427,
            9.297111682826653e-05,
            0.028128575533628464,
            6.032544115441851e-05,
            0.00030314645846374333,
            6.851140642538667e-05,
            0.0001263042795471847,
            5.931857231189497e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the numbers of continents? List the continent id, continent name, and the number of countries.",
        "gold_select": "select continents.ContId, continents.Continent, count(*)",
        "select_candidates": [
            "select countries.CountryId, continents.Continent, count(*)",
            "select continents.ContId, continents.Continent, count(*)",
            "select countries.CountryName, continents.ContId, count(*)",
            "select countries.CountryId, countries.CountryName, count(*)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "continents countries",
        "table_candidates": [
            "continents countries",
            "countries car_makers",
            "countries continents"
        ],
        "align_scores": [
            0.0003468970535323024,
            0.00035431893775239587,
            0.033604785799980164,
            0.4289633333683014,
            0.000988250831142068,
            0.0013215740909799933,
            0.0007220164407044649,
            0.0005397787317633629
        ],
        "align_select": "select continents.ContId, continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "In what number [of] countries on this particular continent exist?",
        "gold_select": "select continents.ContId, continents.Continent, count(*)",
        "select_candidates": [
            "select count(*), countries.CountryName",
            "select count(*), continents.Continent",
            "select count(*), countries.Continent",
            "select countries.Continent, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries",
        "table_candidates": [
            "continents countries",
            "countries",
            "car_makers countries",
            "model_list countries"
        ],
        "align_scores": [
            0.006271840073168278,
            0.00018408203322906047,
            0.9873113632202148,
            0.00010270314669469371,
            0.9909850358963013,
            0.00010771604138426483,
            0.9891695380210876,
            0.00011760409688577056
        ],
        "align_select": "select count(*), countries.Continent",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which continents can be labeled by region id? List the names of the continent and other details like the number of countries per continent.",
        "gold_select": "select continents.ContId, continents.Continent, count(*)",
        "select_candidates": [
            "select continents.Continent, count(*)",
            "select continents.Continent, count(*), countries.Continent",
            "select continents.ContId, countries.Continent, count(*)",
            "select countries.Continent, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries",
        "table_candidates": [
            "continents countries",
            "continents countries car_makers",
            "continents countries model_list",
            "countries car_makers"
        ],
        "align_scores": [
            0.985662043094635,
            0.0003807401517406106,
            0.0002729947736952454,
            0.00012154338764958084,
            0.015617221593856812,
            0.00015677412739023566,
            0.9905155897140503,
            0.00044486677506938577
        ],
        "align_select": "select continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "On which continents are there countries? Show the country names, continent ids and numbers of the countries.",
        "gold_select": "select continents.ContId, continents.Continent, count(*)",
        "select_candidates": [
            "select countries.CountryName, countries.Continent, count(*)",
            "select countries.CountryName, countries.CountryId, count(*)",
            "select countries.CountryName, continents.Continent, count(*)",
            "select countries.CountryName, t0.c2, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries",
        "table_candidates": [
            "countries",
            "continents countries"
        ],
        "align_scores": [
            0.8017765283584595,
            0.0002962498692795634,
            0.0006504507036879659,
            0.00022832654940430075,
            0.8777979612350464,
            0.0003618624759837985,
            0.000420365366153419,
            0.00035208111512474716
        ],
        "align_select": "select countries.CountryName, countries.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Each continent has how many countries? List the country id, continent id, continent name and the number of countries.",
        "gold_select": "select continents.ContId, continents.Continent, count(*)",
        "select_candidates": [
            "select countries.CountryId, countries.Continent, count(*)",
            "select countries.CountryId, countries.CountryName, continents.Continent, count(*)",
            "select countries.CountryId, countries.Continent, continents.Continent, count(*)",
            "select countries.CountryId, countries.CountryName, continents.Continent, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries",
        "table_candidates": [
            "continents countries"
        ],
        "align_scores": [
            0.10234997421503067,
            0.0005330309504643083,
            0.08027832955121994,
            0.00037925346987321973,
            0.07905668020248413,
            0.0002618011203594506,
            0.08027832955121994,
            0.00037925346987321973
        ],
        "align_select": "select countries.CountryId, countries.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each continent list its continent id, name, and how many countries it has.",
        "gold_select": "select continents.ContId, continents.Continent, count(*)",
        "select_candidates": [
            "select continents.ContId, continents.Continent, count(*)",
            "select continents.ContId, continents.Continent, count(*)",
            "select countries.Continent, continents.Continent, count(*)",
            "select countries.Continent, continents.Continent, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries",
        "table_candidates": [
            "continents countries"
        ],
        "align_scores": [
            0.9275195002555847,
            0.00023797266476321965,
            0.9275195002555847,
            0.00023797266476321965,
            0.0022988684941083193,
            0.00011403448297642171,
            0.0022988684941083193,
            0.00011403448297642171
        ],
        "align_select": "select continents.ContId, continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each continent, give the continent id, name, and how many countries it has.",
        "gold_select": "select continents.ContId, continents.Continent, count(*)",
        "select_candidates": [
            "select continents.ContId, continents.Continent, count(*)",
            "select continents.ContId, continents.Continent, count(*)",
            "select countries.Continent, continents.Continent, count(*)",
            "select countries.Continent, continents.Continent, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries",
        "table_candidates": [
            "continents countries"
        ],
        "align_scores": [
            0.7584871053695679,
            0.00023810064885765314,
            0.7584871053695679,
            0.00023810064885765314,
            0.0014172763330861926,
            0.00012220093049108982,
            0.0014172763330861926,
            0.00012220093049108982
        ],
        "align_select": "select continents.ContId, continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the continents ID, name, and how many countries it has?",
        "gold_select": "select continents.ContId, continents.Continent, count(*)",
        "select_candidates": [
            "select continents.ContId, continents.Continent, count(*)",
            "select continents.ContId, continents.Continent, count(*)",
            "select countries.Continent, continents.Continent, count(*)",
            "select countries.Continent, continents.Continent, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries",
        "table_candidates": [
            "continents countries"
        ],
        "align_scores": [
            0.9867342710494995,
            0.00014432164607569575,
            0.9867342710494995,
            0.00014432164607569575,
            0.0006365636363625526,
            9.195819438900799e-05,
            0.0006365636363625526,
            9.195819438900799e-05
        ],
        "align_select": "select continents.ContId, continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the number of countries listed.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(*), countries.CountryId, countries.CountryName",
            "select count(*), countries.CountryName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries",
        "table_candidates": [
            "countries"
        ],
        "align_scores": [
            0.9935006499290466,
            8.11987483757548e-05,
            0.00017991609638556838,
            8.169037027982995e-05,
            0.00015773573250044137,
            5.520533522940241e-05,
            0.0002278974570799619,
            6.696037598885596e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In this list, how many countries are listed?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(*), countries.CountryName",
            "select count(*), countries.CountryId, countries.CountryName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "countries",
        "table_candidates": [
            "countries"
        ],
        "align_scores": [
            0.9897776246070862,
            0.9897776246070862,
            0.0002530007332097739,
            0.0002530007332097739,
            0.0006365948356688023,
            0.0006365948356688023,
            0.00021998691954649985,
            0.00021998691954649985
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of nations on the page?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), countries.CountryId",
            "select count(distinct countries.CountryName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries",
        "table_candidates": [
            "countries"
        ],
        "align_scores": [
            0.9918763637542725,
            0.00010451526759425178,
            0.00022470156545750797,
            9.500970918452367e-05,
            0.00018023772281594574,
            9.456284169573337e-05,
            0.07354521006345749,
            5.6236531236208975e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What does the question mean - how many counties/countries are there?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), countries.CountryId",
            "select count(countries/counties)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "countries",
        "table_candidates": [
            "countries",
            "countries car_makers"
        ],
        "align_scores": [
            0.9904148578643799,
            0.9904148578643799,
            0.0012252290034666657,
            0.0012252290034666657,
            0.00034036897704936564,
            0.00034036897704936564,
            0.9790168404579163,
            0.9790168404579163
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many countries are there actually?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(*), countries.CountryName",
            "select count(*), countries.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries",
        "table_candidates": [
            "countries"
        ],
        "align_scores": [
            0.9919845461845398,
            0.00011145672760903835,
            0.0002518755500204861,
            8.149927452905104e-05,
            0.00044820475159212947,
            7.321901648538187e-05,
            0.00020090337784495205,
            7.982312672538683e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "There are how many countries in the world?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), countries.CountryId",
            "select count(*), countries.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries",
        "table_candidates": [
            "countries"
        ],
        "align_scores": [
            0.9917038679122925,
            7.638778333785012e-05,
            0.0004847903910558671,
            6.915914855198935e-05,
            0.00031158362980932,
            7.463327347068116e-05,
            0.00016764330212026834,
            7.88321704021655e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me how many countries exists?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(*), countries.CountryName",
            "select count(*), countries.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "countries",
        "table_candidates": [
            "countries"
        ],
        "align_scores": [
            0.99370276927948,
            0.99370276927948,
            0.0001988785370485857,
            0.0001988785370485857,
            0.00037042860640212893,
            0.00037042860640212893,
            0.00018097253632731736,
            0.00018097253632731736
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many countries are there in the world?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), countries.CountryId",
            "select count(*), countries.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries",
        "table_candidates": [
            "countries"
        ],
        "align_scores": [
            0.992599368095398,
            8.318704931298271e-05,
            0.0004839314497075975,
            7.146369898691773e-05,
            0.0002560850407462567,
            7.8258803114295e-05,
            0.00017970950284507126,
            7.979907968547195e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the car makers by their full names, id numbers and the number of cars they produce.",
        "gold_select": "select car_makers.FullName, car_makers.Id, count(*)",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id, count(*)",
            "select car_makers.Maker, car_makers.FullName, car_makers.Id, count(*)",
            "select car_makers.FullName, car_makers.Id, count(*), car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names"
        ],
        "align_scores": [
            0.9758457541465759,
            0.00019485603843349963,
            0.0010504494421184063,
            8.236448047682643e-05,
            0.000577267783228308,
            9.745679562911391e-05,
            0.000716648530215025,
            9.00630111573264e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you tell me the full names of each car manufacturer, along with their id and how many models they produce?",
        "gold_select": "select car_makers.FullName, car_makers.Id, count(*)",
        "select_candidates": [
            "select car_makers.FullName, car_names.Model, count(*)",
            "select car_makers.FullName, model_list.Maker, count(*)",
            "select car_makers.FullName, car_makers.Id, count(*)",
            "select car_makers.Maker, car_makers.FullName, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list car_makers car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.000555759237613529,
            0.00016961715300567448,
            0.754837691783905,
            0.00032372435089200735,
            0.940012514591217,
            0.00029991412884555757,
            0.006047238130122423,
            0.00016054643492680043
        ],
        "align_select": "select car_makers.FullName, car_makers.Id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the full names of all car makers, along with their id and how many models they produce.",
        "gold_select": "select car_makers.FullName, car_makers.Id, count(*)",
        "select_candidates": [
            "select car_makers.FullName, model_list.Maker, count(*)",
            "select car_makers.FullName, car_names.Model, count(*)",
            "select car_makers.FullName, car_makers.Id, count(*)",
            "select car_makers.Maker, car_makers.FullName, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers car_names",
            "car_makers model_list car_makers car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9191407561302185,
            0.00023583498841617256,
            0.0006175069720484316,
            0.00014442198153119534,
            0.9381979703903198,
            0.00020556277013383806,
            0.002856201259419322,
            9.3932292656973e-05
        ],
        "align_select": "select car_makers.FullName, model_list.Maker, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you tell me the full names of each car maker, along with the id and how many they produce?",
        "gold_select": "select car_makers.FullName, car_makers.Id, count(*)",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id, count(*)",
            "select car_makers.Maker, car_makers.FullName, count(*)",
            "select car_makers.Maker, car_makers.FullName, car_makers.Id, count(*)",
            "select car_makers.FullName, car_names.Model, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9585298895835876,
            0.000267395080300048,
            0.002519860863685608,
            0.00010123955144081265,
            0.00079667306272313,
            9.616181341698393e-05,
            0.00027374568162485957,
            0.0002644639171194285
        ],
        "align_select": "select car_makers.FullName, car_makers.Id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me the full name of each car maker, along with its id and how many models they produce.",
        "gold_select": "select car_makers.FullName, car_makers.Id, count(*)",
        "select_candidates": [
            "select car_makers.FullName, car_names.Model, count(*)",
            "select car_makers.FullName, model_list.Maker, count(*)",
            "select car_makers.FullName, car_names.MakeId, count(*)",
            "select car_makers.FullName, count(*), car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.0006931868265382946,
            0.00015387548774015158,
            0.8588103652000427,
            0.0002604135370347649,
            0.007863272912800312,
            0.00024566351203247905,
            0.003397188615053892,
            0.00012856551620643586
        ],
        "align_select": "select car_makers.FullName, model_list.Maker, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the full name of each car manufacturer, together with its id and count of how many models it makes.",
        "gold_select": "select car_makers.FullName, car_makers.Id, count(*)",
        "select_candidates": [
            "select car_makers.FullName, car_names.Model, count(*)",
            "select car_makers.FullName, car_names.MakeId, count(*)",
            "select car_makers.Maker, count(*), car_makers.Id",
            "select car_makers.Maker, car_names.MakeId, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names"
        ],
        "align_scores": [
            0.0002716413582675159,
            0.00021855189697816968,
            0.013032002374529839,
            0.000269870477495715,
            0.004139185417443514,
            9.6853771538008e-05,
            0.01810567080974579,
            0.00016523741942364722
        ],
        "align_select": "select car_makers.FullName, car_names.Model, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me a vehicle's model with smallest amount of horsepower available currently.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.MakeId, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "countries cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9740139245986938,
            0.9859222173690796,
            0.979999303817749,
            0.9896921515464783,
            0.00048172459355555475,
            0.00035901868250221014,
            0.00040275329956784844,
            0.0005552758229896426
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the models of cars below the average weight.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Model, model_list.Model",
            "select model_list.ModelId, model_list.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data"
        ],
        "align_scores": [
            0.9924975037574768,
            0.04440442472696304,
            0.9935990571975708,
            0.0836041271686554,
            0.0001674852828728035,
            0.00016938683984335512,
            0.00018328757141716778,
            0.00017224244948010892
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find the model of the car whose weight is below average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers model_list cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "continents model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list cars_data"
        ],
        "align_scores": [
            0.987013041973114,
            0.00011648979125311598,
            0.991675615310669,
            0.00010947704868158326,
            0.000210333033464849,
            8.59049177961424e-05,
            0.0002917041420005262,
            8.334553422173485e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the car model whose weight is below average.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents model_list car_names cars_data",
            "continents car_names cars_data",
            "car_makers model_list cars_data"
        ],
        "align_scores": [
            0.9877991676330566,
            8.360097126569599e-05,
            0.0002386249543633312,
            7.157500658649951e-05,
            0.0001806714863050729,
            7.229018228827044e-05,
            0.00020257377764210105,
            7.114432810340077e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the model of a car whose weight is below the average weight?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers model_list cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "continents model_list cars_data"
        ],
        "align_scores": [
            0.9852610230445862,
            7.856373122194782e-05,
            0.9899733066558838,
            7.907384861027822e-05,
            0.00023243451141752303,
            6.551341357408091e-05,
            0.00030854393844492733,
            6.355279037961736e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find the model of the car whose weight is below the average weight?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers model_list cars_data"
        ],
        "align_scores": [
            0.9853547811508179,
            7.99239642219618e-05,
            0.9914820194244385,
            7.990492304088548e-05,
            0.00022557737247552723,
            6.813688378315419e-05,
            0.0003179046616423875,
            6.657029734924436e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I'm asking about the model for cars with weights smaller than the average, can you tell me?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select distinct model_list.Model",
            "select model_list.Model, cars_data.Id",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "car_makers model_list cars_data",
            "countries model_list cars_data",
            "car_names cars_data",
            "model_list cars_data car_names"
        ],
        "align_scores": [
            0.9859994053840637,
            0.000130984335555695,
            0.013175316154956818,
            6.833262159489095e-05,
            0.00019233659259043634,
            7.217789243441075e-05,
            0.0002727289102040231,
            6.948545342311263e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Is there a car with a weight smaller than the average? Show the model for it.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Make",
            "select model_list.ModelId, model_list.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "car_names cars_data",
            "car_makers model_list cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.978314995765686,
            0.00012518283620011061,
            0.9841687083244324,
            0.00013312367082107812,
            0.9007580876350403,
            0.00017176158144138753,
            0.0002382827951805666,
            9.790512558538467e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the car model that has a weight smaller than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9855090975761414,
            6.986970402067527e-05,
            0.9836244583129883,
            7.300059223780409e-05,
            0.0002985134779009968,
            6.213848973857239e-05,
            0.0003505428321659565,
            6.791426130803302e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Tell me all about some cars made by some particular makers during the year 1970.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_names.Make",
            "select car_names.Model, car_names.Make",
            "select car_names.Model",
            "select car_names.MakeId, car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9392955303192139,
            0.00026751571567729115,
            0.00044452547444961965,
            7.90666090324521e-05,
            0.9122705459594727,
            0.0002338984195375815,
            0.0001527842105133459,
            6.325862341327593e-05
        ],
        "align_select": "select car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of all car makers who produced cars in 1970.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName, car_makers.Country",
            "select car_makers.Id, car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers car_names",
            "car_makers cars_data",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.00038825947558507323,
            9.059966396307573e-05,
            0.00041561812395229936,
            9.418836998520419e-05,
            0.00019088576664216816,
            7.621003896929324e-05,
            0.0001425609370926395,
            8.365893882000819e-05
        ],
        "align_select": "select car_makers.Maker, car_makers.FullName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the name of cars manufactured by the different car makers in 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select distinct car_names.Make",
            "select distinct car_names.Model, car_names.Make",
            "select distinct car_names.Model, car_makers.FullName",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers car_names"
        ],
        "align_scores": [
            0.006627759430557489,
            0.9838983416557312,
            0.00020492404291871935,
            0.000676139781717211,
            0.0006383928703144193,
            0.000921699742320925,
            0.917726457118988,
            0.0006427409243769944
        ],
        "align_select": "select distinct car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the car makers who produced cars in 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Id, car_makers.Maker, car_makers.FullName",
            "select car_makers.Maker, car_makers.FullName, car_makers.Country"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.00038191431667655706,
            6.982960621826351e-05,
            0.0004315395199228078,
            6.776778900530189e-05,
            0.00015395179798360914,
            6.993976421654224e-05,
            0.00018594667199067771,
            6.528434460051358e-05
        ],
        "align_select": "select car_makers.Maker, car_makers.FullName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For cars produced in 1970 by various car makers, name them.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_names.Model, car_names.Make",
            "select car_names.Make, car_names.Model",
            "select car_names.Make",
            "select car_names.MakeId, car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.0009883383754640818,
            0.00015494483523070812,
            0.0009509369847364724,
            0.00017193723761010915,
            0.9705624580383301,
            0.004782625008374453,
            0.00013900942576583475,
            8.456296200165525e-05
        ],
        "align_select": "select car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the names of the car makers who produced cars in 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Id, car_makers.Maker, car_makers.FullName",
            "select distinct car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers car_names",
            "car_makers cars_data",
            "continents car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.00038364221109077334,
            7.085312972776592e-05,
            0.0004747684870380908,
            7.008344255154952e-05,
            0.00016314236563630402,
            7.298193668248132e-05,
            0.000388983404263854,
            6.859051063656807e-05
        ],
        "align_select": "select car_makers.Maker, car_makers.FullName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find the make and production time for car that was produced in the earliest year?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_names.Make, cars_data.Year",
            "select car_names.Make, t4.c7",
            "select car_names.Model, car_names.Make, cars_data.Year",
            "select car_names.Model, car_names.Make, t4.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.986242949962616,
            9.26440188777633e-05,
            0.0005473031778819859,
            9.066966595128179e-05,
            0.0016641673864796758,
            7.831920083845034e-05,
            0.00046454346738755703,
            0.0001080149449990131
        ],
        "align_select": "select car_names.Make, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the year in which the first carr was produced and what make it is?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select cars_data.Year, car_names.Make",
            "select t4.c7, car_names.Make",
            "select cars_data.Year, car_names.Make",
            "select cars_data.Year, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names",
            "car_makers car_names cars_data",
            "model_list car_names",
            "car_names",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.4942874312400818,
            8.65450274432078e-05,
            0.0007330532534979284,
            9.885403414955363e-05,
            0.4942874312400818,
            8.65450274432078e-05,
            0.00035109135205857456,
            6.250505248317495e-05
        ],
        "align_select": "select cars_data.Year, car_names.Make",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Name the model year and manufacturer of the first car produced.",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select cars_data.Year, car_names.Make",
            "select cars_data.Year, car_names.Model",
            "select car_names.Model, car_names.Make",
            "select cars_data.Year, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_names",
            "car_makers car_names",
            "model_list car_names",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "car_makers model_list car_names",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.008555445820093155,
            6.893580575706437e-05,
            0.002030065283179283,
            7.064614328555763e-05,
            0.9702128767967224,
            7.817205914761871e-05,
            0.00029970463947393,
            8.374026219826192e-05
        ],
        "align_select": "select car_names.Model, car_names.Make",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who was the manufacturer of the car made in the year'minimum' and what year was it?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_makers.Maker, cars_data.Year",
            "select car_names.Model, cars_data.Year",
            "select car_makers.FullName, cars_data.Year",
            "select car_names.Make, cars_data.Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9761491417884827,
            0.0001156636280938983,
            0.0009338408708572388,
            9.322217374574393e-05,
            0.6037869453430176,
            0.00012424845772329718,
            0.7711743712425232,
            0.00012442951265256852
        ],
        "align_select": "select car_makers.Maker, cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the year when the maker first produced cars?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select car_makers.Maker, cars_data.Year",
            "select model_list.ModelId, car_makers.Maker",
            "select cars_data.Year, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_makers cars_data",
            "continents car_makers cars_data",
            "countries car_makers cars_data",
            "countries cars_data",
            "model_list cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.006512375548481941,
            0.001269513159058988,
            0.0011116925161331892,
            0.0009011101210489869,
            0.0003354500513523817,
            0.00023039292136672884,
            0.00030233804136514664,
            0.00025981757789850235
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Provide the details about the maker of the car from the earliest year and in which year was it made?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_makers.Maker, cars_data.Year",
            "select car_names.Model, cars_data.Year",
            "select car_names.Make, cars_data.Year",
            "select car_makers.FullName, cars_data.Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "model_list car_makers car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9911837577819824,
            6.808948091929778e-05,
            0.0005628858925774693,
            9.639997006161138e-05,
            0.9833537340164185,
            6.910963566042483e-05,
            0.968393862247467,
            7.586995343444869e-05
        ],
        "align_select": "select car_makers.Maker, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What distinct car models were made after 1980?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct car_names.Model",
            "select distinct car_names.Model, car_names.Make",
            "select distinct car_names.Model",
            "select distinct car_names.Model, model_list.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list car_names cars_data",
        "table_candidates": [
            "car_names",
            "model_list car_names",
            "car_makers model_list car_names",
            "car_makers car_names",
            "countries car_names",
            "model_list car_names cars_data"
        ],
        "align_scores": [
            0.9952549934387207,
            0.003994880709797144,
            0.00016913087165448815,
            0.00011632483801804483,
            0.9952549934387207,
            0.003994880709797144,
            0.0001788152294466272,
            9.116348519455642e-05
        ],
        "align_select": "select distinct car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the different models of cards made after 1980.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct model_list.Model, model_list.ModelId",
            "select distinct model_list.Model",
            "select distinct model_list.Model.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list",
            "model_list car_names"
        ],
        "align_scores": [
            0.9950886368751526,
            0.00013418782327789813,
            0.0001663489092607051,
            6.799994298489764e-05,
            0.9950886368751526,
            0.00013418782327789813,
            0.0009263742831535637,
            9.332694753538817e-05
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Are there any models for the cards after 1980? List them by model.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select model_list.Model",
            "select model_list.Model, model_list.ModelId",
            "select count(*), model_list.Model",
            "select distinct model_list.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "model_list car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list",
            "model_list car_names"
        ],
        "align_scores": [
            0.9767688512802124,
            0.4028520882129669,
            0.0002631366951391101,
            0.00024890433996915817,
            0.00043819911661557853,
            0.22507569193840027,
            0.0005982923321425915,
            0.0002752796281129122
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "List all the different card models produced after 1980.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct model_list.Model, model_list.ModelId",
            "select distinct model_list.Model.c2",
            "select distinct model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list car_names cars_data",
        "table_candidates": [
            "model_list",
            "model_list cars_data",
            "model_list car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9946276545524597,
            0.00011850355076603591,
            0.00018217215256299824,
            7.201371772680432e-05,
            0.0007417543092742562,
            7.761748565826565e-05,
            0.9946276545524597,
            0.00011850355076603591
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which car makers are there in each continent? List their name and count.",
        "gold_select": "select continents.Continent, count(*)",
        "select_candidates": [
            "select car_makers.Maker, count(*)",
            "select continents.Continent, count(*)",
            "select car_makers.FullName, count(*)",
            "select car_makers.FullName, count(*), continents.Continent"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents car_makers",
            "continents countries car_makers",
            "continents car_makers model_list",
            "continents countries car_makers model_list"
        ],
        "align_scores": [
            0.986746609210968,
            0.0005029202438890934,
            0.5684688091278076,
            0.00020827075059060007,
            0.8536336421966553,
            0.0005709960823878646,
            0.9597249031066895,
            0.00029739964520558715
        ],
        "align_select": "select car_makers.Maker, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "There are (number) car makers in which continents? Give the names of the continent and the count.",
        "gold_select": "select continents.Continent, count(*)",
        "select_candidates": [
            "select continents.Continent, count(*)",
            "select continents.Continent, car_makers.Country, count(*)",
            "select continents.Continent, car_makers.Maker, count(*)",
            "select continents.Continent, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents car_makers",
            "continents countries car_makers"
        ],
        "align_scores": [
            0.9841453433036804,
            0.0003487418871372938,
            0.0002799957583192736,
            0.0002314726880285889,
            0.00508703850209713,
            0.00018103585171047598,
            0.9841453433036804,
            0.0003487418871372938
        ],
        "align_select": "select continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many car makes does each continent have? List every continent, with its respective count in this respect?",
        "gold_select": "select continents.Continent, count(*)",
        "select_candidates": [
            "select continents.Continent, count(*)",
            "select continents.Continent, count(distinct car_names.Make)",
            "select continents.Continent, count(*)",
            "select count(*), continents.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents car_names",
            "continents car_makers car_names",
            "continents model_list car_names",
            "continents countries car_names",
            "continents car_makers model_list car_names",
            "continents countries car_makers car_names",
            "continents car_makers"
        ],
        "align_scores": [
            0.9891477823257446,
            0.0002274264261359349,
            0.9563873410224915,
            0.0002429656160529703,
            0.9891477823257446,
            0.0002274264261359349,
            0.9856008887290955,
            0.00026076208450831473
        ],
        "align_select": "select continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the list of car makers in each continent. List the continent name and the count.",
        "gold_select": "select continents.Continent, count(*)",
        "select_candidates": [
            "select continents.Continent, count(*)",
            "select car_makers.Maker, continents.Continent, count(*)",
            "select continents.Continent, count(*), car_makers.Maker",
            "select continents.Continent, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents car_makers",
            "continents countries car_makers",
            "continents car_makers model_list"
        ],
        "align_scores": [
            0.9890396595001221,
            0.00014456638018600643,
            0.9594318270683289,
            0.00018832946079783142,
            0.0017714148852974176,
            9.23525876714848e-05,
            0.9890396595001221,
            0.00014456638018600643
        ],
        "align_select": "select continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "In which continents are there most car makers? Give them names and counts.",
        "gold_select": "select continents.Continent, count(*)",
        "select_candidates": [
            "select continents.Continent, count(*)",
            "select continents.Continent, count(*)",
            "select continents.Continent, count(*), car_makers.Country",
            "select continents.Continent., count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents car_makers",
            "continents countries car_makers"
        ],
        "align_scores": [
            0.8341470956802368,
            0.0008875761996023357,
            0.8341470956802368,
            0.0008875761996023357,
            0.0001635379740037024,
            0.0001264003076357767,
            0.001649017445743084,
            0.00025542936054989696
        ],
        "align_select": "select continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of each continents and in which continents are there how many car manufacturers?",
        "gold_select": "select continents.Continent, count(*)",
        "select_candidates": [
            "select continents.Continent, count(*)",
            "select count(*), continents.Continent",
            "select continents.Continent, count(*), car_makers.Country",
            "select continents.Continent, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents car_makers",
            "continents countries car_makers"
        ],
        "align_scores": [
            0.9789267182350159,
            0.000348809378920123,
            0.9857274889945984,
            0.00046725236461497843,
            0.00025076972087845206,
            0.00012763777340296656,
            0.9789267182350159,
            0.000348809378920123
        ],
        "align_select": "select continents.Continent, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which country has the most car manufacturers? List the country name.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, car_makers.Country",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.8778692483901978,
            0.0001029980558087118,
            0.0011703483760356903,
            7.57590532884933e-05,
            0.001724638044834137,
            6.784293509554118e-05,
            0.0035071726888418198,
            7.437040039803833e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which country has the most car makers? Give the name of the country.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, car_makers.Country",
            "select countries.CountryName,",
            "select countries.CountryName, countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.7844300866127014,
            0.00011307188106002286,
            0.0008871082100085914,
            7.832667324692011e-05,
            0.0036530615761876106,
            7.271287904586643e-05,
            0.0014390387805178761,
            6.608434341615066e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many cars models are made by each brand? List them by their count and the brand's full name.",
        "gold_select": "select count(*), car_makers.FullName",
        "select_candidates": [
            "select count(*), car_makers.FullName",
            "select count(*), car_makers.Maker, car_makers.FullName",
            "select car_makers.Maker, car_makers.FullName",
            "select count(*), car_makers.Id, car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names",
            "countries car_makers car_names",
            "car_makers model_list car_makers car_names",
            "countries car_makers model_list car_names",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9704316258430481,
            0.001682843896560371,
            0.0012673928868025541,
            0.00014303941861726344,
            0.06941823661327362,
            0.024629393592476845,
            0.00085543590830639,
            0.00016177070210687816
        ],
        "align_select": "select count(*), car_makers.FullName",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find out the accelerate of the make amc hornet sportabout ( sw ).",
        "gold_select": "select cars_data.Accelerate",
        "select_candidates": [
            "select avg(cars_data.Accelerate)",
            "select cars_data.Accelerate",
            "select max(cars_data.Accelerate)",
            "select accelet(cars_data.Accelerate)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.004719363059848547,
            6.431874498957768e-05,
            0.9933493733406067,
            9.280034282710403e-05,
            0.001823736703954637,
            7.00261298334226e-05,
            0.0011688042432069778,
            7.38623712095432e-05
        ],
        "align_select": "select cars_data.Accelerate",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the statistics on the number of businesses making care in France.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), countries.CountryId",
            "select car_makers.Maker, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.992172122001648,
            0.0005323845543898642,
            0.00026962978881783783,
            0.0011693787528201938,
            0.00028375591500662267,
            0.0003701010427903384,
            0.0007393083651550114,
            0.29241520166397095
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many care producers exist in France? Give its number.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(*), countries.CountryName",
            "select count(*), countries.CountryName, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9923835396766663,
            7.466031820513308e-05,
            0.00027811311883851886,
            7.411496335407719e-05,
            0.0002695367147680372,
            6.358965038089082e-05,
            0.00014683816698379815,
            6.220133218448609e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of manufacturers producing care in France?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(distinct car_makers.Maker)",
            "select count(*), countries.CountryName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9947711825370789,
            0.00024899168056435883,
            0.0002473080821800977,
            0.0003345719014760107,
            0.9934031367301941,
            0.00038323644548654556,
            0.00023741016048006713,
            0.0012147328816354275
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the total number of cars produced by the USA.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select sum(car_makers.Country)",
            "select sum(t2.c5)",
            "select sum(t2.c4)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers car_names",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.9927849769592285,
            0.0002929538895841688,
            0.001361001981422305,
            0.0001160281608463265,
            0.0006393391522578895,
            0.0001275380200240761,
            0.0007529103313572705,
            0.0001241577265318483
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me how many cars are produced in the USA.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(*), countries.CountryName",
            "select car_makers.Country, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers car_names",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.99234938621521,
            0.00027032397338189185,
            0.0001992813340621069,
            0.0004151805769652128,
            0.00019943171355407685,
            0.0015771781327202916,
            0.0006050468655303121,
            0.0013838341692462564
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars produced by each manufacturer in the USA?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select car_makers.Maker, count(*)",
            "select count(*), car_makers.Maker",
            "select sum(car_names.Make), car_makers.Maker",
            "select count(*), car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers car_names",
            "countries car_makers",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.9954805374145508,
            0.00010296064283465967,
            0.9950180053710938,
            9.088130900636315e-05,
            0.00018116604769602418,
            6.889578799018636e-05,
            0.0003556008159648627,
            7.557476783404127e-05
        ],
        "align_select": "select car_makers.Maker, count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "What is the number of car models produced in the USA?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(*), countries.CountryName",
            "select count(*), countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries car_makers"
        ],
        "align_scores": [
            0.993765115737915,
            0.009675579145550728,
            0.1063920110464096,
            0.00012218950723763555,
            0.00021660765924025327,
            0.0003489079826977104,
            0.00020236354612279683,
            0.00025870694662444293
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the count of the cars produced for the USA?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryId",
            "select count(*), countries.CountryName",
            "select t2.c count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers car_names",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.9921368360519409,
            0.00030613713897764683,
            0.0001809871755540371,
            0.0004869163385592401,
            0.00018702812667470425,
            0.0036500352434813976,
            0.0003829209308605641,
            0.00017395697068423033
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average mpg for cars with 4 cylinders?",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9962575435638428,
            8.851258462527767e-05,
            0.0003691244637593627,
            8.813307795207947e-05,
            0.9962575435638428,
            8.851258462527767e-05,
            0.0004537074128165841,
            8.55723992572166e-05
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average mpg of the car with 4 cylinders.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.99130779504776,
            0.0001101986927096732,
            0.0003770400653593242,
            0.00010736574040492997,
            0.99130779504776,
            0.0001101986927096732,
            0.99130779504776,
            0.0001101986927096732
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average miles per gallon of each car whose capacity is 4 cylinders?",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select cars_data.Id, avg(cars_data.MPG)",
            "select cars_data.MPG, avg(cars_data.MPG)",
            "select car_names.Model, avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9644922614097595,
            8.925830479711294e-05,
            0.9940879344940186,
            0.00011315709707560018,
            0.00012938643340021372,
            5.951531056780368e-05,
            0.9960305094718933,
            0.00012583639181684703
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Show me cars with 4 cylinders and tell me the average mileage per gallon.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select cars_data.Id, avg(cars_data.MPG)",
            "select cars_data.MPG, avg(cars_data.MPG)",
            "select avg(cars_data.MPG), cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.000181357201654464,
            0.9963108897209167,
            0.0010452240239828825,
            0.0008442453690804541,
            0.00010104800458066165,
            0.0001451059797545895,
            0.033155571669340134,
            0.00016302044969052076
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Could you tell me the average mpg (average miles per gallon) of cars of 4 cylinders?",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9943878054618835,
            0.00010716403630794957,
            0.00045042208512313664,
            0.00010507627303013578,
            0.0003620401839725673,
            0.0001086536722141318,
            0.9943878054618835,
            0.00010716403630794957
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the smallest vehicle weight made in 1974 with 8 cylinders?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select max(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Cylinders",
            "select cars_data.Weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "cars_data car_names"
        ],
        "align_scores": [
            0.9960355162620544,
            9.701877570478246e-05,
            0.0036020949482917786,
            6.398075493052602e-05,
            0.00027267588302493095,
            6.096634024288505e-05,
            0.4597574472427368,
            9.552370465826243e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the smallest weight of the car produced in 1974 with 8 cylinders?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Cylinders",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), t5.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9922590851783752,
            0.00010243857104796916,
            0.00018574039859231561,
            6.422184378607199e-05,
            0.00016254767251666635,
            5.8877532865153626e-05,
            0.00029540457762777805,
            8.026569412322715e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the minimum weight of the car made in 1974 with 8 cylinders?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Cylinders",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9946841597557068,
            9.503299952484667e-05,
            0.00017337806639261544,
            6.319706153590232e-05,
            0.0001421984488843009,
            6.098581798141822e-05,
            0.0001294325920753181,
            6.012351514073089e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much was the minimum weight of the car which had 8 cylinders manufactured in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), t5.dcars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "cars_data car_names cars_data",
            "cars_data car_names"
        ],
        "align_scores": [
            0.9924781322479248,
            9.64967257459648e-05,
            0.0001417435851180926,
            6.334060890367255e-05,
            0.0001719605061225593,
            6.269022560445592e-05,
            0.0001290746731683612,
            6.385543383657932e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the list of the list of the product makers, models.",
        "gold_select": "select model_list.Maker, model_list.Model",
        "select_candidates": [
            "select model_list.Maker, model_list.Model",
            "select distinct model_list.Maker, model_list.Model",
            "select car_makers.Maker, model_list.Model",
            "select selct model_list.Maker, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "model_list",
        "table_candidates": [
            "model_list",
            "car_makers model_list",
            "model_list car_names",
            "model_list car_makers",
            "countries model_list",
            "continents car_makers model_list",
            "model_list cars_data",
            "model_list car_makers model_list"
        ],
        "align_scores": [
            0.9864029288291931,
            9.32516049942933e-05,
            0.001438107923604548,
            9.12083633011207e-05,
            0.0020747988019138575,
            9.755183418747038e-05,
            0.004271431360393763,
            9.573763963999227e-05
        ],
        "align_select": "select model_list.Maker, model_list.Model",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the countries where there is at least one car manufacturer? List them by name and id.",
        "gold_select": "select countries.CountryName, countries.CountryId",
        "select_candidates": [
            "select countries.CountryName, car_makers.Id",
            "select distinct countries.CountryName, car_makers.Id",
            "select distinct countries.CountryName, countries.CountryId",
            "select count(*), countries.CountryName, car_makers.Id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.00896950252354145,
            0.01169970165938139,
            0.012513288296759129,
            0.0004932834999635816,
            0.14602404832839966,
            0.006050607189536095,
            0.0004961816011928022,
            0.00028707212186418474
        ],
        "align_select": "select countries.CountryName, car_makers.Id",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In which countries does at least one car maker exist? List their name and id.",
        "gold_select": "select countries.CountryName, countries.CountryId",
        "select_candidates": [
            "select countries.CountryName, car_makers.Id",
            "select distinct countries.CountryName, car_makers.Id",
            "select count(*), countries.CountryName, car_makers.Id",
            "select at least countries.CountryName, car_makers.Id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.0033749567810446024,
            0.004665161948651075,
            0.011742907576262951,
            0.0006106385844759643,
            0.0005479729734361172,
            0.00036618506419472396,
            0.0018096709391102195,
            0.0008529738406650722
        ],
        "align_select": "select countries.CountryName, car_makers.Id",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me a list of the countries having at least one car-maker? List their names and ids.",
        "gold_select": "select countries.CountryName, countries.CountryId",
        "select_candidates": [
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_makers.Id",
            "select distinct countries.CountryName, countries.CountryId",
            "select count(*), countries.CountryName, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.8754591941833496,
            0.9324264526367188,
            0.011259966529905796,
            0.021684467792510986,
            0.14536307752132416,
            0.008365697227418423,
            0.00036296650068834424,
            0.0002344045351492241
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which countries have at least one carmaker company? List their name and id.",
        "gold_select": "select countries.CountryName, countries.CountryId",
        "select_candidates": [
            "select countries.CountryName, car_makers.Id",
            "select countries.CountryName, countries.CountryId",
            "select distinct countries.CountryName, countries.CountryId",
            "select distinct countries.CountryName, car_makers.Id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.01490772794932127,
            0.011662025935947895,
            0.5612030029296875,
            0.9493630528450012,
            0.43929389119148254,
            0.028810735791921616,
            0.0349726602435112,
            0.0009814056102186441
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all countries that have at least one car maker. Give the name and country id of each country.",
        "gold_select": "select countries.CountryName, countries.CountryId",
        "select_candidates": [
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_makers.Id",
            "select distinct countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.92397141456604,
            0.8381770253181458,
            0.012340029701590538,
            0.01754544861614704,
            0.15882882475852966,
            0.002669746056199074,
            0.5559356808662415,
            0.10512640327215195
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which countries have 'at least one car maker'? List the given country names and id numbers with the car makers.",
        "gold_select": "select countries.CountryName, countries.CountryId",
        "select_candidates": [
            "select countries.CountryName, car_makers.Id",
            "select countries.CountryName, countries.CountryId",
            "select distinct countries.CountryName, car_makers.Id",
            "select countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.00917048379778862,
            0.00037820462603121996,
            0.8430377244949341,
            0.0007177967927418649,
            0.0005208252696320415,
            0.001171816373243928,
            0.0016503422521054745,
            0.00024301426310557872
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all countries with at least one car manufacturer. List their name and ID.",
        "gold_select": "select countries.CountryName, countries.CountryId",
        "select_candidates": [
            "select countries.CountryName, car_makers.Id",
            "select countries.CountryName, countries.CountryId",
            "select distinct countries.CountryName, countries.CountryId",
            "select distinct countries.CountryName, car_makers.Id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.014633405022323132,
            0.014870388433337212,
            0.7276498675346375,
            0.9694076180458069,
            0.6388611793518066,
            0.008951918222010136,
            0.03433777764439583,
            0.0005109127378091216
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you tell me the number of cars that have more than 150 horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) dependant on cars_data.Id",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9857380390167236,
            0.0001648072066018358,
            0.0002403541875537485,
            0.0017357448814436793,
            0.0004385009524412453,
            0.0005064507713541389,
            0.00022716699459124357,
            0.0006612419383600354
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of cars with more than 150 horsepower.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.MPG, cars_data.Cylinders",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9881369471549988,
            0.00014450273010879755,
            0.00024304393446072936,
            0.0010874910512939095,
            0.00012964160123374313,
            7.87344979471527e-05,
            0.00019818420696537942,
            0.00032458186615258455
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of cars that have horsepower more than 150.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) dependant on cars_data.Id",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9920684099197388,
            0.0001706921902950853,
            0.00026498892111703753,
            0.005156968254595995,
            0.0004565173585433513,
            0.0013263019500300288,
            0.0002656856086105108,
            0.0011568301124498248
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please count the car numbers with more than 150 horsepower.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(cars_data.Id)",
            "select count(*), cars_data.Id",
            "select cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9637882709503174,
            0.00020120685803703964,
            0.002348370384424925,
            0.0002215665444964543,
            0.00021694993483833969,
            0.00039321009535342455,
            0.0020150074269622564,
            0.006533097010105848
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of cars with a horsepower greater than 150?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) dependant on cars_data.Id",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9889463782310486,
            0.00014044986164662987,
            0.0002285023219883442,
            0.0008892378536984324,
            0.0003746807633433491,
            0.00033222459023818374,
            0.00020368043624330312,
            0.0004040706844534725
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name the number of vehicles with horsepower greater than 150.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) descripted in cars_data.Id",
            "select count(*) descripted by cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "countries cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9875504374504089,
            0.00013773223327007145,
            0.0002490536426194012,
            0.0007924840319901705,
            0.0008076659869402647,
            0.00018918940622825176,
            0.0004310338699724525,
            0.00015474123938474804
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In each year, what was the average weight of cars manufactured?",
        "gold_select": "select avg(cars_data.Weight), cars_data.Year",
        "select_candidates": [
            "select avg(cars_data.Weight), cars_data.Year",
            "select cars_data.Year, avg(cars_data.Weight)",
            "select in cars_data.Year, avg(cars_data.Weight)",
            "select an avg(cars_data.Weight), cars_data.Year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.995489776134491,
            0.00014327857934404165,
            0.9961118102073669,
            0.0001261006691493094,
            0.0004724367754533887,
            0.00015101760800462216,
            0.0003380425914656371,
            0.00016110754222609103
        ],
        "align_select": "select avg(cars_data.Weight), cars_data.Year",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the average year weights of different car models.",
        "gold_select": "select avg(cars_data.Weight), cars_data.Year",
        "select_candidates": [
            "select car_names.Model, avg(cars_data.Weight)",
            "select car_names.Model, avg(cars_data.Year)",
            "select avg(cars_data.Year), car_names.Model",
            "select cars_data.MPG, avg(cars_data.Year)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data",
            "countries cars_data",
            "car_makers cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.005566719453781843,
            0.00012255801993887872,
            0.8432525992393494,
            0.00016434960707556456,
            0.6327843070030212,
            0.00012048557982780039,
            0.0005169925279915333,
            0.00010960218060063198
        ],
        "align_select": "select car_names.Model, avg(cars_data.Year)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me the average weight for each year.",
        "gold_select": "select avg(cars_data.Weight), cars_data.Year",
        "select_candidates": [
            "select avg(cars_data.Weight), cars_data.Year",
            "select cars_data.Year, avg(cars_data.Weight)",
            "select an avg(cars_data.Weight), cars_data.Year",
            "select accu(cars_data.Weight), cars_data.Year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9963066577911377,
            0.0001200023980345577,
            0.9966256618499756,
            0.0001230145280715078,
            0.00025905497022904456,
            0.00013853952987119555,
            0.002466543111950159,
            0.00012229534331709146
        ],
        "align_select": "select avg(cars_data.Weight), cars_data.Year",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you give me the average weight and year for each year?",
        "gold_select": "select avg(cars_data.Weight), cars_data.Year",
        "select_candidates": [
            "select avg(cars_data.Weight), avg(cars_data.Year), cars_data.Year",
            "select avg(cars_data.Weight), cars_data.Year",
            "select avg(cars_data.Accelerate), avg(cars_data.Year), cars_data.Year",
            "select avg(cars_data.Weight), avg(cars_data.Year),"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.00032036149059422314,
            6.503399345092475e-05,
            0.47833698987960815,
            0.00012015893298666924,
            0.00015903287567198277,
            6.975805445108563e-05,
            0.000833042140584439,
            0.0001421368942828849
        ],
        "align_select": "select avg(cars_data.Weight), cars_data.Year",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the European countries with at least 3 manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.9618618488311768,
            0.00010468383698025718,
            0.0015751385362818837,
            6.302278052316979e-05,
            0.0003378373512532562,
            5.679114110535011e-05,
            0.00022041061311028898,
            6.228763231774792e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of all European countries (where there are at least 3 manufacturers)?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.9642263054847717,
            0.00018804988940246403,
            0.00041770300595089793,
            0.00013626691361423582,
            0.001499572186730802,
            0.00016946291725616902,
            0.00034219343797303736,
            0.00011616940901149064
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "List the maximum horsepower and make of car models with 3 cylinders.",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), car_names.Make)",
            "select max(cars_data.Horsepower), cars_data.Cylinders",
            "select max(cars_data.Accelerate), car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9824143052101135,
            0.00012994556163903326,
            0.0008321496425196528,
            0.0001060595823219046,
            0.0002378959907218814,
            7.710124191362411e-05,
            0.9765024185180664,
            0.00013984421093482524
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want to know what is the largest horsepower available for the models with 3 cylinders and what make is it?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), car_names.Model",
            "select car_names.Model, car_names.Make",
            "select max(cars_data.Horsepower), cars_data.Cylinders"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9928828477859497,
            0.00022879749303683639,
            0.9947901964187622,
            0.000245015777181834,
            0.0022280504927039146,
            0.00013435403525363654,
            0.0008424303377978504,
            8.6015417764429e-05
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out which car model has the highest mpg.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model (cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9867929220199585,
            6.788751488784328e-05,
            0.0007861433550715446,
            5.932881322223693e-05,
            0.0010277030523866415,
            6.21809231233783e-05,
            0.009695126675069332,
            6.829744233982638e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the car model with the highest mpg?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model (cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9861699342727661,
            7.999191439012066e-05,
            0.0009332715999335051,
            6.41241786070168e-05,
            0.0010457559255883098,
            6.849827332189307e-05,
            0.011287466622889042,
            7.140675006667152e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What car model has the highest MPG rating?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model",
            "select car_names.Model (cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9831672310829163,
            7.199532410595566e-05,
            0.0008680538740009069,
            6.038402716512792e-05,
            0.00032992177875712514,
            6.338694947771728e-05,
            0.009689848870038986,
            7.132175960578024e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give the average horsepower of cars manufactured before 1980.",
        "gold_select": "select avg(cars_data.Horsepower)",
        "select_candidates": [
            "select avg(cars_data.Horsepower)",
            "select an avg(cars_data.Horsepower)",
            "select avg(avg(cars_data.Horsepower)",
            "select  avg(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.996738851070404,
            0.00010948091221507639,
            0.00034625656553544104,
            0.00011129698395961896,
            0.0004034294397570193,
            8.914346835808828e-05,
            0.996738851070404,
            0.00010948091221507639
        ],
        "align_select": "select avg(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The average horsepower of cars before 1980 was less than what?",
        "gold_select": "select avg(cars_data.Horsepower)",
        "select_candidates": [
            "select avg(cars_data.Horsepower)",
            "select an avg(cars_data.Horsepower)",
            "select the avg(cars_data.Horsepower)",
            "select avg(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.6334829330444336,
            0.00016960194625426084,
            0.0005804462125524879,
            0.00016520495410077274,
            0.00038478459464386106,
            0.00018599348550196737,
            0.6334829330444336,
            0.00016960194625426084
        ],
        "align_select": "select avg(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much horsepower did cars have on average before 1980?",
        "gold_select": "select avg(cars_data.Horsepower)",
        "select_candidates": [
            "select avg(cars_data.Horsepower)",
            "select an avg(cars_data.Horsepower)",
            "select  avg(cars_data.Horsepower)",
            "select avg(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.00014189531793817878,
            0.9959185719490051,
            0.00013558025239035487,
            0.0004320853913668543,
            0.00014189531793817878,
            0.9959185719490051,
            0.00014189531793817878,
            0.9959185719490051
        ],
        "align_select": "select avg(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much horsepower was the average car before 1980?",
        "gold_select": "select avg(cars_data.Horsepower)",
        "select_candidates": [
            "select avg(cars_data.Horsepower)",
            "select an avg(cars_data.Horsepower)",
            "select Avg(cars_data.Horsepower)",
            "select avg(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9963830709457397,
            0.00023771615815348923,
            0.00039868708699941635,
            0.0001366747310385108,
            0.9963830709457397,
            0.00023771615815348923,
            0.9963830709457397,
            0.00023771615815348923
        ],
        "align_select": "select avg(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average horsepower for cars made before 1980?",
        "gold_select": "select avg(cars_data.Horsepower)",
        "select_candidates": [
            "select avg(cars_data.Horsepower)",
            "select an avg(cars_data.Horsepower)",
            "select avg(avg(cars_data.Horsepower)",
            "select  avg(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9962531328201294,
            0.00010077731712954119,
            0.0003891263622790575,
            0.00010670741175999865,
            0.0004441103956196457,
            9.195591701427475e-05,
            0.9962531328201294,
            0.00010077731712954119
        ],
        "align_select": "select avg(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For all cars produced before 1980, what is the average horsepower?",
        "gold_select": "select avg(cars_data.Horsepower)",
        "select_candidates": [
            "select avg(cars_data.Horsepower)",
            "select an avg(cars_data.Horsepower)",
            "select avg(avg(cars_data.Horsepower)",
            "select  avg(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9959697723388672,
            0.00010969420691253617,
            0.0003481170570012182,
            0.00010648399620549753,
            0.0004646166053134948,
            9.767748997546732e-05,
            0.9959697723388672,
            0.00010969420691253617
        ],
        "align_select": "select avg(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For all cars made before 1980, what was the average horsepower?",
        "gold_select": "select avg(cars_data.Horsepower)",
        "select_candidates": [
            "select avg(cars_data.Horsepower)",
            "select avg(avg(cars_data.Horsepower)",
            "select an avg(cars_data.Horsepower)",
            "select  avg(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9956067204475403,
            0.0001282952434848994,
            0.0004965104162693024,
            0.00010431156260892749,
            0.0003670112637337297,
            0.00011166149488417432,
            0.9956067204475403,
            0.0001282952434848994
        ],
        "align_select": "select avg(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For all cars manufactured before 1980, what was the average horsepower?",
        "gold_select": "select avg(cars_data.Horsepower)",
        "select_candidates": [
            "select avg(cars_data.Horsepower)",
            "select avg(avg(cars_data.Horsepower)",
            "select an avg(cars_data.Horsepower)",
            "select  avg(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9956106543540955,
            0.00012194751616334543,
            0.0005018662777729332,
            0.00010283956362400204,
            0.0003702067187987268,
            0.00011009984882548451,
            0.9956106543540955,
            0.00012194751616334543
        ],
        "align_select": "select avg(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me an average of all cars before 1980 horsepower?",
        "gold_select": "select avg(cars_data.Horsepower)",
        "select_candidates": [
            "select avg(cars_data.Horsepower)",
            "select cars_data.Year, avg(cars_data.Horsepower)",
            "select cars_data.Id, avg(cars_data.Horsepower)",
            "select an avg(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9882857799530029,
            0.00010738662240328267,
            0.0001606760051799938,
            0.00011467743024695665,
            0.00014763434592168778,
            0.00030293301097117364,
            0.0002938162360806018,
            0.00010241522977594286
        ],
        "align_select": "select avg(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average edispl of the car models Volvo.",
        "gold_select": "select avg(cars_data.Edispl)",
        "select_candidates": [
            "select avg(cars_data.Edispl)",
            "select an avg(cars_data.Edispl)",
            "select  avg(cars_data.Edispl)",
            "select avg(cars_data.Edispl)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents model_list car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9965769648551941,
            0.0001251001376658678,
            0.00038838660111650825,
            0.00011955626541748643,
            0.9965769648551941,
            0.0001251001376658678,
            0.9965769648551941,
            0.0001251001376658678
        ],
        "align_select": "select avg(cars_data.Edispl)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you return the average edispl of the cars of model volvo?",
        "gold_select": "select avg(cars_data.Edispl)",
        "select_candidates": [
            "select avg(cars_data.Edispl)",
            "select an avg(cars_data.Edispl)",
            "select  avg(cars_data.Edispl)",
            "select avg(cars_data.Edispl)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9964522123336792,
            9.725358540890738e-05,
            0.00036746953264810145,
            0.00012524588964879513,
            0.9964522123336792,
            9.725358540890738e-05,
            0.9964522123336792,
            9.725358540890738e-05
        ],
        "align_select": "select avg(cars_data.Edispl)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For which models of Volvo can I find the average edispl?",
        "gold_select": "select avg(cars_data.Edispl)",
        "select_candidates": [
            "select avg(cars_data.Edispl)",
            "select car_names.Model, avg(cars_data.Edispl)",
            "select cars_data.MPG, avg(cars_data.Edispl)",
            "select model_list.Model, avg(cars_data.Edispl)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.4127069413661957,
            0.9960739612579346,
            0.9921298623085022,
            0.016054587438702583,
            0.0006301869871094823,
            0.00019126325787510723,
            0.989395797252655,
            0.0023911374155431986
        ],
        "align_select": "select avg(cars_data.Edispl)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For which car models from Volvo, what is the average edispl?",
        "gold_select": "select avg(cars_data.Edispl)",
        "select_candidates": [
            "select avg(cars_data.Edispl)",
            "select car_names.Model, avg(cars_data.Edispl)",
            "select cars_data.MPG, avg(cars_data.Edispl)",
            "select car_names.MakeId, avg(cars_data.Edispl)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9958160519599915,
            0.09165085107088089,
            0.23537194728851318,
            0.9923525452613831,
            0.0002318238402949646,
            0.001956129679456353,
            0.001356418477371335,
            0.04204176366329193
        ],
        "align_select": "select avg(cars_data.Edispl)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Could you tell me the average edispl for all volvos?",
        "gold_select": "select avg(cars_data.Edispl)",
        "select_candidates": [
            "select avg(cars_data.Edispl)",
            "select an avg(cars_data.Edispl)",
            "select avg(cars_data.Edispl), car_names.Model",
            "select  avg(cars_data.Edispl)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "model_list cars_data",
            "cars_data",
            "countries car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9963493347167969,
            0.00014057203952688724,
            0.00037118172622285783,
            0.00010631323675625026,
            0.0001507331762695685,
            0.003023396246135235,
            0.9963493347167969,
            0.00014057203952688724
        ],
        "align_select": "select avg(cars_data.Edispl)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For what model of Volvo should I get an average edispl?",
        "gold_select": "select avg(cars_data.Edispl)",
        "select_candidates": [
            "select car_names.Model, avg(cars_data.Edispl)",
            "select avg(cars_data.Edispl)",
            "select cars_data.MPG, avg(cars_data.Edispl)",
            "select model_list.Model, avg(cars_data.Edispl)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.001901021460071206,
            0.29677659273147583,
            0.9956614375114441,
            0.002318035811185837,
            0.00022833440743852407,
            0.00038775920984335244,
            0.001126679708249867,
            0.031027812510728836
        ],
        "align_select": "select avg(cars_data.Edispl)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The average edispl with volvo models.",
        "gold_select": "select avg(cars_data.Edispl)",
        "select_candidates": [
            "select avg(cars_data.Edispl)",
            "select an avg(cars_data.Edispl)",
            "select avg(cars_data.Edispl)",
            "select  avg(cars_data.Edispl)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "car_makers model_list cars_data",
            "countries model_list cars_data",
            "car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9965664148330688,
            0.00013783590111415833,
            0.0003628435079008341,
            0.00012197252362966537,
            0.9965664148330688,
            0.00013783590111415833,
            0.9965664148330688,
            0.00013783590111415833
        ],
        "align_select": "select avg(cars_data.Edispl)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For all models of Volvo, what is the average edispl?",
        "gold_select": "select avg(cars_data.Edispl)",
        "select_candidates": [
            "select avg(cars_data.Edispl)",
            "select avg(cars_data.Edispl), car_names.Model",
            "select avg(cars_data.Edispl), model_list.Model",
            "select  avg(cars_data.Edispl)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9962741136550903,
            0.0013437879970297217,
            0.00025469347019679844,
            0.9600524306297302,
            0.00016495547606609762,
            0.46301722526550293,
            0.9962741136550903,
            0.0013437879970297217
        ],
        "align_select": "select avg(cars_data.Edispl)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the maximum accelerates for different number of cylinders?",
        "gold_select": "select max(cars_data.Accelerate), cars_data.Cylinders",
        "select_candidates": [
            "select max(cars_data.Accelerate), cars_data.Cylinders",
            "select cars_data.Cylinders, max(cars_data.Accelerate)",
            "select maximum(cars_data.Accelerate), cars_data.Cylinders",
            "select min(cars_data.Accelerate), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.993712842464447,
            0.00012643176887650043,
            0.9949919581413269,
            0.00016384170157834888,
            0.0017434011679142714,
            0.00010728775669122115,
            0.0003062101313844323,
            9.13492840481922e-05
        ],
        "align_select": "select max(cars_data.Accelerate), cars_data.Cylinders",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the most distinct version of model?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select distinct model_list.Model",
            "select model_list.ModelId, model_list.Model",
            "select max(distinct model_list.Model)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names",
        "table_candidates": [
            "model_list",
            "countries model_list"
        ],
        "align_scores": [
            0.983795166015625,
            0.9921301007270813,
            0.001152456272393465,
            0.9924156665802002,
            0.0004596237267833203,
            0.0003212312876712531,
            6.112246046541259e-05,
            9.879522258415818e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the number of cars manufactured in 1980.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Year",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "countries cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9940516352653503,
            6.856748223071918e-05,
            0.00037166470428928733,
            6.188833503983915e-05,
            0.00027943355962634087,
            5.70979573240038e-05,
            0.0003879248397424817,
            7.79868132667616e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In 1980, how many cars were produced?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select cars_data.Year, count(*)",
            "select count(*), cars_data.Year",
            "select sum(cars_data.Year)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "countries cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9921322464942932,
            6.417318218154833e-05,
            0.0006668783025816083,
            7.668563921470195e-05,
            0.0002941096608992666,
            7.056575122987852e-05,
            0.0007957507041282952,
            6.631021096836776e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In 1980, how many cars did they manufacture?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select car_makers.Maker, count(*)",
            "select car_makers.FullName, count(*)",
            "select count(*), car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "car_makers cars_data",
            "countries car_makers cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "cars_data",
            "countries car_makers car_names cars_data"
        ],
        "align_scores": [
            6.848605698905885e-05,
            7.963396637933329e-05,
            9.569875692250207e-05,
            8.670031820656732e-05,
            0.00010133729665540159,
            0.00011344707309035584,
            7.891174755059183e-05,
            6.928284710738808e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In 1980, how much cars were produced?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select sum(cars_data.Year)",
            "select cars_data.Year, count(*)",
            "select sum(cars_data.Edispl)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "countries cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9910741448402405,
            6.975964788580313e-05,
            0.0007202489068731666,
            6.865318573545665e-05,
            0.0005449617747217417,
            8.40973443700932e-05,
            0.031712986528873444,
            6.94772315910086e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In 1980, how many cars were made?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Year",
            "select cars_data.Year, count(*)",
            "select sum(cars_data.Year)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "model_list car_names cars_data",
            "countries cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9897072315216064,
            6.07172041782178e-05,
            0.00031344997114501894,
            6.993362330831587e-05,
            0.0006559075554832816,
            7.675096276216209e-05,
            0.0008024020935408771,
            6.709371518809348e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the number off all new cars produced in 1980?: How many numbers were there in all newly make cars?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select sum(cars_data.Id)",
            "select count(distinct cars_data.Id)",
            "select count(cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "countries cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.8951684832572937,
            0.00012594863073900342,
            0.3148650527000427,
            0.00033587744110263884,
            0.012097694911062717,
            8.339633495779708e-05,
            0.14200693368911743,
            0.00012298155343160033
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "During 1980, how many cars were manufactured?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select cars_data.Year, count(*)",
            "select sum(cars_data.Year)",
            "select count(*), cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "model_list car_names cars_data",
            "countries cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9924554824829102,
            6.763642159057781e-05,
            0.00039651154656894505,
            8.5121275333222e-05,
            0.0007185966242104769,
            6.807078170822933e-05,
            0.00038323187618516386,
            6.579590262845159e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In 1980, how many number of cars were manufactured?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Year",
            "select cars_data.Year, count(*)",
            "select sum(cars_data.Year)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "countries cars_data",
            "car_makers cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9485732316970825,
            7.105794793460518e-05,
            0.0002609433722682297,
            7.66160519560799e-05,
            0.0008583855233155191,
            8.339490159414709e-05,
            0.0009077671566046774,
            7.65843506087549e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of car models produced by the American Motor Company.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(*), car_makers.Maker, car_makers.FullName",
            "select count(*), car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9818202257156372,
            0.0009627132094465196,
            0.15842854976654053,
            0.0001267485204152763,
            0.00013613754708785564,
            0.00015256133337970823,
            0.0003402110014576465,
            0.0019526295363903046
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the number of cars made by American Motor Company.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Maker",
            "select count(*), car_makers.Id",
            "select count(*), car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_makers car_names",
            "car_makers model_list car_names",
            "continents car_makers car_names"
        ],
        "align_scores": [
            0.9935833811759949,
            0.00023063422122504562,
            0.00023851987498346716,
            0.3124028444290161,
            0.00028055155416950583,
            0.0009323206613771617,
            0.00014612470113206655,
            0.0001839160395320505
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of car models created by the carmaker that goes by the name of American Motor Company.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(*), car_makers.Maker",
            "select count(*), car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9828469157218933,
            0.0008959165425039828,
            0.3813779354095459,
            0.00018260009528603405,
            0.0004615622747223824,
            0.47274497151374817,
            0.00040384114254266024,
            0.0010576043277978897
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of vehicles made by American Motor Company.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Maker, car_makers.FullName",
            "select count(*), car_makers.Maker",
            "select count(*), car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names",
            "car_makers car_makers car_names",
            "continents car_makers car_names"
        ],
        "align_scores": [
            0.9933671355247498,
            0.00023431627778336406,
            0.00013749051140621305,
            0.00018977152649313211,
            0.0002588890783954412,
            0.7885169386863708,
            0.00025648821610957384,
            0.13889813423156738
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The number of car models produced by American Motor Company is what?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(*), car_makers.FullName",
            "select count(*), car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list",
            "continents car_makers model_list car_names",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.9947123527526855,
            0.00037430928205139935,
            0.06389831751585007,
            0.00011761285713873804,
            0.00025600887602195144,
            0.08764930069446564,
            0.0003015055845025927,
            0.002398643409833312
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which car maker made more than 3 car models? List their full name and id.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, car_makers.FullName, car_makers.Id",
            "select car_makers.FullName, car_names.Model, car_makers.Id",
            "select car_makers.FullName, model_list.Maker, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9722116589546204,
            9.52511909417808e-05,
            0.0005525583401322365,
            8.1136982771568e-05,
            0.00021431459754239768,
            6.653513264609501e-05,
            0.000574229285120964,
            8.620946027804166e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "In which years were produced cars with the weight range between 3000 and 4000 kg?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select cars_data.Year",
            "select the cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9857903718948364,
            0.010416288860142231,
            0.1196405291557312,
            0.0018275558250024915,
            0.9857903718948364,
            0.010416288860142231,
            0.0018263774691149592,
            0.000826301402412355
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which of the following years was car manufacturing done where the weight was no less than 3000 units and no more than 4000 units?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select cars_data.Year",
            "select t7.c7"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.09943211823701859,
            0.5218873023986816,
            0.05161599814891815,
            0.003566890489310026,
            0.09943211823701859,
            0.5218873023986816,
            0.000636373704764992,
            0.00035610017948783934
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "For what years were cars produced of weight no less than 3000 and no more than 4000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select specific cars_data.Year",
            "select cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9563686847686768,
            0.00031205895356833935,
            0.06514827907085419,
            0.0002453921770211309,
            0.0014535341178998351,
            0.00012965864152647555,
            0.9563686847686768,
            0.00031205895356833935
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much horsepower does the car with the largest accelerate have?",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select cars_data.Horsepower, t5.diff(cars_data.Accelerate)",
            "select cars_data.Horsepower, cars_data.Accelerate, cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9311493635177612,
            7.222258136607707e-05,
            0.0006754723144695163,
            6.465007754741237e-05,
            0.00016981766384560615,
            8.72096061357297e-05,
            0.00017502282571513206,
            5.7476485380902886e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "For the model Volvo, which has the least number of cylinders, how fast does the car accelerate?",
        "gold_select": "select cars_data.Cylinders",
        "select_candidates": [
            "select avg(cars_data.Accelerate)",
            "select cars_data.Accelerate",
            "select accel(cars_data.Accelerate)",
            "select max(cars_data.Accelerate)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data",
            "countries cars_data",
            "cars_data"
        ],
        "align_scores": [
            0.0043649389408528805,
            0.003909910563379526,
            0.9684672951698303,
            0.9715147018432617,
            0.000929537694901228,
            0.0010037715546786785,
            0.004132139030843973,
            0.00031947577372193336
        ],
        "align_select": "select cars_data.Accelerate",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the list of cars whose accelerate is larger than the largest horsepower car.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select cars_data.Id",
            "select car_names.Model",
            "select cars_data.MPG",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "cars_data car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.0011230016825720668,
            0.00016861448239069432,
            0.2271394282579422,
            0.000200977738131769,
            0.000712767883669585,
            8.932063065003604e-05,
            0.0002488915342837572,
            8.417669596383348e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars whose accelerate is greater than the car with the largest horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Accelerate",
            "select count(*), cars_data.Horsepower"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9710094332695007,
            0.0008736210875213146,
            0.00039131141966208816,
            0.00011008819274138659,
            0.00042418367229402065,
            0.00022723588335793465,
            0.0003033358370885253,
            0.0002284988440806046
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the number of cars greater accelerate than car number with the most horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(distinct cars_data.Id)",
            "select count(*), cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.942107617855072,
            0.00030056879040785134,
            0.00031978386687114835,
            0.00014104547153692693,
            0.0016544752288609743,
            8.43220332171768e-05,
            0.00032763302442617714,
            0.00019676826195791364
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars are there that have over 6 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9916774034500122,
            8.918555977288634e-05,
            0.0002924437285400927,
            7.183894922491163e-05,
            0.000261495792074129,
            6.400797428796068e-05,
            0.0003691049641929567,
            8.2154649135191e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the number of cars with over 6 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9941964149475098,
            0.00014697923325002193,
            0.0002517300599720329,
            0.0005344324745237827,
            0.00023824258823879063,
            0.0061045074835419655,
            0.00030801547109149396,
            0.0001375525607727468
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of the cars that don't meet the minimum horsepower, which are all the make ids and models of those with less than 4 cylinders?",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.MakeId, car_names.Model",
            "select car_names.Make, car_names.Model",
            "select car_names.Model, car_names.MakeId",
            "select car_names.MakeId, car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9757134914398193,
            0.0008769541746005416,
            0.9738017916679382,
            0.000843627261929214,
            0.9800783395767212,
            0.0009739148081280291,
            0.00030564601183868945,
            9.410120401298627e-05
        ],
        "align_select": "select car_names.MakeId, car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of the cars which had more than 8 cylinders or were made before 1980, can you tell me how much their maximum mileage was?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), car_names.MakeId",
            "select max(cars_data.MPG), car_names.Make",
            "select max(cars_data.MPG), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "cars_data car_names cars_data",
            "model_list cars_data",
            "cars_data car_names"
        ],
        "align_scores": [
            0.9830416440963745,
            0.8169485330581665,
            0.00017653225222602487,
            0.0001487431291025132,
            0.00020020980446133763,
            0.00017186511831823736,
            0.00038494032924063504,
            0.000356230913894251
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the maximum mpg rating for the car with 8 cylinders, produced before 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Year",
            "select max(cars_data.MPG), cars_data.Cylinders",
            "select max(cars_data.MPG), cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "cars_data car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9823756814002991,
            9.625172970118001e-05,
            0.00017252810357604176,
            6.1938633734826e-05,
            0.00019190428429283202,
            6.317548832157627e-05,
            0.00020949401368852705,
            6.08027221460361e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum mpg of the car with 8 cylinders or made before 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), car_names.Make",
            "select max(cars_data.MPG), car_names.Model, car_names.Make",
            "select max(cars_data.MPG), car_names.Make, t4.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "cars_data car_names cars_data",
            "car_makers cars_data",
            "model_list cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9929690957069397,
            0.00011837908823508769,
            0.0001401565968990326,
            6.504081829916686e-05,
            0.00013397482689470053,
            6.990916153881699e-05,
            0.0001172731863334775,
            6.254739128053188e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the maximum mpgs of the cars which had 8 cylinders or were made before 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Cylinders",
            "select max(cars_data.MPG), cars_data.Year",
            "select max(cars_data.MPG), cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9827377200126648,
            0.23734179139137268,
            0.00013880529149901122,
            0.00011776301107602194,
            0.00011630530207185075,
            7.705170719418675e-05,
            0.00018812126654665917,
            9.960200259229168e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the maximum MPG of those cars that have 8 cylinders in them and were made before 1980.",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Year",
            "select max(cars_data.MPG), cars_data.Cylinders",
            "select max(cars_data.MPG), cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.984315812587738,
            0.0016300365095958114,
            0.0001383009075652808,
            0.00010846103396033868,
            0.00016478975885547698,
            0.00015156102017499506,
            0.00019720626005437225,
            9.624126687413082e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum MPG of the car which has 8 cylinders and was produced before 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Cylinders",
            "select max(cars_data.MPG), cars_data.Year",
            "select max(cars_data.MPG), cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "cars_data car_names cars_data",
            "cars_data car_names"
        ],
        "align_scores": [
            0.9907712936401367,
            0.0005209200317040086,
            0.00016858491289895028,
            0.00013242859859019518,
            0.00014673109399154782,
            0.00010401674808235839,
            0.0002028716407949105,
            8.355457975994796e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out which models are lighter than 3500 but not built by the 'Ford Motor Company'.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Maker, model_list.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9627542495727539,
            0.9627542495727539,
            0.9588051438331604,
            0.9588051438331604,
            0.00031078586471267045,
            0.00031078586471267045,
            0.0004868346732109785,
            0.0004868346732109785
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which models are lighter than 3500 but not made by the 'Ford Motor Company'? List them.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_makers.Maker, model_list.Model",
            "select car_names.Model",
            "select model_list.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data"
        ],
        "align_scores": [
            0.657084047794342,
            0.2415854036808014,
            0.00041477152262814343,
            0.0003226533008273691,
            0.7324913740158081,
            0.5091930627822876,
            0.9030358791351318,
            0.8300279974937439
        ],
        "align_select": "select model_list.Maker",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the car models that were built and were lighter than 3500 pounds but were not made by the Ford Motor Company?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_makers.FullName",
            "select car_makers.Maker, model_list.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list car_names cars_data",
            "car_makers model_list cars_data",
            "countries car_makers model_list car_names",
            "car_makers car_names cars_data",
            "countries car_makers model_list cars_data"
        ],
        "align_scores": [
            0.9365097284317017,
            0.9365097284317017,
            0.918053388595581,
            0.918053388595581,
            0.0006672642775811255,
            0.0006672642775811255,
            0.0006585401715710759,
            0.0006585401715710759
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Tell me about different models of cars lighter than 3500 which are not made by the Ford Motor Company.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct car_names.Model",
            "select distinct model_list.Model, car_makers.Maker",
            "select distinct car_names.Model, car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names cars_data",
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "continents car_makers model_list car_names cars_data",
            "countries car_makers model_list car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.023032208904623985,
            0.9777332544326782,
            0.017166905105113983,
            0.9761983156204224,
            0.0006466212798841298,
            0.0006292204489000142,
            0.0002740355266723782,
            0.0004427161766216159
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Different models that are lighter than 3500 were not built by the Ford Motor Company. List them out.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct model_list.Maker",
            "select distinct car_makers.Maker, car_makers.FullName",
            "select distinct car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "countries car_makers model_list cars_data",
            "car_makers model_list car_names",
            "model_list cars_data",
            "countries model_list cars_data"
        ],
        "align_scores": [
            0.06625969707965851,
            0.9267386198043823,
            0.03771545737981796,
            0.9719294309616089,
            0.00018804306455422193,
            0.0004301064182072878,
            0.09250151365995407,
            0.9597684144973755
        ],
        "align_select": "select distinct model_list.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the different models that are lighter than 3500 but were not made by Ford Motor Company.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct car_names.Model",
            "select distinct model_list.Maker",
            "select distinct model_list.Model, car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names"
        ],
        "align_scores": [
            0.37355899810791016,
            0.37355899810791016,
            0.35859179496765137,
            0.35859179496765137,
            0.20220045745372772,
            0.20220045745372772,
            0.0018814801005646586,
            0.0018814801005646586
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me some different models which are lighter than 3500 but were not made by Ford Motor Company.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct car_names.Model",
            "select distinct model_list.Model",
            "select car_names.Model",
            "select model_list.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.36389872431755066,
            0.36389872431755066,
            0.24387791752815247,
            0.24387791752815247,
            0.9809041619300842,
            0.9809041619300842,
            0.9687609672546387,
            0.9687609672546387
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Name the countries where there is no car maker.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, countries.Continent",
            "select countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.24900028109550476,
            0.28089454770088196,
            0.00035233868402428925,
            0.0003485479101072997,
            0.00029276622808538377,
            0.0003465812187641859,
            0.0004786979407072067,
            0.00040387854096479714
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the list of countries where there is no car maker.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryId, countries.CountryName",
            "select countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries",
            "countries car_makers model_list",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.2706819474697113,
            0.5314276218414307,
            0.0003197103796992451,
            0.000513238541316241,
            0.00037257763324305415,
            0.00041540348320268095,
            0.0004205910081509501,
            0.00045267364475876093
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Where there is no car maker, which countries are they?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, car_makers.Country",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryId, countries.CountryName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.6427357792854309,
            0.18166333436965942,
            0.0005274603608995676,
            0.0005089808255434036,
            0.0005233118426986039,
            0.0002641078899614513,
            0.0012844572775065899,
            0.00037595522007904947
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of the nations with no car manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, countries.Continent",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries",
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.2899395227432251,
            0.16503049433231354,
            0.00022105251264292747,
            0.00026404066011309624,
            0.00024019520787987858,
            0.00022944195370655507,
            0.0003844520542770624,
            0.00050023861695081
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name all the countries without car manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, countries.Continent",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries",
            "countries car_makers"
        ],
        "align_scores": [
            0.4675891101360321,
            0.1066959798336029,
            0.00023851873993407935,
            0.00023871757730375975,
            0.0002783707168418914,
            0.00020744548237416893,
            0.00023701526515651494,
            0.0003702983376570046
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you tell me the name of any country without a car maker?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, countries.Continent",
            "select countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries",
            "countries car_makers"
        ],
        "align_scores": [
            0.748744547367096,
            0.002648083958774805,
            0.00020905424025841057,
            8.709450776223093e-05,
            0.00024889057385735214,
            9.209350537275895e-05,
            0.00030056334799155593,
            0.0001213379655382596
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of the countries which do not have car makers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, countries.Continent",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries",
            "countries car_makers"
        ],
        "align_scores": [
            0.15983089804649353,
            0.16744856536388397,
            0.00020877475617453456,
            0.00031159372883848846,
            0.00024311298329848796,
            0.00023584240989293903,
            0.0003452890960033983,
            0.00027796736685559154
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the countries without car manufacturers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, countries.Continent",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries",
            "countries car_makers"
        ],
        "align_scores": [
            0.1823907047510147,
            0.33423948287963867,
            0.00019735260866582394,
            0.00029930626624263823,
            0.00021768840088043362,
            0.0002702590136323124,
            0.00037009132211096585,
            0.00025488660321570933
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which car manufacturers make at least 2 different cars and more than 3 car makers? List their id and manufacturer.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.Maker",
            "select car_names.MakeId, car_makers.Maker",
            "select t2, car_makers.Id, car_makers.Maker",
            "select model_list.ModelId, car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names",
            "countries car_makers car_names",
            "car_makers car_makers car_names"
        ],
        "align_scores": [
            0.04057404026389122,
            0.18940232694149017,
            0.014016984961926937,
            0.026736196130514145,
            0.0001380087051074952,
            0.00014152507355902344,
            0.0009086368954740465,
            0.0011403063545003533
        ],
        "align_select": "select car_makers.Id, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you provide me with the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.Maker",
            "select model_list.ModelId, car_makers.Maker",
            "select model_list.Maker, car_makers.Maker",
            "select car_names.Model, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "model_list car_names",
            "countries car_makers model_list car_names",
            "countries model_list car_names",
            "continents car_makers model_list car_names",
            "continents model_list car_names"
        ],
        "align_scores": [
            0.9257017374038696,
            0.12188822776079178,
            0.0003754589706659317,
            0.0004353028489276767,
            0.0003198146296199411,
            0.00018565893697086722,
            0.000678422802593559,
            0.000737528782337904
        ],
        "align_select": "select car_makers.Id, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the names and id of the countries that have more than 3 auto-makers (or producers of 'Fiat') or produce the 'Fiat' model.",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_makers.Id",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName., countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list",
            "countries car_makers",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.931182324886322,
            0.04726255312561989,
            0.16024361550807953,
            0.008224266581237316,
            0.931182324886322,
            0.04726255312561989,
            0.008707230910658836,
            0.001102637848816812
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "In what are the airline names and abbreviations of airlines (in USA )?",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select t0, airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9895245432853699,
            0.00012690706353168935,
            0.0001789134694263339,
            6.590586417587474e-05,
            0.00034573409357108176,
            7.140389789128676e-05,
            0.002550867386162281,
            7.403090421576053e-05
        ],
        "align_select": "select airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the airline with the abbreviation 'UAL'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.uid, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.8875687122344971,
            0.00011455194908194244,
            0.0002800729125738144,
            7.085246033966541e-05,
            0.00013558102364186198,
            6.350492185447365e-05,
            0.00016730571223888546,
            6.775842484785244e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the airline whose abbreviation is UAL?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9888768792152405,
            0.00010585246491245925,
            0.00027774745831266046,
            6.493137334473431e-05,
            0.00020558277901727706,
            6.91028471919708e-05,
            0.0001650501653784886,
            6.0479236708488315e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many United Airlines flights go into City 'Aberdeen'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.City",
            "select count(*), airlines.Airline, airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9955494403839111,
            0.0001938605128088966,
            0.00028710716287605464,
            0.0019089800771325827,
            0.00014511524932458997,
            0.00021450308850035071,
            0.00014511524932458997,
            0.00021450308850035071
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Tell me the number of United Airlines flights going to the city of Aberdeen?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.City",
            "select count(*), airlines.Airline, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9943971633911133,
            0.00016005852376110852,
            0.00029683311004191637,
            0.002277021761983633,
            0.0001474795863032341,
            0.00018261455988977104,
            0.00015221594367176294,
            0.00010088818817166612
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of all the flights going to City 'Aberdeen', how many are from United Airlines?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(distinct flights.FlightNo)",
            "select flights.Airline, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9913880228996277,
            7.458375330315903e-05,
            0.00042362220119684935,
            7.166981231421232e-05,
            0.002136374358087778,
            6.577463500434533e-05,
            0.002318858401849866,
            7.055512105580419e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me airport name that has the code 'AKO'?",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select avg(airports.AirportName)",
            "select airports.AirportName, airports.Country",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9581003189086914,
            0.00019541459914762527,
            0.001640106551349163,
            7.097620982676744e-05,
            0.00015374274516943842,
            6.381198181770742e-05,
            0.00021804386051371694,
            7.714067032793537e-05
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of airports we have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), airports.AirportCode, airports.AirportName",
            "select count(*), airports.AirportCode-, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9927152991294861,
            0.9927152991294861,
            0.00026229131617583334,
            0.00026229131617583334,
            0.0002632257528603077,
            0.0002632257528603077,
            0.00018358525994699448,
            0.00018358525994699448
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "We have how many airports?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), airports.AirportCode, airports.AirportName",
            "select count(*), airports.AirportCode-, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.992436945438385,
            0.992436945438385,
            0.0003453157260082662,
            0.0003453157260082662,
            0.0004110702720936388,
            0.0004110702720936388,
            0.00028073322027921677,
            0.00028073322027921677
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the number of airports we have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), airports.AirportCode, airports.AirportName",
            "select count(*), airports.AirportCode-, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9913723468780518,
            0.9913723468780518,
            0.0002703752543311566,
            0.0002703752543311566,
            0.00022730199270881712,
            0.00022730199270881712,
            0.00016935309395194054,
            0.00016935309395194054
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all number airports that we have.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), airports.AirportCode, airports.AirportName",
            "select count(*), airports.AirportCode - airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9518976211547852,
            0.9518976211547852,
            0.00031291876803152263,
            0.00031291876803152263,
            0.0002214444539276883,
            0.0002214444539276883,
            0.00021258550987113267,
            0.00021258550987113267
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the total numbers of flights arriving at Aberdeen airport?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportName",
            "select count(*), airports.City, airports.AirportName",
            "select count(*), airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9920580983161926,
            0.00031304708682000637,
            0.00035246630432084203,
            0.00020539666002150625,
            0.00013963885430712253,
            9.799993131309748e-05,
            0.000380524288630113,
            0.0003163283399771899
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the numbers in which the flight arrived into Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select flights.FlightNo",
            "select distinct flights.FlightNo",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo, airports.City"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.17340940237045288,
            0.00028558573103509843,
            0.883680522441864,
            0.00020219056750647724,
            0.00011453263141447678,
            6.252138700801879e-05,
            0.00016248227620963007,
            6.835935346316546e-05
        ],
        "align_select": "select distinct flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of which total number of flights are flying from Aberdeen to Ashley?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City, airports.AirportName",
            "select count(*), airports.City (Aberdeen, airports.AirportName)",
            "select count(*) dependant on airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9469928741455078,
            0.05644001439213753,
            0.0001863357174443081,
            0.00010781315359054133,
            0.0002825750852935016,
            0.00012724442058242857,
            0.00023721875913906842,
            0.00015632274153176695
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Are there any flights that fly from Aberdeen to Ashley?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.City, airports.AirportName",
            "select flights.FlightNo, airports.City, airports.AirportName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.039719805121421814,
            0.0024755673948675394,
            0.0005246963701210916,
            0.00022691437334287912,
            0.00018048724450636655,
            9.885525651043281e-05,
            0.00018048724450636655,
            9.885525651043281e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In how many flights does Aberdeen to Ashley travel?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City, airports.AirportName",
            "select count(*) dependant on airports.City, airports.AirportName",
            "select count(*), airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9569131731987,
            0.00034727927413769066,
            0.00016501398931723088,
            8.976241952041164e-05,
            0.00023015009355731308,
            0.00010516389738768339,
            0.00016501398931723088,
            8.976241952041164e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "There are how many flights that fly from Aberdeen to Ashley?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City, airports.AirportName",
            "select count(*) dependant on airports.City, airports.AirportName",
            "select count(*), airports.City, airports.AirportName2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9945460557937622,
            9.181458881357685e-05,
            0.0001350859965896234,
            5.615802001557313e-05,
            0.00021368940360844135,
            7.089963037287816e-05,
            0.00014529966574627906,
            5.8789672038983554e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all the airliners which have departures out of both airports (APG and CVO).",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select flights.Airline, flights.SourceAirport",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "flights",
            "airports flights"
        ],
        "align_scores": [
            0.9945111274719238,
            0.9945111274719238,
            0.994574248790741,
            0.994574248790741,
            0.00028121890500187874,
            0.00028121890500187874,
            0.0003032794629689306,
            0.0003032794629689306
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the airlines that fly departing flights from both CVO and APG airports?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "flights",
            "airports flights"
        ],
        "align_scores": [
            0.994968831539154,
            0.994968831539154,
            0.9945356845855713,
            0.9945356845855713,
            0.00043849280336871743,
            0.00043849280336871743,
            0.0005059634568169713,
            0.0005059634568169713
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find out which airlines have flights leaving from both APG and CVO airports?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "flights",
            "airports flights"
        ],
        "align_scores": [
            0.9952880144119263,
            0.9952880144119263,
            0.9955109357833862,
            0.9955109357833862,
            0.00044910371070727706,
            0.00044910371070727706,
            0.0006106938817538321,
            0.0006106938817538321
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "In which airlines do the flights depart from both APG and CVO airports?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "flights",
            "airports flights"
        ],
        "align_scores": [
            0.9942998886108398,
            0.9942998886108398,
            0.9950036406517029,
            0.9950036406517029,
            0.0003954711137339473,
            0.0003954711137339473,
            0.000447410304332152,
            0.000447410304332152
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the airlines that has departure flights from both APG and CVO.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "flights",
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.9953457713127136,
            0.14109614491462708,
            0.995499312877655,
            0.1818365901708603,
            0.0005315777962096035,
            0.0003713846963364631,
            0.0003729027812369168,
            0.00036832812475040555
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all the airlines with at least 10 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9729872941970825,
            0.00023073387274052948,
            0.0003803097933996469,
            7.102414383552969e-05,
            0.002250519348308444,
            7.886329694883898e-05,
            0.00016522353689651936,
            6.737216608598828e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me the list of airlines which has at least 10 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9746058583259583,
            0.00012144387437729165,
            0.000501711037941277,
            6.302746623987332e-05,
            0.002882682718336582,
            7.291814108612016e-05,
            0.0002859873347915709,
            5.965964010101743e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "There were how many flights landing in Aberdeen or Abilene?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City-UNION-SELECT-FROM-WHERE",
            "select count(*), airports.City-Aberdeen, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9947916865348816,
            0.0004391960392240435,
            0.00029204529710114,
            0.01228767167776823,
            0.00019299112318549305,
            0.00014334033767227083,
            0.00015773663471918553,
            8.599738066550344e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of flights landing in Aberdeen or Abilene?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City-UNION-SELECT-FROM-WHERE",
            "select count(*), airports.City-Aberdeen, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9950724244117737,
            0.0015695048496127129,
            0.00038552519981749356,
            0.002953530987724662,
            0.000198855806956999,
            0.00012778709060512483,
            0.00019365009211469442,
            8.048873860388994e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the total number of flights landing in Aberdeen or Abilene.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City-Aberdeen, airports.AirportName",
            "select count(*), airports.City-Aberdeen, airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9949654936790466,
            0.0003385611926205456,
            0.00040249520679935813,
            0.0021556406281888485,
            0.00016188503650482744,
            8.004539995454252e-05,
            0.00014614281826652586,
            9.104898344958201e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell which country does Airline 'JetBlue Airways' belong to?",
        "gold_select": "select airlines.Country",
        "select_candidates": [
            "select airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select airlines.Country, t0.c4",
            "select t0, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.993862509727478,
            0.00022472039563581347,
            0.00029803544748574495,
            8.919967513065785e-05,
            0.0004060468927491456,
            8.976104436442256e-05,
            0.001112185069359839,
            0.00010431226110085845
        ],
        "align_select": "select airlines.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "which country belongs to JetBlue Airways airline?",
        "gold_select": "select airlines.Country",
        "select_candidates": [
            "select airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select airlines.Country, airlines.Abbreviation, airlines.Country",
            "select airlines.Country (symbol airlines.Country)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9938604831695557,
            0.0001192069030366838,
            0.0002818905340973288,
            7.631025073351339e-05,
            0.00018324214033782482,
            6.813428626628593e-05,
            0.0004376597353257239,
            7.872685819165781e-05
        ],
        "align_select": "select airlines.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Is JetBlue Airways affiliated with a certain country?",
        "gold_select": "select airlines.Country",
        "select_candidates": [
            "select airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select airlines.Country, yes(airlines.Airline)",
            "select airlines.Country, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.905626654624939,
            0.0002695020230021328,
            0.0003859186253976077,
            8.63139284774661e-05,
            0.0002948767214547843,
            7.387970254058018e-05,
            0.0002645264903549105,
            7.071516301948577e-05
        ],
        "align_select": "select airlines.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which country is Jetblue Airways based at?",
        "gold_select": "select airlines.Country",
        "select_candidates": [
            "select airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select airlines.Country, t0.c4",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9407395124435425,
            0.0001405358489137143,
            0.0002983575686812401,
            8.416569471592084e-05,
            0.0003212852170690894,
            7.679218833800405e-05,
            0.00024870698689483106,
            6.937415309948847e-05
        ],
        "align_select": "select airlines.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me which country is Jetblue Airways affiliated to?",
        "gold_select": "select airlines.Country",
        "select_candidates": [
            "select airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select airlines.Country, t0.c4",
            "select t0, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9899532198905945,
            0.0001818715245462954,
            0.00031725462758913636,
            8.853452891344205e-05,
            0.00031315424712374806,
            8.058488310780376e-05,
            0.0009554183343425393,
            8.930222975322977e-05
        ],
        "align_select": "select airlines.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where is JetBlue Airways affiliated from? Name the country.",
        "gold_select": "select airlines.Country",
        "select_candidates": [
            "select airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select distinct airlines.Country",
            "select airlines.Country, t0.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports"
        ],
        "align_scores": [
            0.9832982420921326,
            0.00010354460391681641,
            0.000351151917129755,
            7.585975981783122e-05,
            0.04200040549039841,
            0.00028804235626012087,
            0.00028578046476468444,
            7.814597483957186e-05
        ],
        "align_select": "select airlines.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the abbreviation for (Airlines name)-\"JetBlue Airways\"? (Airlines-name)",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline",
            "select airlines.Airline-, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.0752449482679367,
            0.00011213151447009295,
            0.0002174181427108124,
            7.813056436134502e-05,
            0.01160756591707468,
            0.00013743076124228537,
            0.00020539450633805245,
            7.238047692226246e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the abbreviation of the airline called \"JetBlue Airways\"?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9938516616821289,
            0.00010301633301423863,
            0.00026537926169112325,
            6.662477971985936e-05,
            0.0001844773651100695,
            6.707842112518847e-05,
            0.00035661208676174283,
            6.322980334516615e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Giveme the abbreviation for 'Airline JetBlue Airways', please.",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9845083951950073,
            0.00018314884800929576,
            0.000252322613960132,
            7.150774035835639e-05,
            0.00020114985818509012,
            7.296265539480373e-05,
            0.0003207052650395781,
            7.072190783219412e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which abbreviation matches JetBlue Airways?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline",
            "select airlines.Abbreviation (same as airlines.Airline)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9875079989433289,
            0.00010052767902379856,
            0.0002368998248130083,
            6.587777170352638e-05,
            0.0002714316069614142,
            6.660229701083153e-05,
            0.9595553874969482,
            7.736372936051339e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the abbreviation corresponding to JetBlue Airways?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline",
            "select airlines.uid, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9925310015678406,
            9.07808353076689e-05,
            0.00024255269090645015,
            6.337220111163333e-05,
            0.00029600225389003754,
            6.313803169177845e-05,
            0.00017737453163135797,
            6.401970313163474e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the abbreviation of Jetblue Airways?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline",
            "select airlines.Abbreviation, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9950337409973145,
            0.00012953925761394203,
            0.00023888425494078547,
            6.547731027239934e-05,
            0.00026375785819254816,
            6.732361362082884e-05,
            0.0001934048777911812,
            6.327063601929694e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the corresponding abbreviation for JetBlue Airways?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9912774562835693,
            9.22309554880485e-05,
            0.00035611531347967684,
            6.288769509410486e-05,
            0.0001731325755827129,
            6.578674219781533e-05,
            0.00036834392813034356,
            6.424965977203101e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the abbreviation corresponding to JetBlue Airways?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline",
            "select airlines.uid, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9763088822364807,
            0.00010691488569136709,
            0.0002660331374499947,
            6.740340177202597e-05,
            0.000323822459904477,
            6.432518421206623e-05,
            0.00017437082715332508,
            6.757774099241942e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What airlines are there in the USA? Give me all the airline names and their abbreviations.",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Abbreviation,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9909289479255676,
            0.0003244819527026266,
            0.0002551238867454231,
            7.636185182491317e-05,
            0.00021357495279517025,
            6.539856258314103e-05,
            0.00259745423682034,
            7.939421629998833e-05
        ],
        "align_select": "select airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the airports name, city, Airport Code in the city of Anthony.",
        "gold_select": "select airports.AirportCode, airports.AirportName",
        "select_candidates": [
            "select airports.AirportName, airports.City, airports.AirportCode",
            "select airports.AirportName, airports.City, airports.AirportCode",
            "select airports.AirportName), airports.City, airports.AirportCode",
            "select airports.City, airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9931800365447998,
            8.722516213310882e-05,
            0.9931800365447998,
            8.722516213310882e-05,
            0.0019966340623795986,
            7.254610682139173e-05,
            0.9943426847457886,
            8.483723649987951e-05
        ],
        "align_select": "select airports.AirportName, airports.City, airports.AirportCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the airport name, city and airport code for Anthony?",
        "gold_select": "select airports.AirportCode, airports.AirportName",
        "select_candidates": [
            "select airports.AirportName, airports.City, airports.AirportCode",
            "select airports.AirportName, airports.City, airports.AirportCode",
            "select avg(airports.AirportName), airports.City, airports.AirportCode",
            "select airports.AirportName), airports.City, airports.AirportCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9942739605903625,
            0.00019405805505812168,
            0.9942739605903625,
            0.00019405805505812168,
            0.0004047175752930343,
            8.375927427550778e-05,
            0.0016525608953088522,
            0.0001166803267551586
        ],
        "align_select": "select airports.AirportName, airports.City, airports.AirportCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need to know how to find the airport codes and names in the city of Anthony. Give the answer.",
        "gold_select": "select airports.AirportCode, airports.AirportName",
        "select_candidates": [
            "select airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportCode, airports.AirportName",
            "select airports.AirportCode.c1, airports.AirportName",
            "select airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9927991628646851,
            0.00015991039981599897,
            0.0004135933704674244,
            7.280238787643611e-05,
            0.00045126097393222153,
            8.308873657369986e-05,
            0.0005488181486725807,
            0.00014150753850117326
        ],
        "align_select": "select airports.AirportCode, airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the airport code and city for Anthony?",
        "gold_select": "select airports.AirportCode, airports.AirportName",
        "select_candidates": [
            "select airports.AirportCode, airports.City",
            "select airports.AirportCode.c1, airports.City",
            "select airports.AirportCode, t1.co",
            "select airports.AirportCode, airports.City, airports.AirportName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9928985834121704,
            0.00019673672795761377,
            0.00043254115735180676,
            9.049432264873758e-05,
            0.0010792557150125504,
            9.238244820153341e-05,
            0.00021537981228902936,
            6.438379205064848e-05
        ],
        "align_select": "select airports.AirportCode, airports.City",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the airport name and code corresponding to Anthony. Note: city only used when needed; name of the city (Anthony); airport codes only used when needed.",
        "gold_select": "select airports.AirportCode, airports.AirportName",
        "select_candidates": [
            "select airports.AirportName, airports.AirportCode",
            "select airports.City, airports.AirportName, airports.AirportCode",
            "select avg(airports.AirportName), avg(airports.AirportCode)",
            "select avg(airports.AirportName), airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports",
            "airlines airports"
        ],
        "align_scores": [
            0.007658797316253185,
            0.00011414740583859384,
            0.01354652363806963,
            8.007341239135712e-05,
            0.0008288479875773191,
            6.617837061639875e-05,
            0.0004175481153652072,
            6.639594357693568e-05
        ],
        "align_select": "select airports.AirportName, airports.AirportCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give the airport name and airport code corresponding to the city Anthony.",
        "gold_select": "select airports.AirportCode, airports.AirportName",
        "select_candidates": [
            "select airports.AirportName, airports.AirportCode",
            "select avg(airports.AirportName), airports.AirportCode",
            "select airports.City, airports.AirportName, airports.AirportCode",
            "select avg(airports.AirportName), avg(airports.AirportCode)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9949386119842529,
            0.0001038507471093908,
            0.00035676005063578486,
            7.067174010444432e-05,
            0.0002601351006887853,
            7.044513040455058e-05,
            0.001393330516293645,
            7.120901136659086e-05
        ],
        "align_select": "select airports.AirportName, airports.AirportCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the city, airport code and airport name corresponding to the airport Anthony.",
        "gold_select": "select airports.AirportCode, airports.AirportName",
        "select_candidates": [
            "select airports.City, airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportCode, airports.AirportName",
            "select t1.co, airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9953405857086182,
            0.0001253363152500242,
            0.9953405857086182,
            0.0001253363152500242,
            0.9953405857086182,
            0.0001253363152500242,
            0.00041033964953385293,
            7.202601409517229e-05
        ],
        "align_select": "select airports.City, airports.AirportCode, airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me an airport code and airport name that goes with the city Anthony.",
        "gold_select": "select airports.AirportCode, airports.AirportName",
        "select_candidates": [
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode.c1, airports.AirportName",
            "select a airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9928604960441589,
            0.00010772733367048204,
            0.0003452851378824562,
            7.768568320898339e-05,
            0.0006166220991872251,
            6.883859168738127e-05,
            0.0006600456545129418,
            8.519444236299023e-05
        ],
        "align_select": "select airports.AirportCode, airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many airlines does the company have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Country",
            "select count(*), airlines.Airline",
            "select count(*), airlines.uid"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports"
        ],
        "align_scores": [
            0.9862915873527527,
            0.0011182682355865836,
            0.0002385342086199671,
            0.0020065035205334425,
            0.00042566805495880544,
            0.8947722315788269,
            0.00031153461895883083,
            0.00041199533734470606
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "We have how many airlines?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Country",
            "select count(*), airlines.Airline",
            "select count(*), airlines.uid"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9923804998397827,
            0.9923804998397827,
            0.0001909260026877746,
            0.0001909260026877746,
            0.00041876317118294537,
            0.00041876317118294537,
            0.00023782024800311774,
            0.00023782024800311774
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "There are a total number of airlines.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.uid",
            "select count(*), airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9709034562110901,
            0.9709034562110901,
            0.0007220975821837783,
            0.0007220975821837783,
            0.0002910860057454556,
            0.0002910860057454556,
            0.000207575096283108,
            0.000207575096283108
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the total for flight count?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select sum(flights.FlightNo)",
            "select count(*)",
            "select flights.Airline, sum(flights.FlightNo)",
            "select t2.c count(*)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.15091420710086823,
            6.988590030232444e-05,
            0.7747611403465271,
            9.252448217011988e-05,
            0.0003101488691754639,
            8.428360888501629e-05,
            0.0005644088960252702,
            0.0001253410882782191
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the airline with the abbreviation 'UAL'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.uid, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.8875687122344971,
            0.00011455194908194244,
            0.0002800729125738144,
            7.085246033966541e-05,
            0.00013558102364186198,
            6.350492185447365e-05,
            0.00016730571223888546,
            6.775842484785244e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What airline has an abbreviation 'UAL'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Airline",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.5894957184791565,
            0.00012281867384444922,
            0.00021934982214588672,
            7.257005199790001e-05,
            0.00016863537894096226,
            7.095509499777108e-05,
            0.00013882065832149237,
            6.666748959105462e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the airline abbreviation 'UAL'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.7814300656318665,
            7.448267569998279e-05,
            0.00018987433577422053,
            6.205184763530269e-05,
            0.00015790322504471987,
            6.38839410385117e-05,
            0.00019483597134239972,
            6.343562563415617e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me that airline with the abbreviation 'UAL'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.8723774552345276,
            0.000109695247374475,
            0.0002507326425984502,
            7.16804715921171e-05,
            0.00018025920144282281,
            6.988456152612343e-05,
            0.00013246748130768538,
            6.47542838123627e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the airline with the abbreviation UAL?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.8978865146636963,
            0.00011539570550667122,
            0.00024792994372546673,
            8.209277439163998e-05,
            0.0001796182186808437,
            7.419189932988957e-05,
            0.0001591835025465116,
            6.696312630083412e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "There are how many airlines originating from USA?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Country",
            "select count(*), airlines.Airline",
            "select count(*), airlines.uid"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9949954748153687,
            0.0001664579176576808,
            0.0002632596588227898,
            0.00527367414906621,
            0.0002839123480953276,
            0.007016504183411598,
            0.00027670818963088095,
            0.0002310149575350806
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which city and country is Alton airport located at?",
        "gold_select": "select airports.City, airports.Country",
        "select_candidates": [
            "select airports.City, airports.Country",
            "select airports.Country, airports.City",
            "select t1.co, airports.Country",
            "select airports.AirportCode, airports.Country"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9940906167030334,
            0.0001802316983230412,
            0.995079517364502,
            0.00016356294509023428,
            0.0007741111912764609,
            7.11723550921306e-05,
            0.0004939290229231119,
            7.786450441926718e-05
        ],
        "align_select": "select airports.City, airports.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where is the Alton airport located? I would like to know the city and country it is in.",
        "gold_select": "select airports.City, airports.Country",
        "select_candidates": [
            "select airports.City, airports.Country",
            "select t1.co, airports.Country",
            "select airports.Country, airports.City",
            "select airports.AirportCode, airports.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9915822148323059,
            0.000478106492664665,
            0.0005810465081594884,
            0.0003265606064815074,
            0.9926652312278748,
            0.00024569814559072256,
            0.0006107369554229081,
            0.0002520061971154064
        ],
        "align_select": "select airports.City, airports.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airport and city is Alton? Specify country and city.",
        "gold_select": "select airports.City, airports.Country",
        "select_candidates": [
            "select airports.Country, airports.City",
            "select airports.AirportCode, airports.City",
            "select airports.AirportName, airports.City",
            "select airports.CountryAbbrev, airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9526206851005554,
            0.0001118768923333846,
            0.0010093814926221967,
            0.0001556967617943883,
            0.0008347557159140706,
            0.00014026087592355907,
            0.22124381363391876,
            0.00010980638762703165
        ],
        "align_select": "select airports.Country, airports.City",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The Alton airport is located in which city and country?",
        "gold_select": "select airports.City, airports.Country",
        "select_candidates": [
            "select airports.City, airports.Country",
            "select airports.Country, airports.City",
            "select airports.AirportCode, airports.Country",
            "select t1.co, airports.Country"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9916268587112427,
            0.00015378835087176412,
            0.9943704009056091,
            0.00016096673789434135,
            0.0005502915591932833,
            7.645606820005924e-05,
            0.0007287720218300819,
            6.904442852828652e-05
        ],
        "align_select": "select airports.City, airports.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the Alton airport, what is the city, and country?",
        "gold_select": "select airports.City, airports.Country",
        "select_candidates": [
            "select airports.City, airports.Country",
            "select t1.co, airports.Country",
            "select airports.AirportCode, airports.Country",
            "select alton.c0, airports.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9943716526031494,
            0.0003340058901812881,
            0.0005996444961056113,
            8.612843521405011e-05,
            0.0003992932033725083,
            8.112274372251704e-05,
            0.0007019182667136192,
            0.00010758997814264148
        ],
        "align_select": "select airports.City, airports.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the city and country for the airport at Alton?",
        "gold_select": "select airports.City, airports.Country",
        "select_candidates": [
            "select airports.City, airports.Country",
            "select t1.co, airports.Country",
            "select airports.AirportCode, airports.Country",
            "select airports.Country, airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9934622049331665,
            0.00033141541643999517,
            0.000849128351546824,
            9.826699533732608e-05,
            0.0004605056019499898,
            7.796324644004926e-05,
            0.9940906167030334,
            0.0002575104881543666
        ],
        "align_select": "select airports.City, airports.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the city and country that the Alton airport is located in?",
        "gold_select": "select airports.City, airports.Country",
        "select_candidates": [
            "select airports.City, airports.Country",
            "select airports.Country, airports.CountryAbbrev",
            "select airports.Country, airports.City",
            "select airports.AirportCode, airports.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9900187253952026,
            0.000311204232275486,
            0.0008722491329535842,
            7.017921598162502e-05,
            0.9928985834121704,
            0.00029118984821252525,
            0.0007389492238871753,
            7.743856986053288e-05
        ],
        "align_select": "select airports.City, airports.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the city and country for the Alton airport?",
        "gold_select": "select airports.City, airports.Country",
        "select_candidates": [
            "select airports.City, airports.Country",
            "select t1.co, airports.Country",
            "select airports.AirportCode, airports.Country",
            "select alton.c0, airports.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.994211733341217,
            0.0003097310836892575,
            0.0005557836266234517,
            9.293635957874358e-05,
            0.0003544280771166086,
            7.646599260624498e-05,
            0.0006893651443533599,
            0.00013370388478506356
        ],
        "align_select": "select airports.City, airports.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the airport name for AKO.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select avg(airports.AirportName)",
            "select airports.AirportName, airports.AirportCode",
            "select airports.AirportName, airports.AirportCode, airports.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9810778498649597,
            0.00017767345707397908,
            0.001001709490083158,
            6.183735968079418e-05,
            0.00020022221724502742,
            6.733966438332573e-05,
            0.00013969920109957457,
            5.8101522881770507e-05
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airports are there at City 'Aberdeen?' List them by airport name.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select count(*), airports.AirportName",
            "select airports.AirportName, airports.AirportCode",
            "select avg(airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports",
            "airlines airports"
        ],
        "align_scores": [
            0.9421443939208984,
            0.9703641533851624,
            0.0004820286703761667,
            0.00048440907266922295,
            0.0009954035049304366,
            0.0003166539245285094,
            0.0004983375547453761,
            0.0010040791239589453
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Show me the airport names for City Aberdeen.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportName, airports.AirportCode",
            "select airports.AirportName, airports.AirportCode, airports.Country",
            "select avg(airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9921056032180786,
            0.00015679729403927922,
            0.0002159774157917127,
            6.942015170352533e-05,
            0.0001373591076117009,
            5.923310891375877e-05,
            0.0005930617335252464,
            5.888393570785411e-05
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the names of the airports in Aberdeen?",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportName, airports.AirportCode",
            "select airports.AirportName, airports.AirportCode, airports.Country",
            "select avg(airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports",
            "airlines airports"
        ],
        "align_scores": [
            0.9806802868843079,
            0.000262889196164906,
            0.00033012943458743393,
            7.114304025890306e-05,
            0.0001357608416583389,
            5.640985909849405e-05,
            0.0014060757821425796,
            6.12338917562738e-05
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the names of airports in Aberdeen?",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportName, airports.AirportCode",
            "select airports.AirportName, airports.AirportCode, airports.Country",
            "select avg(airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9846357107162476,
            0.00026606605388224125,
            0.00030697122565470636,
            7.264871237566695e-05,
            0.000136680988362059,
            5.639974551741034e-05,
            0.0013115891488268971,
            6.198756454978138e-05
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me which airport has the name Aberdeen.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.City, airports.AirportCode, airports.AirportName",
            "select airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.021100293844938278,
            0.00013844430213794112,
            0.00019144151883665472,
            6.152116839075461e-05,
            0.00014513821224682033,
            6.576177838724107e-05,
            0.00035048520658165216,
            6.728741573169827e-05
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In how many fligs departs from airport, source, at, number, 'APG'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*) aeroport, flights.SourceAirport, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights"
        ],
        "align_scores": [
            0.0031873960979282856,
            0.00036505350726656616,
            9.698797657620162e-05,
            0.0001915903703775257,
            9.698797657620162e-05,
            0.0001915903703775257,
            0.00012798169336747378,
            0.00012268617865629494
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the number of flights departing from the city called 'APG'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City, flights.FlightNo",
            "select count(distinct flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9942922592163086,
            0.00015120966418180615,
            0.0003072394465561956,
            0.0033200476318597794,
            0.00013620403478853405,
            7.627953891642392e-05,
            0.0007049731211736798,
            0.00011419967631809413
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of flights departing from 'APG'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), flights.SourceAirport",
            "select count(*), flights.SourceAirport, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9957607388496399,
            0.0001110307130147703,
            0.000281723914667964,
            0.0001664569426793605,
            0.00031996957841329277,
            0.00034384275204502046,
            0.00011436967179179192,
            0.00010563809337327257
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give an answer to the question \"How many flights leave from 'APG'?\".",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*). SELECT-FROM-WHERE",
            "select count(*), flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9953292608261108,
            0.00022058174363337457,
            0.00033077396801672876,
            0.0002664334315340966,
            0.00050525733968243,
            0.00010023715003626421,
            0.0004117927164770663,
            0.0006998168537393212
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of flights departing from 'APG'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), flights.SourceAirport",
            "select count(*), flights.SourceAirport, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9949893355369568,
            0.00012734626943711191,
            0.0002865023270715028,
            0.00016416917787864804,
            0.00033353272010572255,
            0.0003702843969222158,
            0.0001243949809577316,
            0.00010221423872280866
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the number of flights leaving from the source airport 'APG'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.SourceAirport",
            "select count(*), airports.AirportCode",
            "select count(*), airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9955599308013916,
            0.00013743009185418487,
            0.00032959546661004424,
            0.000577857659664005,
            0.0002797971828840673,
            0.00016761181177571416,
            0.00035934842890128493,
            0.00013860175386071205
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In what number of departures there in departing flights from source airport of code APG?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct flights.FlightNo)",
            "select count(daily)",
            "select count(destroys)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9820535182952881,
            0.0045785908587276936,
            0.012964132241904736,
            0.0008454662165604532,
            0.11132621765136719,
            0.0006474305992014706,
            0.025759795680642128,
            0.000657548604067415
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In how many flights has the destination been ATO?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.SourceAirport",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9386734366416931,
            0.0005773155717179179,
            0.00034683194826357067,
            0.00018944358453154564,
            0.0001294772810069844,
            9.380625851918012e-05,
            0.0004200072435196489,
            0.0006245714612305164
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In how many flights does ATO has destination?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), flights.SourceAirport",
            "select flights.SourceAirport, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.7672939896583557,
            0.0007362247561104596,
            0.0003539057506714016,
            0.0005933212814852595,
            0.00033548474311828613,
            0.0002183007454732433,
            0.0005397041095420718,
            0.0004157167859375477
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of all air routes to destination airport ATO?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), airports.AirportCode, flights.SourceAirport",
            "select count(*), airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9945690631866455,
            0.00014281482435762882,
            0.00021031356300227344,
            0.0002379451907472685,
            0.00014711650146637112,
            0.0001589691819390282,
            0.0001730216754367575,
            0.00013509063865058124
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights flew to ATO?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.SourceAirport",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.8975443840026855,
            0.00013579061487689614,
            0.0002184556651627645,
            0.00025839859154075384,
            0.00010068192204926163,
            0.00010284387099090964,
            0.00031617365311831236,
            0.0004261426511220634
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights flew to destination airport ATO?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), airports.AirportCode",
            "select count(*), flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9948168396949768,
            0.00019134061585646123,
            0.0002498373214621097,
            0.00033756144694052637,
            0.0002498373214621097,
            0.00033756144694052637,
            0.00021454255329445004,
            0.0013813684927299619
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the number of flights arriving to ATO.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), flights.SourceAirport",
            "select count(avg(flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9806052446365356,
            0.00013507310359273106,
            0.00019374373368918896,
            0.00041919606155715883,
            0.0001775068521965295,
            0.0004002600908279419,
            0.00021357208606787026,
            0.00010387957445345819
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the total number of flights arriving at destination airport ATO?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*) descended at airports.AirportCode",
            "select count(*) aeroportcode flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights",
            "flights"
        ],
        "align_scores": [
            0.9951514005661011,
            0.00033827530569396913,
            0.00024712327285669744,
            0.0002632189716678113,
            0.00045127730118110776,
            0.00015694659668952227,
            0.00034221154055558145,
            0.0001466397661715746
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In how many flights does City Aberdeen departure?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(distinct flights.FlightNo)",
            "select count(*), airports.City, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9937263131141663,
            0.0002907689777202904,
            0.00030426151352003217,
            0.000385408871807158,
            0.0026495123747736216,
            0.00013582661631517112,
            0.0001470023562433198,
            0.00010969681898131967
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the number of flights departing from City Airport Aberdeen?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City, airports.AirportName",
            "select count(distinct flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9952917098999023,
            0.00011140698188683018,
            0.000313846452627331,
            0.00038293402758426964,
            0.00017904657579492778,
            0.0001049528073053807,
            0.009433071129024029,
            9.789998875930905e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of flights departing from City Aberdeen?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(distinct flights.FlightNo)",
            "select count(*), airports.City, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9951305389404297,
            0.00012361067638266832,
            0.00023813745065126568,
            0.0006676773773506284,
            0.0023761517368257046,
            9.623962250771001e-05,
            0.00015795502986293286,
            0.00011198479478480294
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of flights leaving to Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City, flights.SourceAirport",
            "select count(distinct flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9943148493766785,
            0.00015220462228171527,
            0.0002846455026883632,
            0.00027310100267641246,
            0.000136697810376063,
            9.460197907174006e-05,
            0.0008433436742052436,
            8.455828356090933e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want to know the numbers of flights departed from Aberdeen airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportName",
            "select count(*), airports.City, airports.AirportName",
            "select count(*), airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9943777918815613,
            0.00012574200809467584,
            0.0002697747549973428,
            0.00034132302971556783,
            0.00013098507770337164,
            0.00010195005597779527,
            0.000298480736091733,
            0.0015030218055471778
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights arrived to city Aberdeen?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City, flights.FlightNo",
            "select count(avg(flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights",
            "airports airports flights"
        ],
        "align_scores": [
            0.9959511756896973,
            0.0001711103250272572,
            0.00023704941850155592,
            0.0017558877589181066,
            0.0001291224325541407,
            7.720439316472039e-05,
            0.00028699467657133937,
            9.962984040612355e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of the flight departures to City 'Ashley' from Airport 'Aberdeen', how many were there to City 'Aberdeen'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.SourceAirport",
            "select count(distinct flights.FlightNo)",
            "select count(*), flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.01694757491350174,
            0.00028167080017738044,
            0.00028952088905498385,
            0.0004932503798045218,
            0.0001520495570730418,
            0.00012423188309185207,
            0.00019877729937434196,
            0.00012868890189565718
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of flights departing from City 'Aberdeen' to City 'Ashley'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City, airports.AirportName",
            "select count(*), airports.City",
            "select count(distinct flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9947836995124817,
            0.00015274940233211964,
            0.0001171228796010837,
            7.472299330402166e-05,
            0.0001927882549352944,
            0.003072219667956233,
            0.0009543292690068483,
            0.00011884723062394187
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the number of flights from City Aberdeen to Ashley.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City, airports.AirportName",
            "select count(*), airports.City (Aberdeen, airports.AirportName)",
            "select count(*) dependant on airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9962834715843201,
            0.0001908009871840477,
            0.00013011119153816253,
            7.970431033754721e-05,
            0.00015540662570856512,
            9.030793444253504e-05,
            0.00018875299429055303,
            0.000103415732155554
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights depart from City 'Aberdeen' to City 'Ashley'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City, airports.AirportName",
            "select count(*), airports.City",
            "select count(*), airports.City (Aberdeen, airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9947924017906189,
            0.0002150369546143338,
            0.00012168289686087519,
            7.855931471567601e-05,
            0.0001818956370698288,
            0.000253307749517262,
            0.00018729119619820267,
            0.0001535316405352205
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of flights departing from City 'Aberdeen' to City 'Ashley'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City, airports.AirportName",
            "select count(*), airports.City",
            "select count(*) aeroports airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9938587546348572,
            0.00014855150948278606,
            0.00012779695680364966,
            7.793455006321892e-05,
            0.00017264035705011338,
            0.0038280077278614044,
            0.0001668341865297407,
            0.00010127256973646581
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the number of flights that airline 'JetBlue Airways' has?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*) the airlines.Airline, flights.Airline",
            "select count(*) the airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9948798418045044,
            0.00017904624110087752,
            0.000361693644663319,
            0.003370376303792,
            0.00019119562057312578,
            0.00010757745621958748,
            0.00022261682897806168,
            0.00010155572090297937
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the total flight number of JetBlue Airways.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select sum(flights.FlightNo)",
            "select count(*), airlines.Airline",
            "select sum(flights.FlightNo), airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9948746562004089,
            0.00023879633226897568,
            0.9960095882415771,
            0.0001800110039766878,
            0.00026825026725418866,
            0.017130780965089798,
            0.000137720417114906,
            0.2641553580760956
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the number of JetBlue Airways flights?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, flights.FlightNo",
            "select count(*), airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.995219886302948,
            0.00035486588603816926,
            0.00026061717653647065,
            0.06455367803573608,
            0.00012923280883114785,
            0.00014120290870778263,
            0.00012923280883114785,
            0.00014120290870778263
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of flight of JetBlue Airways.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, flights.FlightNo",
            "select count(*), airlines.Airline, flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9962412118911743,
            0.00017996106180362403,
            0.00023766701633576304,
            0.015804966911673546,
            0.00012262113159522414,
            0.0001801322359824553,
            0.00013010797556489706,
            0.00010525919788051397
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the number of Jetblue Airways flights?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, flights.FlightNo",
            "select count(*), airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.995219886302948,
            0.00035486588603816926,
            0.00026061717653647065,
            0.06455367803573608,
            0.00012923280883114785,
            0.00014120290870778263,
            0.00012923280883114785,
            0.00014120290870778263
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of flights on JetBlue Airways?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, flights.Airline",
            "select count(*), airlines.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9954200983047485,
            0.00024304531689267606,
            0.0002539536508265883,
            0.01069114450365305,
            0.00013796855637338012,
            9.899062570184469e-05,
            0.00012914066610392183,
            0.0001342244358966127
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In total, how many flights from airport 'ASY' do United airlines operate to?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select sum(flights.FlightNo)",
            "select flights.Airline, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9691638946533203,
            0.0010817503789439797,
            0.000505652918945998,
            0.08524180203676224,
            0.38930976390838623,
            0.00027927779592573643,
            0.0009395504021085799,
            0.48623162508010864
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the count numbers of United Airlines flights arriving in ASY Airport?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportCode",
            "select count(*), airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9747462868690491,
            0.000168980797752738,
            0.0002639742160681635,
            0.06019570305943489,
            0.00012786885781679302,
            0.00030220142798498273,
            0.00021081730665173382,
            0.0010505829704925418
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of United Airlines flights arriving at ASY airport?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportCode",
            "select count(*), flights.SourceAirport, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.956732988357544,
            0.00020963468705303967,
            0.00031113449949771166,
            0.01431641262024641,
            0.00013629134627990425,
            0.00016737465921323746,
            0.00012117711594328284,
            0.0001470270217396319
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For each flight, can you tell me the number of United Airlines flights originating in ASY?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select flights.FlightNo, count(*)",
            "select flights.Airline, count(*)",
            "select airlines.Airline, count(*)",
            "select flights.FlightNo, count(*), airlines.Airline"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.8812525868415833,
            0.0002309795090695843,
            0.9054410457611084,
            0.00012996872828807682,
            0.7482041716575623,
            0.0001502395753050223,
            0.005417240783572197,
            0.0001058072448358871
        ],
        "align_select": "select flights.FlightNo, count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Give me the number of 'United Airlines' flights departing from Airport 'AHD'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9958488941192627,
            0.00018690120487008244,
            0.00013445387594401836,
            0.00014521062257699668,
            0.000297858496196568,
            0.05671517178416252,
            0.00015437898400705308,
            0.00014015607303008437
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights by 'United Airlines' depart from Airport 'AHD'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9950994849205017,
            0.00022802808962296695,
            0.00012044319737469777,
            0.00017540772387292236,
            0.00033778391662053764,
            0.14491026103496552,
            0.00015624970546923578,
            0.00018041410658042878
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights by airline 'United Airlines' depart from Airport 'AHD'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9946115016937256,
            0.000276365433819592,
            0.00011885980347869918,
            0.00017292340635322034,
            0.00028426715289242566,
            0.21131393313407898,
            0.00018442865984980017,
            0.0002944772131741047
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of United Airlines flight departing from AHD?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), airlines.Airline, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9940073490142822,
            0.00015603695646859705,
            0.00030772725585848093,
            0.059315524995326996,
            0.00012875064567197114,
            0.00014190126967150718,
            0.0001477249024901539,
            0.00022154457110445946
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of United Airlines departures from AHD airport?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select flights.Airline, count(*)",
            "select count(distinct flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9919936656951904,
            0.00019792454259004444,
            0.0003521294565871358,
            0.026660894975066185,
            0.0011375854955986142,
            0.18938790261745453,
            0.0020570240449160337,
            0.00011954612273257226
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please return the number of United Airlines departures from AHD Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), airlines.Airline, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9878602623939514,
            0.0001791592949302867,
            0.00030221266206353903,
            0.01929386518895626,
            0.00011000058293575421,
            0.00010782569006551057,
            0.00013878243044018745,
            0.0003015159163624048
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you count the number of United Airlines flights arriving at Aberdeen Airport?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airports.AirportName",
            "select count(*), airlines.Airline, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9940582513809204,
            0.00018318551883567125,
            0.00029200941207818687,
            0.07611725479364395,
            0.000441564479842782,
            0.0002160865842597559,
            0.00016953227168414742,
            0.00011437709326855838
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the count of the number of United Airlines flights arriving to Aberdeen?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select flights.Airline, count(*)",
            "select count(*), airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9951613545417786,
            0.00014119778643362224,
            0.0002747905673459172,
            0.1609111875295639,
            0.0007613813504576683,
            0.16910405457019806,
            0.0003512547118589282,
            0.0014198633143678308
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the total number of United Airlines flights that arrive to Aberdeen?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportName",
            "select flights.Airline, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9934754967689514,
            0.0010182453552260995,
            0.0003617243201006204,
            0.006851304322481155,
            0.0001616478111827746,
            0.00010130569717148319,
            0.001199908903799951,
            0.08373507112264633
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "From which city did most number of flights arrive?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, flights.SourceAirport",
            "select airports.City, airports.AirportName",
            "select airports.City, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9947033524513245,
            5.779587081633508e-05,
            0.001223027124069631,
            5.675091233570129e-05,
            0.00019969750428572297,
            5.396608685259707e-05,
            0.001223027124069631,
            5.675091233570129e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Where do most planes arrive from?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select flights.SourceAirport",
            "select airports.AirportName",
            "select flights.SourceAirport, airports.AirportName",
            "select flights.SourceAirport, flights.DestAirport"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9956620335578918,
            8.826479461276904e-05,
            0.7993854880332947,
            0.000133406269014813,
            0.0010778916766867042,
            5.936300294706598e-05,
            0.0005495467339642346,
            5.792774391011335e-05
        ],
        "align_select": "select flights.SourceAirport",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which city does most number of arriving flights arrive?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, flights.SourceAirport",
            "select airports.City, airports.AirportName",
            "select airports.City, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9918100237846375,
            5.805799082736485e-05,
            0.00046998928883112967,
            5.487258022185415e-05,
            0.00022720621200278401,
            5.462260378408246e-05,
            0.0004627449088729918,
            5.966748358332552e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me which city has the most frequent destination airport?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, airports.AirportName",
            "select airports.City, airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airports"
        ],
        "align_scores": [
            0.9933266639709473,
            7.739059219602495e-05,
            0.0012035226682201028,
            7.355590787483379e-05,
            0.00028747503529302776,
            7.280932914000005e-05,
            0.0037938212044537067,
            7.816244760761037e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the city whose airport serves the most number of destinations.",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, airports.AirportCode",
            "select airports.City, airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9875918626785278,
            5.9246947785140947e-05,
            0.0020191108342260122,
            6.362258136505261e-05,
            0.0002041231346083805,
            6.159700569696724e-05,
            0.0013608864974230528,
            6.1658131016884e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the city whose airport receives the most frequent flights?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, airports.AirportName",
            "select airports.City, airports.AirportCode",
            "select airports.City, airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.991926372051239,
            6.584436778211966e-05,
            0.003076753346249461,
            7.477446342818439e-05,
            0.005096785258501768,
            7.71010309108533e-05,
            0.00025188157451339066,
            6.937474972801283e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the city with most number of departing flights?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, flights.SourceAirport",
            "select airports.City, flights.SourceAirport, flights.DestAirport",
            "select airports.City, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.984264612197876,
            6.464168836828321e-05,
            0.003216021228581667,
            6.946027860976756e-05,
            0.0005265521467663348,
            6.422809383366257e-05,
            0.001388351316563785,
            6.588442920474336e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "The city with most frequent origin/destination airports from and to which city respectively is.....",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City, airports.AirportName",
            "select airports.City, airports.AirportName, airports.Country",
            "select airports.City, airports.AirportCode",
            "select airports.City, airports.City"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.19508440792560577,
            0.0002417639916529879,
            0.00016310256614815444,
            0.00010001764167100191,
            0.5157446265220642,
            0.00036782052484340966,
            0.9196314811706543,
            0.0001702800946077332
        ],
        "align_select": "select airports.City, airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which city is the most frequently used airport to travel from?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, airports.AirportName",
            "select airports.City, airports.AirportName, airports.Country",
            "select airports.City, airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9915493726730347,
            7.014241418801248e-05,
            0.0026879198849201202,
            6.0413865867303684e-05,
            0.0001611957559362054,
            5.901958866161294e-05,
            0.0003981145564466715,
            6.448006752179936e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you show me the city of the most frequent source airport?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportCode",
            "select airports.City, airports.AirportCode-, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9950260519981384,
            7.369816012214869e-05,
            0.00032403646036982536,
            6.678520730929449e-05,
            0.0023190693464130163,
            6.813318759668618e-05,
            0.0002212570543633774,
            5.6962042435770854e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which airport has the highest number of flights? List its code.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode IATA-CONTROL-EXCEPT-CONTROL-EXCEPT-CONTROL-GROUP BY-ORDER BY-LIMIT",
            "select airports.AirportCode IATA-CONTROL-EXCEPT-CONTROL-EXCEPT-CONTROL - SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9896753430366516,
            7.623285637237132e-05,
            0.003936063032597303,
            8.502433047397062e-05,
            0.00028876884607598186,
            0.00015964136400725693,
            0.0005101268761791289,
            0.0002599174331407994
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the code of the airport with the highest number of flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode (airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9929677248001099,
            6.74590773996897e-05,
            0.005093379411846399,
            6.824034790042788e-05,
            0.005093379411846399,
            6.824034790042788e-05,
            0.029173823073506355,
            5.7632085372461006e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the airport code with the highest number of flights?",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode (airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9924657344818115,
            7.242238643812016e-05,
            0.004504452925175428,
            7.821791950846091e-05,
            0.00044431068818084896,
            8.419042569585145e-05,
            0.03935670480132103,
            6.423140439437702e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the airport code that has the highest number of flight.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9880799651145935,
            6.884442700538784e-05,
            0.0028241139370948076,
            6.637239130213857e-05,
            0.00036513892700895667,
            7.295305113075301e-05,
            0.0028241139370948076,
            6.637239130213857e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which airport do most flights take place? Give its airport code.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, flights.SourceAirport",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9839786887168884,
            8.50797223392874e-05,
            0.004429755266755819,
            6.707893044222146e-05,
            0.001134539139457047,
            6.461056182160974e-05,
            0.004429755266755819,
            6.707893044222146e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "The airport with most flights has what airport code?",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode IATA-CONTROL-EXCEPT-CONTROL-EXCEPT-CONTROL-EXCEPT-CONTROL-EXCEPT-CONTROL-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-",
            "select airports.AirportCode IATA-CONTROL-EXCEPT-CONTROL-EXCEPT-CONTROL-EXCEPT-CONTROL-EXCEPT-CONTROL-EXCEPT-CONTROL-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-",
            "select airports.AirportCode IATA-CONTROL-EXCEPT-CONTROL-EXCEPT-CONTROL-EXCEPT-CONTROL-EXCEPT-CONTROL-EXCEPT-CONTROL-EXCEPT-EXCEPT-CONTROL-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-EXCEPT-"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9928943514823914,
            6.475651025539264e-05,
            0.0010587646393105388,
            0.00013098133786115795,
            0.001040167873725295,
            0.00012559749302454293,
            0.0008472403860650957,
            0.0001220880658365786
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you show me the number and airport code of the airport with the most flights?",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportName, airports.AirportCode",
            "select count(*), airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.0004395151336211711,
            7.725845352979377e-05,
            0.9544865489006042,
            0.00011839195212814957,
            0.0003174352168571204,
            7.118559733498842e-05,
            0.0009213265147991478,
            0.0001049024795065634
        ],
        "align_select": "select count(*), airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which airport has the most flights? Give its airport code.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode (airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9779550433158875,
            8.597465784987435e-05,
            0.005502926651388407,
            7.371503306785598e-05,
            0.005502926651388407,
            7.371503306785598e-05,
            0.02931014448404312,
            6.909269723109901e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which airport has fewest number of flights? List its code.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9908168315887451,
            7.807595829945058e-05,
            0.0033842111006379128,
            7.908901170594618e-05,
            0.0004240945272613317,
            7.65682925703004e-05,
            0.0033842111006379128,
            7.908901170594618e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give me the code of the airport with the least flights?",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode (airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9934681057929993,
            7.769286457914859e-05,
            0.005805629771202803,
            6.900946755195037e-05,
            0.0004162941768299788,
            7.145907147787511e-05,
            0.03543063625693321,
            6.153954018373042e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me which airline has most number of flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9911965131759644,
            6.0254613345023245e-05,
            0.0006529369275085628,
            5.719811815652065e-05,
            0.005337491165846586,
            6.776675581932068e-05,
            0.000498359149787575,
            5.6122149544535205e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the airline serving the most flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9930122494697571,
            6.38757846900262e-05,
            0.01092866063117981,
            6.988190580159426e-05,
            0.000763008720241487,
            6.168495019664988e-05,
            0.0004047699912916869,
            5.9435784351080656e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which airline has the most flights? List them here.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9930619597434998,
            6.925365596543998e-05,
            0.0005231567192822695,
            6.259961082832888e-05,
            0.0046809520572423935,
            7.331430970225483e-05,
            0.0004559159278869629,
            6.0759251937270164e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What airlines serve most flights? What airline has the highest number of flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9897534847259521,
            0.00010000657493947074,
            0.006868098862469196,
            9.53231574385427e-05,
            0.5257096886634827,
            6.776546797482297e-05,
            0.0003110796387773007,
            6.532500992761925e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which airline do you fly the most these days?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, flights.FlightNo",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9844474792480469,
            6.101286635384895e-05,
            0.0005148944910615683,
            6.171235872898251e-05,
            0.00040733328205533326,
            5.673186751664616e-05,
            0.005252629518508911,
            6.605056842090562e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What airlines have the fewest number of flights? List them by abbreviation and country.",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.uid, airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.0011109007755294442,
            8.822632662486285e-05,
            0.991643488407135,
            8.762641664361581e-05,
            0.0002474571519996971,
            7.62040726840496e-05,
            0.9826875329017639,
            8.806284313322976e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are airlines whose flights depart from airport 'AHD'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.Airline"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights",
            "flights"
        ],
        "align_scores": [
            0.993509829044342,
            0.0005231004324741662,
            0.9926807284355164,
            0.0005716116866096854,
            0.0003970864927396178,
            0.00010420756734674796,
            0.0004426144587341696,
            0.00010830166138475761
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For which airlines can I find some flights from airport 'AHD'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.9565203785896301,
            0.0010447680251672864,
            0.9817412495613098,
            0.0010849683312699199,
            0.0004231608472764492,
            0.0001008342151180841,
            0.0002075663796858862,
            9.813402721192688e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me airlines that have flights departing from airport 'AHD'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select airlines.Airline, airports.AirportName",
            "select flights.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9926039576530457,
            0.0007154000923037529,
            0.9904877543449402,
            0.000793506798800081,
            0.00021831573394592851,
            0.0001252451620530337,
            0.0002093570219585672,
            9.12154937395826e-05
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me which airlines have flights departing from airport 'AHD'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select airlines.Airline, airports.AirportName",
            "select flights.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.992312490940094,
            0.0022494327276945114,
            0.9898099899291992,
            0.002904440276324749,
            0.0002002943801926449,
            0.00011264861677773297,
            0.0001985155395232141,
            9.396365203429013e-05
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the airlines that fly out of airport AHD.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select airlines.Airline, airports.AirportName",
            "select flights.Airline, airports.AirportName"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9907562136650085,
            0.001314086839556694,
            0.9882218241691589,
            0.0009295168565586209,
            0.0002027886948781088,
            9.289915760746226e-05,
            0.00022104533854871988,
            9.97786337393336e-05
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the airline that has flights from AHD to source airport AHD.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.09899471700191498,
            0.00020326257799752057,
            0.07776414602994919,
            0.00020900041272398084,
            0.00044166826410219073,
            9.434370440430939e-05,
            0.00029273665859363973,
            0.00010321268200641498
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For which airlines does a flight has AHD in its source airport?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select distinct airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.4129374325275421,
            0.016671176999807358,
            0.6930012106895447,
            0.0007941426592878997,
            0.00025833057588897645,
            0.0001014030203805305,
            0.00033577525755390525,
            0.00016759952995926142
        ],
        "align_select": "select distinct airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me airlines that land at airport AHD.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select flights.Airline, airports.AirportCode",
            "select flights.Airline, airports.AirportName",
            "select flights.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9910755157470703,
            0.004178258124738932,
            0.00024974680854938924,
            0.0001306317135458812,
            0.00022508666734211147,
            0.00010739461140474305,
            0.00019760454597417265,
            0.0001472574076615274
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the airlines which have flights arriving at Airport AHD.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select flights.Airline, airports.AirportName",
            "select distinct flights.Airline"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9587710499763489,
            0.017120234668254852,
            0.9498222470283508,
            0.0029878290370106697,
            0.00028161355294287205,
            0.00011088659812230617,
            0.9580789804458618,
            0.000658391450997442
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you provide me with the names of airlines that fly from to airport 'AHD'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airports.AirportName",
            "select airports.AirportName, airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.9826543927192688,
            0.0018577680457383394,
            0.00018876776448450983,
            0.00010645089787431061,
            0.000359962199581787,
            0.00010551244486123323,
            0.0004085283144377172,
            0.00010553297761362046
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me which airlines have flights to airport 'AHD'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select airlines.Airline, airports.AirportName",
            "select distinct flights.Airline"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9935300946235657,
            0.0015599294565618038,
            0.9920765161514282,
            0.0019148333230987191,
            0.00018687483679968864,
            0.00011432639439590275,
            0.7525555491447449,
            0.0007243996951729059
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airlines serve airport AHD?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airports.AirportName",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9926064014434814,
            0.005296702031046152,
            0.00019525778770912439,
            9.552771371090785e-05,
            0.00036273422301746905,
            0.00011940440890612081,
            0.00017369545821566135,
            0.0001056895634974353
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the name of the airlines having flights with destination airport AHD?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airports.AirportName",
            "select airlines.Airline, flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9895350337028503,
            0.001889705890789628,
            0.0003638934576883912,
            0.00011322034697514027,
            0.00022521117352880538,
            0.00011451678437879309,
            0.000656692951451987,
            0.0001168079033959657
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the airlines that have flights to destination airport AHD.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select distinct flights.Airline",
            "select flights.Airline, flights.FlightNo",
            "select airlines.Airline"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9315228462219238,
            0.3805414140224457,
            0.9511624574661255,
            0.0009112812695093453,
            0.0002434978523524478,
            0.00010018278408097103,
            0.9439101815223694,
            0.04242832586169243
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find all airlines that fly from both airports 'APG' and 'CVO'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select flights.FlightNo",
            "select flights.Airline, airports.AirportName"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.9951157569885254,
            0.9951157569885254,
            0.9950851798057556,
            0.9950851798057556,
            0.24377208948135376,
            0.24377208948135376,
            0.0001923874078784138,
            0.0001923874078784138
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are all the airlines that fly between airport 'APG' and 'CVO'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select flights.Airline, airports.AirportName",
            "select flights.FlightNo"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9833178520202637,
            0.0133921317756176,
            0.9826124906539917,
            0.011463592760264874,
            0.000246887793764472,
            0.0001338491856586188,
            0.004487962927669287,
            0.002858660649508238
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find me all the airlines that fly out of airports 'APG' and 'CVO'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select flights.FlightNo",
            "select airlines.Airline",
            "select flights.Airline, airports.AirportCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9945705533027649,
            0.00031795224640518427,
            0.09806565940380096,
            0.0002443213015794754,
            0.9944843649864197,
            0.0003061718598473817,
            0.000288365496089682,
            8.883068949216977e-05
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the airlines that have flights originating from both airports 'APG' and 'CVO'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select flights.Airline, flights.SourceAirport",
            "select airlines.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "flights",
            "airports flights"
        ],
        "align_scores": [
            0.9935979843139648,
            0.9935979843139648,
            0.9936522245407104,
            0.9936522245407104,
            0.0003369796322658658,
            0.0003369796322658658,
            0.0004760691663250327,
            0.0004760691663250327
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the list of all airlines whose flight information includes both APG and CVO.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select flights.Airline, flights.SourceAirport",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "flights",
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9933798313140869,
            0.3270186483860016,
            0.9929996728897095,
            0.3704814016819,
            0.0002593703684397042,
            0.0002596669946797192,
            0.00034280974068678916,
            0.0003049314836971462
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find airlines whose flights start at airport 'CVO' and do not end up at 'APG'.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select airlines.Airline",
            "select flights.Airline, flights.SourceAirport",
            "select flights.Airline, flights.FlightNo"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "flights",
            "airlines airports flights",
            "airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9782504439353943,
            0.9782504439353943,
            0.9869458079338074,
            0.9869458079338074,
            0.0003811547067016363,
            0.0003811547067016363,
            0.00023131206398829818,
            0.00023131206398829818
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all airline names which both have flights from CVO but not from APG.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9932268261909485,
            0.9932268261909485,
            0.00029049909790046513,
            0.00029049909790046513,
            0.0006867939373478293,
            0.0006867939373478293,
            0.0006369644543156028,
            0.0006369644543156028
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me which air companies operate flights from CVO to not APG.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select flights.Airline",
            "select flights.Airline, flights.SourceAirport",
            "select flights.Airline, flights.FlightNo",
            "select flights.FlightNo"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "flights",
            "airlines flights",
            "airports flights"
        ],
        "align_scores": [
            0.9688439965248108,
            0.9370439052581787,
            0.00020908574515488,
            0.0003046254860237241,
            0.00022249843459576368,
            0.00022349797654896975,
            0.005856572184711695,
            0.3502263128757477
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the list of all airlines that have flights from airport CVO but not from APG.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.9903967380523682,
            0.9903967380523682,
            0.9885697960853577,
            0.9885697960853577,
            0.0005935882218182087,
            0.0005935882218182087,
            0.00030285792308859527,
            0.00030285792308859527
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "For all airlines where flight was originating from 'CVO', can you show the ones whose flight had no origin from 'APG'?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airports flights"
        ],
        "align_scores": [
            0.0036730363499373198,
            0.0020988858304917812,
            0.00014066859148442745,
            0.0002141338336514309,
            0.00012495886767283082,
            0.00029882811941206455,
            0.00013200484681874514,
            0.0004541587841231376
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all airlines which have departures from CVO (but not from airports in APG).",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, airports.AirportName",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.9882849454879761,
            0.9882849454879761,
            0.9888450503349304,
            0.9888450503349304,
            0.0002542405272834003,
            0.0002542405272834003,
            0.0004387848894111812,
            0.0004387848894111812
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "I want to see which airlines have departure schedules from CVO but not from any of the APG airports.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, airports.AirportName",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights",
            "flights"
        ],
        "align_scores": [
            0.9876621961593628,
            0.9679139256477356,
            0.9897560477256775,
            0.9727756381034851,
            0.0003861015138681978,
            0.00036505123716779053,
            0.0007405769429169595,
            0.000701586133800447
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of the airlines that has no flights departing from APG airport but only from CVO airport.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9606383442878723,
            0.9762129783630371,
            0.0005499176913872361,
            0.0005905519356019795,
            0.0005817346973344684,
            0.0007362955366261303,
            0.00023999487166292965,
            0.00023565067385789007
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of airlines leaving CVO and not leaving APG?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9939579963684082,
            0.9928098917007446,
            0.0005960128037258983,
            0.0006787196616642177,
            0.0004913439624942839,
            0.000412666704505682,
            0.00014579763228539377,
            0.0001466671674279496
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Of which airlines have there been flights departing CVO, but none departing from APG airports?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9755702018737793,
            0.9304221272468567,
            0.0005381949013099074,
            0.0005427844589576125,
            0.0006473014364019036,
            0.0008614651742391288,
            0.0002838032669387758,
            0.00027839330141432583
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give me all airlines with at least 10 flights in this list.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, flights.Airline",
            "select flights.Airline, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "airports flights",
            "flights"
        ],
        "align_scores": [
            0.9237940311431885,
            0.0001667958713369444,
            0.9882842302322388,
            0.00013718826812691987,
            0.00043176321196369827,
            6.249641592148691e-05,
            0.00038529722951352596,
            6.623278750339523e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all airlines with more than 10 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9859108924865723,
            0.00020695241983048618,
            0.0004490870051085949,
            7.118281064322218e-05,
            0.0024772295728325844,
            7.732825179118663e-05,
            0.00028761045541614294,
            7.04130288795568e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find every airline having more than 10 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9914523363113403,
            0.00016210004105232656,
            0.0005164580652490258,
            6.416436372091994e-05,
            0.0015857929829508066,
            7.279905548784882e-05,
            0.00019444515055511147,
            5.80233900109306e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all the airlines that have more than 10 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9782842993736267,
            0.00016860532923601568,
            0.0005857740761712193,
            6.614259473280981e-05,
            0.0024430241901427507,
            7.338915747823194e-05,
            0.0003257844364270568,
            7.29047242202796e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all airlines that have more than 10 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9821082353591919,
            0.0001921358925756067,
            0.0005147664924152195,
            7.093729800544679e-05,
            0.002442889614030719,
            7.403500057989731e-05,
            0.0003265002160333097,
            7.089611608535051e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all the airlines which have less than 200 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9848014712333679,
            0.00040988990804180503,
            0.0003872599045280367,
            7.487135735573247e-05,
            0.0019579227082431316,
            9.308572771260515e-05,
            0.00020243783365003765,
            7.728424679953605e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you find out which airlines fly fewer than 200 routes?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country",
            "select airlines.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9276572465896606,
            0.00047470154822804034,
            0.002349857008084655,
            0.00011568865738809109,
            0.0003856953699141741,
            9.00886079762131e-05,
            0.0022549412678927183,
            0.00010201228724326938
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you tell me how can I find airlines with fewer than 200 flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9597200751304626,
            0.0003342865384183824,
            0.00045082069118507206,
            8.165174222085625e-05,
            0.0031008715741336346,
            0.00014007028948981315,
            0.0003329491592012346,
            0.00011395090405130759
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all the airlines whose number of flights is lesser than 200.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.6267796754837036,
            0.0004003913782071322,
            0.0011872968170791864,
            8.886084833648056e-05,
            0.00024817496887408197,
            7.679350528633222e-05,
            0.00015384524886030704,
            7.635100337211043e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the list of airlines which have fewer than 200 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9548850655555725,
            0.00035887191188521683,
            0.002173708053305745,
            9.693462197901681e-05,
            0.0003639434289652854,
            8.09540506452322e-05,
            0.0001736045378493145,
            7.944086246425286e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all airlines which have less than 200 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9882810711860657,
            7.115179323591292e-05,
            0.0004204863798804581,
            5.5158292525447905e-05,
            0.002310690702870488,
            5.593002788373269e-05,
            0.00023524794960394502,
            4.952729432261549e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all the airlines with less than 200 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.8905286192893982,
            0.000578025879804045,
            0.0002536971296649426,
            8.647045615362003e-05,
            0.0013042556820437312,
            0.00010719143028836697,
            0.00015646679094061255,
            8.380706276511773e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "In which flights of airline United Airlines can we find these flight numbers?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airlines.Airline",
            "select distinct flights.FlightNo",
            "select flights.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9052423238754272,
            0.0015902346931397915,
            0.00019644771236926317,
            0.00012684971443377435,
            0.03871886804699898,
            0.0002639409794937819,
            0.00018061567971017212,
            0.00010905227100010961
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the flight numbers of \"United Airlines\"?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airlines.Airline",
            "select flights.FlightNo, airlines.Abbreviation",
            "select flights.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9935014843940735,
            0.00026086950674653053,
            0.00024548955843783915,
            6.81139063090086e-05,
            0.00040619808714836836,
            7.705487223574892e-05,
            0.00022226900910027325,
            8.036434155656025e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know which flight numbers belong to the Airlines called 'United Airlines'? Please mention them.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airlines.Abbreviation",
            "select distinct flights.FlightNo",
            "select flights.FlightNo, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.8511149883270264,
            0.0003897197893820703,
            0.0007354000117629766,
            9.040073928190395e-05,
            0.07432182878255844,
            0.00021640244813170284,
            0.0006928820512257516,
            9.415001841261983e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the flight numbers of Airline \"United Airlines\"?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airlines.Airline",
            "select flights.Airline, flights.FlightNo",
            "select flights.FlightNo, airlines.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9935508966445923,
            0.0003488479705993086,
            0.00024243337975349277,
            6.832044164184481e-05,
            0.00024839985417202115,
            8.0215344496537e-05,
            0.00019428279483690858,
            6.568907701876014e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the flight numbers of the airlines named \"United Airlines\".",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airlines.Abbreviation",
            "select flights.FlightNo, airlines.Airline",
            "select flights.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9924860000610352,
            0.0001891910214908421,
            0.00033720635110512376,
            7.584608829347417e-05,
            0.00027270783903077245,
            6.854597450001165e-05,
            0.0002746840182226151,
            7.141404057620093e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the flight numbers corresponding to United Airlines flights.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select distinct flights.FlightNo",
            "select flights.FlightNo, airlines.Airline",
            "select flights.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9939570426940918,
            0.0149240056052804,
            0.014265135861933231,
            0.0001527550775790587,
            0.0001815790601540357,
            8.595614053774625e-05,
            0.0001520513033028692,
            8.74988327268511e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the corresponding flight numbers to the United Airlines flights?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.Airline, flights.FlightNo",
            "select flights.FlightNo, airlines.Airline",
            "select flights.FlightNo, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9906479716300964,
            0.00034883100306615233,
            0.00016518762276973575,
            7.01747921993956e-05,
            0.00018849722982849926,
            6.653919263044372e-05,
            0.00033519029966555536,
            7.903388905106112e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the list of flight numbers corresponding to United Airlines flights?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select distinct flights.FlightNo",
            "select flights.FlightNo, airlines.Airline",
            "select flights.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9845407605171204,
            0.0003135453152935952,
            0.023997927084565163,
            0.00012927519856020808,
            0.0002005233254749328,
            7.292509690159932e-05,
            0.00017324455257039517,
            7.751186785753816e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me which United Airlines flight numbers correspond to which United Airlines flights.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airlines.Airline",
            "select flights.Airline, flights.FlightNo",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9867421984672546,
            0.02993174083530903,
            0.0005745774833485484,
            0.00012375398364383727,
            0.0001812109985621646,
            0.00013132636377122253,
            0.00041674409294500947,
            0.00013814194244332612
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the flight numbers of the United Airlines flights?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airlines.Airline",
            "select flights.Airline, flights.FlightNo",
            "select distinct flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.992339015007019,
            0.00041267770575359464,
            0.00019043729116674513,
            6.480234151240438e-05,
            0.00017121770360972732,
            7.551547605544329e-05,
            0.014594395644962788,
            0.00019224584684707224
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please find the flight numbers of flights departing from Airport \"APG\".",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9945889711380005,
            0.00018281421216670424,
            0.00015635583258699626,
            6.012202356941998e-05,
            0.00014260785246733576,
            6.30406939308159e-05,
            0.00016299683193210512,
            6.697078788420185e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the flight number of the flight which departs from Airport APG?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.SourceAirport, flights.DestAirport",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.978496789932251,
            0.00014324333460535854,
            0.0003651368315331638,
            6.240511720534414e-05,
            0.00021372691844590008,
            6.107597437221557e-05,
            0.00026851511211134493,
            6.637834303546697e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the flight numbers of the flights departing from Airport \"APG\"?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9931409955024719,
            0.000154502980876714,
            0.00017008878057822585,
            6.137214950285852e-05,
            0.00014229935186449438,
            6.774382927687839e-05,
            0.0001621124247321859,
            6.908993236720562e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which flights depart from the airport \"APG\" and which are their flight numbers?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.Airline, flights.FlightNo",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.0003165177768096328,
            8.478581003146246e-05,
            0.00597694655880332,
            0.00024063988530542701,
            0.0005252127884887159,
            7.213647768367082e-05,
            0.9929208159446716,
            0.00027259893249720335
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the departure flight numbers of the flights leaving from APG to?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.DestAirport",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo (flights.SourceAirport)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.46360018849372864,
            0.0001466973772039637,
            0.00037665743730030954,
            6.337498052744195e-05,
            0.00018225153326056898,
            6.064278932171874e-05,
            0.00043337815441191196,
            6.825811578892171e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the flight numbers for all the flights leaving from APG.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, flights.SourceAirport, flights.DestAirport",
            "select flights.FlightNo, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9859616160392761,
            9.08812289708294e-05,
            0.00020040787057951093,
            5.563500599237159e-05,
            0.0002484119322616607,
            5.923582284594886e-05,
            0.0002481650444678962,
            5.649901140714064e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the flight numbers of all the flights leaving from APG?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, flights.SourceAirport, flights.DestAirport",
            "select flights.FlightNo, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9831674695014954,
            0.000131189328385517,
            0.0001963952527148649,
            6.168153777252883e-05,
            0.00029906979762017727,
            6.396720709744841e-05,
            0.00026932451874017715,
            6.296258652582765e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the flight numbers of the flights departing from APG?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, flights.SourceAirport, flights.DestAirport",
            "select distinct flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9834347367286682,
            0.0001302750752074644,
            0.00016545323887839913,
            6.025185575708747e-05,
            0.0002786453114822507,
            5.9742305893450975e-05,
            0.02635881118476391,
            0.00010389441740699112
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give the flight numbers of any flight arriving at or leaving from the APG?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select avg(flights.FlightNo), avg(flights.FlightNo)",
            "select flights.FlightNo, flights.DestAirport",
            "select flights.FlightNo, flights.SourceAirport, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9742469191551208,
            0.7814986705780029,
            0.0003925605269614607,
            8.795097528491169e-05,
            0.0011215558042749763,
            0.0001659185072639957,
            0.0006463528843596578,
            0.00014989440387580544
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the flight numbers of the flights coming to Airport \"APG\"?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo, flights.SourceAirport",
            "select distinct flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9938067197799683,
            0.0001461918727727607,
            0.00012882260489277542,
            5.660406532115303e-05,
            0.00023005137336440384,
            6.117529846960679e-05,
            0.014111111871898174,
            9.532405965728685e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me all the flight numbers of flights arriving at Airport \"APG\".",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9837092161178589,
            0.00016226536536123604,
            0.00013352259702514857,
            5.727180541725829e-05,
            0.00021869740157853812,
            6.0188391216797754e-05,
            0.00012531982793007046,
            5.71994278288912e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the flight numbers of planes arriving at Airport \"(APG)\"?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9306947588920593,
            0.00011965903104282916,
            0.00022572281886823475,
            6.069624942028895e-05,
            0.00014218935393728316,
            5.601991870207712e-05,
            0.00012347838492132723,
            5.6972425227286294e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the flight numbers of the flights arriving from/to airport APG?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.DestAirport",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9292516112327576,
            0.0011171613587066531,
            0.0002505118609406054,
            7.070787978591397e-05,
            0.00029041102970950305,
            7.914008165244013e-05,
            0.0001470584247726947,
            6.66881533106789e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me flight numbers of the flights arriving at the airport named APG.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo, airports.AirportName, flights.DestAirport",
            "select flights.FlightNo, airports.AirportName, airports.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9646616578102112,
            9.951324318535626e-05,
            0.00012203580263303593,
            5.63340618100483e-05,
            0.00011261305189691484,
            5.61973502044566e-05,
            0.00012140415492467582,
            5.3096344345249236e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the flight numbers of planes arriving at APG airport.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, airports.AirportCode",
            "select flights.FlightNo, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9193530082702637,
            9.67910818872042e-05,
            0.00024323818797711283,
            5.451577453641221e-05,
            0.00013681294512934983,
            5.089230398880318e-05,
            0.00011504105350468308,
            4.793513653567061e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Could you give me the flight numbers of those arriving at APG Airport?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9039966464042664,
            0.00014574370288755745,
            0.00014879392983857542,
            5.140425855643116e-05,
            0.0002939490368589759,
            5.7976823882199824e-05,
            0.0001754838740453124,
            5.588854764937423e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the flight numbers of planes flying to APG?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.DestAirport",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9891371130943298,
            0.00013998124632053077,
            0.0002344896929571405,
            5.790256182081066e-05,
            0.00023959754616953433,
            5.7448265579296276e-05,
            0.0003089657111559063,
            5.920905095990747e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give the flight numbers of all the flights landing at APG.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, flights.DestAirport",
            "select flights.FlightNo, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9527121782302856,
            0.00016176437202375382,
            0.00024282597587443888,
            6.203853990882635e-05,
            0.000150470674270764,
            6.034937541699037e-05,
            0.00017255872080568224,
            5.824536856380291e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the flight numbers of the planes landing at APG airport?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo, flights.SourceAirport",
            "select flights.FlightNo, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9557936191558838,
            0.4812299609184265,
            0.00013307428162079304,
            0.00013448078243527561,
            0.0002990464854519814,
            0.0002617891295813024,
            0.0001903768425108865,
            0.0002504659933038056
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the flight numbers of flights departing from the city of Aberdeenshire.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.City, airports.AirportCode",
            "select flights.FlightNo, airports.City, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9801799058914185,
            0.00017929515161085874,
            0.00018941466987598687,
            6.517815927509218e-05,
            0.00014815937902312726,
            7.650229963473976e-05,
            0.000176347850356251,
            9.34928102651611e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the flight numbers for the flights departing from City \"Aberdeen\".",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.City, flights.FlightNo",
            "select distinct flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.992548406124115,
            0.00013921037316322327,
            0.00017287230002693832,
            6.250422302400693e-05,
            0.00016255417722277343,
            8.708420500624925e-05,
            0.01168415229767561,
            7.768560317344964e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Is there a list of the flight numbers of flights departing from city \"Aberdeen\"?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select distinct flights.FlightNo",
            "select list(flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9885711073875427,
            0.00024114058760460466,
            0.00017805607058107853,
            6.956527067814022e-05,
            0.024988142773509026,
            0.0001049491111189127,
            0.012451336719095707,
            8.606267510913312e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me about the flight numbers of flights departing from City \"Aberdeen\"?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.City, flights.FlightNo",
            "select flights.FlightNo, airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9888718724250793,
            0.00020526116713881493,
            0.00019306474132463336,
            7.370476669166237e-05,
            0.00017588520131539553,
            0.00010701778955990449,
            0.00015226269897539169,
            7.140566594898701e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the flight numbers of all flights departing from City \"Aberdeen \".",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.City, flights.FlightNo",
            "select flights.FlightNo, airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9930031895637512,
            0.0001530131121398881,
            0.00016671267803758383,
            6.455045513575897e-05,
            0.00015868220361880958,
            9.509854135103524e-05,
            0.0001397735468344763,
            6.189193663885817e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the flight numbers to depart from Aberdeen.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.AirportName",
            "select distinct flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.978689968585968,
            0.00010241581912850961,
            0.00020593551744241267,
            5.223014886723831e-05,
            0.000162930489750579,
            5.0222450227010995e-05,
            0.04084152728319168,
            0.00010474355076439679
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the flight numbers corresponding to departing flights from Aberdeen.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select distinct flights.FlightNo",
            "select flights.FlightNo, airports.City, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9851517081260681,
            0.00013780014705844223,
            0.00020443186804186553,
            5.630806481349282e-05,
            0.04816015437245369,
            8.551807695766911e-05,
            0.00014479637320619076,
            5.846841668244451e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the flight numbers leaving from Aberdeen.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.City, airports.AirportCode",
            "select flights.FlightNo, airports.City, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9915585517883301,
            0.00014833042223472148,
            0.0002169189101550728,
            5.7844175898935646e-05,
            0.0001516243355581537,
            6.443704478442669e-05,
            0.00014414216275326908,
            6.845276220701635e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the flight number for flights departing from Aberdeen?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select avg(flights.FlightNo)",
            "select distinct flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9866226315498352,
            0.000205138698220253,
            0.00022318003175314516,
            5.911325570195913e-05,
            0.0008295781444758177,
            6.296330684563145e-05,
            0.015483631752431393,
            0.00010502819350222126
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the flight numbers of flights departing from Aberdeen?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select distinct flights.FlightNo",
            "select flights.FlightNo, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9908087253570557,
            0.0002102800935972482,
            0.00022570429428014904,
            5.611487358692102e-05,
            0.012258999980986118,
            0.0001309645886067301,
            0.00015154571156017482,
            5.641244206344709e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all flight numbers landing at City Aberdeen.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.City, airports.AirportName",
            "select flights.FlightNo, airports.City, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.980268657207489,
            0.00013494078302755952,
            0.0002206707140430808,
            6.947021029191092e-05,
            0.0001419681211700663,
            6.241178198251873e-05,
            0.00016791943926364183,
            7.791009556967765e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For which flights arriving in Aberdeen can you give the flight number?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select distinct flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9718230962753296,
            0.00011969041224801913,
            0.027126142755150795,
            0.0002629109949339181,
            0.00025362989981658757,
            6.852041406091303e-05,
            0.00019227736629545689,
            6.53181632515043e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give the flight numbers of all flights arriving in Aberdeen.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select airports.City, flights.FlightNo",
            "select flights.FlightNo, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9711679816246033,
            0.0001312739186687395,
            0.00020016898633912206,
            5.7772838772507384e-05,
            0.0003031158703379333,
            8.121733844745904e-05,
            0.00014467298751696944,
            5.492393029271625e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me about the flight numbers of flights arriving in Aberdeen?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.AirportName",
            "select distinct flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9663152694702148,
            0.00017300517356488854,
            0.00022432865807786584,
            6.003562521073036e-05,
            0.00016944612434599549,
            5.8753917983267456e-05,
            0.029288750141859055,
            0.00010624797141645104
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which flights arrive in Aberdeen? Please give me the flight numbers.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.City, flights.FlightNo",
            "select flights.FlightNo, airports.City, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.873305082321167,
            0.00019070385314989835,
            0.00024257767654489726,
            7.219304097816348e-05,
            0.00018139214080292732,
            8.793956658337265e-05,
            0.00019017854356206954,
            7.653077045688406e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the flight numbers of the flights to arrive in Aberdeen?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9512778520584106,
            0.00017741105693858117,
            0.00022535808966495097,
            6.190552085172385e-05,
            0.00015648976841475815,
            5.959356712992303e-05,
            0.00019685608276631683,
            6.356667290674523e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The number of flights landing to the city of Aberdeen or Abilene is?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City, flights.FlightNo",
            "select count(*), airports.City, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9953727126121521,
            0.000183766707777977,
            0.0003319219686090946,
            0.5141918063163757,
            0.00012642428919207305,
            9.16913922992535e-05,
            0.0001385907962685451,
            0.00015095855633262545
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the airports which don't have any flights coming or going to them.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airports"
        ],
        "align_scores": [
            0.09584519267082214,
            0.49306032061576843,
            0.004031167831271887,
            0.006339384242892265,
            0.0004934123135171831,
            0.0005775566678494215,
            0.004007026087492704,
            0.004647396970540285
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show the airports that do not have flights in and out of them.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airports"
        ],
        "align_scores": [
            0.8232190608978271,
            0.021153129637241364,
            0.03376120328903198,
            0.0021976951975375414,
            0.0005598163115791976,
            0.0003787140594795346,
            0.02406749129295349,
            0.0022077288012951612
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "List all names of airports which have no air traffic in and out.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportName, airports.AirportCode",
            "select airports.AirportName, airports.AirportCode, airports.Country",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports",
            "airports flights"
        ],
        "align_scores": [
            0.445093035697937,
            0.7500306963920593,
            0.00033712456934154034,
            0.0012287151766940951,
            0.00016140754451043904,
            0.00018934495165012777,
            0.00043772897333838046,
            0.0016135021578520536
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What are the names of the airports which do not have any flights in or out?",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportName, airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportName, airports.AirportCode, airports.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.3512013256549835,
            0.5890858769416809,
            0.0005805169930681586,
            0.001826719962991774,
            0.0005792740266770124,
            0.002218428999185562,
            0.00019956733740400523,
            0.0002670783724170178
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Please list down all airports which do not have any flight in or out.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports",
            "airports flights"
        ],
        "align_scores": [
            0.08324278146028519,
            0.5888468623161316,
            0.003237116849049926,
            0.004154577851295471,
            0.00032934226328507066,
            0.00041519422666169703,
            0.005294429138302803,
            0.004584144800901413
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What are all the airports which don't have any outgoing/incoming flights?",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airports"
        ],
        "align_scores": [
            0.08543894439935684,
            0.8170872330665588,
            0.00879069697111845,
            0.03745396435260773,
            0.0003866249171551317,
            0.000731578329578042,
            0.007378327660262585,
            0.01659191958606243
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Where can I find list of airports without any departures or arrivals.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.AirportName, airports.AirportCode",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports",
            "airports flights"
        ],
        "align_scores": [
            0.010769190266728401,
            0.034124743193387985,
            0.00031110068084672093,
            0.0002279465552419424,
            0.0006471197120845318,
            0.0009174240985885262,
            0.0007475590682588518,
            0.0014220156008377671
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the airports which are source or destination airports without any flight at all.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportName, airports.Country",
            "select airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.8938594460487366,
            0.7851058840751648,
            0.00028060661861673,
            0.000725333287846297,
            0.0033878993708640337,
            0.4694013297557831,
            0.00029160515987314284,
            0.0011932349298149347
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM"
    },
    {
        "question": "Show me all the airports which do not have departing or arriving flights.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airports"
        ],
        "align_scores": [
            0.07361684739589691,
            0.8128332495689392,
            0.004564590286463499,
            0.1285266876220703,
            0.0003967085212934762,
            0.0006906053167767823,
            0.004596862941980362,
            0.11817183345556259
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "List all the airports in which there is neither departing nor incoming flight.",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airports"
        ],
        "align_scores": [
            0.20447158813476562,
            0.1813901960849762,
            0.0002545504830777645,
            0.0003875762631651014,
            0.003316661575809121,
            0.005558835342526436,
            0.0040627047419548035,
            0.005147448740899563
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which shop has the largest number of product sold? List its manager name and district.",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9899896383285522,
            0.00010402527550468221,
            0.06084613874554634,
            9.32262628339231e-05,
            0.00028973541338928044,
            7.547782297478989e-05,
            0.016121016815304756,
            0.00011244277993682772
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which shop has the largest number of products? Find the manager name and district.",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Manager_name, shop.Location",
            "select shop.Location, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9799326658248901,
            0.00010189737076871097,
            0.06412044912576675,
            9.579243487678468e-05,
            0.9384105801582336,
            0.00011247192742303014,
            0.8698498010635376,
            0.00011578832345549017
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please give me the information about hiring.",
        "gold_select": "select *",
        "select_candidates": [
            "select *",
            "select hiring.Shop_ID, hiring.Employee_ID",
            "select hiring.Shop_ID, hiring.Is_full_time",
            "select hiring.Shop_ID, hiring.Start_from"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "hiring",
        "table_candidates": [
            "hiring",
            "employee hiring",
            "employee shop hiring",
            "shop hiring",
            "hiring evaluation"
        ],
        "align_scores": [
            0.9328900575637817,
            0.2880955934524536,
            0.00018813132192008197,
            0.0001502303930465132,
            0.00038753339322283864,
            0.00022269473993219435,
            0.00020749200484715402,
            0.0001595036592334509
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me everything regarding hiring.",
        "gold_select": "select *",
        "select_candidates": [
            "select *",
            "select hiring.Shop_ID, hiring.Employee_ID",
            "select hiring.Shop_ID, hiring.Start_from",
            "select hiring.Shop_ID, hiring.Is_full_time"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "hiring",
        "table_candidates": [
            "hiring",
            "employee hiring",
            "employee shop hiring",
            "shop hiring"
        ],
        "align_scores": [
            0.9913098812103271,
            0.37636151909828186,
            0.00018874146917369217,
            0.00020556748495437205,
            0.00027104682521894574,
            0.0001870342093752697,
            0.00042021687841042876,
            0.0006374751683324575
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Provide all details about the hiring process.",
        "gold_select": "select *",
        "select_candidates": [
            "select *",
            "select hiring.Shop_ID, hiring.Start_from",
            "select hiring.Shop_ID, hiring.Employee_ID",
            "select hiring.Shop_ID, hiring.Is_full_time"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "hiring",
        "table_candidates": [
            "hiring",
            "employee hiring",
            "employee shop hiring",
            "shop hiring"
        ],
        "align_scores": [
            0.9791620969772339,
            0.003442036686465144,
            0.0002231626131106168,
            0.00013022053462918848,
            0.00020018784562125802,
            0.00010897607717197388,
            0.00029357848688960075,
            0.0001786942157195881
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all the info on hiring.",
        "gold_select": "select *",
        "select_candidates": [
            "select *",
            "select hiring.Shop_ID, hiring.Employee_ID",
            "select hiring.Shop_ID, hiring.Start_from",
            "select hiring.Shop_ID, hiring.Is_full_time"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "hiring",
        "table_candidates": [
            "hiring",
            "employee hiring",
            "employee shop hiring",
            "shop hiring"
        ],
        "align_scores": [
            0.9880394339561462,
            0.23603157699108124,
            0.00018527872452978045,
            0.00015223465743474662,
            0.0002581542939879,
            0.00015021750004962087,
            0.0003520178725011647,
            0.0004129570734221488
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the information on hiring?",
        "gold_select": "select *",
        "select_candidates": [
            "select *",
            "select hiring.Shop_ID, hiring.Employee_ID",
            "select hiring.Shop_ID, hiring.Is_full_time",
            "select hiring.Shop_ID, hiring.Start_from"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "hiring",
        "table_candidates": [
            "hiring",
            "employee hiring",
            "employee shop hiring"
        ],
        "align_scores": [
            0.9743083715438843,
            0.06502796709537506,
            0.00025635960628278553,
            0.00014628336066380143,
            0.0004397339653223753,
            0.0002945010783150792,
            0.00025822099996730685,
            0.00016093513113446534
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the total number of employees?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), employee.City",
            "select count(*), employee.Employee_ID",
            "select count(*), employee.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee",
            "employee hiring"
        ],
        "align_scores": [
            0.9937493801116943,
            7.695110252825543e-05,
            0.0002861821267288178,
            7.323465979425237e-05,
            0.00017531409685034305,
            7.324694888666272e-05,
            0.00022610666928812861,
            7.497065962525085e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "There are how many employees?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), employee.City",
            "select count(*), employee.Employee_ID",
            "select count(*), employee.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee",
            "employee hiring",
            "employee hiring evaluation"
        ],
        "align_scores": [
            0.9931027889251709,
            0.9931027889251709,
            0.00021671116701327264,
            0.00021671116701327264,
            0.00015784527931828052,
            0.00015784527931828052,
            0.000244336697505787,
            0.000244336697505787
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you provide me the number of employees?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), employee.City",
            "select count(*), employee.Employee_ID",
            "select count(*), employee.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee",
            "employee hiring",
            "employee hiring evaluation",
            "employee evaluation"
        ],
        "align_scores": [
            0.9653923511505127,
            7.258928962983191e-05,
            0.00030310373404063284,
            8.363142114831135e-05,
            0.00016885082004591823,
            7.08146981196478e-05,
            0.00022861346951685846,
            8.217094000428915e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you sort employee names by their ages in ascending order?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name an, employee.Age",
            "select employee.Name in employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9959773421287537,
            0.00028471575933508575,
            0.006977549754083157,
            0.00016988876450341195,
            0.0006417940021492541,
            0.00019664334831759334,
            0.001427174429409206,
            0.00027403709827922285
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you sort employee names in ascending order according to their ages?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Employee_ID, employee.Name",
            "select employee.Name de employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9958802461624146,
            0.0002764460805337876,
            0.0013025884982198477,
            0.0001378119777655229,
            0.00011341656500007957,
            0.00012181141210021451,
            0.007389942184090614,
            0.0002503118012100458
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you sort the employee's names by age in ascending order?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name in employee.Age",
            "select employee.Name dans employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9955641031265259,
            0.00025221676332876086,
            0.0012098513543605804,
            0.00014884515258017927,
            0.0008694241987541318,
            0.00031302470597438514,
            0.0020249662920832634,
            0.00030437641544267535
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you sort employee names by age in ascending order?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name in employee.Age",
            "select employee.Name de employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9940351843833923,
            0.00033171504037454724,
            0.0014349042903631926,
            0.00015767062723170966,
            0.0008633914403617382,
            0.0002938685938715935,
            0.004256692714989185,
            0.0002663183549884707
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you sort the employee names by their age in ascending order?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name in employee.Age",
            "select employee.Name de employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9963878393173218,
            0.00027817944646812975,
            0.0010488114785403013,
            0.00013343172031454742,
            0.001188738620840013,
            0.0002824740658979863,
            0.005805129650980234,
            0.00022559544595424086
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Could you list all the employee's names sorted in ascending order of age?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name, employee.Age, employee.City",
            "select employee.Name, employee.Age, employee.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9953338503837585,
            0.9953338503837585,
            0.0003354246146045625,
            0.0003354246146045625,
            0.00014007028948981315,
            0.00014007028948981315,
            0.00014007028948981315,
            0.00014007028948981315
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list all the employees by name and sort them in ascending order of age?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name, employee.Age",
            "select employee.Name",
            "select employee.Name, employee.Age, employee.City",
            "select employee.Employee_ID, employee.Name, employee.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.002630437957122922,
            0.002630437957122922,
            0.993523120880127,
            0.993523120880127,
            0.00013747531920671463,
            0.00013747531920671463,
            0.00013150621089152992,
            0.00013150621089152992
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list all the employee names in ascending order of age?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name in employee.Age",
            "select employee.Name and employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9951450228691101,
            0.9951450228691101,
            0.0004091312293894589,
            0.0004091312293894589,
            0.0011419157963246107,
            0.0011419157963246107,
            0.0024415350053459406,
            0.0024415350053459406
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list all the names of employees and sort them in ascending order of age?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name, employee.Age, employee.City",
            "select employee.Name, employee.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9950762391090393,
            0.9950762391090393,
            0.0005683025228790939,
            0.0005683025228790939,
            0.00014376675244420767,
            0.00014376675244420767,
            0.00013847771333530545,
            0.00013847771333530545
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all the employee numbers by city.",
        "gold_select": "select count(*), employee.City",
        "select_candidates": [
            "select employee.Employee_ID, employee.City",
            "select employee.Employee_ID, employee.City,",
            "select employee.Employee_ID, employee.City.",
            "select employee.Employee_ID0, employee.City"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.000654526287689805,
            0.690599799156189,
            0.000245556264417246,
            0.00036564594483934343,
            0.0002375285985181108,
            0.001289607142098248,
            0.0001885525998659432,
            0.00040635900222696364
        ],
        "align_select": "select employee.Employee_ID, employee.City",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you show me the number of employees from each city?",
        "gold_select": "select count(*), employee.City",
        "select_candidates": [
            "select employee.City, count(*)",
            "select count(*), employee.City",
            "select employee.City, count(*), employee.Employee_ID",
            "select employee.City.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9964494705200195,
            0.00015579893079120666,
            0.9963117241859436,
            0.0001559193042339757,
            0.0001337055437033996,
            8.741793863009661e-05,
            0.0017376121832057834,
            0.00014266115613281727
        ],
        "align_select": "select employee.City, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the employee numbers from each city.",
        "gold_select": "select count(*), employee.City",
        "select_candidates": [
            "select employee.Employee_ID, employee.City",
            "select count(*), employee.City",
            "select employee.Employee_ID, employee.City,",
            "select distinct employee.Employee_ID, employee.City"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.5542721748352051,
            0.0001452750148018822,
            0.9958808422088623,
            0.0002037227968685329,
            0.0007897433824837208,
            0.00010616663348628208,
            0.00020067268633283675,
            0.00010319969442207366
        ],
        "align_select": "select count(*), employee.City",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please give me the number of employees from each city.",
        "gold_select": "select count(*), employee.City",
        "select_candidates": [
            "select employee.City, count(*)",
            "select count(*), employee.City",
            "select employee.City, count(*), employee.Employee_ID",
            "select employee.City.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9968926310539246,
            0.0001722664455883205,
            0.9967905879020691,
            0.00018163963977713138,
            0.00013262598076835275,
            8.694307325640693e-05,
            0.0016986720729619265,
            0.00016382610192522407
        ],
        "align_select": "select employee.City, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the employee number of the employees coming from each city.",
        "gold_select": "select count(*), employee.City",
        "select_candidates": [
            "select employee.Employee_ID, employee.City",
            "select employee.City, count(*)",
            "select employee.City, employee.Employee_ID",
            "select employee.Name, employee.City"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9849409461021423,
            0.00021534037659876049,
            0.9965415596961975,
            0.00024122634204104543,
            0.994195282459259,
            0.0003166768583469093,
            0.00025385827757418156,
            0.00013472580758389086
        ],
        "align_select": "select employee.Employee_ID, employee.City",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Tell me the number of employees per city?",
        "gold_select": "select count(*), employee.City",
        "select_candidates": [
            "select employee.City, count(*)",
            "select count(*), employee.City",
            "select employee.City, count(*), employee.Employee_ID",
            "select employee.City, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9968050718307495,
            0.0001458230835851282,
            0.9966797828674316,
            0.00016030107508413494,
            0.00011851202725665644,
            8.259555033873767e-05,
            0.9968050718307495,
            0.0001458230835851282
        ],
        "align_select": "select employee.City, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you count the number of employees by city?",
        "gold_select": "select count(*), employee.City",
        "select_candidates": [
            "select count(*), employee.City",
            "select employee.City, count(*)",
            "select counts(*), employee.City",
            "select employee.City, count(*), employee.Employee_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.996367335319519,
            0.00015944204642437398,
            0.9967331886291504,
            0.00013618115917779505,
            0.0006974302814342082,
            0.00012010393402306363,
            0.00013160491653252393,
            8.993667870527133e-05
        ],
        "align_select": "select count(*), employee.City",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the cities where there are more than one employee under the age of 30.",
        "gold_select": "select employee.City",
        "select_candidates": [
            "select employee.City",
            "select employee.City, count(*)",
            "select employee.City Is-GROUP BY-HAVING",
            "select employee.City where there are a lot of employee.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.980544924736023,
            7.349918450927362e-05,
            0.005263857543468475,
            7.322404417209327e-05,
            0.00024886851315386593,
            9.504940680926666e-05,
            0.0006434062379412353,
            8.73657627380453e-05
        ],
        "align_select": "select employee.City",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Can you find all the cities that have more than one employee below the age of 30?",
        "gold_select": "select employee.City",
        "select_candidates": [
            "select employee.City",
            "select employee.City, count(*)",
            "select employee.City ASK-FROM-WHERE-GROUP BY-HAVING",
            "select employee.City Can you find the employee.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9878443479537964,
            0.0001119682565331459,
            0.022125180810689926,
            9.367540042148903e-05,
            0.0016760596772655845,
            0.00017349416157230735,
            0.005787471774965525,
            0.00010530660074437037
        ],
        "align_select": "select employee.City",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Can you find the cities with more than one employees under age 30? List them.",
        "gold_select": "select employee.City",
        "select_candidates": [
            "select employee.City",
            "select employee.City, count(*)",
            "select employee.City Is-GROUP BY-HAVING",
            "select employee.City, count(*), employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9863603115081787,
            0.00014642848691437393,
            0.010160180740058422,
            0.00010199905227636918,
            0.0003358831745572388,
            0.00013839219172950834,
            0.00012272897583898157,
            6.16553079453297e-05
        ],
        "align_select": "select employee.City",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Can you give the number of shops in each location?",
        "gold_select": "select count(*), shop.Location",
        "select_candidates": [
            "select shop.Location, count(*)",
            "select count(*), shop.Location",
            "select shop.Location, count(*), shop.District",
            "select shop.Location.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9965147376060486,
            0.0001573861372889951,
            0.9965697526931763,
            0.00016784468607511371,
            0.0002379422658123076,
            8.916429214878008e-05,
            0.0007767459028400481,
            0.00019286696624476463
        ],
        "align_select": "select shop.Location, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you find out the numbers of shops in the locations?",
        "gold_select": "select count(*), shop.Location",
        "select_candidates": [
            "select count(*), shop.Location",
            "select shop.Location, count(*)",
            "select counts(*), shop.Location",
            "select sum(shop.Shop_ID), shop.Location"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9952307343482971,
            0.00014414711040444672,
            0.9956048727035522,
            0.00016608915757387877,
            0.0007348452345468104,
            0.00013417951413430274,
            0.0010186004219576716,
            0.00011171559890499339
        ],
        "align_select": "select count(*), shop.Location",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the number of shops in each location.",
        "gold_select": "select count(*), shop.Location",
        "select_candidates": [
            "select shop.Location, count(*)",
            "select count(*), shop.Location",
            "select shop.Location, count(*), shop.District",
            "select shop.Location.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9968891739845276,
            0.00013296015094965696,
            0.9969237446784973,
            0.0001458264305256307,
            0.0002157164562959224,
            8.646880451124161e-05,
            0.0006827009492553771,
            0.00018870226631406695
        ],
        "align_select": "select shop.Location, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the number of shops at each location?",
        "gold_select": "select count(*), shop.Location",
        "select_candidates": [
            "select shop.Location, count(*)",
            "select count(*), shop.Location",
            "select shop.Location, count(*), shop.District",
            "select shop_shop.Location, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9966326355934143,
            0.00013067868712823838,
            0.9966326355934143,
            0.00014199494034983218,
            0.000350415037246421,
            7.54694701754488e-05,
            0.0010934340534731746,
            0.00013641409168485552
        ],
        "align_select": "select shop.Location, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List all the locations with the number of shops they contain.",
        "gold_select": "select count(*), shop.Location",
        "select_candidates": [
            "select shop.Location, count(*)",
            "select shop.Location, count(*), shop.District",
            "select shop.Location.c2, count(*)",
            "select shop.Location, count(*), shop.District, shop.Number_products"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9954454898834229,
            0.00015953042020555586,
            0.00030362833058461547,
            8.412991155637428e-05,
            0.0006150426343083382,
            0.0001680243294686079,
            0.00017943591228686273,
            0.00010078951163450256
        ],
        "align_select": "select shop.Location, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you give me the minimum and maximum number of products of all stores?",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select min(shop.District), max(shop.Number_products)",
            "select min(shop.Location), max(shop.Number_products)",
            "select min(shop.Manager_name), max(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.993939995765686,
            9.186721581500024e-05,
            0.00037684349808841944,
            8.710605470696464e-05,
            0.0007267589680850506,
            0.00012007966870442033,
            0.000444993085693568,
            0.00010321052104700357
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the minimum and maximum number of products sold by each store.",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select shop.Name, min(shop.Number_products), max(shop.Number_products)",
            "select min(shop.Number_products), max(shop.Number_products), shop.Name",
            "select min(shop.Number_products), max(shop.Number_products) for shop.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9941343665122986,
            0.9871618151664734,
            0.0041524069383740425,
            0.9919928312301636,
            0.00022872420959174633,
            0.9924957752227783,
            0.0012986863730475307,
            0.008740643970668316
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the minimum and maximum number of items out of all products of all stores?",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select min(shop.District), max(shop.Number_products)",
            "select min(shop.Location), max(shop.Location)",
            "select min(shop.Manager_name), max(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9935505390167236,
            0.000716238166205585,
            0.0005900880205444992,
            9.481313463766128e-05,
            0.0013760345755144954,
            0.004342050291597843,
            0.00045404702541418374,
            0.00012113265984226018
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you find the minimum and maximum number of products sold by each store?",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select shop.Name, min(shop.Number_products), max(shop.Number_products)",
            "select min(shop.Number_products), max(shop.Number_products), shop.Name",
            "select min(shop.Number_products), max(shop.Number_products) for shop.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9931955337524414,
            0.985258162021637,
            0.0021215886808931828,
            0.9913758635520935,
            0.00023008906282484531,
            0.9901337027549744,
            0.0006416362011805177,
            0.010995433665812016
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For how many products does each shop have the minimum number of products? For how many products does each shop have the maximum number of products?",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select shop.Name, min(shop.Number_products), max(shop.Number_products)",
            "select shop.Shop_ID, min(shop.Number_products), max(shop.Number_products)",
            "select min(shop.Number_products), max(shop.Number_products), shop.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9932899475097656,
            8.491948392475024e-05,
            0.44159644842147827,
            0.00012070095544913784,
            0.03395524248480797,
            0.00011339689808664843,
            0.002801166847348213,
            9.712957398733124e-05
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the minimum and maximum value of number of products in all the shops.",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select min(shop.District), max(shop.Number_products)",
            "select min(shop.Location), max(shop.Number_products)",
            "select min(shop.Manager_name), max(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9922022819519043,
            8.716870797798038e-05,
            0.000345240521710366,
            0.00010294218373019248,
            0.0006228541024029255,
            0.00012359664833638817,
            0.0003409340570215136,
            9.029984357766807e-05
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Display the list of the minimum, and maximum, number of products among all shops.",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select min(shop.District), max(shop.Number_products)",
            "select min(shop.Location), max(shop.Number_products)",
            "select min(shop.Manager_name), max(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.986764132976532,
            7.962986273923889e-05,
            0.00028641248354688287,
            8.447688014712185e-05,
            0.0004468820116017014,
            0.00011100720439571887,
            0.00019676864030770957,
            8.911091572372243e-05
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In all the shops, list the minimum and maximum products.",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select min(shop.District), max(shop.Number_products)",
            "select min(shop.Location), max(shop.Number_products)",
            "select min(shop.Manager_name), max(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.990727424621582,
            0.004003970883786678,
            0.0003034622350241989,
            0.0002507209137547761,
            0.00043928815284743905,
            0.00036882248241454363,
            0.0004031230346299708,
            0.00024408755416516215
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the minimum and maximum number of products sold in all shops.",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select min(shop.District), max(shop.Number_products)",
            "select min(shop.Location), max(shop.Number_products)",
            "select min(shop.Manager_name), max(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9932523369789124,
            6.879527791170403e-05,
            0.0005623227916657925,
            9.696725464891642e-05,
            0.0012001170543953776,
            0.00014935298531781882,
            0.0004904598463326693,
            0.00011202997848158702
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the shop names, locations, districts, ordered in descending order of number of products.",
        "gold_select": "select shop.Name, shop.Location, shop.District",
        "select_candidates": [
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.District, shop.Location",
            "select shop.Name, shop.Location., shop.District"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9907817244529724,
            0.9907817244529724,
            0.9907817244529724,
            0.9907817244529724,
            0.9921966791152954,
            0.9921966791152954,
            0.035391904413700104,
            0.035391904413700104
        ],
        "align_select": "select shop.Name, shop.Location, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the name, location, and district of all shops sorted in descending order of #products?",
        "gold_select": "select shop.Name, shop.Location, shop.District",
        "select_candidates": [
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.District, shop.Location"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9937117099761963,
            0.9937117099761963,
            0.9937117099761963,
            0.9937117099761963,
            0.9937117099761963,
            0.9937117099761963,
            0.9944340586662292,
            0.9944340586662292
        ],
        "align_select": "select shop.Name, shop.Location, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Return the name, location, district of all shops sorted in descending order of number of products.",
        "gold_select": "select shop.Name, shop.Location, shop.District",
        "select_candidates": [
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.District, shop.Location",
            "select shop.Name, shop.Location., shop.District"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9945235252380371,
            0.9945235252380371,
            0.9945235252380371,
            0.9945235252380371,
            0.9950260519981384,
            0.9950260519981384,
            0.05491406098008156,
            0.05491406098008156
        ],
        "align_select": "select shop.Name, shop.Location, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names, locations and districts of all shops sorted in descending order of number of products?",
        "gold_select": "select shop.Name, shop.Location, shop.District",
        "select_candidates": [
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.District, shop.Location"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9922035932540894,
            0.9922035932540894,
            0.9922035932540894,
            0.9922035932540894,
            0.9922035932540894,
            0.9922035932540894,
            0.9935118556022644,
            0.9935118556022644
        ],
        "align_select": "select shop.Name, shop.Location, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the name of the stores whose number products is more than the average number of products?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9846522808074951,
            6.814325752202421e-05,
            0.00026704350602813065,
            7.033169094938785e-05,
            0.00019903334032278508,
            5.89611372561194e-05,
            0.0002140654542017728,
            7.271371578099206e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the employee who received the most awards in the evaluation?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.City",
            "select employee.Name, employee.Employee_ID",
            "select employee.Name, evaluation.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "employee shop evaluation"
        ],
        "align_scores": [
            0.9893115162849426,
            6.499221490230411e-05,
            0.0004656192322727293,
            7.480462227249518e-05,
            0.0005779663915745914,
            6.383619620464742e-05,
            0.001185157336294651,
            7.236246165120974e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which employees got the most awards in evaluations? Describe their names.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name, employee.City",
            "select employee.Name, employee.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation"
        ],
        "align_scores": [
            0.9486553072929382,
            6.888665666338056e-05,
            0.0002655893622431904,
            5.8447349147172645e-05,
            0.00032935672788880765,
            5.9523372328840196e-05,
            0.0002814039762597531,
            6.144547660369426e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who received the most awards in evaluations? Give me the employee name.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, evaluation.Employee_ID",
            "select employee.Name, evaluation.Bonus",
            "select employee.Name, employee.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "employee shop evaluation"
        ],
        "align_scores": [
            0.9907684922218323,
            6.154123548185453e-05,
            0.0010316381230950356,
            6.838124681962654e-05,
            0.0012402560096234083,
            6.543062045238912e-05,
            0.0004937927587889135,
            5.9575209888862446e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What employee has received the most awards in evaluations? Give me his name.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, evaluation.Employee_ID",
            "select employee.Name, evaluation.Year_awarded, evaluation.Bonus",
            "select employee.Name, employee.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "employee shop evaluation",
            "employee hiring"
        ],
        "align_scores": [
            0.9824635982513428,
            6.197373295435682e-05,
            0.001659293076954782,
            7.116590859368443e-05,
            0.00016208365559577942,
            6.419509008992463e-05,
            0.00042129727080464363,
            5.851181413163431e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the employee who received the highest bonus once?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Employee_ID",
            "select employee.Name, employee.City",
            "select employee.Name, employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "employee shop evaluation"
        ],
        "align_scores": [
            0.9487199187278748,
            0.9677070379257202,
            0.000466097000753507,
            0.0006085760542191565,
            0.00031909343670122325,
            0.000374747411115095,
            0.0002651835384313017,
            0.00027141018654219806
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who was the employee given the largest bonus? Give his or her name.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Employee_ID",
            "select employee.Name, employee.Age",
            "select employee.Name, evaluation.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "employee shop evaluation"
        ],
        "align_scores": [
            0.9786322712898254,
            7.231507333926857e-05,
            0.0006976885488256812,
            6.868869240861386e-05,
            0.00029013509629294276,
            7.238986290758476e-05,
            0.000731529900804162,
            7.120819645933807e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me which employee received the biggest bonus? Give me his name.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Employee_ID",
            "select employee.Name, evaluation.Employee_ID",
            "select employee.Name, employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation"
        ],
        "align_scores": [
            0.9731503129005432,
            6.904752081027254e-05,
            0.0005790730938315392,
            6.489523366326466e-05,
            0.0007916133617982268,
            6.743714766344056e-05,
            0.0002657322329469025,
            6.547837256221101e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Of all the employees receiving bonuses, which employee got the largest bonus? Give me his name.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, evaluation.Employee_ID",
            "select evaluation.Employee_ID, employee.Name",
            "select employee.Name, employee.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "employee hiring"
        ],
        "align_scores": [
            0.9079070687294006,
            0.9768105745315552,
            0.0008457731455564499,
            0.0010910637211054564,
            0.0008644632180221379,
            0.0009680414805188775,
            0.0008356442558579147,
            0.00047450343845412135
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who received the biggest bonus out of the employees you have listed so far? Give me his/her name.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select evaluation.Employee_ID, employee.Name",
            "select employee.Name, evaluation.Employee_ID",
            "select employee.Name, employee.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "shop evaluation",
            "employee hiring",
            "hiring evaluation"
        ],
        "align_scores": [
            0.9192619323730469,
            9.74038484855555e-05,
            0.001466431189328432,
            9.430403588339686e-05,
            0.0018244903767481446,
            8.786496618995443e-05,
            0.0013724325690418482,
            7.949041173560545e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who are the employees who never received any awards in the evaluation? List them by name.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Employee_ID",
            "select employee.Name, evaluation.Employee_ID",
            "select employee.Employee_ID, employee.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee evaluation",
            "employee",
            "employee hiring evaluation",
            "employee hiring"
        ],
        "align_scores": [
            0.9099165201187134,
            0.08680056780576706,
            0.00030235707527026534,
            0.000250328506808728,
            0.00046121858758851886,
            0.0005114362575113773,
            0.00044671224895864725,
            0.00036788490251637995
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the names of employees who did not win any award in the evaluation?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Employee_ID",
            "select employee.Name, employee.Age",
            "select employee.Name, employee.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee evaluation",
            "employee",
            "employee hiring evaluation"
        ],
        "align_scores": [
            0.9005983471870422,
            0.0005920030525885522,
            0.00016906220116652548,
            8.230246021412313e-05,
            0.0002236610307591036,
            8.978056575870141e-05,
            0.0002739075571298599,
            0.00010289311467204243
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the names of employees who never won any award from the evaluation?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Employee_ID",
            "select employee.Name, employee.City",
            "select employee.Name, employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee evaluation",
            "employee",
            "employee hiring evaluation"
        ],
        "align_scores": [
            0.7043837904930115,
            0.35362404584884644,
            0.00017726971418596804,
            0.0001809799432521686,
            0.00029784798971377313,
            0.0002313173608854413,
            0.00023823691299185157,
            0.00016388484800700098
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of the people without evaluations?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name, employee.City",
            "select employee.Name, employee.Age, employee.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee",
            "employee evaluation",
            "employee hiring evaluation",
            "employee hiring"
        ],
        "align_scores": [
            0.9846861362457275,
            0.0006622427608817816,
            0.00015314827032852918,
            7.769390504108742e-05,
            0.00017953482165466994,
            7.292182999663055e-05,
            0.00012348049494903535,
            6.596477760467678e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the names of those employees who never received any evaluation?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name, employee.City",
            "select employee.Name, employee.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee",
            "employee evaluation"
        ],
        "align_scores": [
            0.9541704654693604,
            0.00041594987851567566,
            0.00017483800183981657,
            8.364737732335925e-05,
            0.00019611646712291986,
            8.247506048064679e-05,
            0.00016173135372810066,
            8.084465662250295e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the list of all the employees without receiving any evaluation by their name.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Employee_ID, employee.Name",
            "select employee.Name, employee.Employee_ID",
            "select employee.Name, evaluation.Bonus"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee",
            "employee evaluation"
        ],
        "align_scores": [
            0.9847714304924011,
            0.0004346938803792,
            0.00022531663125846535,
            6.578561442438513e-05,
            0.0001386976073263213,
            6.164507794892415e-05,
            0.00029342572088353336,
            9.424379823030904e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which employees did not receive any evaluations? List their names.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name, employee.Employee_ID",
            "select employee.Name, employee.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee",
            "employee evaluation"
        ],
        "align_scores": [
            0.9689656496047974,
            0.940093994140625,
            0.00019624400010798126,
            0.00016770533693488687,
            0.00019477619207464159,
            0.0004240469716023654,
            0.0002509325568098575,
            0.00019671722839120775
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me list of names of employees who did not receive any evaluation at this time?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name, employee.City",
            "select employee.Name, employee.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee",
            "employee evaluation"
        ],
        "align_scores": [
            0.9237337112426758,
            0.0007624112768098712,
            0.0002267668751301244,
            9.855472308117896e-05,
            0.0002478561655152589,
            0.00010220508556813002,
            0.0001616750960238278,
            8.940046973293647e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the name of the shop which hires the largest number of people.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Shop_ID",
            "select shop.Name, hiring.Start_from",
            "select shop.Name, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.9876294136047363,
            5.948251055087894e-05,
            0.0005732738645747304,
            6.130459951236844e-05,
            0.001196350553072989,
            5.364018215914257e-05,
            0.0002552596270106733,
            5.45306975254789e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the shop which has hired the largest number of staff members?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Shop_ID",
            "select shop.Name, hiring.Start_from",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.9786030650138855,
            7.723900489509106e-05,
            0.0016858146991580725,
            7.400535105261952e-05,
            0.0031237259972840548,
            6.418548582587391e-05,
            0.0010806038044393063,
            6.462018063757569e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of shop with the most staff members? Descended to give the name.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Employee_ID",
            "select shop.Name, hiring.Start_from",
            "select shop.Name, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring",
            "shop"
        ],
        "align_scores": [
            0.9593524932861328,
            9.829679038375616e-05,
            0.0019155589397996664,
            7.069749699439853e-05,
            0.0016886588418856263,
            6.434568058466539e-05,
            0.00028348228079266846,
            5.7655666751088575e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the shop with the most employees? Give me the name of the shop.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Employee_ID",
            "select shop.Name, hiring.Start_from",
            "select shop.Name, hiring.Shop_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.9892873764038086,
            7.476933387806639e-05,
            0.0013984026154503226,
            7.343690231209621e-05,
            0.0021138768643140793,
            5.7151777582475916e-05,
            0.0013748869532719254,
            7.397063018288463e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which shop has the most employees? What is the name of this shop? Give it to me.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Employee_ID",
            "select shop.Name, hiring.Shop_ID",
            "select shop.Name, hiring.Start_from"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring",
            "employee shop hiring"
        ],
        "align_scores": [
            0.987385630607605,
            9.812411008169875e-05,
            0.002238265238702297,
            7.52378036850132e-05,
            0.0011526779271662235,
            7.349035149673e-05,
            0.0022926158271729946,
            6.241326627787203e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which shop has the most employees? List the names.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Start_from",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring",
            "employee shop hiring"
        ],
        "align_scores": [
            0.9871878623962402,
            6.900670268805698e-05,
            0.0016968020936474204,
            5.8095709391636774e-05,
            0.0002358172059757635,
            5.7555520470486954e-05,
            0.00037993272417224944,
            6.760100950486958e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you find the name of the shops that don't hire any employees?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring"
        ],
        "align_scores": [
            0.972636878490448,
            0.00036888857721351087,
            0.00021550389647018164,
            8.936628728406504e-05,
            0.00022327156329993159,
            8.739317854633555e-05,
            0.000187408018973656,
            8.421058009844273e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find out the names of the shops that don't hire anyone?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring"
        ],
        "align_scores": [
            0.9753276705741882,
            0.26759040355682373,
            0.00018841566634364426,
            0.00027638761093840003,
            0.00014602344890590757,
            0.00018049223581328988,
            0.00020582832803484052,
            0.0002681454352568835
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the shops where employees are never hired?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, hiring.Start_from",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring"
        ],
        "align_scores": [
            0.9040311574935913,
            0.07720831781625748,
            0.00019830632663797587,
            0.00020705978386104107,
            0.00019966896797996014,
            0.0011497227242216468,
            0.0002016876096604392,
            0.0002382032835157588
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the shops that do not employ anybody?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring"
        ],
        "align_scores": [
            0.990767776966095,
            0.08461034297943115,
            0.00018223258666694164,
            0.00020322379714343697,
            0.00020723120542243123,
            0.00018754367192741483,
            0.00019384465122129768,
            0.00015226818504743278
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which shops don't hire employees? List them by name.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Shop_ID",
            "select shop.Name, hiring.Shop_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring"
        ],
        "align_scores": [
            0.818210780620575,
            0.12452273815870285,
            0.00021490351355168968,
            0.00019784040341619402,
            0.00018849974730983377,
            0.00016841621254570782,
            0.0002096336829708889,
            0.00032760927570052445
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me all the shop names where it runs without employee.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.District",
            "select shop.Name, hiring.Start_from"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring"
        ],
        "align_scores": [
            0.9922637939453125,
            0.023997699841856956,
            0.00019743485609069467,
            0.00020006037084385753,
            0.00021086656488478184,
            0.00018862885190173984,
            0.00035563198616728187,
            0.0009799004765227437
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which shops run without any employees? List down the names.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9160980582237244,
            0.0008213596302084625,
            0.00019563405658118427,
            0.0001044923483277671,
            0.0001819260069169104,
            9.059689182322472e-05,
            0.00021112147078383714,
            0.00010973206372000277
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which shops don't have any employees? Find their names.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring"
        ],
        "align_scores": [
            0.9768102169036865,
            0.00047888667904771864,
            0.0002344881504541263,
            9.195205348078161e-05,
            0.00018253484449815005,
            7.718363485764712e-05,
            0.00025490386178717017,
            9.621318895369768e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which shops run without any employees? What are these shop names?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Location, shop.District",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring"
        ],
        "align_scores": [
            0.987128496170044,
            0.00036854727659374475,
            0.0003059393202420324,
            9.450297511648387e-05,
            0.00017616400145925581,
            8.183913450920954e-05,
            0.0004975958727300167,
            9.470451186643913e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What shops don\u2019t have any employees? Put their names next to it.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Shop_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.48278874158859253,
            0.0005280095501802862,
            0.000232096339459531,
            7.918651681393385e-05,
            0.0002619864244479686,
            8.78355567692779e-05,
            0.00017199135618284345,
            8.038472878979519e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the number of employees hired in each shop? Show the shop name as well.",
        "gold_select": "select count(*), shop.Name",
        "select_candidates": [
            "select shop.Name, count(*)",
            "select count(*), shop.Name",
            "select shop.Name, count(*), hiring.Shop_ID",
            "select shop shop.Name, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.9892997741699219,
            0.0001646598830120638,
            0.9847829937934875,
            0.00014951842604205012,
            0.0004219771653879434,
            0.00010930597636615857,
            0.0007131096790544689,
            0.0001728808565530926
        ],
        "align_select": "select shop.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What was the number of employees hired by each shop and show me the name of the shop as well?",
        "gold_select": "select count(*), shop.Name",
        "select_candidates": [
            "select shop.Name, count(*)",
            "select count(*), shop.Name",
            "select hiring_per_grp_shop.Name, count(*)",
            "select hiring_per_shop.Name, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring",
            "employee shop hiring"
        ],
        "align_scores": [
            0.9886907339096069,
            0.00019021352636627853,
            0.988205075263977,
            0.00017457162903156132,
            0.003779255086556077,
            0.00017011018644552678,
            0.28654998540878296,
            0.0001673507213126868
        ],
        "align_select": "select shop.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you find the number of employees hired in each shop and show the shop name as well?",
        "gold_select": "select count(*), shop.Name",
        "select_candidates": [
            "select count(*), shop.Name",
            "select shop.Name, count(*)",
            "select hiring_per_shop.Name, count(*)",
            "select shop.Name, count(*), hiring.Shop_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring",
            "employee shop hiring"
        ],
        "align_scores": [
            0.9881023168563843,
            0.00018969208758790046,
            0.9907033443450928,
            0.00019691917987074703,
            0.2742476165294647,
            0.00019199193047825247,
            0.00037632256862707436,
            0.00012303188850637525
        ],
        "align_select": "select count(*), shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you find out the number of employees hired in each shop? Also, list the shop names.",
        "gold_select": "select count(*), shop.Name",
        "select_candidates": [
            "select count(*), shop.Name",
            "select shop.Name, count(*)",
            "select shop shop.Name, count(*)",
            "select hiring_per_shop.Name, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring",
            "employee shop hiring"
        ],
        "align_scores": [
            0.989700436592102,
            0.00015250302385538816,
            0.9913231134414673,
            0.0001926324621308595,
            0.0008901063119992614,
            0.00016587483696639538,
            0.18879325687885284,
            0.00018542789621278644
        ],
        "align_select": "select count(*), shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you tell me: number employees of each shop and the name of that shop?",
        "gold_select": "select count(*), shop.Name",
        "select_candidates": [
            "select shop.Name, count(*)",
            "select count(*), shop.Name",
            "select shop shop.Name, count(*)",
            "select shop_shop.Name, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring",
            "employee shop hiring"
        ],
        "align_scores": [
            0.9921046495437622,
            0.00015451331273652613,
            0.9911056160926819,
            0.0001468336849939078,
            0.0006367790047079325,
            0.0001356536813545972,
            0.008359611965715885,
            0.00014908563753124326
        ],
        "align_select": "select shop.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For which stores, list their names and numbers of employees.",
        "gold_select": "select count(*), shop.Name",
        "select_candidates": [
            "select shop.Name, count(*)",
            "select shop.Name, count(hiring.Shop_ID)",
            "select shop.Name, count(*), shop.Location",
            "select shop.Name, count(*), shop.Shop_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring",
            "employee shop hiring"
        ],
        "align_scores": [
            0.7889086604118347,
            0.0001470327697461471,
            0.0018880375428125262,
            0.0001536155614303425,
            0.0001546763232909143,
            9.240580402547494e-05,
            0.0001174572971649468,
            8.93847900442779e-05
        ],
        "align_select": "select shop.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you tell me the number of employees working at each shop, and the name of the shop?",
        "gold_select": "select count(*), shop.Name",
        "select_candidates": [
            "select shop.Name, count(*)",
            "select count(*), shop.Name",
            "select shop.Name, count(*)",
            "select shop shop.Name, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring",
            "employee shop hiring"
        ],
        "align_scores": [
            0.9926142692565918,
            0.00013587622379418463,
            0.9918493032455444,
            0.000134338260977529,
            0.9926142692565918,
            0.00013587622379418463,
            0.0007501524523831904,
            0.00012467001215554774
        ],
        "align_select": "select shop.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me the total bonus from every evaluation.",
        "gold_select": "select sum(evaluation.Bonus)",
        "select_candidates": [
            "select evaluation.Employee_ID, sum(evaluation.Bonus)",
            "select sum(evaluation.Bonus), evaluation.Employee_ID",
            "select sum(evaluation.Bonus)",
            "select evaluation.Year_awarded, sum(evaluation.Bonus)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "evaluation",
        "table_candidates": [
            "evaluation"
        ],
        "align_scores": [
            0.0439070425927639,
            0.00012129955575801432,
            0.11890890449285507,
            0.0001195005388581194,
            0.047833994030952454,
            7.93836879893206e-05,
            0.9514974355697632,
            9.138194582192227e-05
        ],
        "align_select": "select evaluation.Year_awarded, sum(evaluation.Bonus)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What was the total bonus amount that was awarded in all evaluations.",
        "gold_select": "select sum(evaluation.Bonus)",
        "select_candidates": [
            "select sum(evaluation.Bonus)",
            "select sum(evaluation.Bonus),",
            "select sum(evaluation.Bonus)",
            "select Sum(evaluation.Bonus)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "evaluation",
        "table_candidates": [
            "evaluation",
            "shop evaluation",
            "employee evaluation",
            "hiring evaluation",
            "employee hiring evaluation",
            "employee hiring"
        ],
        "align_scores": [
            0.9943768382072449,
            9.06506393221207e-05,
            0.0006325835129246116,
            6.466844206443056e-05,
            0.9943768382072449,
            9.06506393221207e-05,
            0.9943768382072449,
            9.06506393221207e-05
        ],
        "align_select": "select sum(evaluation.Bonus)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the total bonus given in all evaluations?",
        "gold_select": "select sum(evaluation.Bonus)",
        "select_candidates": [
            "select sum(evaluation.Bonus)",
            "select sum(evaluation.Bonus), evaluation.Employee_ID",
            "select sum(evaluation.Bonus) descripted in evaluation.Employee_ID",
            "select sum(evaluation.Bonus),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "evaluation",
        "table_candidates": [
            "evaluation",
            "shop evaluation",
            "employee evaluation",
            "hiring evaluation",
            "employee hiring evaluation",
            "employee hiring"
        ],
        "align_scores": [
            0.9954256415367126,
            5.878400770598091e-05,
            0.00029658133280463517,
            5.548676199396141e-05,
            0.000913105090148747,
            6.022220622980967e-05,
            0.0007459656917490065,
            6.932039104867727e-05
        ],
        "align_select": "select sum(evaluation.Bonus)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the total bonus in all evaluations?",
        "gold_select": "select sum(evaluation.Bonus)",
        "select_candidates": [
            "select sum(evaluation.Bonus)",
            "select sum(evaluation.Bonus), evaluation.Employee_ID",
            "select sum(evaluation.Bonus) descripted in evaluation.Employee_ID",
            "select sum(evaluation.Bonus),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "evaluation",
        "table_candidates": [
            "evaluation",
            "shop evaluation",
            "employee evaluation",
            "hiring evaluation",
            "employee hiring evaluation"
        ],
        "align_scores": [
            0.9956153631210327,
            5.6133605539798737e-05,
            0.00020797824254259467,
            5.8031637308886275e-05,
            0.0006102996994741261,
            6.132430280558765e-05,
            0.0007693490479141474,
            7.350149098783731e-05
        ],
        "align_select": "select sum(evaluation.Bonus)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How much bonus was given in each evaluation?",
        "gold_select": "select sum(evaluation.Bonus)",
        "select_candidates": [
            "select evaluation.Employee_ID, sum(evaluation.Bonus)",
            "select evaluation.Employee_ID, evaluation.Bonus",
            "select distinct evaluation.Employee_ID, evaluation.Bonus",
            "select evaluation.Year_awarded, evaluation.Bonus"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "evaluation",
        "table_candidates": [
            "evaluation"
        ],
        "align_scores": [
            0.5116820335388184,
            0.005976034328341484,
            0.09402525424957275,
            0.0030322803650051355,
            0.00017200906586367637,
            0.001876623136922717,
            0.00081586220767349,
            0.00019867802620865405
        ],
        "align_select": "select evaluation.Employee_ID, sum(evaluation.Bonus)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "list all the evaluations giving bonus and add up their total.",
        "gold_select": "select sum(evaluation.Bonus)",
        "select_candidates": [
            "select evaluation.Employee_ID, sum(evaluation.Bonus)",
            "select sum(evaluation.Bonus)",
            "select evaluation.Year_awarded, sum(evaluation.Bonus)",
            "select t3.c3, sum(evaluation.Bonus)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "evaluation",
        "table_candidates": [
            "evaluation"
        ],
        "align_scores": [
            0.0003601804783102125,
            0.0028904988430440426,
            0.9955363273620605,
            0.001257623895071447,
            0.0001560548262204975,
            0.00022733774676453322,
            0.0004004133224952966,
            0.029013993218541145
        ],
        "align_select": "select sum(evaluation.Bonus)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much was the total amount of bonus in all the evaluations?",
        "gold_select": "select sum(evaluation.Bonus)",
        "select_candidates": [
            "select sum(evaluation.Bonus)",
            "select sum(evaluation.Bonus),",
            "select sum(evaluation.Bonus)",
            "select Sum(evaluation.Bonus)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "evaluation",
        "table_candidates": [
            "evaluation",
            "shop evaluation",
            "employee evaluation",
            "hiring evaluation",
            "employee hiring evaluation",
            "employee hiring"
        ],
        "align_scores": [
            0.9942958950996399,
            6.37733464827761e-05,
            0.0005578130367211998,
            6.249611760722473e-05,
            0.9942958950996399,
            6.37733464827761e-05,
            0.9942958950996399,
            6.37733464827761e-05
        ],
        "align_select": "select sum(evaluation.Bonus)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you retrieve the total amount of bonus given on all the evaluations?",
        "gold_select": "select sum(evaluation.Bonus)",
        "select_candidates": [
            "select sum(evaluation.Bonus)",
            "select sum(evaluation.Bonus) descripted in evaluation.Employee_ID",
            "select sum(evaluation.Bonus), evaluation.Employee_ID",
            "select sum(evaluation.Bonus) descripted by evaluation.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "evaluation",
        "table_candidates": [
            "evaluation",
            "shop evaluation",
            "employee evaluation",
            "hiring evaluation",
            "employee hiring evaluation"
        ],
        "align_scores": [
            0.9922089576721191,
            6.061347812647e-05,
            0.0006619463092647493,
            6.394050433300436e-05,
            0.00030325111583806574,
            5.665752905770205e-05,
            0.0006363682332448661,
            6.854211824247614e-05
        ],
        "align_select": "select sum(evaluation.Bonus)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the total amount of bonus in all the evaluations?",
        "gold_select": "select sum(evaluation.Bonus)",
        "select_candidates": [
            "select sum(evaluation.Bonus)",
            "select sum(evaluation.Bonus) descripted in evaluation.Employee_ID",
            "select sum(evaluation.Bonus), evaluation.Employee_ID",
            "select sum(evaluation.Bonus) descripted by evaluation.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "evaluation",
        "table_candidates": [
            "evaluation",
            "shop evaluation",
            "employee evaluation"
        ],
        "align_scores": [
            0.9951058626174927,
            5.2169565606163815e-05,
            0.0009979293681681156,
            5.938366666669026e-05,
            0.00021824082068633288,
            5.78402032260783e-05,
            0.0014560505514964461,
            6.303979171207175e-05
        ],
        "align_select": "select sum(evaluation.Bonus)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "which is the information on hiring?",
        "gold_select": "select *",
        "select_candidates": [
            "select *",
            "select hiring.Shop_ID, hiring.Employee_ID",
            "select hiring.Shop_ID, hiring.Is_full_time",
            "select hiring.Shop_ID, hiring.Start_from"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "hiring",
        "table_candidates": [
            "hiring",
            "employee hiring",
            "employee shop hiring",
            "shop hiring"
        ],
        "align_scores": [
            0.9618138670921326,
            0.5508317947387695,
            0.00028441028553061187,
            0.0001676036772551015,
            0.0005185572663322091,
            0.0003802544961217791,
            0.00029805052326992154,
            0.000197682180441916
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please give me the entire information on hiring.",
        "gold_select": "select *",
        "select_candidates": [
            "select *",
            "select hiring.Shop_ID, hiring.Employee_ID",
            "select hiring.Employee_ID, hiring.Start_from",
            "select hiring.Employee_ID, hiring.Is_full_time"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "hiring",
        "table_candidates": [
            "hiring",
            "employee hiring",
            "employee shop hiring",
            "shop hiring"
        ],
        "align_scores": [
            0.9795199632644653,
            0.6114512085914612,
            0.00018017325783148408,
            0.0002086666936520487,
            0.00023655471159145236,
            0.00016781283193267882,
            0.00025734014343470335,
            0.00019831729878205806
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me everything about hiring?",
        "gold_select": "select *",
        "select_candidates": [
            "select *",
            "select hiring.Shop_ID, hiring.Employee_ID",
            "select hiring.Shop_ID, hiring.Is_full_time",
            "select hiring.Shop_ID, hiring.Start_from"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "hiring",
        "table_candidates": [
            "hiring",
            "employee hiring",
            "employee shop hiring"
        ],
        "align_scores": [
            0.9823533296585083,
            0.00589630426838994,
            0.00015980111493263394,
            0.00021186312369536608,
            0.00028817367274314165,
            0.0004651057533919811,
            0.00020716442668344826,
            0.0002551971119828522
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me some information on hiring?",
        "gold_select": "select *",
        "select_candidates": [
            "select *",
            "select hiring.Shop_ID, hiring.Employee_ID",
            "select hiring.Shop_ID",
            "select hiring.Shop_ID, hiring.Is_full_time"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "hiring",
        "table_candidates": [
            "hiring",
            "employee hiring",
            "employee shop hiring",
            "shop hiring"
        ],
        "align_scores": [
            0.8201250433921814,
            0.2188258320093155,
            0.00018146255752071738,
            0.00017829764692578465,
            0.0011964592849835753,
            0.0018953274702653289,
            0.0004502134397625923,
            0.00027784943813458085
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For all the information on hiring, what should be added?",
        "gold_select": "select *",
        "select_candidates": [
            "select *",
            "select hiring.Employee_ID, hiring.Start_from",
            "select hiring.Employee_ID",
            "select hiring.Employee_ID, hiring.Is_full_time"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "hiring",
        "table_candidates": [
            "hiring",
            "employee hiring",
            "hiring evaluation",
            "shop hiring",
            "employee shop hiring"
        ],
        "align_scores": [
            0.7035043835639954,
            0.001895417459309101,
            0.00029556293156929314,
            0.00018264399841427803,
            0.0014183430466800928,
            0.00037661654641851783,
            0.00030496722320094705,
            0.0002800341753754765
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the districts in which there are both stores with more than 10000 products and stores with less than 3000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, shop.Location",
            "select shop.District, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.992408037185669,
            0.992408037185669,
            0.00020676362328231335,
            0.00020676362328231335,
            0.00025792623637244105,
            0.00025792623637244105,
            0.00026001755031757057,
            0.00026001755031757057
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find out which district has both the stores with less than 3000 products and the ones with more than 10000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District Then-intersect-shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District Then-intersect-shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9930391907691956,
            0.9930391907691956,
            0.0002172562963096425,
            0.0002172562963096425,
            0.00015922161401249468,
            0.00015922161401249468,
            0.0002639515441842377,
            0.0002639515441842377
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me which district has both stores with more than 10000 products and stores with less than 3000 products?",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District Then-intersect-shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9935616254806519,
            0.9935616254806519,
            0.0002447731967549771,
            0.0002447731967549771,
            0.00022641212854068726,
            0.00022641212854068726,
            0.00020199244318064302,
            0.00020199244318064302
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What districts have stores with both less than 3000 products and stores with more than 10000 products?",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District Then-intersect-shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District Then-intersect-find-shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9941298961639404,
            0.9941298961639404,
            0.00018519500736147165,
            0.00018519500736147165,
            0.0001549573935335502,
            0.0001549573935335502,
            0.00016993217286653817,
            0.00016993217286653817
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give me all the districts containing stores with more than 10000 products and those with less than 3000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, shop.Location",
            "select shop.District delimited by shop.Number_products"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.3324812948703766,
            0.9940349459648132,
            0.00010276270768372342,
            0.0001705825125100091,
            0.00011510182957863435,
            0.0001895116874948144,
            0.0006051478558219969,
            0.004168238956481218
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the districts where both shops sell less than 3000 products AND shop sell more than 10000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, shop.Location",
            "select shop.District, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9946892261505127,
            0.7414621114730835,
            0.0001560319069540128,
            0.00022246195294428617,
            0.00018576749425847083,
            0.00019762887677643448,
            0.0002765452372841537,
            0.0001930087892105803
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the districts in which there are both shops selling more than 10000 products and shops selling less than 3000 products?",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, shop.Location",
            "select shop.District, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9928313493728638,
            0.9928313493728638,
            0.00023926215362735093,
            0.00023926215362735093,
            0.00027340580709278584,
            0.00027340580709278584,
            0.0002529471821617335,
            0.0002529471821617335
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the districts where there are at least one shop selling more than 10000 products and also some shop selling less than 3000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, at least one shop.Number_products",
            "select shop.District, at least one (shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9872778654098511,
            0.9619854092597961,
            0.0002839172084350139,
            0.0011306615779176354,
            0.0005288330721668899,
            0.0005887689185328782,
            0.0004117783682886511,
            0.00040583539521321654
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find out the districts where both shops sell less than 3000 products and shops sell more than 10000 products?",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, shop.Location",
            "select shop.District, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9935488104820251,
            0.8045802116394043,
            0.0002161302836611867,
            0.0003920683520846069,
            0.00021868740441277623,
            0.0002850884338840842,
            0.00016212108312174678,
            0.00017509459576103836
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find out all the different shop location numbers.",
        "gold_select": "select count(distinct shop.Location)",
        "select_candidates": [
            "select distinct shop.Location",
            "select count(distinct shop.Location)",
            "select different shop.Location",
            "select distinct shop.Location, shop.District"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring",
            "shop hiring evaluation"
        ],
        "align_scores": [
            0.9911859631538391,
            0.00013232456694822758,
            0.14380207657814026,
            8.066068403422832e-05,
            0.0672677755355835,
            9.814432996790856e-05,
            0.0001663882430875674,
            6.527356890728697e-05
        ],
        "align_select": "select distinct shop.Location",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the number of different store locations?",
        "gold_select": "select count(distinct shop.Location)",
        "select_candidates": [
            "select count(distinct shop.Location)",
            "select count (distinct shop.Location)",
            "select count(distinct t1.c6)",
            "select count(distinct t1.c 2)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9959497451782227,
            0.9959497451782227,
            0.01828196831047535,
            0.01828196831047535,
            0.0005121470894664526,
            0.0005121470894664526,
            0.0005902860430069268,
            0.0005902860430069268
        ],
        "align_select": "select count(distinct shop.Location)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In total, how many store locations are there?",
        "gold_select": "select count(distinct shop.Location)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct shop.Location)",
            "select count(shop.Location)",
            "select count(*), shop.Location"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9905865788459778,
            0.9905865788459778,
            0.16996489465236664,
            0.16996489465236664,
            0.9631732106208801,
            0.9631732106208801,
            0.0008241070318035781,
            0.0008241070318035781
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "There are how many different store locations?",
        "gold_select": "select count(distinct shop.Location)",
        "select_candidates": [
            "select count(distinct shop.Location)",
            "select count (distinct shop.Location)",
            "select count(distinct t1.c 2)",
            "select count(distinct t1.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9960429668426514,
            0.9960429668426514,
            0.018759137019515038,
            0.018759137019515038,
            0.0005910049076192081,
            0.0005910049076192081,
            0.0005183267057873309,
            0.0005183267057873309
        ],
        "align_select": "select count(distinct shop.Location)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "can you count the total numbers of different stores?",
        "gold_select": "select count(distinct shop.Location)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct shop.Name)",
            "select count(*), shop.Name",
            "select count(distinct shop.Shop_ID)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9865961670875549,
            0.9865961670875549,
            0.04096441715955734,
            0.04096441715955734,
            0.00024229056725744158,
            0.00024229056725744158,
            0.009230026043951511,
            0.009230026043951511
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the document id for the document with the paragraph text 'Brazil' and 'Ireland'?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9709287881851196,
            0.00010224075231235474,
            0.00015818669635336846,
            5.9821202739840373e-05,
            0.27541327476501465,
            9.549520473228768e-05,
            0.00011694521526806056,
            5.749117917730473e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "I want to see the document id with the paragraph text 'Brazil' and 'Ireland'.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID - Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9955013394355774,
            0.00010171215399168432,
            0.00015141342009883374,
            6.191089050844312e-05,
            0.10185755789279938,
            0.00011711171100614592,
            0.00015882494335528463,
            7.11925167706795e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the document id containing 'Brazil' and 'Ireland.'.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9935810565948486,
            8.513630018569529e-05,
            0.918468713760376,
            8.827504643704742e-05,
            0.00011598567652981728,
            6.0241167375352234e-05,
            0.00014063667913433164,
            5.768008122686297e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the document id with the paragraph text 'Brazil' and 'Ireland'?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9949565529823303,
            8.953476208262146e-05,
            0.00015641981735825539,
            6.196114554768428e-05,
            0.012643955647945404,
            8.470498869428411e-05,
            0.000139313968247734,
            5.836117998114787e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the codes of template types which are not used in any documents.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Version_Number, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9808799624443054,
            0.9794593453407288,
            0.00025048054521903396,
            0.0001876082387752831,
            0.0004953366587869823,
            0.0006011623190715909,
            0.00022457048180513084,
            0.00018449511844664812
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What is the category of template types which are not used to make any documents?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Description, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Templates Documents",
            "Ref_Template_Types Templates",
            "Paragraphs Templates Documents",
            "Templates"
        ],
        "align_scores": [
            0.6784973740577698,
            0.024066345766186714,
            0.09449924528598785,
            0.0037526532541960478,
            0.11719407886266708,
            0.0019551292061805725,
            0.0011763429502025247,
            0.0005367450648918748
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Give me the template type codes which are not used in documents.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Documents.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Paragraphs Templates Documents",
            "Templates"
        ],
        "align_scores": [
            0.9882575869560242,
            0.9850589036941528,
            0.00014225460472516716,
            0.0001330038794549182,
            0.00014273420674726367,
            0.00013856898294761777,
            0.00016775171388871968,
            0.00016153871547430754
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "In the document titled 'Welcome to NY', give the ids and texts of all paragraphs.",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9933559894561768,
            0.00011772751895477995,
            0.00039123554597608745,
            0.00011203959002159536,
            0.0005663437186740339,
            9.652747394284233e-05,
            0.00215067807585001,
            7.214803190436214e-05
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the ids and textual of the paragraph titles in the document 'Welcome to NY'.",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.9942463040351868,
            0.00017556703824084252,
            0.00041051360312849283,
            9.023426537169144e-05,
            0.0005753986770287156,
            8.087620517471805e-05,
            0.0004123772378079593,
            7.047516555758193e-05
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "We have how many documents?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_ID",
            "select count(*), t2.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9945147037506104,
            5.355451867217198e-05,
            0.0001416962913936004,
            5.7679146266309544e-05,
            0.00019864960631821305,
            5.76947168156039e-05,
            0.0005546469474211335,
            5.70989323023241e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many documents have been collected so far?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_ID",
            "select count(Documents.Document_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9880515336990356,
            9.03739346540533e-05,
            0.0001797232253011316,
            6.663164822384715e-05,
            0.00020724069327116013,
            6.752974877599627e-05,
            0.001444297726266086,
            7.176739745773375e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In total, how many documents we have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_ID",
            "select count(Documents.Document_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9943353533744812,
            0.0001111259261961095,
            0.00018413853831589222,
            7.614392961841077e-05,
            0.0002077301178360358,
            7.745171751594171e-05,
            0.0004977856297045946,
            7.696438115090132e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me how many documents we have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9904388785362244,
            5.849613080499694e-05,
            0.0001556738861836493,
            6.34879179415293e-05,
            0.00018289199215359986,
            5.9910602431045845e-05,
            0.0002576873230282217,
            6.0007234424119815e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of documents, please.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_ID",
            "select count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9958546161651611,
            6.026948904036544e-05,
            0.0001472234434913844,
            7.33902706997469e-05,
            0.00015332216571550816,
            6.568431854248047e-05,
            0.0010844143107533455,
            7.527168054366484e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the total number of documents.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_ID",
            "select count(Documents.Document_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.995388388633728,
            6.65653424221091e-05,
            0.0001495500619057566,
            6.537948502227664e-05,
            0.00016302202129736543,
            6.614896119572222e-05,
            0.00030051148496568203,
            7.49434984754771e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list all document IDs, document names, and document descriptions for these documents.",
        "gold_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name.c2, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9883413910865784,
            0.00011685470963129774,
            0.0016607707366347313,
            8.743318903725594e-05,
            0.0013180639361962676,
            8.176254050340503e-05,
            0.9883413910865784,
            0.00011685470963129774
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the document ID, document name, and document description for each document.",
        "gold_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name.c2, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9953492283821106,
            0.00018236468895338476,
            0.0002545796160120517,
            8.431390597252175e-05,
            0.0007564818952232599,
            0.00011236024147365242,
            0.9953492283821106,
            0.00018236468895338476
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me all the document IDs, document names, and document descriptions for all documents?",
        "gold_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name.c2, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9939236044883728,
            0.00010674342775018886,
            0.000707568135112524,
            7.841268961783499e-05,
            0.0012684386456385255,
            7.835805445211008e-05,
            0.9939236044883728,
            0.00010674342775018886
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the document ids, document names, and document descriptions.",
        "gold_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name.c3, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9930226802825928,
            0.00010720840509748086,
            0.0003574107540771365,
            6.784286961192265e-05,
            0.9930226802825928,
            0.00010720840509748086,
            0.0031280897092074156,
            8.170268120011315e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please provide me with document ID, document name, and document description for all documents.",
        "gold_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name.c2, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9949800372123718,
            9.954284905688837e-05,
            0.0002610364754218608,
            7.736933912383392e-05,
            0.0008486559381708503,
            8.12604048405774e-05,
            0.9949800372123718,
            9.954284905688837e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all documents with their id, name, and description.",
        "gold_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name.c3, Documents.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9934886693954468,
            9.969637176254764e-05,
            0.00015864362649153918,
            6.98628427926451e-05,
            0.9934886693954468,
            9.969637176254764e-05,
            0.0014510806649923325,
            8.103722939267755e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all documents according to their id, name, and description.",
        "gold_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9957770109176636,
            0.9948216676712036,
            0.00017396561452187598,
            0.0001496322511229664,
            0.0002833714534062892,
            0.00016649410827085376,
            0.9957770109176636,
            0.9948216676712036
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please give me all the document ids, names and descriptions.",
        "gold_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name.c3, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9954687356948853,
            0.00011781445209635422,
            0.00036153572727926075,
            6.829327321611345e-05,
            0.9954687356948853,
            0.00011781445209635422,
            0.006993889808654785,
            9.461776062380522e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the document id, name and description for each document?",
        "gold_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name.c3, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9950557947158813,
            0.000656722579151392,
            0.00037226435961201787,
            0.00014299304166343063,
            0.9950557947158813,
            0.000656722579151392,
            0.0012845650780946016,
            0.00015764491399750113
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all the documents. List their name, id, and document description.",
        "gold_select": "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Document_ID, Documents.Document_Description",
            "select Documents.Template_ID, Documents.Document_Name, Documents.Document_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Documents.Other_Details, Documents.Document_Name, Documents.Document_ID, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9923993945121765,
            0.000104735758213792,
            0.00020974744984414428,
            8.173742389772087e-05,
            0.9926895499229431,
            0.0001075563341146335,
            0.001084066228941083,
            7.974445907166228e-05
        ],
        "align_select": "select Documents.Document_Name, Documents.Document_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the document name and template id for document with description with the letter 'w' in it?",
        "gold_select": "select Documents.Document_Name, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Template_ID",
            "select t2.c5, Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_Name, Documents.Template_ID, Documents.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9942113757133484,
            0.00013993225002195686,
            0.00017276944709010422,
            6.626816320931539e-05,
            0.0051461500115692616,
            9.279397636419162e-05,
            0.00043358723632991314,
            7.837165321689099e-05
        ],
        "align_select": "select Documents.Document_Name, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I see that you have a document that contains the letter 'w' in the description. Can you tell me the document name and template id for it?",
        "gold_select": "select Documents.Document_Name, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Document_Name",
            "select t2.c5, Documents.Document_Name, Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.989385187625885,
            0.00015372440975625068,
            0.10462548583745956,
            0.00011307953536743298,
            0.00025853386614471674,
            7.801641913829371e-05,
            0.9892575144767761,
            0.00016179830709006637
        ],
        "align_select": "select Documents.Document_Name, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the document name and template id for document with the letter 'w' in its description.",
        "gold_select": "select Documents.Document_Name, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Template_ID",
            "select t2.c5, Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_Description, Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9952701926231384,
            0.00010151999595109373,
            0.00014116495731286705,
            5.788942507933825e-05,
            0.0002616549318190664,
            6.078602382331155e-05,
            0.004489778075367212,
            7.407214434351772e-05
        ],
        "align_select": "select Documents.Document_Name, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "can you show me the document name and template id for document with the letter 'w' in the description?",
        "gold_select": "select Documents.Document_Name, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Template_ID",
            "select t2.c5, Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_Description, Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9944117665290833,
            0.00013673848297912627,
            0.0001529452856630087,
            6.110875983722508e-05,
            0.00030273664742708206,
            6.63426544633694e-05,
            0.004493249114602804,
            9.555376163916662e-05
        ],
        "align_select": "select Documents.Document_Name, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the document name and template id for document with the letter 'w' in the description?",
        "gold_select": "select Documents.Document_Name, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_Description, Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9947697520256042,
            0.00012494086695369333,
            0.0003093851846642792,
            6.379871774697676e-05,
            0.0026659450959414244,
            8.685440116096288e-05,
            0.9946505427360535,
            0.00013922817015554756
        ],
        "align_select": "select Documents.Document_Name, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the names and template ids for all documents that has the letter 'w' in the description?",
        "gold_select": "select Documents.Document_Name, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Template_ID",
            "select t2.c5, Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_Description, Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9939845204353333,
            0.00014374713646247983,
            0.00017133596702478826,
            6.359741382766515e-05,
            0.0004389423702377826,
            6.82846803101711e-05,
            0.0008511129417456686,
            7.764280599076301e-05
        ],
        "align_select": "select Documents.Document_Name, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the document name and template id for each document that contains the letter 'w' in the description?",
        "gold_select": "select Documents.Document_Name, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Document_Name",
            "select t2.c5, Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_Name, Documents.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9937752485275269,
            0.0001296131667913869,
            0.003994171041995287,
            9.087014041142538e-05,
            0.00017507889424450696,
            6.498490256490186e-05,
            0.001111836638301611,
            9.288515138905495e-05
        ],
        "align_select": "select Documents.Document_Name, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names and template ids for the documents containing the letter 'w' in the description?",
        "gold_select": "select Documents.Document_Name, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Template_ID",
            "select t2.c5, Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9948521256446838,
            0.0001309473445871845,
            0.0001665866730036214,
            6.359741382766515e-05,
            0.0026454622857272625,
            9.728260920383036e-05,
            0.9947748184204102,
            0.00012895706458948553
        ],
        "align_select": "select Documents.Document_Name, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please return the names and template id of all documents containing the letter 'w' in the description.",
        "gold_select": "select Documents.Document_Name, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Template_ID",
            "select t2.c5, Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9951823353767395,
            0.00013351546658668667,
            0.0001453728327760473,
            6.281529931584373e-05,
            0.004095572512596846,
            9.152217535302043e-05,
            0.995125949382782,
            0.0001364580384688452
        ],
        "align_select": "select Documents.Document_Name, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the document id, template id, and document description for documents named \"Robbin CV\"?",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID.c1, Documents.Document_Description",
            "select Documents.Document_ID-, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9950283169746399,
            0.00013651687186211348,
            0.001969608012586832,
            9.95255759335123e-05,
            0.0018756507197394967,
            9.768344898475334e-05,
            0.001854147994890809,
            8.809938299236819e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the template id, document id and description of the document called \"Robbin CV\".",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Template_ID, Documents.Document_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Template_ID, Documents.Document_ID, Documents.Document_Description",
            "select Documents.Template_ID., Documents.Document_ID, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9957787990570068,
            9.558894817018881e-05,
            0.9960322976112366,
            9.080706513486803e-05,
            0.9957787990570068,
            9.558894817018881e-05,
            0.013950973749160767,
            0.00010081816435558721
        ],
        "align_select": "select Documents.Template_ID, Documents.Document_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the document id, template id and document description for document named \"Robbin CV\"?",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID.c1, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID & Documents.Document_Description",
            "select Documents.Document_ID-, Documents.Template_ID, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9957245588302612,
            0.00010894636216107756,
            0.001350247417576611,
            8.594089013058692e-05,
            0.9514715671539307,
            8.004363917279989e-05,
            0.0018451957730576396,
            8.551432256354019e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the document id, template id, and description of document named \"Robbin CV\"?",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID.c1, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description.",
            "select Documents.Document_ID-, Documents.Template_ID, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9954570531845093,
            0.00014343005022965372,
            0.0021835702937096357,
            0.00010074003512272611,
            0.0018062391318380833,
            9.000935824587941e-05,
            0.0013840977335348725,
            9.82113488134928e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the document id, template id, and description of document named \"Robbin CV\"?",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID.c1, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description.",
            "select Documents.Document_ID-, Documents.Template_ID, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9955515265464783,
            0.00012654140300583094,
            0.001969893230125308,
            9.77098970906809e-05,
            0.001552494359202683,
            8.619786240160465e-05,
            0.00131972914095968,
            8.984094165498391e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the document id, template id, and description for the document with the name Robbin CV?",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID.c1, Documents.Document_Description",
            "select Documents.Document_ID-, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9944615364074707,
            0.00013524375390261412,
            0.002985284896567464,
            9.371095075039193e-05,
            0.001970532350242138,
            9.309958113590255e-05,
            0.0019947488326579332,
            8.286994852824137e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the document id, template id, and description for document with Robbin CV as the document name?",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID.c1, Documents.Document_Description",
            "select Documents.Document_ID-, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9944207072257996,
            0.00016209849854931235,
            0.0024759385269135237,
            0.00010087567352456972,
            0.0025018826127052307,
            9.700526425149292e-05,
            0.9929896593093872,
            0.0002214833366451785
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the document id, template id, and description for the document with the name Robbin CV?",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID.c1, Documents.Document_Description",
            "select Documents.Document_ID-, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9946576952934265,
            0.0001401620829710737,
            0.0032935352064669132,
            9.538935410091653e-05,
            0.0020252070389688015,
            9.422062430530787e-05,
            0.002292304066941142,
            8.368376438738778e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you return the document id, template id, and description for my document with the name Robbin CV?",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID.c1, Documents.Document_Description",
            "select Documents.Document_ID-, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9949818253517151,
            0.0001315104600507766,
            0.0023190658539533615,
            9.335667709819973e-05,
            0.0018780446844175458,
            9.409115591552109e-05,
            0.0017779888585209846,
            8.707201050128788e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you please show me the document id, template id, and description for a document named Robbin CV?",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID.c1, Documents.Document_Description",
            "select Documents.Document_ID-, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9953403472900391,
            0.00012666755355894566,
            0.002391715068370104,
            8.941709529608488e-05,
            0.001992467325180769,
            8.516033267369494e-05,
            0.0017022320535033941,
            7.993555482244119e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the total number of different templates used by documents.",
        "gold_select": "select count(distinct Documents.Template_ID)",
        "select_candidates": [
            "select count(distinct Documents.Template_ID)",
            "select count(selection count(distinct Documents.Template_ID)",
            "select count(select count(distinct Documents.Template_ID)",
            "select count(different Documents.Template_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents"
        ],
        "align_scores": [
            0.996150016784668,
            0.996150016784668,
            0.00035076719359494746,
            0.00035076719359494746,
            0.0007861846243031323,
            0.0007861846243031323,
            0.03547552973031998,
            0.03547552973031998
        ],
        "align_select": "select count(distinct Documents.Template_ID)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In all documents which do they use, how many different templates exist?",
        "gold_select": "select count(distinct Documents.Template_ID)",
        "select_candidates": [
            "select count(distinct Documents.Template_ID)",
            "select count(different Documents.Template_ID)",
            "select count(distinct Documents.Document_ID)",
            "select count(distinct Documents.Template_ID)."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Documents"
        ],
        "align_scores": [
            0.98525071144104,
            0.0001491590082878247,
            0.016270339488983154,
            9.920097363647074e-05,
            0.001053109299391508,
            7.255620585056022e-05,
            0.0006731347530148923,
            0.00010569470759946853
        ],
        "align_select": "select count(distinct Documents.Template_ID)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of templates used to create documents.",
        "gold_select": "select count(distinct Documents.Template_ID)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Documents.Template_ID)",
            "select count(Documents.Template_ID)",
            "select count(single_Documents.Template_ID)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents"
        ],
        "align_scores": [
            0.9891223311424255,
            0.00010302035661879927,
            0.9920143485069275,
            6.479381409008056e-05,
            0.715569019317627,
            7.014308357611299e-05,
            0.3509097993373871,
            7.30041429051198e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of different templates used to make the documents.",
        "gold_select": "select count(distinct Documents.Template_ID)",
        "select_candidates": [
            "select count(distinct Documents.Template_ID)",
            "select count(distinct Documents.Template_ID).",
            "select count(distinct Documents.Document_ID)",
            "select count(different Documents.Template_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents"
        ],
        "align_scores": [
            0.9961971044540405,
            0.002985894912853837,
            0.0005609767395071685,
            0.0003783654829021543,
            0.0003912933461833745,
            0.00013775848492514342,
            0.013641659170389175,
            0.0021792587358504534
        ],
        "align_select": "select count(distinct Documents.Template_ID)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the total number of different templates used on documents?",
        "gold_select": "select count(distinct Documents.Template_ID)",
        "select_candidates": [
            "select count(distinct Documents.Template_ID)",
            "select count(distinct Documents.Document_ID)",
            "select count(different Documents.Template_ID)",
            "select count(distinct Documents.Template_ID)."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents"
        ],
        "align_scores": [
            0.9955552220344543,
            8.076898666331545e-05,
            0.0007484894013032317,
            7.301918230950832e-05,
            0.029882365837693214,
            8.436642383458093e-05,
            0.000667726097162813,
            6.690325972158462e-05
        ],
        "align_select": "select count(distinct Documents.Template_ID)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of documents with the template type code 'PPT'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9966714382171631,
            0.00011385663674445823,
            0.00025840671150945127,
            0.0003943966294173151,
            0.0001922322844620794,
            0.00021105182531755418,
            0.0005566019099205732,
            0.0017114010406658053
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me how many documents use the template with the type code 'PPT'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(Documents.Document_ID)",
            "select count(*), Templates.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9944615960121155,
            0.00025929170078597963,
            0.00027558294823393226,
            0.0012510772794485092,
            0.017187176272273064,
            0.00020021572709083557,
            0.0002542812144383788,
            0.001161424326710403
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of documents using the template with type code 'PPT'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_Details",
            "select count(Documents.Document_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9954023361206055,
            0.0001390644465573132,
            0.0002525917370803654,
            0.0005265305517241359,
            0.0003664838441181928,
            0.0019385704072192311,
            0.0044500562362372875,
            0.00012747528671752661
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you count the number of documents using the PPT template type?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(Documents.Document_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9957383871078491,
            0.0001535498013254255,
            0.00025544347590766847,
            0.0006922183674760163,
            0.00019415983115322888,
            0.0006100818864069879,
            0.000606431916821748,
            0.00011814497702289373
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the count of the number of documents that use the PPT template.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select Documents.Document_ID, count(*)",
            "select count(Documents.Document_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9939215183258057,
            0.000193765910807997,
            0.0002016441576415673,
            0.0013743031304329634,
            0.0002330100687686354,
            0.0003813533403445035,
            0.0006153903668746352,
            0.00011860315134981647
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of documents using PPT template type.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9947846531867981,
            0.00013064403901807964,
            0.0002171043015550822,
            0.002358058001846075,
            0.0002374470786890015,
            0.0011024510022252798,
            0.0002753654553089291,
            0.004367992281913757
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of documents using the PPT template type?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(Documents.Document_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9956587553024292,
            0.0011148996418341994,
            0.00026480352971702814,
            0.0017894794000312686,
            0.00020693543774541467,
            0.0007348820217885077,
            0.0007250640774145722,
            0.0002462765551172197
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Display template ids and document numbers using each template.",
        "gold_select": "select Documents.Template_ID, count(*)",
        "select_candidates": [
            "select Documents.Template_ID, Documents.Document_ID",
            "select Documents.Template_ID, Documents.Document_ID, Documents.Document_Description",
            "select Documents.Template_ID, Documents.Document_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_ID, t2.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents"
        ],
        "align_scores": [
            0.8001478910446167,
            0.6762737035751343,
            0.0001759934239089489,
            0.00016531525761820376,
            0.0001586042926646769,
            0.00018176472804043442,
            0.0002522504364605993,
            0.00015204491501208395
        ],
        "align_select": "select Documents.Template_ID, Documents.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you show me all the template ids and number of documents using each template?",
        "gold_select": "select Documents.Template_ID, count(*)",
        "select_candidates": [
            "select Documents.Template_ID, count(*)",
            "select Documents.Template_ID, count(Documents.Document_ID)",
            "select Documents.Template_ID, count(*), Documents.Document_Name",
            "select Documents.Template_ID, count(**)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9957547187805176,
            0.00032628673943690956,
            0.0018015005625784397,
            0.00016021351621020585,
            0.0003653147432487458,
            0.00014474874478764832,
            0.9917211532592773,
            0.0003032294334843755
        ],
        "align_select": "select Documents.Template_ID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are all the template ids and number of documents being used by each template?",
        "gold_select": "select Documents.Template_ID, count(*)",
        "select_candidates": [
            "select Documents.Template_ID, count(*)",
            "select Documents.Template_ID, count(Documents.Document_ID)",
            "select Documents.Template_ID, count(**)",
            "select Documents.Template_ID, count(*), Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.995253324508667,
            0.0003138467436656356,
            0.004340790677815676,
            0.00016475505253765732,
            0.991390585899353,
            0.0003187547263223678,
            0.00034903123741969466,
            0.00013460485206451267
        ],
        "align_select": "select Documents.Template_ID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you give me a list of all template ids and number of documents using each template?",
        "gold_select": "select Documents.Template_ID, count(*)",
        "select_candidates": [
            "select Documents.Template_ID, count(*)",
            "select Documents.Template_ID, count(Documents.Document_ID)",
            "select Documents.Template_ID, count(**)",
            "select Documents.Template_ID, count(*), Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9956661462783813,
            0.0003583611105568707,
            0.0017367441905662417,
            0.00017823613598011434,
            0.9894519448280334,
            0.00034270421019755304,
            0.0004680900019593537,
            0.0001426293165422976
        ],
        "align_select": "select Documents.Template_ID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can I see all template ids and number of document made using these templates?",
        "gold_select": "select Documents.Template_ID, count(*)",
        "select_candidates": [
            "select Documents.Template_ID, count(*)",
            "select Documents.Template_ID, count(Documents.Document_ID)",
            "select Documents.Template_ID, count(distinct Documents.Document_ID)",
            "select Documents.Template_ID, count(**)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents"
        ],
        "align_scores": [
            0.9954774975776672,
            0.00027467586915008724,
            0.003396926913410425,
            0.00015608173271175474,
            0.20287516713142395,
            0.0002016218495555222,
            0.9921566247940063,
            0.00027393887285143137
        ],
        "align_select": "select Documents.Template_ID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me every single template id used in documents, and tell me how many times they were used.",
        "gold_select": "select Documents.Template_ID, count(*)",
        "select_candidates": [
            "select Documents.Template_ID, count(*)",
            "select Documents.Template_ID, count(*), Documents.Document_ID",
            "select count(*), Documents.Template_ID",
            "select Documents.Template_ID, count(*), Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9863116145133972,
            0.00021324165572877973,
            0.00016583372780587524,
            7.891414861660451e-05,
            0.9838687777519226,
            0.00020075938664376736,
            0.00031146450783126056,
            9.255941404262558e-05
        ],
        "align_select": "select Documents.Template_ID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are all the different template ids used for documents, and how many times did they get used?",
        "gold_select": "select Documents.Template_ID, count(*)",
        "select_candidates": [
            "select Documents.Template_ID, count(*)",
            "select count(*), Documents.Template_ID",
            "select Documents.Template_ID, count(*), Documents.Document_Name",
            "select Documents.Template_ID, count(*), Documents.Document_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9908355474472046,
            0.0005684586358256638,
            0.9879370331764221,
            0.00043628804269246757,
            0.00017701296019367874,
            0.0001058571069734171,
            0.00016524970124009997,
            9.449207573197782e-05
        ],
        "align_select": "select Documents.Template_ID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you show me the template id and type code for the template used by the most documents?",
        "gold_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "select_candidates": [
            "select Documents.Template_ID, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Documents.Document_ID, Templates.Template_Type_Code",
            "select Documents.Template_ID, Templates.Template_Type_Code, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.7014129161834717,
            9.487499482929707e-05,
            0.9941620230674744,
            9.854334348347038e-05,
            0.0004867838870268315,
            9.310028690379113e-05,
            0.00021053168165963143,
            5.80233900109306e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the template id and type code for the template which was most commonly used among all documents.",
        "gold_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "select_candidates": [
            "select Documents.Template_ID, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Documents.Document_ID, Templates.Template_Type_Code",
            "select Documents.Template_ID, Templates.Template_Type_Code, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9291270971298218,
            0.00012401078129187226,
            0.9924777150154114,
            0.00013718892296310514,
            0.000443243799963966,
            8.470531611237675e-05,
            0.00017247500363737345,
            5.765638343291357e-05
        ],
        "align_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the template id and template type code of the template used for the greatest number of documents?",
        "gold_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Documents.Template_ID, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Template_Details",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Date_Effective_From"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9936065673828125,
            0.0001355820568278432,
            0.8988972306251526,
            0.00012524885823950171,
            0.0004031149728689343,
            8.840427472023293e-05,
            0.0002265302318846807,
            6.969143578317016e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me all the ids of all the templates used by more than one document.",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select multi-document Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates Documents",
            "Paragraphs Documents"
        ],
        "align_scores": [
            0.993575394153595,
            0.0001757722202455625,
            0.0018532144604250789,
            7.982662646099925e-05,
            0.004936139099299908,
            0.00012057511048624292,
            0.00022039192845113575,
            7.414365973090753e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you list all the template ids that are used by more than one document?",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Description",
            "select Documents.Template_ID, Documents.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9928989410400391,
            0.00023056386271491647,
            0.10870148241519928,
            0.00011223741603316739,
            0.0009047153289429843,
            9.253083408111706e-05,
            0.0038450562860816717,
            0.00010285054304404184
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all the template ids that are used on more than one document.",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Description",
            "select Documents.Template_ID, Documents.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents"
        ],
        "align_scores": [
            0.9941139817237854,
            0.0001334200205747038,
            0.05655670911073685,
            8.183976024156436e-05,
            0.00038576009683310986,
            7.213860953925177e-05,
            0.005027295555919409,
            7.6071206422057e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the id of all templates that are used by more than one document?",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Templates.Template_ID",
            "select Documents.Template_ID, Templates.Template_Details",
            "select Documents.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Documents",
            "Paragraphs Documents"
        ],
        "align_scores": [
            0.9914581179618835,
            0.00017554761143401265,
            0.0004554179322440177,
            7.579185330541804e-05,
            0.0009790288750082254,
            8.651482494315132e-05,
            0.0005489855539053679,
            7.760224252706394e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all template ids which was used in more than a single document.",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Description",
            "select Documents.Template_ID,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Documents"
        ],
        "align_scores": [
            0.9953557252883911,
            0.00013294607924763113,
            0.035091664642095566,
            9.003021841635928e-05,
            0.0005743239307776093,
            7.898807962192222e-05,
            0.0023357125464826822,
            7.221107807708904e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the template id of any templates used in more than one document.",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Description",
            "select Documents.Template_ID,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents"
        ],
        "align_scores": [
            0.9942377805709839,
            0.00014016649220138788,
            0.0076203844510018826,
            8.537596295354888e-05,
            0.0003884723410010338,
            7.885096420068294e-05,
            0.0019276959355920553,
            6.94863119861111e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the template ids which are used more than once in multiple documents.",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Description",
            "select Documents.Template_ID,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents"
        ],
        "align_scores": [
            0.9925082325935364,
            0.00016692251665517688,
            0.028239456936717033,
            8.834747859509662e-05,
            0.0004606118309311569,
            7.304870086954907e-05,
            0.0035363617353141308,
            7.723989256191999e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please list the template ids where this template has been used more than once.",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Templates.Template_ID",
            "select Templates.Template_ID, Documents.Template_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Templates Documents",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.972785234451294,
            0.00016548747953493148,
            0.0003776670782826841,
            7.74913132772781e-05,
            0.0006354573415592313,
            8.065961446845904e-05,
            0.0007396592409349978,
            9.794778452487662e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you return me the template ids of any templates used in more than one document?",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Description",
            "select Documents.Template_ID, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents",
            "Paragraphs Documents"
        ],
        "align_scores": [
            0.9912046790122986,
            0.00023607433831784874,
            0.013111026026308537,
            9.282511746278033e-05,
            0.0006342895794659853,
            8.418656943831593e-05,
            0.0008908029412850738,
            9.278963989345357e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all the template ids that aren't used by documents.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Templates.Template_ID",
            "select Documents.Template_ID, Templates.Template_ID",
            "select Documents.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Documents",
            "Ref_Template_Types Documents",
            "Paragraphs Documents"
        ],
        "align_scores": [
            0.9896859526634216,
            0.02803559973835945,
            0.990641176700592,
            0.07320510596036911,
            0.00020210997899994254,
            0.00015269216964952648,
            0.00031333972583524883,
            0.00020593787485267967
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Give all the IDS of templates not used by any document.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Documents.Template_ID, Templates.Template_ID",
            "select Documents.Template_ID",
            "select Templates.Template_ID, Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Documents"
        ],
        "align_scores": [
            0.9907461404800415,
            0.014450114220380783,
            0.00018198703764937818,
            0.00012629198317881674,
            0.9852414727210999,
            0.010851497761905193,
            0.0002694385766517371,
            0.0001550061715533957
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you show me the ids of all the templates which are not used in any documents?",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Documents.Template_ID, Templates.Template_ID",
            "select Templates.Template_ID, Documents.Template_ID",
            "select Templates.Template_ID, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents"
        ],
        "align_scores": [
            0.9713825583457947,
            0.9758407473564148,
            0.0002668243832886219,
            0.00028885886422358453,
            0.0003900247102137655,
            0.0005048414459452033,
            0.00043348208419047296,
            0.00035676275729201734
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which template IDs haven't been assigned to any document yet? Give them all here.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Templates",
            "Ref_Template_Types Documents",
            "Documents"
        ],
        "align_scores": [
            0.744717001914978,
            0.7365661859512329,
            0.760193407535553,
            0.6784071922302246,
            0.001122589805163443,
            0.00036280424683354795,
            0.0005219000740908086,
            0.0003205937100574374
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which templates have no documents using them? Give their id.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Documents.Template_ID",
            "select Documents.Template_ID, Templates.Template_ID",
            "select Templates.Template_ID, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9764950275421143,
            0.014722145162522793,
            0.00038931891322135925,
            0.0002604249457363039,
            0.000280903244856745,
            0.0002610364754218608,
            0.0005074791260994971,
            0.00039384467527270317
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show me all the template ids that are not being used in any documents.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Templates.Template_ID",
            "select Documents.Template_ID, Templates.Template_ID",
            "select Documents.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Documents",
            "Ref_Template_Types Documents",
            "Paragraphs Documents"
        ],
        "align_scores": [
            0.9869285225868225,
            0.014866924844682217,
            0.9871811270713806,
            0.03598529100418091,
            0.00020310914260335267,
            0.0001308712235186249,
            0.00020937299996148795,
            0.00011930061009479687
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you show me the ids for templates that are not used in any documents?",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Documents.Template_ID, Templates.Template_ID",
            "select Templates.Template_ID, Documents.Template_ID",
            "select Documents.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents"
        ],
        "align_scores": [
            0.990535318851471,
            0.032414667308330536,
            0.0002450566680636257,
            0.00017104427388403565,
            0.0004717280389741063,
            0.00020836887415498495,
            0.0002705274091567844,
            0.0001635295629967004
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Number of templates.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9955219030380249,
            6.12679505138658e-05,
            0.000185061915544793,
            5.910265463171527e-05,
            0.00021319853840395808,
            5.815734402858652e-05,
            0.00025276903761550784,
            5.997062544338405e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of templates we have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9940837025642395,
            6.503529584733769e-05,
            0.00018997247389052063,
            5.9904774388996884e-05,
            0.00019974380847997963,
            6.093426054576412e-05,
            0.00026786638773046434,
            6.057123755454086e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many of our templates exist?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9917113780975342,
            7.207356247818097e-05,
            0.000253695179708302,
            7.082746014930308e-05,
            0.0002417478826828301,
            5.944893564446829e-05,
            0.00035142822889611125,
            6.274591578403488e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of templates we have.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Template_Type_Code, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9947869777679443,
            6.379220576491207e-05,
            0.0001825014187488705,
            6.415940879378468e-05,
            0.00021407809981610626,
            6.491118983831257e-05,
            0.00012475562107283622,
            5.313503788784146e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the count of the number of templates.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Templates Documents",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9954535961151123,
            7.878678297856823e-05,
            0.00014115768135525286,
            6.941969331819564e-05,
            0.00015435484237968922,
            6.952177500352263e-05,
            0.00032903539249673486,
            7.330368680413812e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the template type code, template id, and version number for each template?",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code, Templates.Template_ID, Templates.Version_Number",
            "select Templates.Template_Type_Code.c2, Templates.Template_ID, Templates.Version_Number",
            "select Templates.Template_Type_Code, Templates.Template_ID, and Templates.Version_Number",
            "select Templates.Template_Type_Code, Templates.Template_ID, Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.994875967502594,
            0.00010568463039817289,
            0.0002798046625684947,
            8.847461140248924e-05,
            0.9945617318153381,
            9.717339708004147e-05,
            0.994875967502594,
            0.00010568463039817289
        ],
        "align_select": "select Templates.Template_Type_Code, Templates.Template_ID, Templates.Version_Number",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me all the template ids, version numbers and template type codes of all templates?",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number.c1, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number & Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9941133856773376,
            0.00013786637282464653,
            0.9941133856773376,
            0.00013786637282464653,
            0.0010484392987564206,
            9.303284605266526e-05,
            0.9812011122703552,
            0.00010958965140162036
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the template ids, version numbers, and template type codes for all templates?",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number.c1, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9937952756881714,
            0.00013128719001542777,
            0.9937952756881714,
            0.00013128719001542777,
            0.0011137728579342365,
            9.229237184626982e-05,
            0.9943219423294067,
            0.00012419609993230551
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Provide the template type code, template id and version number of each template.",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code, Templates.Template_ID, Templates.Version_Number",
            "select Templates.Template_Type_Code.c2, Templates.Template_ID, Templates.Version_Number",
            "select Templates.Template_Type_Code, Templates.Template_ID, Templates.Template_ID, Templates.Version_Number",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9952521324157715,
            9.169724944513291e-05,
            0.00028655858477577567,
            8.672040712554008e-05,
            0.0003023365861736238,
            0.00011180224100826308,
            0.995489776134491,
            9.067985956789926e-05
        ],
        "align_select": "select Templates.Template_Type_Code, Templates.Template_ID, Templates.Version_Number",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please let me see the ids, version numbers and type codes of your templates?",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Version_Number",
            "select Templates.Template_ID, Templates.Version_Number.c1, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9826111197471619,
            0.00012856614193879068,
            0.9826111197471619,
            0.00012856614193879068,
            0.9859458804130554,
            0.00014812999870628119,
            0.0026303401682525873,
            0.0001313821121584624
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the ids, version numbers and types of all templates.",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number.c2, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9941451549530029,
            0.00011968071339651942,
            0.9941451549530029,
            0.00011968071339651942,
            0.0008647716604173183,
            9.324795246357098e-05,
            0.9954531192779541,
            0.00012633571168407798
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the templates, id, version numbers and type codes of each template?",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Version_Number",
            "select Templates.Template_ID, t1.c 1, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.002821675967425108,
            0.00016145124391186982,
            0.002821675967425108,
            0.00016145124391186982,
            0.0017366730608046055,
            0.00017232327081728727,
            0.00043334675137884915,
            0.0001462691288907081
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can I see the template type codes for all templates?",
        "gold_select": "select distinct Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select distinct Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Template_Details"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9937983155250549,
            0.0002425656421110034,
            0.0011723242932930589,
            8.48527779453434e-05,
            0.031206853687763214,
            0.00010457976895850152,
            0.0005742950015701354,
            8.797269401839003e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me all distinct template type codes for all templates?",
        "gold_select": "select distinct Templates.Template_Type_Code",
        "select_candidates": [
            "select distinct Templates.Template_Type_Code",
            "select distinct Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select distinct Templates.Template_Type_Code (or Templates.Date_Effective_From)",
            "select distinct Templates.Template_Type_Code,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Ref_Template_Types Templates",
            "Templates Documents"
        ],
        "align_scores": [
            0.9960876703262329,
            0.00035782414488494396,
            0.0004625515721272677,
            7.888329855632037e-05,
            0.24068588018417358,
            0.00012654296006076038,
            0.0012626966927200556,
            0.00020328155369497836
        ],
        "align_select": "select distinct Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me an array of distinct template type codes for all the templates?",
        "gold_select": "select distinct Templates.Template_Type_Code",
        "select_candidates": [
            "select distinct Templates.Template_Type_Code",
            "select distinct Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select distinct Templates.Template_Type_Code, Templates.Template_Details",
            "select distinct Templates.Template_Type_Code, t1.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Ref_Template_Types Templates",
            "Templates Documents",
            "Templates Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9948251247406006,
            0.00011407428974052891,
            0.00033698268816806376,
            7.104961696313694e-05,
            0.0002926774905063212,
            8.175193215720356e-05,
            0.0005182308959774673,
            0.00011660303425742313
        ],
        "align_select": "select distinct Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me all the unique template type codes for all templates?",
        "gold_select": "select distinct Templates.Template_Type_Code",
        "select_candidates": [
            "select distinct Templates.Template_Type_Code",
            "select unique Templates.Template_Type_Code",
            "select distinct Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select count(distinct Templates.Template_Type_Code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.99607914686203,
            0.00015667163825128227,
            0.0007246838649734855,
            0.00018820128752849996,
            0.00044518616050481796,
            7.12113906047307e-05,
            0.01830958016216755,
            0.00010878938337555155
        ],
        "align_select": "select distinct Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the template ids of templates with the letters 'PP' or 'PPT'?",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Details",
            "select Templates.Template_ID, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9895958304405212,
            0.000196548891835846,
            0.00011683074262691662,
            7.108702993718907e-05,
            0.00014159188140183687,
            7.142875256249681e-05,
            0.00018788213492371142,
            6.336827209452167e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids of templates with the code PP or PPT?",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Date_Effective_From",
            "select Templates.Template_ID, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9960119724273682,
            0.001146545517258346,
            0.00011991740757366642,
            7.584159902762622e-05,
            0.00019366948981769383,
            7.256464596139267e-05,
            0.00017783549265004694,
            7.780430314596742e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In total, how many templates have template type code CV?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*) in sum(Templates.Template_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9920384883880615,
            0.001192804891616106,
            0.00024301056691911072,
            0.0068956175819039345,
            0.0002200725139118731,
            0.0008157825213856995,
            0.0003250749141443521,
            0.0001315222616540268
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many templates have CV as the template type code?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9912343621253967,
            0.00011087687744293362,
            0.00022773801174480468,
            5.647003126796335e-05,
            0.00017505617870483547,
            7.216338417492807e-05,
            0.00022773801174480468,
            5.647003126796335e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me how many templates have the template type code CV.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9958317875862122,
            0.0001433332363376394,
            0.00019149556464981288,
            0.0010575720807537436,
            0.0001743370812619105,
            0.00016071707068476826,
            0.00016682781279087067,
            0.0053359572775661945
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of templates with template type code CV?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9961064457893372,
            0.00011248834925936535,
            0.000205509495572187,
            0.0006605761591345072,
            0.00017232212121598423,
            0.00033864640863612294,
            0.0001741076703183353,
            0.004756988026201725
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Tell me the number of template of the kind CV.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9950140118598938,
            0.00015595708100590855,
            0.0001807995286071673,
            0.0004374415730126202,
            0.00016725820023566484,
            0.00013882278290111572,
            0.00017031695460900664,
            0.000644719519186765
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the number of templates with type code 'CV'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9953314661979675,
            0.00012058913853252307,
            0.0002189035149058327,
            0.0004272158839739859,
            0.00015801197150722146,
            0.0001411471894243732,
            0.0004466692334972322,
            0.002128101885318756
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of CV templates.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_Type_Code, Templates.Template_Details",
            "select count(*), Templates.Template_Type_Code, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9967212080955505,
            5.9934831369901076e-05,
            0.00017458178626839072,
            5.445264105219394e-05,
            0.00010882071364903823,
            5.041640542913228e-05,
            0.00010027022653957829,
            4.8179266741499305e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the count of the number of templates of the type CV?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.995663583278656,
            0.00010675605881260708,
            0.00021120037126820534,
            0.0004916401230730116,
            0.0001743462198646739,
            0.00017465271230321378,
            0.0001768314396031201,
            0.0019317680271342397
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the version number and template type code for the template with version number after 5?",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Template_ID",
            "select Templates.Version_Number.c2, Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9920963048934937,
            0.00015957970754243433,
            0.00034265522845089436,
            7.50968829379417e-05,
            0.00017842826491687447,
            8.816720219329e-05,
            0.0017752747517079115,
            8.117831021081656e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the version number and template type code for the template with the version number greater than 5?",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Template_ID",
            "select Templates.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9898626804351807,
            0.00014829423162154853,
            0.00033234053989872336,
            7.603624544572085e-05,
            0.00017312382988166064,
            8.733827417017892e-05,
            0.0004924355307593942,
            0.00011131056817248464
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the version number and template type code for template with the version number later than 5?",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Template_ID",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.992065966129303,
            0.00023911143944133073,
            0.00019850494572892785,
            9.743375994730741e-05,
            0.0004096666525583714,
            7.939738861750811e-05,
            0.0004574482736643404,
            0.00011069843458244577
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which versions of templates exist greater than version 5? Show me their template type code and version numbers.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code, Templates.Version_Number",
            "select Templates.Template_Type_Code.c0, Templates.Version_Number",
            "select Templates.Template_Type_Code.c2, Templates.Version_Number",
            "select distinct Templates.Template_Type_Code, Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Templates Documents Templates",
            "Templates Documents Paragraphs",
            "Templates Documents Templates Paragraphs"
        ],
        "align_scores": [
            0.9863325953483582,
            0.02067721262574196,
            0.00025128404377028346,
            0.00015606418310198933,
            0.00023726194922346622,
            0.00013410481915343553,
            0.005237944889813662,
            0.0001448177790734917
        ],
        "align_select": "select Templates.Template_Type_Code, Templates.Version_Number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Is there a version number greater than 5 in the templates available here? Show me any such versions along with template type codes.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number.c1, Templates.Template_Type_Code",
            "select version(Templates.Version_Number), Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9875632524490356,
            0.00026169655029661953,
            0.00028754243976436555,
            0.00011580907448660582,
            0.00033813720801845193,
            0.00016658366075716913,
            0.0005975662497803569,
            0.0001331340754404664
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which templates have version numbers greater than 5? List them by version number and template type code.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9903149008750916,
            0.9930521249771118,
            0.0002499502443242818,
            0.00022893671120982617,
            0.000417261675465852,
            0.0003438802668824792,
            0.00036596975405700505,
            0.00038748185033909976
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Can you return the version numbers and template type codes of templates with version number greater than 5?",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Templates.Version_Number.c2, Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.994360625743866,
            0.00025075965095311403,
            0.0003053838445339352,
            8.231657557189465e-05,
            0.000358346092980355,
            0.00010348814248573035,
            0.00056342693278566,
            8.812820306047797e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all template types, number of templates and template type code for each.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, count(*), Templates.Template_ID",
            "select Templates.Template_Type_Code, count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9955006241798401,
            0.00017382668738719076,
            0.0003352593630552292,
            0.0002186336205340922,
            0.0007017052848823369,
            0.00016117224004119635,
            0.00020892111933790147,
            0.0002606962516438216
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you show me all template type codes and number of templates for each?",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select Templates.Template_Type_Code.c2, count(*)",
            "select Templates.Template_Type_Code, count(**)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9962356686592102,
            0.0002538224507588893,
            0.00043795144301839173,
            0.00021291720622684807,
            0.00047439782065339386,
            0.00016348558710888028,
            0.9952071309089661,
            0.0002710450207814574
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you show me all the template type codes and number of templates for each?",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select Templates.Template_Type_Code.c2, count(*)",
            "select Templates.Template_Type_Code, count(**)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9962248802185059,
            0.000261391862295568,
            0.0004222823481541127,
            0.00020850323198828846,
            0.0004983225953765213,
            0.0001545828563394025,
            0.9950414299964905,
            0.0002748351253103465
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you list all the template types and number of templates under those template type codes?",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code.c2, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, count(Templates.Template_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9950270056724548,
            0.0002970788336824626,
            0.0005896778893657029,
            0.0001312491367571056,
            0.0003747577138710767,
            0.00015000095299910754,
            0.007966636680066586,
            0.00022684474242851138
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the number of template types, and how many templates correspond to each template type code.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select count(*), Templates.Template_Type_Code",
            "select Templates.Template_Type_Code.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9958006739616394,
            0.00022103331866674125,
            0.0003902943863067776,
            0.00010435334843350574,
            0.9960730075836182,
            0.0002483666758053005,
            0.0003328964812681079,
            0.00010245086741633713
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the different template type codes? Please tell me how many templates there are for each.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select Templates.Template_Type_Code.c2, count(*)",
            "select Templates.Template_Type_Code-Templates.Template_Details, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9945856928825378,
            0.0003249865840189159,
            0.0007560199592262506,
            0.00012227364641148597,
            0.0011297237360849977,
            0.00016395625425502658,
            0.0010478022741153836,
            0.00023376065655611455
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me the list of all the different template type codes and how many templates correspond to each one.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select Templates.Template_Type_Code.c2, count(*)",
            "select Templates.Template_Type_Code, count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9956132173538208,
            0.0002990481734741479,
            0.0006069968803785741,
            0.00012836669338867068,
            0.0007237131940200925,
            0.00013518032210413367,
            0.0016387369250878692,
            0.00015576892474200577
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For template type that has most templates belonging to it, return its template type code.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code (symbol Templates.Date_Effective_From)",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code (symbol Templates.Template_Type_Code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9952399730682373,
            7.286149775609374e-05,
            0.0002509595942683518,
            7.29705934645608e-05,
            0.0004480938659980893,
            5.539624180528335e-05,
            0.00021840566478203982,
            6.138929893495515e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For which template type codes does the most templates belong to?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select Templates.Template_Type_Code (or Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9931580424308777,
            7.718069537077099e-05,
            0.0007674021180719137,
            6.701576785417274e-05,
            0.0025791472289711237,
            7.535700569860637e-05,
            0.012904258444905281,
            0.00013591485912911594
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the template type code that template types from which most templates belong.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code (or Templates.Date_Effective_From)",
            "select Templates.Template_Type_Code (Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9536907076835632,
            7.488620758522302e-05,
            0.0002275986480526626,
            5.551951835514046e-05,
            0.0008025813149288297,
            6.881548324599862e-05,
            0.0005406336858868599,
            7.05400452716276e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the template type code of the most commonly used templates?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select Templates.Template_Type_Code, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9949485063552856,
            8.011458703549579e-05,
            0.0005128587945364416,
            5.5455657275160775e-05,
            0.0009811560157686472,
            6.306503928499296e-05,
            0.0005533432122319937,
            6.107749504735693e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the type code of the template type that has the most templates?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select Templates.Template_Type_Code (symbol Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9948951601982117,
            8.326504757860675e-05,
            0.0004162715922575444,
            6.111068796599284e-05,
            0.0009364777943119407,
            6.841582944616675e-05,
            0.0002626987698022276,
            6.437273987103254e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you show me the template type codes in which there are less than three templates?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code I, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code (or Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9951611161231995,
            0.00018904154421761632,
            0.0003283156256657094,
            6.602380744880065e-05,
            0.00013662234414368868,
            6.315766950137913e-05,
            0.0036229658871889114,
            0.00011515211372170597
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all template type codes that have less than 3 templates.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code SAMPLE-GROUP BY-HAVING",
            "select Templates.Template_Type_Code Squash-GROUP BY-HAVING",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.99569171667099,
            0.00015532011457253247,
            0.00014653954713139683,
            8.259507740149274e-05,
            0.0001384043280268088,
            6.680571823380888e-05,
            0.0002666727814357728,
            5.919634713791311e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you show me all the template type codes with less than three templates?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select Templates.Template_Type_Code, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9949777722358704,
            0.00022880229516886175,
            0.0002687171509023756,
            6.157397729111835e-05,
            0.0004768535145558417,
            6.087176370783709e-05,
            0.00045765956747345626,
            7.438118336722255e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "I need to find the code of template types containing a template less than 3 times, please.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Code",
            "select Documents.Document_ID",
            "select Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9941889047622681,
            0.00013983380631543696,
            0.9940314888954163,
            0.00010941620712401345,
            0.0007336584967561066,
            0.0001011233835015446,
            0.7511254549026489,
            0.00013943517114967108
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you show the lowest version number and its template type code?",
        "gold_select": "select min(Templates.Version_Number), Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select min(Templates.Version_Number), min(Templates.Template_Type_Code)",
            "select min(Templates.Version_Number), Templates.Template_Type_Code",
            "select min(Templates.Version_Number)., min(Templates.Template_Type_Code)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9843140840530396,
            6.61527446936816e-05,
            0.0002857785439118743,
            6.826176104368642e-05,
            0.00010847934754565358,
            6.519220914924517e-05,
            0.00012736470671370625,
            7.889518747106194e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "To find smallest version number, what's the template type code and version number?",
        "gold_select": "select min(Templates.Version_Number), Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code, Templates.Version_Number",
            "select min(Templates.Version_Number), Templates.Template_Type_Code, min(Templates.Version_Number)",
            "select Templates.Template_Type_Code, Templates.Version_Number, min(Templates.Version_Number)",
            "select min(Templates.Version_Number), Templates.Template_Type_Code, max(Templates.Version_Number)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9957237243652344,
            0.9952237010002136,
            9.222875814884901e-05,
            7.437948079314083e-05,
            0.00011048846499761567,
            7.983903924468905e-05,
            8.88369613676332e-05,
            8.84801775100641e-05
        ],
        "align_select": "select Templates.Template_Type_Code, Templates.Version_Number",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the version number with the smallest template type code?",
        "gold_select": "select min(Templates.Version_Number), Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9946677684783936,
            5.731655255658552e-05,
            0.00013933575246483088,
            5.859114753548056e-05,
            0.0004197958915028721,
            5.305367085384205e-05,
            0.00015044283645693213,
            6.012569065205753e-05
        ],
        "align_select": "select Templates.Version_Number",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the smallest version number? And what is the template type code?",
        "gold_select": "select min(Templates.Version_Number), Templates.Template_Type_Code",
        "select_candidates": [
            "select min(Templates.Version_Number), Templates.Template_Type_Code",
            "select max(Templates.Version_Number), Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select max(Templates.Version_Number), min(Templates.Version_Number), Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.00011900441313628107,
            8.511356281815097e-05,
            0.00014864219701848924,
            0.00011126292520202696,
            0.8201389312744141,
            0.9026861190795898,
            8.417059143539518e-05,
            7.343172183027491e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the smallest version number and its template type code?",
        "gold_select": "select min(Templates.Version_Number), Templates.Template_Type_Code",
        "select_candidates": [
            "select min(Templates.Version_Number), min(Templates.Template_Type_Code)",
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select min(Templates.Version_Number), Templates.Template_Type_Code",
            "select max(Templates.Version_Number), min(Templates.Template_Type_Code)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.00033648667158558965,
            0.0002732147986534983,
            0.9853217005729675,
            0.9826100468635559,
            0.00010719960846472532,
            7.142950198613107e-05,
            0.00019051847630180418,
            0.00014600297436118126
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which version number is the lowest? Provide the version number and its corresponding template type code.",
        "gold_select": "select min(Templates.Version_Number), Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select min(Templates.Version_Number), Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9952694773674011,
            7.629860192537308e-05,
            0.0004209968028590083,
            8.8154585682787e-05,
            0.00020083828712813556,
            7.511428702855483e-05,
            0.0003423799353186041,
            5.704570503439754e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the minimum version number, along with its corresponding template type code.",
        "gold_select": "select min(Templates.Version_Number), Templates.Template_Type_Code",
        "select_candidates": [
            "select min(Templates.Version_Number), min(Templates.Template_Type_Code)",
            "select min(Templates.Version_Number), Templates.Template_Type_Code",
            "select min(Templates.Version_Number)., min(Templates.Template_Type_Code)",
            "select Templates.Version_Number, Templates.Template_Type_Code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            7.024656952125952e-05,
            0.0009002596489153802,
            7.461099448846653e-05,
            0.004630386363714933,
            9.118696470977738e-05,
            0.00015873108350206167,
            0.9920948147773743,
            0.002686971565708518
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What template type code is for the document named \"Data Base\"?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_ID",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code (ref. Ref_Template_Types.Template_Type_Description)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9955193996429443,
            9.165282972389832e-05,
            0.02908693067729473,
            0.00010611320612952113,
            0.00016863859491422772,
            6.893225508974865e-05,
            0.00024261466751340777,
            6.322528497548774e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the template type code of the template used by \"data base\", please?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code (ref. Templates.Date_Effective_From)",
            "select Templates.Template_Type_Code (or Templates.Date_Effective_From)",
            "select Templates.Template_Type_Code (http://www.Templates.Template_Type_Code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9948670864105225,
            0.0001234332739841193,
            0.0009331097244285047,
            6.42445738776587e-05,
            0.02762666344642639,
            8.917220839066431e-05,
            0.018588952720165253,
            0.00010884583753068
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For 'Data base' document, what is the template type code of the template?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code (syntax-greedy)",
            "select Templates.Template_Type_Code (ref. Templates.Date_Effective_From)",
            "select Templates.Template_Type_Code (http://www.Templates.Template_Type_Code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9951091408729553,
            8.590720972279087e-05,
            0.9433973431587219,
            7.978492067195475e-05,
            0.0007714153034612536,
            5.9160738601349294e-05,
            0.009266090579330921,
            8.544258162146434e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the template type code of the template used on the document named Data Base.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code (ref. Templates.Template_Details)",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code (ref. Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.994161069393158,
            0.00011607142369030043,
            0.0012199559714645147,
            6.39416030026041e-05,
            0.00018285447731614113,
            6.9216221163515e-05,
            0.0005839882651343942,
            5.790145951323211e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the template type code of the template used by the document with the name \"Data base\"?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code (ref. Templates.Template_Details)",
            "select Templates.Template_Type_Code, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9938714504241943,
            0.0001380287139909342,
            0.00021326562273316085,
            7.925109821371734e-05,
            0.0022685264702886343,
            7.28273153072223e-05,
            0.00032412298605777323,
            8.845352567732334e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the template type code of the template that is used by document named Data base?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Documents.Document_ID",
            "select Templates.Template_Type_Code (ref. Templates.Template_Details)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9941165447235107,
            0.00016064013470895588,
            0.00023493570915888995,
            8.88683061930351e-05,
            0.00024841169943101704,
            9.037910785991699e-05,
            0.0036056959070265293,
            7.048834231682122e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the template type code of the template that is used by the document named Data Base?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Templates.Template_Details",
            "select Templates.Template_Type_Code, Documents.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9924813508987427,
            0.00012003879965050146,
            0.0002159605355700478,
            7.392565021291375e-05,
            0.00026173426886089146,
            7.107767305569723e-05,
            0.00023954246717039496,
            7.608150917803869e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the template type code for the template that is used by the document named Data Base?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Documents.Document_ID",
            "select Templates.Template_Type_Code, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9923912882804871,
            0.00012144931679358706,
            0.00021547163487412035,
            7.309413922484964e-05,
            0.00022482672648038715,
            7.346079655690119e-05,
            0.00025836433633230627,
            6.956334982533008e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you return the template type code of the template that is used by the document with the name of Data Base?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Template_Details",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9929364323616028,
            0.0001447043032385409,
            0.0004117503412999213,
            9.26440188777633e-05,
            0.0002763038210105151,
            8.736226300243288e-05,
            0.00038215945824049413,
            8.609214273747057e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the template type code of the template used to create the document called Data Base?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Templates.Template_Details",
            "select Templates.Template_Type_Code (ref. Templates.Template_Details)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9916365742683411,
            0.00010835827561095357,
            0.0001911112485686317,
            7.133474719012156e-05,
            0.00022719972184859216,
            6.914042751304805e-05,
            0.0013392650289461017,
            6.778963870601729e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me all document names using templates with template type code BK?",
        "gold_select": "select Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_Name, Templates.Template_Details",
            "select Documents.Document_Name, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9959807395935059,
            0.00012989772949367762,
            0.0001606974401511252,
            6.949876842554659e-05,
            0.00032547584851272404,
            7.031948916846886e-05,
            0.00019249804608989507,
            6.635859608650208e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all document names that use templates with the template type code BK.",
        "gold_select": "select Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_Name, Templates.Template_Details",
            "select Documents.Document_Name, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9953470826148987,
            0.00012719468213617802,
            0.0001688194606686011,
            6.82357422192581e-05,
            0.00031536805909126997,
            6.88031577738002e-05,
            0.00028385466430336237,
            6.601952918572351e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me what are the names of the documents whose templates have the template type codes of 'BK'?",
        "gold_select": "select Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_Name, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9923753142356873,
            0.0001663435105001554,
            0.00020539312390610576,
            7.877634197939187e-05,
            0.00040019830339588225,
            7.574424671474844e-05,
            0.0003176020400132984,
            6.941630999790505e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of documents with template BK?",
        "gold_select": "select Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_Name, Documents.Document_Description, Documents.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Documents",
            "Ref_Template_Types Templates Documents",
            "Templates Documents",
            "Ref_Template_Types Documents",
            "Paragraphs Documents"
        ],
        "align_scores": [
            0.9963520765304565,
            0.00011537149111973122,
            0.00012809157487936318,
            6.406036845874041e-05,
            0.00014959528925828636,
            5.6177414080593735e-05,
            0.00022816704586148262,
            5.812318704556674e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the names of documents using templates with the code BK?",
        "gold_select": "select Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description",
            "select Documents.Template_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Documents"
        ],
        "align_scores": [
            0.9952536821365356,
            0.00017466855933889747,
            0.00013899974874220788,
            7.036309398245066e-05,
            0.00017601002764422446,
            6.59367287880741e-05,
            0.00018262275261804461,
            6.900097650941461e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of all documents using the template with the code BK.",
        "gold_select": "select Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description",
            "select Documents.Template_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Paragraphs Documents"
        ],
        "align_scores": [
            0.9951304197311401,
            0.00010699371341615915,
            0.00012704569962807,
            6.708290311507881e-05,
            0.00013886066153645515,
            5.8692599850473925e-05,
            0.00016773157403804362,
            6.84053884469904e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me all the template type codes and the number of documents using each one?",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(Documents.Template_ID)",
            "select Templates.Template_Type_Code, count(*), Documents.Template_ID",
            "select Templates.Template_Type_Code, count(**)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9959457516670227,
            0.00029714175616391003,
            0.0009426340111531317,
            0.0002237472217530012,
            0.0002185314951930195,
            0.00012490179506130517,
            0.993535041809082,
            0.0002967120090033859
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please list all the template type codes and the number of documents using each type.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Documents.Document_Name, count(*)",
            "select Templates.Template_Type_Code, count(Documents.Template_ID)",
            "select Templates.Template_Type_Code, count(*), Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9960468411445618,
            0.00032604605075903237,
            0.00041182845598086715,
            0.00022043286298867315,
            0.0014873504405841231,
            0.00023043858527671546,
            0.0002405020350124687,
            0.00011626551713561639
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you list all the template type codes and the number of documents using each type?",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(Documents.Template_ID)",
            "select Documents.Document_Name, count(*)",
            "select Templates.Template_Type_Code, count(*), Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.995690643787384,
            0.0003066301578655839,
            0.0014061401598155499,
            0.0002150336658814922,
            0.0004126041312702,
            0.00020769010006915778,
            0.00022137312043923885,
            0.0001094778926926665
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the template type codes and how many documents correspond to each type?",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Documents.Document_Name, count(*)",
            "select Templates.Template_Type_Code, count(*), Documents.Template_ID",
            "select Templates.Template_Type_Code.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9957829713821411,
            0.00026752360281534493,
            0.00044910114957019687,
            0.00020525747095234692,
            0.000151244574226439,
            0.00013162374671082944,
            0.000833071127999574,
            0.0001344383490504697
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the template type codes used in the documents, and how many documents use each type.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Documents.Document_Name, count(*)",
            "select Templates.Template_Type_Code, count(*), Documents.Template_ID",
            "select Templates.Template_Type_Code.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9960148334503174,
            0.00035296802525408566,
            0.0003415000974200666,
            0.00022232370974961668,
            0.00016478096949867904,
            0.0001203570791403763,
            0.0005212528049014509,
            0.00013518134073819965
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Could you give me the template type codes, and how many documents use each one?",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(*), Documents.Template_ID",
            "select Templates.Template_Type_Code, count(Documents.Template_ID)",
            "select Templates.Template_Type_Code, count(**)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9958862662315369,
            0.0003537908778525889,
            0.00018780976824928075,
            0.00013105978723615408,
            0.0009868079796433449,
            0.00023345059889834374,
            0.9938733577728271,
            0.00036415221984498203
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the code of the most commonly used template in documents?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Documents.Template_ID",
            "select Templates.Template_ID",
            "select Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9948549270629883,
            7.593769987579435e-05,
            0.9016299247741699,
            7.537783676525578e-05,
            0.9322865605354309,
            8.133444498525932e-05,
            0.010968833230435848,
            7.00314631103538e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which templates types did most documents use? Show me the document's template type and code.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Templates.Template_ID",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Templates.Version_Number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.00016625551506876945,
            6.57449709251523e-05,
            0.0004341991734690964,
            8.791458094492555e-05,
            0.0007108420832082629,
            9.618327749194577e-05,
            0.00020949500321876258,
            6.636188481934369e-05
        ],
        "align_select": "select Templates.Template_Type_Code, Templates.Date_Effective_From",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the template id of most common template type in documents.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Templates.Template_ID",
            "select Documents.Template_ID, Templates.Template_Type_Code",
            "select Documents.Template_ID definable Templates.Template_Type_Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9958536624908447,
            7.238965918077156e-05,
            0.9954699277877808,
            7.034980080788955e-05,
            0.0004734204849228263,
            5.9316538681741804e-05,
            0.00042429828317835927,
            7.029749394860119e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give me the template type code for the template that is most commonly used in documents?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Documents.Document_Description",
            "select Templates.Template_Type_Code (or Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates"
        ],
        "align_scores": [
            0.9935166835784912,
            8.554637315683067e-05,
            0.0014203098835423589,
            6.72572641633451e-05,
            0.0010623482521623373,
            6.423599552363157e-05,
            0.010883539915084839,
            8.48677518661134e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you list all the template type codes that aren't being used by any documents?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9662745594978333,
            0.08594181388616562,
            0.00025886588264256716,
            0.0002042085980065167,
            0.0005269090761430562,
            0.00031956713064573705,
            0.0006828467012383044,
            0.00044297132990323007
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Give me a list of template type codes which are not used by any document.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Templates",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9777805209159851,
            0.9319471120834351,
            0.000231376921874471,
            0.00038076977944001555,
            0.000419415911892429,
            0.00040098055615089834,
            0.0005569582572206855,
            0.0025242799893021584
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you show me all template type codes that aren't used by any documents?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Documents.Template_ID, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Paragraphs Templates Documents",
            "Templates",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.986227810382843,
            0.9795762300491333,
            0.0004136734060011804,
            0.0004802551120519638,
            0.0006872994708828628,
            0.0006321565015241504,
            0.00018766550056170672,
            0.0001539679360575974
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you show me all the template type codes which are not used by any document?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Templates",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9849293828010559,
            0.09428811818361282,
            0.0005447841831482947,
            0.00030013639479875565,
            0.00028366828337311745,
            0.00019792927196249366,
            0.0009850776987150311,
            0.0004365646746009588
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you show me all template type codes that are not used by any document?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9878688454627991,
            0.07212576270103455,
            0.0003716879291459918,
            0.0002267366071464494,
            0.0006583645590581,
            0.000319360668072477,
            0.001176773919723928,
            0.0004608582239598036
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Display all the template type codes.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Description",
            "select t0.c, Ref_Template_Types.Template_Type_Description",
            "select distinct Ref_Template_Types.Template_Type_Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates",
            "Templates",
            "Paragraphs",
            "Documents",
            "Templates Documents"
        ],
        "align_scores": [
            0.9946423768997192,
            0.0027298296336084604,
            0.002083422848954797,
            0.0003373648796696216,
            0.00020891356689389795,
            0.00014961426495574415,
            0.023100722581148148,
            0.00012265716213732958
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me all the template type codes and descriptions?",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description,",
            "select Documents.Document_ID, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.9935383200645447,
            0.00010917306644842029,
            0.9939647316932678,
            0.000102557911304757,
            0.0009709320147521794,
            8.73267708811909e-05,
            0.00027099516591988504,
            0.0001036352914525196
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list all template types along with the template type codes and template type descriptions?",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select t0.c2, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description,"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.9864494204521179,
            0.00035582087002694607,
            0.9902597069740295,
            0.0004593786143232137,
            0.0006735373754054308,
            0.00030393304768949747,
            0.0013843640917912126,
            0.00014898160588927567
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the template type code and description for each template type?",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select Documents.Document_Name, Ref_Template_Types.Template_Type_Description",
            "select t0.c2, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9930229187011719,
            0.16607540845870972,
            0.9938976168632507,
            0.45622196793556213,
            0.00027360321837477386,
            0.00019407656509429216,
            0.000670521694701165,
            0.0005023079575039446
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the template type codes and descriptions?",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description,",
            "select Documents.Document_ID, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9938644766807556,
            0.00048063244321383536,
            0.9943631887435913,
            0.0006528167868964374,
            0.0009482286404818296,
            0.00011688834638334811,
            0.00027742591919377446,
            0.00017555197700858116
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all template type codes and descriptions.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description,",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description."
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.9940527081489563,
            0.00010103739623446018,
            0.9945405125617981,
            8.914160571293905e-05,
            0.0005859033553861082,
            8.618676656624302e-05,
            0.0013225789880380034,
            9.015582327265292e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the code and description for each template type?",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select Documents.Document_Name, Ref_Template_Types.Template_Type_Description",
            "select Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9937881827354431,
            0.25169506669044495,
            0.9944378137588501,
            0.6367606520652771,
            0.00046820336137898266,
            0.0002708417014218867,
            0.5103350877761841,
            0.36391404271125793
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the type codes and descriptions for all template types?",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select t0.c2, Ref_Template_Types.Template_Type_Description",
            "select Paragraphs.Paragraph_ID, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9938993453979492,
            0.0008576778927817941,
            0.9945055842399597,
            0.000893625256139785,
            0.0006684882682748139,
            0.00030504746246151626,
            0.000312621210468933,
            0.000176910703885369
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the template type description for the template type code \"AD\"?",
        "gold_select": "select Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, t0.c2",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9951336979866028,
            9.943953773472458e-05,
            0.00015886311302892864,
            7.681898568989709e-05,
            0.00025282977730967104,
            8.290788537124172e-05,
            0.0001281837176065892,
            7.222603016998619e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the template type descriptions for template type code \"AD\"?",
        "gold_select": "select Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, t0.c2",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.9955724477767944,
            0.00011768713011406362,
            0.00016814148693811148,
            8.004967094166204e-05,
            0.0002717501192819327,
            8.805478137219325e-05,
            0.00013402926560956985,
            7.932414155220613e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the template type descriptions for template type codes starting with a digit 'AD'?",
        "gold_select": "select Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, t0.c2",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.01799185760319233,
            0.00010841614857781678,
            0.00015840554260648787,
            7.695668318774551e-05,
            0.0002984966558869928,
            8.186177001334727e-05,
            0.00011554412776604295,
            7.410364923998713e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show the template type descriptions for template type code \"AD\"?",
        "gold_select": "select Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, t0.c2",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9957919120788574,
            0.00011413566244300455,
            0.00017288349044974893,
            8.207985229091719e-05,
            0.0002767446276266128,
            8.70490912348032e-05,
            0.00014238880248740315,
            8.104866719804704e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the template type descriptions for template type code \"AD\" please.",
        "gold_select": "select Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, t0.c2",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9961764812469482,
            0.00010865335207199678,
            0.00016163424879778177,
            7.538273348473012e-05,
            0.0002532835933379829,
            8.028581942198798e-05,
            0.00012920558219775558,
            7.483980152755976e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you return the template type description of the template type AD?",
        "gold_select": "select Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Description, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.9947697520256042,
            8.265166252385825e-05,
            0.00012453134695533663,
            7.065732643241063e-05,
            0.00011488976451801136,
            6.421572470571846e-05,
            0.00023041179520078003,
            7.836813892936334e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the template type code for template type description \"Book\"?",
        "gold_select": "select Ref_Template_Types.Template_Type_Code",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code",
            "select Templates.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select t0.c, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9960428476333618,
            8.826184784993529e-05,
            0.9961742758750916,
            9.808818140299991e-05,
            0.00017947233573067933,
            6.70426816213876e-05,
            0.000343446183251217,
            7.432388520101085e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In the template type description field, what is the template type code for template types \"Book\"?",
        "gold_select": "select Ref_Template_Types.Template_Type_Code",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select t0.c, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.9870160818099976,
            7.521513180108741e-05,
            0.000527050462551415,
            7.314238609978929e-05,
            0.00024031064822338521,
            8.720944606466219e-05,
            0.00023435291950590909,
            7.307845953619108e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the template type code for template type description 'Book'?",
        "gold_select": "select Ref_Template_Types.Template_Type_Code",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code",
            "select Templates.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select t0.c, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9960403442382812,
            8.652191900182515e-05,
            0.9963483214378357,
            9.649966523284093e-05,
            0.00019193922344129533,
            6.750110333086923e-05,
            0.00032007088884711266,
            7.352841930696741e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "A template named 'book' has the description 'Book'. Show me the type code of this template, please.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Version_Number",
            "select Templates.Template_ID",
            "select Templates.Template_Type_Code,"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9941850304603577,
            9.871508518699557e-05,
            0.0006455268012359738,
            8.022421388886869e-05,
            0.05765756592154503,
            0.00010421403567306697,
            0.004962739534676075,
            7.852657290641218e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the template type code for the template with the description 'Book'.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Version_Number",
            "select Ref_Template_Types.Template_Type_Code",
            "select Templates.Template_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types Templates",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9967201352119446,
            9.778709500096738e-05,
            0.0003015150723513216,
            7.801760511938483e-05,
            0.9960619807243347,
            8.54952450026758e-05,
            0.010182855650782585,
            7.446506060659885e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which template type has the description \"Book\"? Return its type code.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code",
            "select Templates.Template_Type_Code",
            "select Templates.Template_ID",
            "select Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9955407977104187,
            9.92839559330605e-05,
            0.9963207244873047,
            0.00011469973833300173,
            0.0013480500783771276,
            0.00011924306454602629,
            0.00034472878905944526,
            8.659125160193071e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the template type code for \"Book\" template.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Code",
            "select Templates.Template_ID",
            "select Templates.Version_Number"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types Templates",
            "Paragraphs Templates"
        ],
        "align_scores": [
            0.9962111711502075,
            0.00010202357225352898,
            0.9961485862731934,
            8.78913706401363e-05,
            0.0017040629172697663,
            8.10307392384857e-05,
            0.0003511934482958168,
            7.029822882032022e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the template type descriptions of all the templates ever used by any document.",
        "gold_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Templates.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9891920685768127,
            0.0017987688770517707,
            0.00027413430507294834,
            0.00011632173118414357,
            0.00025268711033277214,
            0.00012397769023664296,
            0.8930522799491882,
            0.0012356427032500505
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all the distinct template type descriptions for the templates used by any documents.",
        "gold_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select distinct Ref_Template_Types.Template_Type_Description",
            "select distinct Ref_Template_Types.Template_Type_Description, Templates.Template_Type_Code",
            "select distinct Ref_Template_Types.Template_Type_Description, Documents.Template_ID",
            "select distinct Ref_Template_Types.Template_Type_Description, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9946632385253906,
            0.015200651250779629,
            0.0003182145592290908,
            0.0001004987207124941,
            0.0009581156191416085,
            0.00013060454512014985,
            0.0003245376283302903,
            0.0001478221092838794
        ],
        "align_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the template type descriptions of each template ever used.",
        "gold_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Templates.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Templates.Template_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Templates",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates Paragraphs"
        ],
        "align_scores": [
            0.9771993160247803,
            0.002658272860571742,
            0.0004396358272060752,
            0.00021467497572302818,
            0.00028073403518646955,
            0.00016091518045868725,
            0.0026481153909116983,
            0.002783377654850483
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the template type descriptions for every template used by any document.",
        "gold_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Templates.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Description, Templates.Template_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9935269355773926,
            0.0007751929806545377,
            0.0003073507687076926,
            0.0001150134121417068,
            0.00026397244073450565,
            0.00010909606498898938,
            0.000191958446521312,
            0.00011592143710004166
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the different descriptions by template that has been used to make documents.",
        "gold_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select distinct Ref_Template_Types.Template_Type_Description",
            "select distinct Ref_Template_Types.Template_Type_Description, Documents.Template_ID",
            "select distinct Documents.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Ref_Template_Types Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates Documents",
            "Templates Documents",
            "Paragraphs Documents"
        ],
        "align_scores": [
            0.005482804495841265,
            0.9880111813545227,
            0.0004124916740693152,
            0.0032396013848483562,
            0.00015940330922603607,
            0.02279997244477272,
            0.015009741298854351,
            0.0004748617939185351
        ],
        "align_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you return the different descriptions for templates used in the documents?",
        "gold_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select distinct Ref_Template_Types.Template_Type_Description",
            "select distinct Documents.Document_Description",
            "select distinct Ref_Template_Types.Template_Type_Description, Documents.Document_Description",
            "select distinct Templates.Version_Number, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates Documents",
            "Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9941813349723816,
            0.00010316820407751948,
            0.008377577178180218,
            9.631820284994319e-05,
            0.001959548331797123,
            7.357625872828066e-05,
            0.0002928282192442566,
            7.553499017376453e-05
        ],
        "align_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please return the different descriptions for the templates used to create documents.",
        "gold_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select distinct Ref_Template_Types.Template_Type_Description",
            "select distinct Documents.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select distinct Ref_Template_Types.Template_Type_Description, Documents.Template_ID",
            "select distinct Ref_Template_Types.Template_Type_Description, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates Documents",
        "table_candidates": [
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9958143830299377,
            0.0004382519400678575,
            0.000791555386967957,
            0.00013670159387402236,
            0.00024615071015432477,
            9.619363845558837e-05,
            0.000432455213740468,
            8.958386024460196e-05
        ],
        "align_select": "select distinct Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the template id for presentation with template type description 'Presentation'?",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select Templates.Template_ID, Ref_Template_Types.Template_Type_Code",
            "select Templates.Template_ID, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9961024522781372,
            0.00030778415384702384,
            0.00015725653793197125,
            9.37416116357781e-05,
            0.00015670538414269686,
            9.056890849024057e-05,
            0.00026147536118514836,
            0.00012451864313334227
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me template ids with template type description 'Presentation'.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select Templates.Template_ID, Ref_Template_Types.Template_Type_Code",
            "select Templates.Template_ID, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9968236684799194,
            0.00010286309407092631,
            0.00025007897056639194,
            7.189076859503984e-05,
            0.0002669472887646407,
            7.050870772218332e-05,
            0.0002944446459878236,
            7.063589873723686e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the template ids for template with description \"presentation\"?",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9954177141189575,
            0.00015759517555125058,
            0.0001515812473371625,
            7.856980664655566e-05,
            0.00013269302144180983,
            7.604560232721269e-05,
            0.0001315533445449546,
            7.45315701351501e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all template ids with template type description Presentation?",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select t1.c, Ref_Template_Types.Template_Type_Description",
            "select Templates.Template_ID, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9721797108650208,
            0.0006846821052022278,
            0.009041821584105492,
            7.572655158583075e-05,
            0.0002682162157725543,
            7.572171307401732e-05,
            0.0003359770344104618,
            9.568616223987192e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the template ids corresponding to presentations?",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select Templates.Template_ID, t0.c2",
            "select Templates.Template_ID - Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates Paragraphs"
        ],
        "align_scores": [
            0.9955719709396362,
            0.00020237377611920238,
            0.0001207543900818564,
            7.512324373237789e-05,
            0.0004143141268286854,
            7.907988765509799e-05,
            0.0002822767128236592,
            6.305763963609934e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the ids of presentation templates.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select Templates.Template_ID, t0.c2",
            "select Templates.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9965177774429321,
            0.0001619850954739377,
            0.00010960781946778297,
            6.573683640453964e-05,
            0.0006979013560339808,
            7.265486783580855e-05,
            0.00011292254930594936,
            5.934466025792062e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the ids for templates with the description 'Presentation'?",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select Templates.Template_ID, t0.c2",
            "select Templates.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates Paragraphs"
        ],
        "align_scores": [
            0.9961012601852417,
            0.0001368709054077044,
            0.00018454634118825197,
            7.363015174632892e-05,
            0.00037455165875144303,
            7.183279376477003e-05,
            0.00011282082414254546,
            7.173215999500826e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I'd like to see the IDs for templates with the description \"Presentation\".",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_ID",
            "select Templates.Template_ID, Ref_Template_Types.Template_Type_Description",
            "select Templates.Template_ID, t0.c2",
            "select Templates.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Templates Paragraphs"
        ],
        "align_scores": [
            0.9962571859359741,
            0.00019465884543024004,
            0.00021730769367422909,
            9.03168911463581e-05,
            0.000408194464398548,
            9.238288475899026e-05,
            0.0001210255068144761,
            7.293358066817746e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "There are how many paragraphs in total?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Paragraphs.Paragraph_ID",
            "select count(*), Paragraphs.Document_ID",
            "select count(*), Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9906664490699768,
            8.012964099179953e-05,
            0.00017600011778995395,
            6.779158138670027e-05,
            0.00014811643632128835,
            7.597333751618862e-05,
            0.0002479245013091713,
            6.833209772594273e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the number of the paragraphs.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Paragraphs.Paragraph_ID",
            "select count(*), Paragraphs.Document_ID",
            "select count(*), Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9914885759353638,
            7.281279977178201e-05,
            0.00013767457858193666,
            6.656058394582942e-05,
            0.00013782827591057867,
            7.33136766939424e-05,
            0.00019168757717125118,
            7.462914800271392e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many paragraphs are there altogether?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Paragraphs.Paragraph_ID",
            "select count(*), Paragraphs.Document_ID",
            "select count(*), Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9926409125328064,
            8.668427472002804e-05,
            0.00017473551270086318,
            6.326164293568581e-05,
            0.0001491726579843089,
            7.304592145374045e-05,
            0.00023103083367459476,
            6.305800343398005e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the total number of paragraph lines?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Paragraphs.Paragraph_Text)",
            "select sum(Paragraphs.Paragraph_Text)",
            "select count(*), Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Templates Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9948604702949524,
            0.00011740029003703967,
            0.0005439598462544382,
            7.429753168253228e-05,
            0.0006982287741266191,
            7.311777881113812e-05,
            0.00023506949946749955,
            7.060680945869535e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Number the total number of paragraphs.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Paragraphs.Paragraph_ID",
            "select count(*), Paragraphs.Document_ID",
            "select count(*), Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.993202805519104,
            9.924032201524824e-05,
            0.0001417380408383906,
            6.337461672956124e-05,
            0.00013323135499376804,
            7.122693205019459e-05,
            0.0002124552265740931,
            6.585390656255186e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me how many paragraphs there are for the document named \"Summer Show\".",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9947265982627869,
            6.801199924666435e-05,
            0.00016220966062974185,
            6.283028051257133e-05,
            0.00020382538787089288,
            6.628978735534474e-05,
            0.00027402458363212645,
            5.794133903691545e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many paragraphs are there for the document named 'Summer Show'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9945017099380493,
            6.828142068115994e-05,
            0.0001656666718190536,
            6.36135446256958e-05,
            0.0002155585534637794,
            6.680878141196445e-05,
            0.00027745607076212764,
            5.787258851341903e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many paragraphs in document with the name 'Summer Show'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.995387852191925,
            7.152793114073575e-05,
            0.00018284226825926453,
            5.599951691692695e-05,
            0.00018391937192063779,
            5.856216375832446e-05,
            0.00032668266794644296,
            5.893415800528601e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In the document named 'Summer Show' how many paragraphs does it have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(distinct Paragraphs.Paragraph_ID)",
            "select count(*), Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.9944919347763062,
            7.725226896582171e-05,
            0.000170333354617469,
            6.363902502926067e-05,
            0.0004261097637936473,
            6.213292363099754e-05,
            0.00018690868455450982,
            6.59576035104692e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In how many paragraphs does the document named 'Summer Show' appear?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Paragraphs.Paragraph_Text)",
            "select count(*), Documents.Document_ID",
            "select count(distinct Paragraphs.Paragraph_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9911927580833435,
            0.00022567888663616031,
            0.041894976049661636,
            6.809707701904699e-05,
            0.00025322637520730495,
            0.0001309915678575635,
            0.017217585816979408,
            6.558454333571717e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the total number of paragraphs for the document 'Summer Show'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Document_Name",
            "select count(*), Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9963776469230652,
            8.215456909965724e-05,
            0.0001684418966760859,
            6.62896636640653e-05,
            0.0002671654801815748,
            6.494760600617155e-05,
            0.0002607707865536213,
            6.972174742259085e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In what number of paragraphs is document titled \"Summer Show\"?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Paragraphs.Paragraph_Text)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9878389835357666,
            0.0006821611896157265,
            0.0008402545936405659,
            0.00010218500392511487,
            0.00019207103468943387,
            0.00022245031141210347,
            0.000262743589701131,
            0.00043814853415824473
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the total number of paragraphs in the file named'summer show'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.9852582812309265,
            0.00032260932493954897,
            0.00018101943715009838,
            0.0001342120231129229,
            0.00020668342767748982,
            0.00013819042942486703,
            0.00025796209229156375,
            0.0002701737394090742
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can I count the number of paragraphs in document Summer Show?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_Name",
            "select count(*), Documents.Document_ID",
            "select count(distinct Paragraphs.Paragraph_Text)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9958718419075012,
            8.475816866848618e-05,
            0.00023107709421310574,
            6.486689380835742e-05,
            0.00016739476996008307,
            6.436267722165212e-05,
            0.0008000588277354836,
            6.198230403242633e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the number of paragraphs in the document Summer Show?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_Name",
            "select count(*), Documents.Document_ID",
            "select count(distinct Paragraphs.Paragraph_Text)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9946988821029663,
            7.972316961968318e-05,
            0.00018501780868973583,
            6.739079981343821e-05,
            0.00015003241423983127,
            6.645188113907352e-05,
            0.0005842657992616296,
            6.095576100051403e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the paragraph details for paragraph with 'Korea' in the text?",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9957008957862854,
            0.00019488374528009444,
            0.00028136157197877765,
            9.200845670420676e-05,
            0.00027270783903077245,
            9.949350351234898e-05,
            0.00024794580531306565,
            0.00010166307765757665
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the paragraph details for paragraph with text 'Korea'?",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9957681894302368,
            0.00015608947433065623,
            0.00020181862055324018,
            9.153230348601937e-05,
            0.0002098066615872085,
            9.057149873115122e-05,
            0.00021654798183590174,
            8.526759484084323e-05
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the details for paragraph 'Korea'",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9963010549545288,
            0.00010940431820927188,
            0.00028511183336377144,
            7.557310163974762e-05,
            0.000228389268158935,
            7.405025826301426e-05,
            0.00021710760483983904,
            7.439522596541792e-05
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the paragraph details for paragraph with the text 'Korea'.",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9957808256149292,
            0.0001470427232561633,
            0.00019757628615479916,
            8.036633516894653e-05,
            0.00019033363787457347,
            8.169356442522258e-05,
            0.00021457838010974228,
            8.224133489420637e-05
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the paragraphs that include the text 'Korea ', list all the details.",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9866829514503479,
            0.00020530873734969646,
            0.00037347382749430835,
            9.97166134766303e-05,
            0.0005014499183744192,
            0.00011203703616047278,
            0.000825165887363255,
            0.00011486544099170715
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the details for the paragraph including 'Korea '?",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9956004619598389,
            0.00011980277486145496,
            0.00029405782697722316,
            8.195862756110728e-05,
            0.0002952947688754648,
            8.68451243150048e-05,
            0.00030606944346800447,
            8.028856973396614e-05
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give the detail for the paragraph containing the text, 'Korea', in it.",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9921116828918457,
            0.00011762967915274203,
            0.0002435208298265934,
            8.48248673719354e-05,
            0.00019569990399759263,
            8.572954538976774e-05,
            0.0002237284352304414,
            9.013845556182787e-05
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the details of the paragraph that contains the text 'Korea'.",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9948992133140564,
            0.00010851275874301791,
            0.0002794127503875643,
            8.280271867988631e-05,
            0.0003023040189873427,
            8.284324576379731e-05,
            0.00021510706574190408,
            7.556135824415833e-05
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the details of paragraph including the word Korea '.",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.944337785243988,
            0.0001375815481878817,
            0.0002548642223700881,
            7.415199797833338e-05,
            0.0002708301180973649,
            7.693775842199102e-05,
            0.0003993055725004524,
            7.333857502089813e-05
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the paragraph ids and texts for document named 'Welcome to NY'.",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.9955533146858215,
            0.00014371616998687387,
            0.0005659538437612355,
            9.333068737760186e-05,
            0.0002510522026568651,
            7.22141849109903e-05,
            0.0007879681652411819,
            9.068912186194211e-05
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me all the paragraph ids and texts of the document with the name 'Welcome to NY'?",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.9944314360618591,
            0.00016078725457191467,
            0.00039612199179828167,
            0.00010295730317011476,
            0.00039057538378983736,
            7.284488674486056e-05,
            0.0006230946164578199,
            9.0697685664054e-05
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all paragraph ids and texts for document with the name 'Welcome to NY'.",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.9955957531929016,
            0.00013538644998334348,
            0.00046434206888079643,
            9.25269559957087e-05,
            0.0003130993281956762,
            7.487629045499489e-05,
            0.0007594263879582286,
            8.775277092354372e-05
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Display the paragraph texts for document \"Customer reviews\"?",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description",
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9960281848907471,
            0.00010656880476744846,
            0.0001976622297661379,
            6.960800965316594e-05,
            0.00020706529903691262,
            6.527407094836235e-05,
            0.00014458761143032461,
            6.470366497524083e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the paragraph texts for the document 'Customer reviews'?",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description",
            "select Paragraphs.Paragraph_Text, Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9956669807434082,
            0.00011647379869828,
            0.00019360303122084588,
            6.71239904477261e-05,
            0.00021487481717485934,
            6.468454375863075e-05,
            0.00011985612218268216,
            6.196924368850887e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me all the paragraph texts for the document named \"Customer reviews\"?",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description",
            "select Paragraphs.Paragraph_Text, Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9952332377433777,
            0.00012102043547201902,
            0.00018856843234971166,
            7.224676664918661e-05,
            0.00021485269826371223,
            6.663342355750501e-05,
            0.00013234389189165086,
            6.323552952380851e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me all the paragraph text of document named 'Customer reviews'?",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9959768652915955,
            0.00013645518629346043,
            0.00017520581604912877,
            6.82796016917564e-05,
            0.00017400443903170526,
            6.64278632029891e-05,
            0.00020045142446178943,
            6.375650264089927e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the paragraph texts for the document \"Customer reviews\"?",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description",
            "select Paragraphs.Paragraph_Text, Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9955516457557678,
            0.0001109521763282828,
            0.00019551935838535428,
            6.750979082426056e-05,
            0.00021336243662517518,
            6.556366133736446e-05,
            0.00011879453086294234,
            6.21434737695381e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In this document, what is the paragraph text with the name 'customer reviews'?",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.992958664894104,
            0.00010725317406468093,
            0.00020095396030228585,
            6.246894918149337e-05,
            0.0001875810557976365,
            6.641507206950337e-05,
            0.00017673554248176515,
            6.116596341598779e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the paragraph texts for the selected document named Customer Reviews.",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description",
            "select Paragraphs.Paragraph_Text, Documents.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9937648773193359,
            8.027258445508778e-05,
            0.00014174128591548651,
            6.44392566755414e-05,
            0.00019604784029070288,
            6.250172009458765e-05,
            0.00011343538790242746,
            5.829738438478671e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the paragraph texts for the document named 'Customer reviews'",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description",
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9959218502044678,
            0.00010624219430610538,
            0.00015405152225866914,
            6.409116758732125e-05,
            0.00018884733435697854,
            6.306196883087978e-05,
            0.00013756043335888535,
            5.972601138637401e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the paragraph texts of document with the name 'Customer reviews'.",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description",
            "select Paragraphs.Paragraph_Text, Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9960946440696716,
            0.00017274919082410634,
            0.00016143740504048765,
            7.131761230994016e-05,
            0.00018896115943789482,
            6.308874435489997e-05,
            0.00012269576836843044,
            6.139726610854268e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the paragraph text for the 'customer reviews' document.",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9953444600105286,
            8.793026063358411e-05,
            0.00017768378893379122,
            6.070238305255771e-05,
            0.000132792629301548,
            5.939511174801737e-05,
            0.00016610274906270206,
            5.852676622453146e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the document ids corresponding to the number of paragraphs ordered by id.",
        "gold_select": "select Paragraphs.Document_ID, count(*)",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, count(*)",
            "select Paragraphs.Document_ID, count(*), Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_IDs, count(*)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.0607321560382843,
            0.07194691896438599,
            0.9917300343513489,
            0.0001084505784092471,
            0.00010506967373657972,
            5.9852700360352173e-05,
            0.9493781924247742,
            0.00010082114022225142
        ],
        "align_select": "select Paragraphs.Document_ID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "Show me the list of different document ids, ordered by id, and their number of paragraphs.",
        "gold_select": "select Paragraphs.Document_ID, count(*)",
        "select_candidates": [
            "select Paragraphs.Document_ID, count(*)",
            "select Paragraphs.Document_ID, count(Paragraphs.Paragraph_Text)",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text, count(*)",
            "select Documents.Document_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9959931373596191,
            0.0001287720224354416,
            0.0011168783530592918,
            0.00016041757771745324,
            0.00021606928203254938,
            9.677760681370273e-05,
            0.880179762840271,
            0.00013246054004412144
        ],
        "align_select": "select Paragraphs.Document_ID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "Show me the document ids, names and the number of paragraphs.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Template_ID, Documents.Document_Name, count(*)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9954580068588257,
            0.00014991899661254138,
            0.9474403262138367,
            0.00015206086391117424,
            0.9954580068588257,
            0.00014991899661254138,
            0.0010665440931916237,
            0.00014525311416946352
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you list all the document ids, names and the number of paragraphs in each document?",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name.c2, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.991418719291687,
            0.00019668461754918098,
            0.991418719291687,
            0.00019668461754918098,
            0.9797298908233643,
            0.00017469300655648112,
            0.0003853603557217866,
            0.000153194137965329
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me all the document ids, name and number of paragraphs in each document.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name.c2, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9909176230430603,
            0.00016987192793749273,
            0.9909176230430603,
            0.00016987192793749273,
            0.9893220663070679,
            0.00015770236495882273,
            0.000380318466341123,
            0.00014751388516742736
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you tell me the ids and names of the documents, as well as the number of paragraphs in each?",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name.c2, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9928870797157288,
            0.00019769933714997023,
            0.9928870797157288,
            0.00019769933714997023,
            0.91996830701828,
            0.0001966354757314548,
            0.00030842216801829636,
            0.00013971519365441054
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me all documents (ids) with names (names), as well as the number of paragraphs in each.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, count(*), Documents.Document_Name",
            "select Documents.Template_ID, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.3980075418949127,
            0.00024555742857046425,
            0.9817571043968201,
            0.00017418456263840199,
            0.979943573474884,
            0.0001212361894431524,
            0.0003324692079331726,
            0.00018924043979495764
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the names and ids of each document and the number of paragraphs per document.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Documents.Document_Name, Paragraphs.Document_ID, count(*)",
            "select Documents.Document_Name, Documents.Document_ID, count(*)",
            "select Documents.Document_Name, Paragraphs.Paragraph_ID, count(*)",
            "select Documents.Document_Name, Paragraphs.Document_ID, count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.99638831615448,
            0.00027435028459876776,
            0.97740638256073,
            0.00027250355924479663,
            0.0006003839080221951,
            0.00016856657748576254,
            0.002344943583011627,
            0.00016831120592541993
        ],
        "align_select": "select Documents.Document_Name, Paragraphs.Document_ID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List documents id and name, as well as the number of paragraphs in each.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*), Paragraphs.Document_ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9949330687522888,
            0.00016298146510962397,
            0.9573553800582886,
            0.00016890445840545,
            0.9949330687522888,
            0.00016298146510962397,
            0.0003326857404317707,
            0.0001317095011472702
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me list of all document ids with at least two paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID (Paragraphs.Paragraph_ID)",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9960506558418274,
            0.0001106713098124601,
            0.000238157415878959,
            5.450054595712572e-05,
            0.0005609005456790328,
            5.813316602143459e-05,
            0.0005770477582700551,
            5.633803448290564e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you list all document ids with at least 2 paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID (Paragraphs.Paragraph_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9961559176445007,
            0.00015646679094061255,
            0.00026977219386026263,
            6.556841253768653e-05,
            0.0006664453539997339,
            6.648565613431856e-05,
            0.0007658423855900764,
            6.978347664698958e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me a list of all the document ids containing at least two paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID (Paragraphs.Paragraph_ID)",
            "select Paragraphs.Document_ID,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9947379231452942,
            0.00010094206663779914,
            0.00019518703629728407,
            5.46796181879472e-05,
            0.00046060525346547365,
            5.9562200476648286e-05,
            0.001364241004921496,
            5.9983492974424735e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the document ids with at least two paragraphs? List them.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9957836866378784,
            0.00010044640657724813,
            0.00026799816987477243,
            5.690607213182375e-05,
            0.0002539805427659303,
            6.087994552217424e-05,
            0.0005425165873020887,
            5.981230424367823e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you tell me the ids of documents that contain 2 or more paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9950401186943054,
            0.00015136547153815627,
            0.9895104169845581,
            0.00012864559539593756,
            0.0003794975928030908,
            6.786260200897232e-05,
            0.0008797256741672754,
            7.973077299539e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For each document having 2 or more paragraphs, list the document id.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Documents.Document_ID, Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Paragraphs",
            "Templates Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9955281615257263,
            0.00012238866474945098,
            0.9930514097213745,
            0.00010798157745739445,
            0.00043962118797935545,
            7.068023842293769e-05,
            0.001154699013568461,
            7.95382002252154e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the document with the most paragraphs? What is the document's ID and name?",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select t2, Documents.Document_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9938003420829773,
            7.663132419111207e-05,
            0.00033702992368489504,
            6.102729821577668e-05,
            0.00040661051752977073,
            6.466555350925773e-05,
            0.005088093224912882,
            8.060110849328339e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which document has the most paragraphs? List their names and ids.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Document_ID",
            "select Documents.Document_Name, Paragraphs.Document_ID",
            "select Documents.Document_Name, Paragraphs.Paragraph_ID",
            "select Documents.Document_Name, Templates.Template_ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9944177865982056,
            0.00010378520528320223,
            0.9940167665481567,
            0.000115404516691342,
            0.005459417589008808,
            0.00010670273331925273,
            0.011973734013736248,
            0.00012470009096432477
        ],
        "align_select": "select Documents.Document_Name, Documents.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the document with the most paragraph(s)? List their id and name.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select t2, Documents.Document_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9865743517875671,
            0.00011379529314581305,
            0.0003548134700395167,
            6.766460137441754e-05,
            0.00051350228022784,
            7.203144195955247e-05,
            0.004403613042086363,
            0.00010141627717530355
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me what is the document id with least number of paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID (Paragraphs.Paragraph_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Ref_Template_Types Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9959498643875122,
            8.309879922308028e-05,
            0.0004212535568512976,
            5.661993782268837e-05,
            0.9952829480171204,
            8.130211062962189e-05,
            0.0010392764816060662,
            6.940690946066752e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give me the document id with the least number of paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID (Paragraphs.Paragraph_ID)",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Ref_Template_Types Paragraphs"
        ],
        "align_scores": [
            0.9958431124687195,
            8.581510337535292e-05,
            0.00036091951187700033,
            5.440935638034716e-05,
            0.0013448084937408566,
            6.808149191783741e-05,
            0.0004827248048968613,
            6.108127854531631e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you return to me the document id with the lowest number of paragraphs in it?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID, Paragraphs.Document_ID",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9942527413368225,
            7.639863906661049e-05,
            0.9947039484977722,
            7.483766239602119e-05,
            0.00032042840030044317,
            6.536595174111426e-05,
            0.00039748998824507,
            5.6400287576252595e-05
        ],
        "align_select": "select Documents.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "can you give me the Id of the document with the least number of paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_ID",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_ID, Paragraphs.Document_ID",
            "select Documents.Document_ID, Documents.Document_Description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.9946306943893433,
            9.29562229430303e-05,
            0.0008167318883351982,
            6.28258494543843e-05,
            0.0002965109597425908,
            7.029260450508446e-05,
            0.00025468910462222993,
            5.832151509821415e-05
        ],
        "align_select": "select Documents.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the document ID which has fewer paragraphs than any other document?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_ID, Paragraphs.Document_ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Templates Paragraphs",
            "Paragraphs"
        ],
        "align_scores": [
            0.9937507510185242,
            8.928664465202019e-05,
            0.994986891746521,
            8.176409028237686e-05,
            0.001981648150831461,
            6.230569124454632e-05,
            0.0003703682159539312,
            6.045668851584196e-05
        ],
        "align_select": "select Documents.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the document id with the fewest paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID (Paragraphs.Paragraph_ID)",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Ref_Template_Types Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9959271550178528,
            6.37418488622643e-05,
            0.00046033752732910216,
            5.365983088267967e-05,
            0.0013043401995673776,
            5.582601806963794e-05,
            0.0004503625677898526,
            6.066615242161788e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the document id which has the least number of paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID (Paragraphs.Paragraph_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Ref_Template_Types Paragraphs"
        ],
        "align_scores": [
            0.9953243732452393,
            6.803780706832185e-05,
            0.0002526970056351274,
            5.1215629355283454e-05,
            0.9937617182731628,
            7.05382990418002e-05,
            0.0004388612287584692,
            6.146475061541423e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the document ids that have between one and two paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID (Paragraphs.Paragraph_ID)",
            "select Paragraphs.Document_ID,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9956538677215576,
            0.00014251309039536864,
            0.00019055517623201013,
            6.1401427956298e-05,
            0.0003184940724167973,
            6.993935676291585e-05,
            0.0012605752563104033,
            6.614177982555702e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you give the ids of documents that have between 1 and 2 paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9942135214805603,
            0.00021371978800743818,
            0.9908027648925781,
            0.00019505605450831354,
            0.00033599958987906575,
            7.154444028856233e-05,
            0.0006121449987404048,
            7.547739369329065e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the document id for the documents that contain the paragraph text 'Brazil' and 'Ireland'.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9933691620826721,
            0.0001711237127892673,
            0.00014342005306389183,
            6.159154145279899e-05,
            0.6099960207939148,
            0.0003664102987386286,
            0.0001365013886243105,
            5.9879879700019956e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give me an id for each document that contains paragraph text \"Brazil\" and \"Ireland\".",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9937933683395386,
            0.00024190047406591475,
            0.9932762384414673,
            0.0003314005443826318,
            0.00016117808991111815,
            6.299742381088436e-05,
            0.00018702544912230223,
            6.459836004069075e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the teachers whose names have not yet been arranged to teach a course.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Teacher_ID",
            "select teacher.Name, course_arrange.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.647105872631073,
            0.023709043860435486,
            0.0002870696480385959,
            0.0001264062011614442,
            0.00038955057971179485,
            0.00017736133304424584,
            0.00037789903581142426,
            0.00036485897726379335
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all teachers who haven't been arranged yet to teach any course?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.8965319991111755,
            0.0019225962460041046,
            0.00022800351143814623,
            9.155552834272385e-05,
            0.0001823452184908092,
            9.059732838068157e-05,
            0.000293547724140808,
            0.0001803126506274566
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of those teachers whose teaching course has not been scheduled?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "course teacher",
            "course teacher course_arrange",
            "teacher"
        ],
        "align_scores": [
            0.9416368007659912,
            0.000660860794596374,
            0.0004655187076423317,
            0.0001165762369055301,
            0.00019330419308971614,
            8.630816591903567e-05,
            0.00020931553444825113,
            8.286852244054899e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which teachers teach at least two courses? Give their names.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Staring_Date",
            "select teacher.Name, course.Course_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9702381491661072,
            8.394367614528164e-05,
            0.0003031230589840561,
            6.52312592137605e-05,
            0.0007530560251325369,
            7.51559782656841e-05,
            0.000347283756127581,
            7.372206164291129e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are all the teacher names that teach at least two courses? List them.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Staring_Date",
            "select teacher.Name, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9803444147109985,
            0.00010745424515334889,
            0.00030359160155057907,
            6.398112600436434e-05,
            0.0011002037208527327,
            7.347515202127397e-05,
            0.0011162502923980355,
            7.12606415618211e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you show me the names of teachers teaching at least two courses?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Staring_Date",
            "select teacher.Name, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9882978796958923,
            0.00010054866288555786,
            0.0003702598623931408,
            6.770062464056537e-05,
            0.0027031705249100924,
            6.935702549526468e-05,
            0.0008177208947017789,
            7.052633009152487e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you tell me the names of teachers who teach at least two courses?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Staring_Date",
            "select teacher.Name, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9586309194564819,
            0.0001062130177160725,
            0.0005430142628028989,
            7.025132799753919e-05,
            0.0014297012239694595,
            7.322627789108083e-05,
            0.0009929677471518517,
            7.312182424357161e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which teachers hold at least 2 courses each? Name them, please!",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Staring_Date",
            "select teacher.Name, course.Course_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.968462347984314,
            0.00010134695912711322,
            0.00031179195502772927,
            7.215685036499053e-05,
            0.0003686167183332145,
            8.255413558799773e-05,
            0.0003338887181598693,
            7.4986535764765e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me the different hometowns of all teachers and the number of teachers from each hometown.",
        "gold_select": "select teacher.Hometown, count(*)",
        "select_candidates": [
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, count(*), teacher.Teacher_ID",
            "select teacher.Hometown, count(*), teacher.Hometown",
            "select teacher.Hometown.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.99577397108078,
            0.0003773863718379289,
            0.00024867281899787486,
            0.00012118174345232546,
            0.0004720338911283761,
            0.0001556008937768638,
            0.0004149621818214655,
            0.0001994588819798082
        ],
        "align_select": "select teacher.Hometown, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show the number of teachers from each hometown. List the hometowns they came from.",
        "gold_select": "select teacher.Hometown, count(*)",
        "select_candidates": [
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, count(*), teacher.Teacher_ID",
            "select count(*), teacher.Hometown",
            "select teacher.Hometown.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9943946599960327,
            0.0002384450490353629,
            0.00013547117123380303,
            0.00010572687460808083,
            0.9945911765098572,
            0.00021675392054021358,
            0.0005469657480716705,
            0.000225503186811693
        ],
        "align_select": "select teacher.Hometown, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me where the youngest teacher lives.",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Hometown (syntax teacher.Age)",
            "select teacher.Hometown (or teacher.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9935557246208191,
            6.588795076822862e-05,
            0.000449433020548895,
            5.872758265468292e-05,
            0.000723149161785841,
            6.0434031183831394e-05,
            0.0008402962703257799,
            6.623304216191173e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "In how many teachers are there teachers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), teacher.Teacher_ID",
            "select count(distinct teacher.Teacher_ID)",
            "select count(*), teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.8903726935386658,
            0.10209876298904419,
            0.00028190502780489624,
            0.0032252930104732513,
            0.0058727446012198925,
            0.0013312421506270766,
            0.0005013341433368623,
            0.047031767666339874
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of teachers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), teacher.Teacher_ID",
            "select count(*), teacher.Name",
            "select count(*), teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9947261214256287,
            7.770694355713204e-05,
            0.0001616163644939661,
            6.412516086129472e-05,
            0.00026770911063067615,
            8.679594611749053e-05,
            0.0001979666412808001,
            6.885229959152639e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please give me the total number of teachers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), teacher.Teacher_ID",
            "select count(*), teacher.Name",
            "select count(*), teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9943007230758667,
            0.9943007230758667,
            0.0001738687715260312,
            0.0001738687715260312,
            0.00026194198289886117,
            0.00026194198289886117,
            0.00023808884725440294,
            0.00023808884725440294
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the total count of teachers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), teacher.Teacher_ID",
            "select count(*), teacher.Name",
            "select t1.c count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9943051934242249,
            0.9943051934242249,
            0.00014912858023308218,
            0.00014912858023308218,
            0.00021908205235376954,
            0.00021908205235376954,
            0.0007772801327519119,
            0.0007772801327519119
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the teacher's name in ascending order by age.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name, teacher.Age - teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.995688259601593,
            0.00023058518127072603,
            0.00024457721156068146,
            0.00013572188618127257,
            0.00015982518380042166,
            0.0001243854931090027,
            0.0002858891966752708,
            0.00015475097461603582
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Please list the names of the teachers in ascending order of age.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name in teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.995153546333313,
            0.00029663846362382174,
            0.00020719270105473697,
            0.00012894057726953179,
            0.0001952462480403483,
            0.0001220853882841766,
            0.0008696230943314731,
            0.00023799626796972007
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the teacher names in ascending order of age.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name in teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9958043694496155,
            0.0003560358309186995,
            0.0002521042770240456,
            0.00013482090434990823,
            0.00019990213331766427,
            0.00012681791849900037,
            0.000795977539382875,
            0.0002756906906142831
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all teacher names in ascending order of their age.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name, teacher.Age - teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9956009387969971,
            0.00038693685200996697,
            0.0004487588012125343,
            0.00013313101953826845,
            0.0002213283587479964,
            0.00013540001236833632,
            0.0003370819322299212,
            0.0001855428417911753
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of teachers in ascending order of age? List them in ascending order.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name in teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9941832423210144,
            0.0002736110473051667,
            0.00019936534226872027,
            0.0001002240605885163,
            0.00021484121680259705,
            9.751741890795529e-05,
            0.0005476543447002769,
            0.00019548878481145948
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of teachers listed in ascending order of age? List them.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name (orthodox teacher.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9936891794204712,
            0.0003062322793994099,
            0.00021344138076528907,
            0.00011970811465289444,
            0.00019687693566083908,
            0.00011262777843512595,
            0.001589719788171351,
            0.0001959743967745453
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of the teachers in ascending order of age?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name in teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9951826930046082,
            0.00019175265333615243,
            0.00020578477415256202,
            0.00010700810526032001,
            0.00018377930973656476,
            0.0001182545383926481,
            0.0008169194916263223,
            0.000182308693183586
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you show me the names of the teachers in ascending order by age?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name (ordered by teacher.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.993881106376648,
            0.00021882464352529496,
            0.00020020427473355085,
            0.00011459195229690522,
            0.00019717111717909575,
            0.00012680460349656641,
            0.00540437176823616,
            0.0001349083468085155
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all the teacher names sorted in ascending age.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name (ordered teacher.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9953580498695374,
            0.00042833577026613057,
            0.00026071607135236263,
            0.0001250059431185946,
            0.00022248209279496223,
            0.0001127060895669274,
            0.002616605721414089,
            0.00020601092546712607
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of the teachers arranged in ascending order of their ages?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name (ordered teacher.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9941808581352234,
            0.00018254978931508958,
            0.00030398982926271856,
            0.00011047824955312535,
            0.00020059483358636498,
            0.00012012111983494833,
            0.0034827985800802708,
            0.00016992406744975597
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "The ages of teachers (in years), where do they live (hometown)?",
        "gold_select": "select teacher.Age, teacher.Hometown",
        "select_candidates": [
            "select teacher.Age, teacher.Hometown",
            "select teacher.Teacher_ID, teacher.Age, teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Age, teacher.Hometown, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9952444434165955,
            0.0034404911566525698,
            0.0001842010678956285,
            0.00021606989321298897,
            0.9950489401817322,
            0.011067431420087814,
            0.00014462624676525593,
            0.00013762050366494805
        ],
        "align_select": "select teacher.Age, teacher.Hometown",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the ages and hometowns of all teachers.",
        "gold_select": "select teacher.Age, teacher.Hometown",
        "select_candidates": [
            "select teacher.Age, teacher.Hometown",
            "select teacher.Teacher_ID, teacher.Age, teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Age, teacher.Hometown, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9944548010826111,
            0.0018093290273100138,
            0.0001932393352035433,
            0.000163849355885759,
            0.9951382279396057,
            0.002814666135236621,
            0.00014873688633088022,
            0.0001283870224142447
        ],
        "align_select": "select teacher.Age, teacher.Hometown",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the ages and hometowns of all teachers.",
        "gold_select": "select teacher.Age, teacher.Hometown",
        "select_candidates": [
            "select teacher.Age, teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select distinct teacher.Age, teacher.Hometown",
            "select teacher.Age, teacher.Hometown,"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.994236171245575,
            9.529244562145323e-05,
            0.9950723052024841,
            0.00010512498556636274,
            0.002959736855700612,
            9.225295070791617e-05,
            0.0040384032763540745,
            7.930235005915165e-05
        ],
        "align_select": "select teacher.Age, teacher.Hometown",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For each teacher, tell me his/her age and hometown.",
        "gold_select": "select teacher.Age, teacher.Hometown",
        "select_candidates": [
            "select teacher.Age, teacher.Hometown",
            "select teacher.Teacher_ID, teacher.Age, teacher.Hometown",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Hometown, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9947640895843506,
            0.9802461266517639,
            0.0016000043833628297,
            0.003617688547819853,
            0.8365289568901062,
            0.9723386764526367,
            0.9949860572814941,
            0.9863139390945435
        ],
        "align_select": "select teacher.Age, teacher.Hometown",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the ages and hometowns of all the teachers.",
        "gold_select": "select teacher.Age, teacher.Hometown",
        "select_candidates": [
            "select teacher.Age, teacher.Hometown",
            "select teacher.Teacher_ID, teacher.Age, teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Age, teacher.Hometown, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.966697096824646,
            0.00461520254611969,
            0.0002475560177117586,
            0.00018881204596254975,
            0.9709928035736084,
            0.007071090396493673,
            0.00016877114831004292,
            0.00013739759742747992
        ],
        "align_select": "select teacher.Age, teacher.Hometown",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Who is a teacher whose hometown is not Little Lever Urban District? Give his/her name?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Name - teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9777768850326538,
            0.00018326396821066737,
            0.000323785119690001,
            8.826655539451167e-05,
            0.0002034958451986313,
            7.321943121496588e-05,
            0.0004893969744443893,
            7.399476453429088e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which teachers' hometown is not listed to be Little Lever Urban District? List their names.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Hometown, teacher.Teacher_ID",
            "select teacher.Name, teacher.Hometown, t1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.5733039975166321,
            0.4116661548614502,
            0.00033899914706125855,
            0.00027550675440579653,
            0.00015898920537438244,
            9.494530968368053e-05,
            0.00021897847182117403,
            9.410551137989387e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of the teachers whose hometown is not 'Little Lever Urban District'.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Name - teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9606893658638,
            0.00011668378283502534,
            0.0002259308093925938,
            7.309413922484964e-05,
            0.00016067891556303948,
            6.455642869696021e-05,
            0.00022458506282418966,
            6.66434716549702e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of all the teacher whose hometown is not  Little Lever Urban District ''?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Name - teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9041966199874878,
            0.02131088450551033,
            0.00016055132437031716,
            0.00011954236833844334,
            0.00013972267333883792,
            8.823617827147245e-05,
            0.00019630765018519014,
            0.00010295651736669242
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the name of teachers whose hometown is not Little Lever Urban District?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Hometown, teacher.Age",
            "select teacher.Name, teacher.Hometown, t1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9756104350090027,
            0.00016863987548276782,
            0.00023108722234610468,
            9.238041820935905e-05,
            0.00012362506822682917,
            6.190015119500458e-05,
            0.00013179656525608152,
            6.528210360556841e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of the teachers whose hometown is not Little Lever Urban District.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Name - teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9586675763130188,
            0.00014578957052435726,
            0.0002591078809928149,
            8.189331128960475e-05,
            0.00018055351392831653,
            6.783549906685948e-05,
            0.00024182644847314805,
            6.782248965464532e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the names of the teachers whose hometown is not the Little Lever Urban District''?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Name - teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.1372745931148529,
            0.00024732365272939205,
            0.0002307305549038574,
            7.92807259131223e-05,
            0.00017517975356895477,
            6.860620487714186e-05,
            0.00028884041239507496,
            7.954396278364584e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which teachers have the name of hometown not Little Lever Urban District'? list their name.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.644762396812439,
            0.00019133112800773233,
            0.00025229420862160623,
            8.915859507396817e-05,
            0.00022162272944115102,
            7.425120566040277e-05,
            0.00019460538169369102,
            7.903388905106112e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the names of teachers aged either 32 or 33?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name ou teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9928253889083862,
            0.0005585142644122243,
            0.00015532516408711672,
            7.058122719172388e-05,
            0.00017672625835984945,
            8.247600635513663e-05,
            0.0006490759551525116,
            8.726584928808734e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the teachers aged either 32 or 33? Show their names.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name - teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9942996501922607,
            0.00034139654599130154,
            0.0001864441146608442,
            7.033799920463935e-05,
            0.00026397069450467825,
            8.884518319973722e-05,
            0.00033271528081968427,
            6.939559534657747e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the names of teachers aged either 32 or 33?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name ou teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9930096864700317,
            0.0005065221921540797,
            0.00016751213115639985,
            7.341562013607472e-05,
            0.00017930968897417188,
            8.624579641036689e-05,
            0.0007868321263231337,
            8.529751357855275e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which teachers are aged 32 or 33 years old? List their names.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name ou teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9918603301048279,
            0.00040870902012102306,
            0.0001880649506347254,
            7.95827218098566e-05,
            0.0002355985634494573,
            0.00010451217531226575,
            0.0009055815753526986,
            0.00010187006409978494
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which teachers are aged between 32 and 33? List their names.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9925702214241028,
            0.0004155139613430947,
            0.00018982852634508163,
            9.19135709409602e-05,
            0.00021241918148007244,
            9.898854477796704e-05,
            0.00020420353394001722,
            8.955790690379217e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the teacher names whose age ranges from 32 to 33.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9930445551872253,
            0.00024521281011402607,
            0.00018394131620880216,
            9.59839962888509e-05,
            0.00017890185699798167,
            8.049672760535032e-05,
            0.0001749107032082975,
            7.281960279215127e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the two teachers aged between 32 and 33? Give me their names.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name and teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.0003886473714374006,
            0.9954103827476501,
            6.330599717330188e-05,
            0.000140956457471475,
            8.376982441404834e-05,
            0.00029308797093108296,
            9.228621638612822e-05,
            0.0013022813946008682
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of the teachers whose ages are either 32 or 33.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9931161999702454,
            0.0004932861193083227,
            0.0001672502257861197,
            7.642020500497892e-05,
            0.00021154581918381155,
            8.396385237574577e-05,
            0.00019804650219157338,
            6.765569560229778e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which teacher has the youngest hometown? List their hometown.",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name",
            "select teacher.Hometown",
            "select teacher.Name, teacher.Hometown,"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.0005166669143363833,
            7.011660636635497e-05,
            0.046644359827041626,
            8.333099685842171e-05,
            0.9908983111381531,
            6.515304994536564e-05,
            0.00040260303649120033,
            6.678036152152345e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "For each teacher, how many hometowns are there?",
        "gold_select": "select teacher.Hometown, count(*)",
        "select_candidates": [
            "select count(distinct teacher.Hometown)",
            "select count(distinct teacher.Hometown), teacher.Teacher_ID",
            "select teacher.Teacher_ID, count(distinct teacher.Hometown)",
            "select teacher.Hometown, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.5514904260635376,
            0.00010047946125268936,
            0.854966402053833,
            0.00015513657126575708,
            0.858691394329071,
            0.00017722795018926263,
            0.9931222796440125,
            0.00021298885985743254
        ],
        "align_select": "select teacher.Hometown, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you give the most common hometowns for teachers?",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Hometown, t1.c4",
            "select top-most-common(teacher.Hometown)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9947742819786072,
            7.893161819083616e-05,
            0.0002146055776393041,
            6.076186036807485e-05,
            0.000548790383618325,
            6.524084164993837e-05,
            0.00026421493384987116,
            7.437948079314083e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For which teacher, where was his/her hometown again? Provide me the most frequent city.",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, teacher.Teacher_ID",
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.991806149482727,
            7.200245454441756e-05,
            0.0005002333782613277,
            6.485291669378057e-05,
            0.007151467725634575,
            6.289411248872057e-05,
            0.00022620262461714447,
            6.24139211140573e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Could you tell me the most common hometowns for teachers?",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Hometown, t1.c4",
            "select top-most-common(teacher.Hometown)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9948293566703796,
            7.660655683139339e-05,
            0.00026346530648879707,
            6.0976220993325114e-05,
            0.0005636782734654844,
            6.570687401108444e-05,
            0.0002933406794909388,
            6.923728506080806e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you show me the hometowns shared by at least two teachers?",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Hometown, at least-two-teacher.Hometown",
            "select teacher.Hometown, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9941287040710449,
            0.00011647402425296605,
            0.0002534790546633303,
            6.087396468501538e-05,
            0.003010296495631337,
            8.155898103723302e-05,
            0.0004955401527695358,
            7.55076325731352e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please show me the hometowns of at least two teachers.",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, min(*)",
            "select teacher.Hometown, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9794188737869263,
            0.0001123001566156745,
            0.0015933439135551453,
            7.884931255830452e-05,
            0.0006930692470632493,
            5.9380272432463244e-05,
            0.00018437781545799226,
            5.528029942070134e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the hometowns of at least two teachers.",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown--geometrically-significant-at-ground-level-gROUP BY-HAVING",
            "select teacher.Hometown--geometrically-significant-at-gROUP BY-HAVING",
            "select teacher.Hometown--geometrically-significant-at-least-teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9811246395111084,
            9.775968646863475e-05,
            0.0007506636902689934,
            8.672066178405657e-05,
            0.0009562993072904646,
            8.781027281656861e-05,
            0.0003719190426636487,
            6.73656104481779e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you list all the hometowns that are shared between at least two teachers?",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, at least-two-teacher.Hometown",
            "select teacher.Hometown, at least-two-teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9909537434577942,
            0.0001346223143627867,
            0.005051509477198124,
            6.937276339158416e-05,
            0.006213482469320297,
            8.506974700139835e-05,
            0.0005627693608403206,
            9.092967957258224e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you give me the names of all the towns from where at least two teachers come from?",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, t1.c4",
            "select teacher.Hometown, at least-two-teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9707996845245361,
            0.00014317150635179132,
            0.004250653553754091,
            7.95347077655606e-05,
            0.0004119281657040119,
            6.85751365381293e-05,
            0.00020760299230460078,
            8.083324792096391e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "From which towns are at least two teachers coming from?",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, t1.c4",
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9790971875190735,
            0.00010537570051383227,
            0.00031173249590210617,
            6.124720675870776e-05,
            0.004066281486302614,
            7.416911830659956e-05,
            0.00020763110660482198,
            6.122793274698779e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are all the names of the teachers and courses that are arranged to teach?",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select distinct teacher.Name, course.Course",
            "select course_arrange.Teacher_ID, course.Course",
            "select teacher.Name, course.Course, course_arrange.Course_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange"
        ],
        "align_scores": [
            0.467099130153656,
            0.00020534104260150343,
            0.017129696905612946,
            0.00010779660078696907,
            0.0009430351201444864,
            0.00011251731484662741,
            0.0003507311921566725,
            7.099326467141509e-05
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list the names of teachers and the courses they will be teaching.",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select course_arrange.Teacher_ID, course.Course",
            "select teacher.Name, course.Course, course_arrange.Teacher_ID",
            "select teacher.Name, course.Course, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.99177086353302,
            0.9293501377105713,
            0.000998521689325571,
            0.0007464855443686247,
            0.00017478600784670562,
            0.00015474036626983434,
            0.00015989347593858838,
            0.00013136770576238632
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names of the teachers and the courses they will be teaching?",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select course_arrange.Teacher_ID, course.Course",
            "select teacher.Name, course.Course, course_arrange.Course_ID",
            "select teacher.Name, course.Course, course_arrange.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9909594058990479,
            0.8295704126358032,
            0.001028420403599739,
            0.0007273891824297607,
            0.00022004650963936,
            0.00018286965496372432,
            0.00018129359523300081,
            0.00015346579311881214
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me names of all the teachers and courses that are taught by them?",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select course_arrange.Teacher_ID, course.Course",
            "select teacher.Name, course.Course, course_arrange.Teacher_ID",
            "select teacher.Name, course.Course, course_arrange.Course_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9387415051460266,
            0.9684463739395142,
            0.0016559709329158068,
            0.0007952065789140761,
            0.0002140740107279271,
            0.00015365466242656112,
            0.00023999487166292965,
            0.00016660844266880304
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the names and the courses taught by each teacher.",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Course, course_arrange.Teacher_ID",
            "select course_arrange.Teacher_ID, course.Course",
            "select teacher.Name, course.Course, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9927646517753601,
            0.99342280626297,
            0.000517579959705472,
            0.00017537781968712807,
            0.0003421518485993147,
            0.0006798914982937276,
            0.00033476875978522,
            0.000168716607731767
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the names and courses of all teachers.",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select course_arrange.Teacher_ID, course.Course",
            "select distinct teacher.Name, course.Course",
            "select teacher.Name, course.Course, course_arrange.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.992786705493927,
            0.00010839642345672473,
            0.0004904154338873923,
            7.958871719893068e-05,
            0.002383727813139558,
            0.00010021258640335873,
            0.00014489484601654112,
            7.283058221219108e-05
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the names of each teacher and what courses they teach?",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Course, teacher.Teacher_ID",
            "select teacher.Name, course.Course, course_arrange.Teacher_ID",
            "select teacher.Name, course.Course, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9892451763153076,
            0.028915267437696457,
            0.0001872858265414834,
            0.00011933087807847187,
            0.0002117116964654997,
            0.00013626093277707696,
            0.0003888309875037521,
            0.00025402585742995143
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which teachers teach which courses? How about the names of those teachers?",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select distinct teacher.Name, course.Course",
            "select teacher.Name, course.Staring_Date",
            "select teacher.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.1507587879896164,
            0.06802763789892197,
            0.012503046542406082,
            0.00022977076878305525,
            0.0004022293724119663,
            0.0009519024170003831,
            0.8692243695259094,
            0.8161343932151794
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list all the names of the teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name?",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select course_arrange.Teacher_ID, course.Course",
            "select teacher.Name, course.Course, course_arrange.Teacher_ID",
            "select teacher.Name, course.Course, course_arrange.Course_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9910166263580322,
            0.9910166263580322,
            0.000478998088510707,
            0.000478998088510707,
            0.0001688342308625579,
            0.0001688342308625579,
            0.0002639885642565787,
            0.0002639885642565787
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show the names of the teachers and the courses they are taught in ascending alphabetical order.",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select course_arrange.Teacher_ID, course.Course",
            "select teacher.Name, course.Course, course_arrange.Teacher_ID",
            "select teacher.Name, course.Course, course_arrange.Course_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9852876663208008,
            0.0013636240037158132,
            0.0006808647885918617,
            0.00019381025049369782,
            0.00014643157192040235,
            0.00014030770398676395,
            0.0001867219980340451,
            0.00014177427510730922
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show the names of the teachers and the courses that they will be teaching in ascending alphabetical order starting with the teacher's name.",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select course_arrange.Teacher_ID, course.Course",
            "select teacher.Name, course.Course, course_arrange.Teacher_ID",
            "select teacher.Name, course.Course, course_arrange.Course_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9921098351478577,
            0.0005952515639364719,
            0.0008490975014865398,
            0.00024979180307127535,
            0.000154820634634234,
            0.00012524779594969004,
            0.0002629272930789739,
            0.0001400000328430906
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Which teachers are supposed to be taught in which courses? List them in ascending order by teacher's name.",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select course_arrange.Teacher_ID, course.Course",
            "select teacher.Name, course_arrange.Teacher_ID",
            "select course.Course, teacher.Name",
            "select teacher.Name, course.Course"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.00048062627320177853,
            0.0009080859017558396,
            0.000290086172753945,
            0.0005841464153490961,
            0.0008404083200730383,
            0.00937047228217125,
            0.045796193182468414,
            0.08627761155366898
        ],
        "align_select": "select course_arrange.Teacher_ID, course.Course",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all names of teachers and the courses they teach in ascending alphabetical order by the name of the teacher.",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Course, course_arrange.Teacher_ID",
            "select teacher.Name, course.Course, course_arrange.Course_ID",
            "select course_arrange.Teacher_ID, course.Course"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9943576455116272,
            0.9943576455116272,
            0.00012107849033782259,
            0.00012107849033782259,
            0.00026250974042341113,
            0.00026250974042341113,
            0.0002863472036551684,
            0.0002863472036551684
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list the names of teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select course_arrange.Teacher_ID, course.Course",
            "select teacher.Name, course.Course, course_arrange.Teacher_ID",
            "select teacher.Name, course.Course, course_arrange.Course_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9940352439880371,
            0.9940352439880371,
            0.0002951759670395404,
            0.0002951759670395404,
            0.00011605781764956191,
            0.00011605781764956191,
            0.00022566301049664617,
            0.00022566301049664617
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "The list of teachers and their courses in ascending alphabetical order is as follows: Teacher 1 Name Course 1 2 3 Teachers Names Courses Name Teacher",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select course_arrange.Teacher_ID, course.Course",
            "select teacher.Name, course.Course",
            "select course.Course, teacher.Name",
            "select course.Staring_Date, course.Course"
        ],
        "select_labels": [
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.0003130619879812002,
            0.00017434240726288408,
            0.028616618365049362,
            0.00016684309230186045,
            0.08003857731819153,
            0.00017116907110903412,
            0.00020005162514280528,
            0.00015798816457390785
        ],
        "align_select": "select course_arrange.Teacher_ID, course.Course",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list all the teachers and their courses in ascending alphabetical order by the name of the teacher?",
        "gold_select": "select teacher.Name, course.Course",
        "select_candidates": [
            "select teacher.Name, course.Course",
            "select course_arrange.Teacher_ID, course.Course",
            "select course_arrange.Teacher_ID, course.Staring_Date",
            "select teacher.Name, course.Staring_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9854326844215393,
            0.9854326844215393,
            0.0004803924821317196,
            0.0004803924821317196,
            0.0002086639142362401,
            0.0002086639142362401,
            0.004635362420231104,
            0.004635362420231104
        ],
        "align_select": "select teacher.Name, course.Course",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Which of your teachers teaches math? Give his/her name.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select distinct teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher",
            "course teacher course_arrange"
        ],
        "align_scores": [
            0.8805074095726013,
            0.00017903240222949535,
            0.09905553609132767,
            0.00014736050798092037,
            0.0002286049711983651,
            8.56045589898713e-05,
            0.00022867601364850998,
            8.049073221627623e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the name of the teacher for the math course?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course_arrange.Teacher_ID",
            "select teacher.Name, course.Course",
            "select teacher.Name, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9935910701751709,
            7.895450107753277e-05,
            0.00014379540516529232,
            6.368322647176683e-05,
            0.0001545928680570796,
            5.996113031869754e-05,
            0.00014558732800651342,
            6.063116234145127e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who is the teacher for the math course? List her/him name.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course_arrange.Teacher_ID",
            "select teacher.Name, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9877116084098816,
            0.00011247697693761438,
            0.00021567345538642257,
            6.88337895553559e-05,
            0.00019612019241321832,
            7.203460700111464e-05,
            0.00018930579244624823,
            6.820353155490011e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the name of the teacher for the math course?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course_arrange.Teacher_ID",
            "select teacher.Name, course.Course",
            "select teacher.Name, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9926316738128662,
            8.395456825383008e-05,
            0.00014118030958343297,
            6.257984932744876e-05,
            0.0001499344507465139,
            5.654380584019236e-05,
            0.0001501084043411538,
            6.0543745348695666e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which teachers teach math courses? List their names.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select distinct teacher.Name",
            "select teacher.Name, teacher.Teacher_ID",
            "select teacher.Name, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9890796542167664,
            0.0001570260792504996,
            0.13866543769836426,
            0.00015595262811984867,
            0.00017999847477767617,
            7.322055171243846e-05,
            0.0001853777066571638,
            7.170077151386067e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of the people teaching math courses.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select distinct teacher.Name",
            "select teacher.Name, course.Course",
            "select distinct teacher.Name, course.Course"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher",
            "course teacher course_arrange"
        ],
        "align_scores": [
            0.9923771619796753,
            8.761338540352881e-05,
            0.0876559317111969,
            8.851451275404543e-05,
            0.0001532467285869643,
            5.946118471911177e-05,
            0.0002567088813520968,
            5.483847053255886e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the names of the teachers and the number of courses they teach?",
        "gold_select": "select teacher.Name, count(*)",
        "select_candidates": [
            "select teacher.Name, count(*)",
            "select teacher.Name, count(distinct course.Course)",
            "select teacher.Name, count(*), course.Course",
            "select teacher.Name, count(course.Course)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9892280101776123,
            0.00018259556964039803,
            0.009635708294808865,
            0.00011053673370042816,
            0.0014356314204633236,
            0.00011219611769774929,
            0.039997342973947525,
            0.00015262622036971152
        ],
        "align_select": "select teacher.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you list all the teacher's names and the number of courses each teach?",
        "gold_select": "select teacher.Name, count(*)",
        "select_candidates": [
            "select teacher.Name, count(*)",
            "select teacher.Name, count(distinct course.Course)",
            "select teacher.Name, count(*), course.Course",
            "select teacher.Name, count(course.Course)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9889020919799805,
            0.00020649429643526673,
            0.03315172716975212,
            0.00012366384908091277,
            0.001064697396941483,
            0.00010859536268981174,
            0.0660315677523613,
            0.00016235899238381535
        ],
        "align_select": "select teacher.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me all teachers name and number of course they teach.",
        "gold_select": "select teacher.Name, count(*)",
        "select_candidates": [
            "select teacher.Name, count(*)",
            "select teacher.Name, count(distinct course.Course)",
            "select teacher.Name, count(*), course.Course",
            "select teacher.Name, count(course.Course)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.8419284224510193,
            0.0001597624213900417,
            0.0224738921970129,
            0.00010754177492344752,
            0.006019649561494589,
            0.00010340497101424262,
            0.6451281905174255,
            0.00014860930969007313
        ],
        "align_select": "select teacher.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the names of teachers and the number of courses each teaches.",
        "gold_select": "select teacher.Name, count(*)",
        "select_candidates": [
            "select teacher.Name, count(*)",
            "select teacher.Name, count(distinct course.Course)",
            "select teacher.Name, count(*), course.Course",
            "select teacher.Name, count(course.Course)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9914054870605469,
            0.00014794903108850121,
            0.008885705843567848,
            0.000144344347063452,
            0.001102156937122345,
            9.819336992222816e-05,
            0.024611840024590492,
            0.0001687190233496949
        ],
        "align_select": "select teacher.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you give me the names of all teachers and the number of courses each teacher teaches?",
        "gold_select": "select teacher.Name, count(*)",
        "select_candidates": [
            "select teacher.Name, count(*)",
            "select teacher.Name, count(distinct course.Course)",
            "select teacher.Name, count(*), course.Course",
            "select teacher.Name, count(course.Course)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9904769659042358,
            0.00023973484348971397,
            0.024431470781564713,
            0.00017762536299414933,
            0.00281514716334641,
            0.00012083270121365786,
            0.05978279560804367,
            0.0002448030572850257
        ],
        "align_select": "select teacher.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the names of the teachers teaching how many courses.",
        "gold_select": "select teacher.Name, count(*)",
        "select_candidates": [
            "select teacher.Name, count(*)",
            "select teacher.Name, count(distinct course.Course)",
            "select teacher.Name, count(*), course.Course",
            "select teacher.Name, count(course.Course)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9808142185211182,
            0.0001253224618267268,
            0.026325710117816925,
            8.14040467957966e-05,
            0.0010931174037978053,
            7.958932837937027e-05,
            0.02585459128022194,
            0.00011287312372587621
        ],
        "align_select": "select teacher.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List all the teacher names and how many courses each one teaches.",
        "gold_select": "select teacher.Name, count(*)",
        "select_candidates": [
            "select teacher.Name, count(*)",
            "select teacher.Name, count(distinct course.Course)",
            "select teacher.Name, count(*), course.Course",
            "select teacher.Name, count(course.Course)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9927466511726379,
            0.00016001882613636553,
            0.0349092110991478,
            0.00012808693281840533,
            0.0011433596955612302,
            0.00010472577559994534,
            0.16636355221271515,
            0.00017065947758965194
        ],
        "align_select": "select teacher.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the teacher's names and how many courses do they teach?",
        "gold_select": "select teacher.Name, count(*)",
        "select_candidates": [
            "select teacher.Name, count(*)",
            "select teacher.Name, count(distinct course.Course)",
            "select teacher.Name, count(*), course.Course",
            "select teacher.Name, count(course.Course)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9797877073287964,
            0.0002228190132882446,
            0.028003154322504997,
            0.00010752905654953793,
            0.001033024862408638,
            9.784557187231258e-05,
            0.0705832988023758,
            0.00015893069212324917
        ],
        "align_select": "select teacher.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List all the teacher names who teach at least two courses.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Staring_Date",
            "select teacher.Name, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.983712911605835,
            8.707309461897239e-05,
            0.000519794353749603,
            6.265550473472103e-05,
            0.0011265481589362025,
            6.873573147458956e-05,
            0.000761116505600512,
            6.546969234477729e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which teachers teach at least two courses? List the names of these teachers.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Staring_Date",
            "select teacher.Name, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9753857254981995,
            9.462020534556359e-05,
            0.00030372096807695925,
            6.594791921088472e-05,
            0.0006743203266523778,
            7.7459764725063e-05,
            0.0006220464129000902,
            7.920878124423325e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all the teachers whose course has not been arranged. Give their names.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Teacher_ID",
            "select teacher.Name, course.Course"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher",
            "teacher course_arrange",
            "course teacher",
            "course teacher course_arrange"
        ],
        "align_scores": [
            0.9565533995628357,
            0.0004381067701615393,
            0.00023940340906847268,
            8.655063720652834e-05,
            0.0002439418894937262,
            7.770813681418076e-05,
            0.00046802754513919353,
            9.655950998421758e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For each teacher whose course has not been arranged, list his/her name.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Teacher_ID",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, course_arrange.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher",
            "teacher course_arrange",
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9307624101638794,
            0.6366495490074158,
            0.00024299990036524832,
            0.0002690568217076361,
            0.00026225781766697764,
            0.00020604117889888585,
            0.00023517216322943568,
            0.0003048346552532166
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the names of the teachers whose courses haven't been arranged?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, course_arrange.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "course teacher",
            "course teacher course_arrange",
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9242808818817139,
            0.0006154043949209154,
            0.0003913608961738646,
            9.493047400610521e-05,
            0.00019580218940973282,
            7.980090595083311e-05,
            0.00018849367916118354,
            8.916914521250874e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell the names of the teachers whose courses haven't been assigned yet?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course_arrange.Teacher_ID",
            "select teacher.Name, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher",
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9628258943557739,
            0.0006665491964668036,
            0.0008895873907022178,
            0.0001034981178236194,
            0.0002011065516853705,
            0.0001032124855555594,
            0.0001687143521849066,
            8.24556263978593e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the teachers whose classes have not been set up yet?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course_arrange.Teacher_ID",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, course.Course"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher",
            "course teacher course_arrange",
            "teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9668366312980652,
            0.0007945937104523182,
            0.0002431389584671706,
            0.00011324464139761403,
            0.00018717980128712952,
            8.011855970835313e-05,
            0.000512177066411823,
            0.00012295857595745474
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the number of visitors who did not go to a museum that was opened after 2010.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), museum.Name",
            "select count(distinct visit.visitor_ID)",
            "select count(*), museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visitor visit",
            "museum visitor"
        ],
        "align_scores": [
            0.7320433259010315,
            0.004437117371708155,
            0.00034671425237320364,
            0.004774189554154873,
            0.00893840380012989,
            0.0005198962753638625,
            0.0003249943256378174,
            0.0019344103056937456
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of customers who visited no museums opened after 2010?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), museum.Name",
            "select count(*), museum.Museum_ID",
            "select count(*), museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visit",
            "museum visitor visit"
        ],
        "align_scores": [
            0.6398128867149353,
            0.0010989316506311297,
            0.0004136462230235338,
            0.00273580988869071,
            0.00021741171076428145,
            0.00031595941982232034,
            0.00014227384235709906,
            0.00017029242007993162
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of customers who visited no museums open after 2010?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), museum.Name",
            "select count(visit.visitor_ID)",
            "select count(*), museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visit",
            "museum visitor visit"
        ],
        "align_scores": [
            0.774927020072937,
            0.001293917535804212,
            0.0004052487784065306,
            0.003787014866247773,
            0.03004833124577999,
            0.0006083979387767613,
            0.00014084613940212876,
            0.00015861276187933981
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the number of visitors who didn't visit any museum opened after 2010?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), museum.Name",
            "select count(*), museum.Open_Year",
            "select count(*), museum.Num_of_Staff"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visitor visit",
            "museum visitor",
            "visitor visit"
        ],
        "align_scores": [
            0.8421584963798523,
            0.0015798918902873993,
            0.0003390495839994401,
            0.002207936719059944,
            0.000300374609651044,
            0.0018257568590342999,
            0.0002528714539948851,
            0.00026561241247691214
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me which customer bought the most tickets at once? List his/her name and age.",
        "gold_select": "select visitor.Name, visitor.Age",
        "select_candidates": [
            "select visitor.Name, visitor.Age",
            "select visitor.Name, visitor.Age, visitor.ID",
            "select visit.visitor_ID, visitor.Age",
            "select t1, visitor.Name, visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9533510208129883,
            0.7381759881973267,
            0.00023981578124221414,
            0.00018535224080551416,
            0.0003499124723020941,
            0.0005399567889980972,
            0.0008289096294902265,
            0.000515647407155484
        ],
        "align_select": "select visitor.Name, visitor.Age",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name and age of the visitor who purchased the most tickets at one time?",
        "gold_select": "select visitor.Name, visitor.Age",
        "select_candidates": [
            "select visitor.Name, visitor.Age",
            "select visitor.Name, visitor.Age, visitor.ID",
            "select visitor.Name, visitor.Age, visit.visitor_ID",
            "select t1, visitor.Name, visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9833998084068298,
            0.00010475172894075513,
            0.0002487250021658838,
            7.011499837972224e-05,
            0.0003165914095006883,
            6.871725781820714e-05,
            0.0007819966413080692,
            8.742560021346435e-05
        ],
        "align_select": "select visitor.Name, visitor.Age",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you find the name and age of the visitor who bought most tickets at once?",
        "gold_select": "select visitor.Name, visitor.Age",
        "select_candidates": [
            "select visitor.Name, visitor.Age",
            "select visitor.Name, visitor.Age, visitor.ID",
            "select visitor.Name, visitor.Age, visit.visitor_ID",
            "select t1, visitor.Name, visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9850538372993469,
            8.457553485641256e-05,
            0.0002515692904125899,
            6.118883902672678e-05,
            0.00029532797634601593,
            6.880210275994614e-05,
            0.001183365355245769,
            7.387864752672613e-05
        ],
        "align_select": "select visitor.Name, visitor.Age",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which visitors bought the most tickets at one time? Please give me the name and age of these visitors.",
        "gold_select": "select visitor.Name, visitor.Age",
        "select_candidates": [
            "select visitor.Name, visitor.Age",
            "select visitor.Name, visitor.Age, visitor.ID",
            "select visitor.Name, visitor.Age, visit.visitor_ID",
            "select t1, visitor.Name, visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9744311571121216,
            0.5969655513763428,
            0.00023495519417338073,
            0.00022700482804793864,
            0.0003545396029949188,
            0.00016610893362667412,
            0.0008066226728260517,
            0.0005726442905142903
        ],
        "align_select": "select visitor.Name, visitor.Age",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the number of visitors who are below age 30.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), visitor.ID",
            "select count(*), visitor.Age",
            "select count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor",
            "visitor visit"
        ],
        "align_scores": [
            0.9933392405509949,
            0.0002493789652362466,
            0.00025560619542375207,
            0.00014927682059351355,
            0.0002459404931869358,
            0.014608227647840977,
            0.00058990647085011,
            0.004845806863158941
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average age of visitors who have membership less than 4?",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select avg(visitor.Age)",
            "select an avg(visitor.Age)",
            "select  avg(visitor.Age)",
            "select the avg(visitor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9944801330566406,
            0.00010659453255357221,
            0.0005051264306530356,
            9.881406731437892e-05,
            0.9944801330566406,
            0.00010659453255357221,
            0.0005350171122699976,
            0.00011337883188389242
        ],
        "align_select": "select avg(visitor.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which museum has the most staff members? Show me their names and IDs.",
        "gold_select": "select museum.Museum_ID, museum.Name",
        "select_candidates": [
            "select museum.Name, museum.Museum_ID",
            "select museum.Museum_ID, museum.Name",
            "select museum.Num_of_Staff, museum.Name, museum.Museum_ID",
            "select museum.Name., museum.Museum_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.5314851403236389,
            8.280453766928986e-05,
            0.7657032012939453,
            8.333901496371254e-05,
            0.0003583525831345469,
            7.72040948504582e-05,
            0.0037106643430888653,
            9.914969996316358e-05
        ],
        "align_select": "select museum.Museum_ID, museum.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "I would like to know about the museum that has the most staff members. How can I find the id and name?",
        "gold_select": "select museum.Museum_ID, museum.Name",
        "select_candidates": [
            "select museum.Museum_ID, museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Museum_ID1, museum.Name",
            "select museum.Num_of_Staff, museum.Name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.8886589407920837,
            0.00011203831672901288,
            0.9404671788215637,
            0.00012076267739757895,
            0.003377593122422695,
            0.00012210564455017447,
            0.016225971281528473,
            7.791804819134995e-05
        ],
        "align_select": "select museum.Museum_ID, museum.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How can I find the average number of staff working for all museums that were open before 2009?",
        "gold_select": "select avg(museum.Num_of_Staff)",
        "select_candidates": [
            "select avg(museum.Num_of_Staff)",
            "select avg(t0.c4)",
            "select an avg(museum.Num_of_Staff)",
            "select avg(museum.Open_Year)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9945716261863708,
            0.00018739086226560175,
            0.0013408578233793378,
            0.0002176296984544024,
            0.00044609143515117466,
            0.00014392597950063646,
            0.0016015954315662384,
            0.00012807339953724295
        ],
        "align_select": "select avg(museum.Num_of_Staff)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the average number of employees working at museum (open in years) before 2009.",
        "gold_select": "select avg(museum.Num_of_Staff)",
        "select_candidates": [
            "select avg(museum.Num_of_Staff)",
            "select avg(t0.c4)",
            "select avg(museum.Open_Year)",
            "select an avg(museum.Num_of_Staff)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9961644411087036,
            0.00018308250582776964,
            0.0009759825188666582,
            0.00017002502863761038,
            0.001606307807378471,
            0.0005210074596107006,
            0.0003689944860525429,
            0.00015365643776021898
        ],
        "align_select": "select avg(museum.Num_of_Staff)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "If there was an average number working in the museums before 2009, show them to me.",
        "gold_select": "select avg(museum.Num_of_Staff)",
        "select_candidates": [
            "select avg(museum.Num_of_Staff)",
            "select museum.Open_Year, avg(museum.Num_of_Staff)",
            "select avg(museum.Open_Year)",
            "select avg(museum.Num_of_Staff), museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9918587803840637,
            0.0004832671256735921,
            0.00026590836932882667,
            0.0012044928735122085,
            0.0022435213904827833,
            0.00030998600414022803,
            0.00015490184887312353,
            0.00018421141430735588
        ],
        "align_select": "select avg(museum.Num_of_Staff)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the average number of staff working at museums that were open before 2009?",
        "gold_select": "select avg(museum.Num_of_Staff)",
        "select_candidates": [
            "select avg(museum.Num_of_Staff)",
            "select avg(t0.c4)",
            "select an avg(museum.Num_of_Staff)",
            "select  avg(museum.Num_of_Staff)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9936889410018921,
            0.0001842920610215515,
            0.0013343747705221176,
            0.0002423042169539258,
            0.0004512893792707473,
            0.00013685785233974457,
            0.9936889410018921,
            0.0001842920610215515
        ],
        "align_select": "select avg(museum.Num_of_Staff)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average number of employees before 2009 worked at the museums?",
        "gold_select": "select avg(museum.Num_of_Staff)",
        "select_candidates": [
            "select avg(museum.Num_of_Staff)",
            "select avg(t0.c4)",
            "select avg(museum.Open_Year)",
            "select avg(t0.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9933651089668274,
            0.00022964154777582735,
            0.0015411835629492998,
            0.00016804276674520224,
            0.0024900943972170353,
            0.00022044044453650713,
            0.0009834348456934094,
            0.00016520022472832352
        ],
        "align_select": "select avg(museum.Num_of_Staff)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the year of opening and the staff numbers of the plaza museum?",
        "gold_select": "select museum.Num_of_Staff, museum.Open_Year",
        "select_candidates": [
            "select museum.Open_Year, museum.Num_of_Staff",
            "select museum.Museum_ID, museum.Open_Year, museum.Num_of_Staff",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Num_of_Staff, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.995884120464325,
            9.650371794123203e-05,
            0.0001723387249512598,
            7.02922698110342e-05,
            0.0011808533454313874,
            0.000103090911579784,
            0.9958747029304504,
            8.718983008293435e-05
        ],
        "align_select": "select museum.Open_Year, museum.Num_of_Staff",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In what open year was the museum named Plaza Museum opened and how many staff worked there?",
        "gold_select": "select museum.Num_of_Staff, museum.Open_Year",
        "select_candidates": [
            "select museum.Open_Year, museum.Num_of_Staff",
            "select museum.Name, museum.Open_Year, museum.Num_of_Staff",
            "select museum.Museum_ID, museum.Open_Year, museum.Num_of_Staff",
            "select museum.Museum_ID, museum.Name, museum.Open_Year, museum.Num_of_Staff"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9931617975234985,
            8.724537474336103e-05,
            0.00022238052042666823,
            8.627804345451295e-05,
            0.0002048755850410089,
            7.996750355232507e-05,
            0.00014186149928718805,
            7.566173007944599e-05
        ],
        "align_select": "select museum.Open_Year, museum.Num_of_Staff",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people work at the Plaza Museum in the year open to the public?",
        "gold_select": "select museum.Num_of_Staff, museum.Open_Year",
        "select_candidates": [
            "select museum.Open_Year, museum.Num_of_Staff",
            "select museum.Num_of_Staff, museum.Open_Year",
            "select museum.Museum_ID, museum.Num_of_Staff, museum.Open_Year",
            "select museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.00039912466309033334,
            7.672117499168962e-05,
            0.00030075194081291556,
            7.7083743235562e-05,
            0.00013238463725429028,
            7.584868581034243e-05,
            0.00017480998940300196,
            6.570505502168089e-05
        ],
        "align_select": "select museum.Open_Year, museum.Num_of_Staff",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The museum named Plaza Museum was opened on year (date) and has staff number (num).",
        "gold_select": "select museum.Num_of_Staff, museum.Open_Year",
        "select_candidates": [
            "select museum.Name, museum.Open_Year, museum.Num_of_Staff",
            "select museum.Open_Year, museum.Num_of_Staff",
            "select museum.Museum_ID, museum.Name",
            "select museum.Museum_ID, museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.00030290032736957073,
            8.285287913167849e-05,
            0.7556124329566956,
            9.106878860620782e-05,
            0.00021920785366091877,
            0.00011357728362781927,
            0.00019308205810375512,
            8.704660285729915e-05
        ],
        "align_select": "select museum.Open_Year, museum.Num_of_Staff",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the opening year and the num of staff of the museum named Plaza Museum.",
        "gold_select": "select museum.Num_of_Staff, museum.Open_Year",
        "select_candidates": [
            "select museum.Open_Year, museum.Num_of_Staff",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Museum_ID, museum.Open_Year, museum.Num_of_Staff",
            "select museum.Name, museum.Open_Year, museum.Num_of_Staff"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9959386587142944,
            7.665214798180386e-05,
            0.0010617716470733285,
            0.00010154536721529439,
            0.00016105825488921255,
            6.179092451930046e-05,
            0.00017632433446124196,
            6.294170452747494e-05
        ],
        "align_select": "select museum.Open_Year, museum.Num_of_Staff",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of museums which have more staff members than the minimum number of staff members of all museums opened after 2010?",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Name, museum.Num_of_Staff, museum.Open_Year",
            "select museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.6784924864768982,
            0.0002443320117890835,
            0.00026973389321938157,
            8.257979789050296e-05,
            0.00017148631741292775,
            6.742126424796879e-05,
            0.0002751508145593107,
            8.268933743238449e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In museums after 2010 which museum has more than the minimum number of staff?",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Museum_ID, museum.Name",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Museum_ID, museum.Name, museum.Num_of_Staff"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.5972265005111694,
            0.8230771422386169,
            0.0003349839535076171,
            0.00046726613072678447,
            0.00022447820811066777,
            0.0003801991988439113,
            0.00015700855874456465,
            0.00021581519104074687
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of museums that have more staff than the number of minimum required in all museums opened after 2010?",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Name, museum.Num_of_Staff, museum.Open_Year",
            "select museum.Name, museum.Num_of_Staff, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.5354943871498108,
            0.0004385467618703842,
            0.00030812411569058895,
            7.848548557376489e-05,
            0.00018359857494942844,
            6.776004011044279e-05,
            0.00018359857494942844,
            6.776004011044279e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out the museum names with more staff than the minimum staff number of all museums opened after 2010.",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Name, museum.Num_of_Staff, museum.Open_Year",
            "select museum.Name, museum.Num_of_Staff, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9147040247917175,
            0.0001420929911546409,
            0.0002754232264123857,
            7.200679101515561e-05,
            0.0001447782851755619,
            6.174002919578925e-05,
            0.0001447782851755619,
            6.174002919578925e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out the names of museums having more employees than the minimum required staff for all museums opened after 2010.",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Name, museum.Open_Year",
            "select museum.Name, museum.Num_of_Staff, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.7618909478187561,
            0.00030541676096618176,
            0.00029297624132595956,
            7.373048720182851e-05,
            0.00020980606495868415,
            7.556388300145045e-05,
            0.00017819057393353432,
            6.238203786779195e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the visitor id, name, and age for customers who visited any museum more than once?",
        "gold_select": "select visitor.ID, visitor.Name, visitor.Age",
        "select_candidates": [
            "select visit.visitor_ID, visitor.Name, visitor.Age",
            "select visitor.ID, visitor.Name, visitor.Age",
            "select visit.Museum_ID, visitor.Name, visitor.Age",
            "select visit.visitor_ID, visitor.Name, visitor.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9325616955757141,
            0.00014169169298838824,
            0.8715322613716125,
            0.00012571766274049878,
            0.0005670910468325019,
            9.182500798488036e-05,
            0.9325616955757141,
            0.00014169169298838824
        ],
        "align_select": "select visit.visitor_ID, visitor.Name, visitor.Age",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the visitor ids, names and ages of those who went to museums more than once.",
        "gold_select": "select visitor.ID, visitor.Name, visitor.Age",
        "select_candidates": [
            "select visit.visitor_ID, visitor.Name, visitor.Age",
            "select visitor.ID, visitor.Name, visitor.Age",
            "select visit.visitor_ID, visitor.Name, visitor.Age",
            "select visit.Museum_ID, visitor.Name, visitor.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.8787423372268677,
            0.00012600066838786006,
            0.8576797246932983,
            0.00010550127626629546,
            0.8787423372268677,
            0.00012600066838786006,
            0.0005005624261684716,
            8.357673505088314e-05
        ],
        "align_select": "select visit.visitor_ID, visitor.Name, visitor.Age",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the id, name and age of visitors who visited at least one museum more than once.",
        "gold_select": "select visitor.ID, visitor.Name, visitor.Age",
        "select_candidates": [
            "select visitor.ID, visitor.Name, visitor.Age",
            "select visit.visitor_ID, visitor.Name, visitor.Age",
            "select visitor.ID, visitor.Name, visitor.Age",
            "select visitor_visit.visitor_ID, visitor.Name, visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9716552495956421,
            0.0001362731563858688,
            0.9616866707801819,
            0.0001828359963838011,
            0.9716552495956421,
            0.0001362731563858688,
            0.0011556267272680998,
            8.979058475233614e-05
        ],
        "align_select": "select visitor.ID, visitor.Name, visitor.Age",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the name, and ID of a museum visited most times?",
        "gold_select": "select visit.Museum_ID, museum.Name",
        "select_candidates": [
            "select museum.Name, museum.Museum_ID",
            "select museum.Museum_ID, museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Name., museum.Museum_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum visit",
        "table_candidates": [
            "museum visit"
        ],
        "align_scores": [
            0.9697190523147583,
            8.633120887679979e-05,
            0.9786642789840698,
            8.473981870338321e-05,
            0.9697190523147583,
            8.633120887679979e-05,
            0.005376679822802544,
            9.07421563169919e-05
        ],
        "align_select": "select museum.Name, museum.Museum_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For which museum was it visited most times? What are the name and id?",
        "gold_select": "select visit.Museum_ID, museum.Name",
        "select_candidates": [
            "select museum.Name, museum.Museum_ID",
            "select museum.Name, visit.Museum_ID",
            "select museum.Name, t00.c0",
            "select visit.visitor_ID, museum.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum visit",
        "table_candidates": [
            "museum visit"
        ],
        "align_scores": [
            0.9870842099189758,
            8.878190419636667e-05,
            0.9815884828567505,
            9.559687896398827e-05,
            0.0017624174943193793,
            7.0532041718252e-05,
            0.030216673389077187,
            0.00010166830907110125
        ],
        "align_select": "select museum.Name, museum.Museum_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name and museum id (id) of the most visited museum?",
        "gold_select": "select visit.Museum_ID, museum.Name",
        "select_candidates": [
            "select museum.Name, museum.Museum_ID",
            "select museum.Name, visit.Museum_ID",
            "select visit.visitor_ID, museum.Name",
            "select museum.Museum_ID, museum.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum visit",
        "table_candidates": [
            "museum visit"
        ],
        "align_scores": [
            0.9888430833816528,
            0.9831959009170532,
            0.9896368384361267,
            0.9831939935684204,
            0.0005433521582745016,
            0.0004160867247264832,
            0.9873701333999634,
            0.9802905321121216
        ],
        "align_select": "select museum.Name, museum.Museum_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give the name of the museum that has never had any visitor?",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum",
            "museum visit"
        ],
        "align_scores": [
            0.9255351424217224,
            0.0018939701840281487,
            0.00019989488646388054,
            0.00010408680100226775,
            0.00021971861133351922,
            9.689303260529414e-05,
            0.0002526152820792049,
            0.00011976679525105283
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can I see the name of any museum that has no visitors as of now?",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum",
            "museum visit",
            "museum visitor visit"
        ],
        "align_scores": [
            0.9643332958221436,
            0.000900940562132746,
            0.00020571690401993692,
            9.475221304455772e-05,
            0.00015071076632011682,
            7.251139322761446e-05,
            0.00022346813057083637,
            8.965018787421286e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the museum's name which has no visitor yet.",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum",
            "museum visit"
        ],
        "align_scores": [
            0.9814008474349976,
            0.07154162973165512,
            0.00017305536312051117,
            0.0002226183278253302,
            0.00014931510668247938,
            0.00021732653840444982,
            0.00031877661240287125,
            0.0005104315932840109
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the name of the museum which did not have any visitor yet?",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum",
            "museum visit"
        ],
        "align_scores": [
            0.9462710022926331,
            0.0005941718118265271,
            0.00016748161579016596,
            0.00010157325596082956,
            0.00014798427582718432,
            8.986578905023634e-05,
            0.00020694173872470856,
            0.00010357314022257924
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the museum which has never been visited by anyone?",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum",
            "museum visit"
        ],
        "align_scores": [
            0.9468224048614502,
            0.000934649957343936,
            0.0002104770828736946,
            9.762264380697161e-05,
            0.00017077715892810374,
            8.183242607628927e-05,
            0.00022367850760929286,
            9.966043580789119e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average number of tickets bought per visit. Also list the maximum number of tickets bought in each visit.",
        "gold_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "select_candidates": [
            "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
            "select visit.Museum_ID, avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
            "select visit.visitor_ID, avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
            "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket), visit.Museum_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "visit",
        "table_candidates": [
            "visit"
        ],
        "align_scores": [
            0.9905601143836975,
            0.9929229021072388,
            0.4604707956314087,
            0.0009626307291910052,
            0.037264663726091385,
            0.00060643395408988,
            0.7176203727722168,
            0.0008750427514314651
        ],
        "align_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you give me the average and maximum of all number of tickets bought in all the previous visits?",
        "gold_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "select_candidates": [
            "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
            "select visit.Museum_ID, avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
            "select avg(t2.c6), max(visit.Num_of_Ticket)",
            "select avg(t2.c5), max(visit.Num_of_Ticket)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visit",
        "table_candidates": [
            "visit"
        ],
        "align_scores": [
            0.9919226169586182,
            8.234123379224911e-05,
            0.0007150848978199065,
            6.751662294846028e-05,
            0.0005137635162100196,
            0.00010790757369250059,
            0.0004908326081931591,
            0.00010996250057360157
        ],
        "align_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average number of tickets bought per visit? What is the maximum number of tickets bought?",
        "gold_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "select_candidates": [
            "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
            "select max(visit.Num_of_Ticket), avg(visit.Num_of_Ticket)",
            "select max(visit.Num_of_Ticket)",
            "select min(visit.Num_of_Ticket), avg(visit.Num_of_Ticket)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visit",
        "table_candidates": [
            "visit"
        ],
        "align_scores": [
            0.9914557337760925,
            6.617104372708127e-05,
            0.9934206604957581,
            7.372901018243283e-05,
            0.0003818032855633646,
            9.682524250820279e-05,
            0.0001817141310311854,
            0.00011056413495680317
        ],
        "align_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Provide me an average and maximum number of ticket bought in each visit.",
        "gold_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "select_candidates": [
            "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
            "select visit.visitor_ID, avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
            "select visit.Museum_ID, avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
            "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket) per visit.Museum_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visit",
        "table_candidates": [
            "visit"
        ],
        "align_scores": [
            0.9914414882659912,
            0.9720631837844849,
            0.006027545779943466,
            0.15970613062381744,
            0.01886587217450142,
            0.9746602177619934,
            0.0010924700181931257,
            0.0015245439717546105
        ],
        "align_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the average and maximum value for the total number of tickets bought per visit.",
        "gold_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "select_candidates": [
            "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
            "select avg(visit.Total_spent), max(visit.Num_of_Ticket)",
            "select avg(t2.c6), max(visit.Num_of_Ticket)",
            "select avg(t2.c4), max(t2.c4)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visit",
        "table_candidates": [
            "visit"
        ],
        "align_scores": [
            0.9884004592895508,
            0.10940958559513092,
            0.0012519110459834337,
            0.005791528150439262,
            0.0004422937345225364,
            0.00032666276092641056,
            0.029193319380283356,
            0.002155672525987029
        ],
        "align_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the total spent on tickets by those whom have paid membership level 1?",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent), visitor.ID",
            "select sum(visit.Total_spent)aft visitor.ID",
            "select sum(visit.Total_spent) descripted in visitor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9868407249450684,
            0.0006563503993675113,
            0.00014604642638005316,
            0.005210549104958773,
            0.000296207785140723,
            0.0001623015705263242,
            0.00032270036172121763,
            0.00021750293672084808
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which visitors have visited both museums opened before 2009 and those opened after 2011? List their names.",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, museum.Name",
            "select visitor.Name, museum.Num_of_Staff",
            "select visitor.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visitor visit"
        ],
        "align_scores": [
            0.9809924960136414,
            0.9809924960136414,
            0.0007560700178146362,
            0.0007560700178146362,
            0.000162857337272726,
            0.000162857337272726,
            0.0006851693615317345,
            0.0006851693615317345
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the name of the visitor to both a museum which was opened before 2009 and a museum which was opened after 2011?",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, museum.Name",
            "select visitor.Name in both museum.Name, museum.Open_Year",
            "select visitor.Name, museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visitor visit",
            "museum visitor"
        ],
        "align_scores": [
            0.979616641998291,
            0.054628413170576096,
            0.00025696257944218814,
            0.00012142140622017905,
            0.00019940944912377745,
            0.00012044297182001173,
            0.00022406423522625118,
            0.00012185499508632347
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which visitors have visited both a museum opened before 2009 and one opened after 2011? Show their name.",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, museum.Name",
            "select visitor.Name, visit.visitor_ID",
            "select visitor.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visitor visit"
        ],
        "align_scores": [
            0.983164370059967,
            0.983164370059967,
            0.0005953764193691313,
            0.0005953764193691313,
            0.00031566584948450327,
            0.00031566584948450327,
            0.0006111882976256311,
            0.0006111882976256311
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the names of visitors to museums opened before 2009 and those opened after 2011.",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, museum.Name",
            "select visitor.Name, museum.Num_of_Staff",
            "select visitor.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visitor visit",
            "museum visitor"
        ],
        "align_scores": [
            0.05645615607500076,
            0.989046037197113,
            0.0001078924469766207,
            0.0002004328853217885,
            7.684653246542439e-05,
            9.049760410562158e-05,
            0.000165061661391519,
            0.0002892367192544043
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the name of the person visiting both a museum opened before 2009 and a museum opened after 2011?",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, museum.Name",
            "select visitor.Name, museum.Open_Year",
            "select visitor.Name, visit.visitor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visitor visit"
        ],
        "align_scores": [
            0.9902542233467102,
            0.9902542233467102,
            0.00039806714630685747,
            0.00039806714630685747,
            0.0005544009036384523,
            0.0005544009036384523,
            0.00018082125461660326,
            0.00018082125461660326
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of museums that were opened after 2013, or before 2008?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), museum.Museum_ID",
            "select count(*), museum.Open_Year",
            "select count(*), museum.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.8572424054145813,
            0.000206515978788957,
            0.00017874293553177267,
            0.0002609080693218857,
            0.00018461988656781614,
            0.038230907171964645,
            0.00020139013940934092,
            0.0025369832292199135
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the number of distinct names of losers?",
        "gold_select": "select count(distinct matches.loser_name)",
        "select_candidates": [
            "select count(distinct matches.loser_name)",
            "select count (distinct matches.loser_name)",
            "select count(distinct matches.loser_name",
            "select count(distinct matches.loser_ioc)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9959112405776978,
            0.9959112405776978,
            0.01074757520109415,
            0.01074757520109415,
            0.03796960040926933,
            0.03796960040926933,
            0.1365690529346466,
            0.1365690529346466
        ],
        "align_select": "select count(distinct matches.loser_name)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What number of distinct names of losers can you find?",
        "gold_select": "select count(distinct matches.loser_name)",
        "select_candidates": [
            "select count(distinct matches.loser_name)",
            "select count(distinct matches.loser_ioc)",
            "select count (distinct matches.loser_name)",
            "select count(distinct matches.loser_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9892725944519043,
            0.9892725944519043,
            0.2935526371002197,
            0.2935526371002197,
            0.007493510376662016,
            0.007493510376662016,
            0.03632144629955292,
            0.03632144629955292
        ],
        "align_select": "select count(distinct matches.loser_name)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the tournament which has more than 10 matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.minutes"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9904981255531311,
            0.00010283455776516348,
            0.0001587519800523296,
            6.21926665189676e-05,
            0.00018149768584407866,
            6.72198148095049e-05,
            0.00018474845273885876,
            6.0861424572067335e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give the name of tourneys which have more than 10 matches in total.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9794120192527771,
            0.00010240077244816348,
            0.00017022473912220448,
            5.829649307997897e-05,
            0.00016007668455131352,
            6.072913674870506e-05,
            0.0001299435825785622,
            6.22988591203466e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find out the name of the tournament with more than 10 matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9848682880401611,
            0.0001022500146063976,
            0.0001852084242273122,
            6.47211927571334e-05,
            0.00018354148778598756,
            6.100053360569291e-05,
            0.00013915306772105396,
            6.651787407463416e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find out the name of tournament which has more than 10 matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9881110191345215,
            0.00010915453458437696,
            0.0001685489114606753,
            6.392709474312142e-05,
            0.00016083157970570028,
            5.9925001551164314e-05,
            0.00012399045226629823,
            6.554539868375286e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the name of tourney which has more than 10 matches?",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9887344241142273,
            0.00013757577107753605,
            0.0001936850167112425,
            6.452399247791618e-05,
            0.0002051367482636124,
            6.262140232138336e-05,
            0.00012889807112514973,
            6.602235953323543e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the total number of distinct country codes among all players?",
        "gold_select": "select count(distinct players.country_code)",
        "select_candidates": [
            "select count(distinct players.country_code)",
            "select count(distinct players.country_code), t0.c6",
            "select sum(distinct players.country_code)",
            "select count(distinct t0.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.996100902557373,
            0.996100902557373,
            0.0002932976058218628,
            0.0002932976058218628,
            0.9790812134742737,
            0.9790812134742737,
            0.0013264707522466779,
            0.0013264707522466779
        ],
        "align_select": "select count(distinct players.country_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of countries by country code for all player profiles.",
        "gold_select": "select count(distinct players.country_code)",
        "select_candidates": [
            "select count(*), players.country_code",
            "select players.country_code, count(*)",
            "select count(distinct players.country_code), players.country_code",
            "select count(distinct players.country_code), t0.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.994805634021759,
            0.0002257516753161326,
            0.9959306120872498,
            0.0002788172278087586,
            0.0001861781784100458,
            9.535643039271235e-05,
            0.0002603867033030838,
            0.00018025454482994974
        ],
        "align_select": "select count(*), players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How can I get the number of distinct country codes of all players?",
        "gold_select": "select count(distinct players.country_code)",
        "select_candidates": [
            "select count(distinct players.country_code)",
            "select count(distinct players.country_code), t0.c6",
            "select count(distinct t0.c6)",
            "select count(distinct players.country_code),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9966278672218323,
            5.886085637030192e-05,
            0.0002516628592275083,
            8.236228313762695e-05,
            0.0009694111067801714,
            8.995401003630832e-05,
            0.00032117587397806346,
            7.846931839594617e-05
        ],
        "align_select": "select count(distinct players.country_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find all the number of distinct countries of the players.",
        "gold_select": "select count(distinct players.country_code)",
        "select_candidates": [
            "select count(distinct players.country_code)",
            "select count(count(distinct players.country_code)",
            "select count(distinct t0.c6)",
            "select count(distinct players.country_code),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9871014356613159,
            0.9871014356613159,
            0.0004029384290333837,
            0.0004029384290333837,
            0.0006420252611860633,
            0.0006420252611860633,
            0.00029039772925898433,
            0.00029039772925898433
        ],
        "align_select": "select count(distinct players.country_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find out the code of the country with the greatest number of players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, players.birth_date",
            "select players.country_code, t0.c6",
            "select players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.994929850101471,
            7.822582847438753e-05,
            0.00018842914141714573,
            6.078695514588617e-05,
            0.0006423380109481514,
            7.182361150626093e-05,
            0.0002139679272659123,
            6.161051715025678e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the names of the tournaments with more than 10 matches?",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.winner_age",
            "select matches.tourney_name, matches.tourney_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9812917709350586,
            0.0001777166617102921,
            0.00028274484793655574,
            7.030359120108187e-05,
            0.00014045294665265828,
            7.123250543372706e-05,
            0.00020883389515802264,
            6.816626410000026e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which tournaments have more than 10 matches? List them by their names.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.minutes"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9809751510620117,
            0.00014804753300268203,
            0.0001595553767401725,
            6.0576145187951624e-05,
            0.00016266752209048718,
            6.347369344439358e-05,
            0.00019986667030025274,
            5.954788866802119e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the number of players for each hand type.",
        "gold_select": "select count(*), players.hand",
        "select_candidates": [
            "select players.hand, count(*)",
            "select players.hand, count(*), players.player_id",
            "select players.hand, count(*), players.birth_date",
            "select players.first_name, players.hand, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9968864321708679,
            0.0002411189634585753,
            0.00016604273696430027,
            8.249338861787692e-05,
            0.00019038483151234686,
            0.00014080453547649086,
            0.00020405503164511174,
            0.0001669834746280685
        ],
        "align_select": "select players.hand, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which hands have number of players on them? List them by hand type.",
        "gold_select": "select count(*), players.hand",
        "select_candidates": [
            "select players.hand, count(*)",
            "select players.hand",
            "select players.hand, count(players.birth_date)",
            "select players.hand, count(players.last_name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players rankings",
            "players matches"
        ],
        "align_scores": [
            0.0002935930388048291,
            0.3290119171142578,
            0.4701535105705261,
            0.9353213310241699,
            0.00012652247096411884,
            0.0002917403180617839,
            0.0001461117499275133,
            0.0014847281854599714
        ],
        "align_select": "select players.hand",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you find out the number of players for each hand type?",
        "gold_select": "select count(*), players.hand",
        "select_candidates": [
            "select players.hand, count(*)",
            "select count(*), players.hand",
            "select players.hand, count(*), players.birth_date",
            "select players.hand, count(*), players.player_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9964637160301208,
            0.0004001446650363505,
            0.9963423609733582,
            0.00033239572076126933,
            0.00018269396969117224,
            0.0001389841054333374,
            0.0002623578766360879,
            9.35682692215778e-05
        ],
        "align_select": "select players.hand, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each hand type, find the number of players.",
        "gold_select": "select count(*), players.hand",
        "select_candidates": [
            "select players.hand, count(*)",
            "select players.hand, count(*), players.birth_date",
            "select count(*), players.hand",
            "select players.hand, count(*), players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9965912103652954,
            0.00020427520212251693,
            0.000164069642778486,
            0.00012331434118095785,
            0.9964537620544434,
            0.00018310346058569849,
            0.00013520842185243964,
            8.670825627632439e-05
        ],
        "align_select": "select players.hand, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the numbers of players of each hand type?",
        "gold_select": "select count(*), players.hand",
        "select_candidates": [
            "select players.hand, count(*)",
            "select count(*), players.hand",
            "select players.hand, count(*), players.player_id",
            "select players.hand, count(*), players.birth_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9962666630744934,
            0.00025464125792495906,
            0.9962014555931091,
            0.00029553953208960593,
            0.0001688056072453037,
            7.893447764217854e-05,
            0.00018712748715188354,
            0.0001265758037334308
        ],
        "align_select": "select players.hand, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the names of both winners and losers in the longest match.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.winner_name, matches.loser_name",
            "select matches.winner_rank, matches.loser_name",
            "select matches.loser_ioc, matches.loser_name",
            "select t1.c 27, matches.loser_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9880841374397278,
            0.0001886617683339864,
            0.0005775605677627027,
            8.924919529817998e-05,
            0.0004253070801496506,
            0.00010125133121619001,
            0.0004944912507198751,
            0.0001287661143578589
        ],
        "align_select": "select matches.winner_name, matches.loser_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of the winning and losing team that played for longest time?",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.winner_hand, matches.winner_ht",
            "select matches.minutes, matches.round",
            "select matches.winner_name, matches.winner_rank",
            "select matches.winner_name, matches.winner_hand"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.002881793538108468,
            0.00029704824555665255,
            0.0005306508974172175,
            0.00011391210864530876,
            0.0003854998212773353,
            0.00020756380399689078,
            0.00036543351598083973,
            0.00015928936772979796
        ],
        "align_select": "select matches.winner_hand, matches.winner_ht",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give me the names of the winners and losers who played in the longest match?",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.winner_name, matches.loser_name",
            "select matches.winner_rank, matches.loser_name",
            "select t1.c 27, matches.loser_name",
            "select matches.winner_hand, matches.loser_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9719982147216797,
            0.00031525446684099734,
            0.0009537152945995331,
            8.303107460960746e-05,
            0.000636281562037766,
            8.095088560367003e-05,
            0.0006556263542734087,
            8.301113120978698e-05
        ],
        "align_select": "select matches.winner_name, matches.loser_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names and birth dates of all players from country code USA?",
        "gold_select": "select players.first_name, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name, players.hand, players.birth_date",
            "select distinct players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name, players.birth_date, players.player_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9932667016983032,
            0.00011871957394760102,
            0.00048780691577121615,
            9.605569357518107e-05,
            0.0014455917989835143,
            9.608995605958626e-05,
            0.00016302558651659638,
            7.926038961159065e-05
        ],
        "align_select": "select players.first_name, players.last_name, players.birth_date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "There is how many players?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), players.first_name, players.last_name",
            "select count(*), players.player_id",
            "select count(*), players.player_id, players.first_name, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players rankings",
            "players matches"
        ],
        "align_scores": [
            0.9933248162269592,
            0.9933248162269592,
            0.0021853994112461805,
            0.0021853994112461805,
            0.00024145023780874908,
            0.00024145023780874908,
            0.0003337751259095967,
            0.0003337751259095967
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many people are playing?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.match_num",
            "select count(*), matches.tourney_name",
            "select count(*), matches.draw_size"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "matches",
            "players",
            "rankings",
            "matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.9927489161491394,
            6.46614862489514e-05,
            0.00019406173669267446,
            6.76524723530747e-05,
            0.00034630094887688756,
            8.036127110244706e-05,
            0.00031149722053669393,
            6.67997301206924e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Count all players.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), players.first_name, players.last_name",
            "select count(*), players.player_id",
            "select count(*), players.player_id, players.first_name, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players rankings",
            "players matches"
        ],
        "align_scores": [
            0.9955005049705505,
            0.002815358340740204,
            0.0007417483138851821,
            0.0001566348655615002,
            0.00016853251145221293,
            0.0001692139485385269,
            0.0002783593372441828,
            9.393157961312681e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the total number of matched values.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.loser_id)",
            "select count(*), matches.match_num",
            "select count(*), matches.loser_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings",
            "matches players"
        ],
        "align_scores": [
            0.9948967099189758,
            7.152029138524085e-05,
            0.00034558778861537576,
            5.294153015711345e-05,
            0.00031513304566033185,
            6.785806908737868e-05,
            0.00020333504653535783,
            0.00010112473682966083
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the total number of matches?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.match_num",
            "select count(*), matches.minutes",
            "select count(*), matches.draw_size"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9937350153923035,
            0.9937350153923035,
            0.0002548515913076699,
            0.0002548515913076699,
            0.00033015181543305516,
            0.00033015181543305516,
            0.0002131977234967053,
            0.0002131977234967053
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "The total number of matches are found by...",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.match_num",
            "select count(*), matches.draw_size",
            "select count(*), matches.minutes"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9923426508903503,
            0.7022452354431152,
            0.00023186388716567308,
            0.0004041072679683566,
            0.0002038716193055734,
            0.0006045670015737414,
            0.00045717426110059023,
            0.0002066960441879928
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Is there any way to find the total number of matches?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.match_num",
            "select count(*) Is there any way to find the sum(matches.match_num)",
            "select count(*) Is there any way to find the sum(matches.loser_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9933074116706848,
            0.0001181528641609475,
            0.00027707035769708455,
            9.862165461527184e-05,
            0.0005508200265467167,
            0.00010421631304780021,
            0.00022138490749057382,
            0.00010052681318484247
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Where can I find the total number of matches?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.match_num",
            "select count(*), matches.minutes",
            "select count(*), matches.draw_size"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9952292442321777,
            0.00011428856669226661,
            0.00028808688512071967,
            8.338591578649357e-05,
            0.0003300463140476495,
            8.049104508245364e-05,
            0.00022268477187026292,
            7.546321285190061e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Calculate and return number of matches.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.match_num",
            "select count(*), matches.minutes",
            "select count(*), matches.draw_size"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9943088889122009,
            8.163975144270808e-05,
            0.0007143618422560394,
            7.614915375597775e-05,
            0.00020926563593093306,
            8.054647332755849e-05,
            0.0001810387911973521,
            6.470378866652027e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How old was the average loser and the winner of all matches?",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age), avg(matches.winner_age)",
            "select avg(matches.loser_age), avg(matches.winner_age",
            "select avg(matches.loser_age), avg(matches.loser_age)",
            "select avg(matches.loser_age), avg(matches.loser_entry)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.7899658679962158,
            8.961001003626734e-05,
            0.8316451907157898,
            7.611452019773424e-05,
            0.00024550053058192134,
            0.00014367862604558468,
            0.00023220834555104375,
            8.424792758887634e-05
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average age of the players who lost and won in all matches?",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age), avg(matches.winner_age)",
            "select avg(matches.loser_age), avg(matches.winner_age",
            "select avg(matches.loser_age), avg(matches.loser_age)",
            "select avg(matches.loser_age), avg(matches.loser_entry)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches"
        ],
        "align_scores": [
            0.4059581458568573,
            0.0030376820359379053,
            0.20173288881778717,
            0.0026137996464967728,
            0.0003869663632940501,
            0.0002113256778102368,
            0.00021157307492103428,
            0.00011100149276899174
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show the average age of winners and losers in each match.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select matches.winner_age, matches.loser_age",
            "select matches.winner_age, avg(matches.loser_age)",
            "select matches.winner_age, matches.winner_entry",
            "select avg(matches.winner_age, avg(matches.loser_age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.003472025040537119,
            0.0001395506114931777,
            0.6396716237068176,
            0.00014848918362986296,
            0.00012817564129363745,
            9.933908586390316e-05,
            0.011992122046649456,
            0.00012057143612764776
        ],
        "align_select": "select matches.winner_age, avg(matches.loser_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the average age of players who won and lost all matches.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.winner_age - matches.loser_age)",
            "select avg(matches.winner_age, matches.loser_age)",
            "select avg(matches.loser_age)",
            "select avg(matches.winner_age, matches.winner_entry"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches"
        ],
        "align_scores": [
            0.0002807289420161396,
            0.00043973562424071133,
            0.0006864804308861494,
            0.00012165122461738065,
            0.0015061271842569113,
            0.007483963388949633,
            7.013879803707823e-05,
            6.968584784772247e-05
        ],
        "align_select": "select avg(matches.winner_age - matches.loser_age)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "In all matches, find the average age of the winners and the losers.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.winner_age - matches.loser_age)",
            "select avg(matches.winner_age, avg(matches.loser_age)",
            "select avg(matches.loser_age), matches.winner_age",
            "select avg(matches.winner_age, matches.loser_age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.0018339176895096898,
            0.006800371687859297,
            0.002371713286265731,
            0.0032078472431749105,
            0.1886468380689621,
            0.008550594560801983,
            0.00375177594833076,
            0.02079780399799347
        ],
        "align_select": "select avg(matches.winner_age - matches.loser_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me the average age of winners and losers across matches.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.winner_age, avg(matches.loser_age)",
            "select avg(matches.winner_age - matches.loser_age)",
            "select avg(matches.winner_age - avg(matches.loser_age)",
            "select avg(matches.loser_age), avg(matches.winner_age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.0031063302885740995,
            0.027336524799466133,
            0.004895044956356287,
            0.001722363056614995,
            0.006865041796118021,
            0.0017943392740562558,
            0.9954153299331665,
            0.95827716588974
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the average ages of winners and losers across matches.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.winner_age, avg(matches.loser_age)",
            "select avg(matches.loser_age), avg(matches.winner_age)",
            "select avg(matches.winner_age - avg(matches.loser_age)",
            "select avg(matches.loser_age), avg(matches.winner_age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.004973278846591711,
            0.02751772478222847,
            0.9955360889434814,
            0.9736098647117615,
            0.0061555844731628895,
            0.002011238830164075,
            0.9910575151443481,
            0.8698838949203491
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In each match, how old on average are losing player and winning player?",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age), avg(matches.winner_age)",
            "select avg(matches.loser_age), avg(matches.winner_age",
            "select matches.loser_age, avg(matches.winner_age)",
            "select matches.loser_age, avg(matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.5131375789642334,
            0.00012933980906382203,
            0.5695242285728455,
            9.85309379757382e-05,
            0.9137580990791321,
            0.0001498302590334788,
            0.012359152548015118,
            0.00014775559247937053
        ],
        "align_select": "select matches.loser_age, avg(matches.winner_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What was the average age ratio-wise between the winners and losers across all matches?",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age)",
            "select avg(matches.winner_age - matches.loser_age)",
            "select avg(matches.winner_age : matches.loser_age)",
            "select avg(matches.loser_ht)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.008042437955737114,
            0.004808103200048208,
            0.22446563839912415,
            0.0007408034871332347,
            0.3704334497451782,
            0.005651600658893585,
            0.020989583805203438,
            0.002770251827314496
        ],
        "align_select": "select avg(matches.winner_age : matches.loser_age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the average age of winners and losers across matches.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.winner_age, avg(matches.loser_age)",
            "select avg(matches.loser_age), avg(matches.winner_age)",
            "select avg(matches.winner_age - avg(matches.loser_age)",
            "select avg(matches.winner_age - matches.loser_age)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.004182545933872461,
            0.027819650247693062,
            0.9953433275222778,
            0.9723196625709534,
            0.004359283018857241,
            0.0017381750512868166,
            0.004478339105844498,
            0.001998329535126686
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the mean average rank of winners in all matches.",
        "gold_select": "select avg(matches.winner_rank)",
        "select_candidates": [
            "select avg(matches.winner_rank)",
            "select avg(matches.loser_name)",
            "select avg(matches.winner_rank",
            "select avg(matches.loser_age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.995181143283844,
            7.620087126269937e-05,
            0.00039590135565958917,
            0.00010879519686568528,
            0.44673630595207214,
            8.657301077619195e-05,
            0.0005613744142465293,
            0.00010368460789322853
        ],
        "align_select": "select avg(matches.winner_rank)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the average rank of the winners in all matches.",
        "gold_select": "select avg(matches.winner_rank)",
        "select_candidates": [
            "select avg(matches.winner_rank)",
            "select avg(matches.loser_name)",
            "select avg(matches.winner_rank",
            "select avg(matches.loser_age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9965764880180359,
            0.0004351132083684206,
            0.00044194795191287994,
            0.00016825954662635922,
            0.5375654101371765,
            0.0005218125297687948,
            0.0008091195486485958,
            0.0001791276881704107
        ],
        "align_select": "select avg(matches.winner_rank)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you find the average rank for winners in all matches?",
        "gold_select": "select avg(matches.winner_rank)",
        "select_candidates": [
            "select avg(matches.winner_rank)",
            "select avg(matches.loser_name)",
            "select avg(matches.loser_age)",
            "select avg(matches.winner_rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9954404830932617,
            7.833324343664572e-05,
            0.0005100950365886092,
            0.0001224407460540533,
            0.0010080928914248943,
            0.00013948105333838612,
            0.3615896999835968,
            9.355345537187532e-05
        ],
        "align_select": "select avg(matches.winner_rank)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "The average ranks of winners in all games?",
        "gold_select": "select avg(matches.winner_rank)",
        "select_candidates": [
            "select avg(matches.winner_rank)",
            "select avg(matches.loser_name)",
            "select avg(matches.winner_rank",
            "select avg(matches.loser_age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9951421022415161,
            8.6606691183988e-05,
            0.0005516885430552065,
            0.00011226759670535102,
            0.3345067799091339,
            0.00011415698827477172,
            0.000721509859431535,
            0.00012526428326964378
        ],
        "align_select": "select avg(matches.winner_rank)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average rank of the winners in all matches?",
        "gold_select": "select avg(matches.winner_rank)",
        "select_candidates": [
            "select avg(matches.winner_rank)",
            "select avg(matches.loser_name)",
            "select avg(matches.loser_age)",
            "select avg(matches.winner_rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9962473511695862,
            0.00044929765863344073,
            0.0004742374876514077,
            0.00017632482922635972,
            0.000769261852838099,
            0.00020447435963433236,
            0.6815803050994873,
            0.0005109390476718545
        ],
        "align_select": "select avg(matches.winner_rank)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which is the average rank for the winners among all matches?",
        "gold_select": "select avg(matches.winner_rank)",
        "select_candidates": [
            "select avg(matches.winner_rank)",
            "select avg(matches.loser_name)",
            "select avg(matches.loser_age)",
            "select avg(matches.loser_hand)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.995689332485199,
            0.001059402828104794,
            0.00038122068508528173,
            0.00022174320474732667,
            0.000908689689822495,
            0.00031241204123944044,
            0.0004839715547859669,
            0.00042506022145971656
        ],
        "align_select": "select avg(matches.winner_rank)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In all matches, what is the average rank of winners?",
        "gold_select": "select avg(matches.winner_rank)",
        "select_candidates": [
            "select avg(matches.winner_rank)",
            "select avg(matches.loser_name)",
            "select avg(matches.loser_age)",
            "select avg(matches.winner_rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9956642985343933,
            0.00043400865979492664,
            0.00043851142982020974,
            0.0001665781019255519,
            0.0006795128574594855,
            0.00018630587146617472,
            0.5574554204940796,
            0.0005463194684125483
        ],
        "align_select": "select avg(matches.winner_rank)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For winners, what is the average rank across all matches?",
        "gold_select": "select avg(matches.winner_rank)",
        "select_candidates": [
            "select avg(matches.loser_name)",
            "select avg(matches.winner_rank)",
            "select avg(matches.loser_age)",
            "select avg(matches.loser_rank)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.00044074677862226963,
            0.0002586004266049713,
            0.995173990726471,
            0.002194307977333665,
            0.0005494289798662066,
            0.0003051513049285859,
            0.0018165134824812412,
            0.000521605194080621
        ],
        "align_select": "select avg(matches.winner_rank)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For each match, give me the highest loser rank.",
        "gold_select": "select min(matches.loser_rank)",
        "select_candidates": [
            "select matches.match_num, max(matches.loser_rank)",
            "select matches.match_num, matches.loser_rank",
            "select matches.match_num, min(matches.loser_rank)",
            "select matches.minutes, max(matches.loser_rank)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9921715259552002,
            0.00014522267156280577,
            0.6243616938591003,
            0.26448655128479004,
            0.9661178588867188,
            0.00012148245878051966,
            0.0003647544945124537,
            0.00019673974020406604
        ],
        "align_select": "select matches.match_num, max(matches.loser_rank)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the highest loser rank among all matches?",
        "gold_select": "select min(matches.loser_rank)",
        "select_candidates": [
            "select min(matches.loser_rank)",
            "select matches.loser_rank",
            "select max(matches.loser_rank)",
            "select min(matches.loser_rank), matches.match_num"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.00016323868476320058,
            0.0001537848438601941,
            0.9938166737556458,
            0.9849768877029419,
            0.00019922718638554215,
            0.00016088603297248483,
            7.587342406623065e-05,
            8.068992610787973e-05
        ],
        "align_select": "select matches.loser_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "In all the matches played, find the highest loser rank.",
        "gold_select": "select min(matches.loser_rank)",
        "select_candidates": [
            "select matches.loser_rank",
            "select min(matches.loser_rank)",
            "select max(matches.loser_rank)",
            "select matches.match_num"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.8684980273246765,
            0.6629508137702942,
            0.00012275169137865305,
            0.00010713031224440783,
            0.00012739896192215383,
            9.305687854066491e-05,
            0.010514787398278713,
            0.01364960428327322
        ],
        "align_select": "select matches.loser_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the highest rank of the losing team in all matches.",
        "gold_select": "select min(matches.loser_rank)",
        "select_candidates": [
            "select min(matches.loser_rank)",
            "select max(matches.loser_rank)",
            "select matches.loser_rank",
            "select min(matches.loser_rank), matches.winner_entry"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.000170492785400711,
            0.00025259415269829333,
            7.049553823890164e-05,
            0.0001058823472703807,
            0.6121497750282288,
            0.529741108417511,
            8.427002467215061e-05,
            9.695376502349973e-05
        ],
        "align_select": "select matches.loser_rank",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the maximum loser ranks from the given sets.",
        "gold_select": "select min(matches.loser_rank)",
        "select_candidates": [
            "select max(matches.loser_rank)",
            "select max(matches.loser_rank), matches.loser_id",
            "select max(matches.loser_rank) from the given matches.loser_id",
            "select max(matches.loser_rank) from matches.loser_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.9958035349845886,
            8.189058280549943e-05,
            0.00011711461411323398,
            6.835217936895788e-05,
            0.00034672298352234066,
            6.065319394110702e-05,
            0.00010001535702031106,
            5.8233370509697124e-05
        ],
        "align_select": "select max(matches.loser_rank)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different nations does player come from?",
        "gold_select": "select count(distinct players.country_code)",
        "select_candidates": [
            "select count(distinct players.country_code)",
            "select count(distinct players.country_code), t0.c6",
            "select count(distinct t0.c6)",
            "select count(distinct players.hand)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.988558292388916,
            0.988558292388916,
            0.0002899706014432013,
            0.0002899706014432013,
            0.0007382354233413935,
            0.0007382354233413935,
            0.0012122771004214883,
            0.0012122771004214883
        ],
        "align_select": "select count(distinct players.country_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different countries are represented by the users?",
        "gold_select": "select count(distinct players.country_code)",
        "select_candidates": [
            "select count(distinct players.country_code)",
            "select count(count(distinct players.country_code)",
            "select count(distinct t0.c6)",
            "select count(distinct players.hand)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9917448163032532,
            0.9917448163032532,
            0.000996161950752139,
            0.000996161950752139,
            0.0009705136180855334,
            0.0009705136180855334,
            0.001887261401861906,
            0.001887261401861906
        ],
        "align_select": "select count(distinct players.country_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of countries represented by the players.",
        "gold_select": "select count(distinct players.country_code)",
        "select_candidates": [
            "select count(distinct players.country_code)",
            "select count(distinct t0.c6)",
            "select count(distinct players.hand)",
            "select count(distinct players.country_code),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9957138299942017,
            0.9957138299942017,
            0.0010415829019621015,
            0.0010415829019621015,
            0.007598008960485458,
            0.007598008960485458,
            0.0002732507709879428,
            0.0002732507709879428
        ],
        "align_select": "select count(distinct players.country_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many different nations does this player come from?",
        "gold_select": "select count(distinct players.country_code)",
        "select_candidates": [
            "select count(distinct players.country_code)",
            "select count(distinct players.country_code), t0.c6",
            "select count(distinct players.country_code), players.player_id",
            "select count(distinct t0.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9762075543403625,
            0.0001735850382829085,
            0.0002872599579859525,
            8.090496703516692e-05,
            0.0004870463162660599,
            5.367845733417198e-05,
            0.001006764592602849,
            0.00013668450992554426
        ],
        "align_select": "select count(distinct players.country_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "There are how many distinct countries do players come from?",
        "gold_select": "select count(distinct players.country_code)",
        "select_candidates": [
            "select count(distinct players.country_code)",
            "select count(count(distinct players.country_code)",
            "select count(distinct t0.c6)",
            "select count(distinct players.country_code),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9784598350524902,
            0.9784598350524902,
            0.0005214103730395436,
            0.0005214103730395436,
            0.0007092633750289679,
            0.0007092633750289679,
            0.00041902350494638085,
            0.00041902350494638085
        ],
        "align_select": "select count(distinct players.country_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me how many loser names are there?",
        "gold_select": "select count(distinct matches.loser_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.loser_name)",
            "select count(*), matches.loser_name",
            "select count(loser_names)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9908642172813416,
            0.9908642172813416,
            0.9553965330123901,
            0.9553965330123901,
            0.0014224875485524535,
            0.0014224875485524535,
            0.9921324849128723,
            0.9921324849128723
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the total number of loser names?",
        "gold_select": "select count(distinct matches.loser_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.loser_name)",
            "select count(*), matches.loser_name",
            "select count(matches.loser_name)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9923092126846313,
            0.9923092126846313,
            0.031224189326167107,
            0.031224189326167107,
            0.0009004612802527845,
            0.0009004612802527845,
            0.05570169910788536,
            0.05570169910788536
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the number of different loser names?",
        "gold_select": "select count(distinct matches.loser_name)",
        "select_candidates": [
            "select count(distinct matches.loser_name)",
            "select count(distinct matches.loser_name",
            "select count(distinct matches.loser_name),",
            "select count(distinct matches.loser_ioc)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9966712594032288,
            0.9966712594032288,
            0.06003955379128456,
            0.06003955379128456,
            0.0003910694213118404,
            0.0003910694213118404,
            0.30402639508247375,
            0.30402639508247375
        ],
        "align_select": "select count(distinct matches.loser_name)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In how many different ways can we say 'loser'?",
        "gold_select": "select count(distinct matches.loser_name)",
        "select_candidates": [
            "select count(distinct matches.loser_name)",
            "select count(distinct matches.loser_id)",
            "select count(distinct matches.loser_ioc)",
            "select count(distinct matches.loser_hand)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9560180306434631,
            0.9911662936210632,
            0.0012900438159704208,
            0.0009161514462903142,
            0.822920560836792,
            0.8309040665626526,
            0.5573031902313232,
            0.7777431607246399
        ],
        "align_select": "select count(distinct matches.loser_name)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the winners who participated in the two years 2013 and 2016.",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select matches.winner_id",
            "select matches.winner_entry",
            "select matches.winner_hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9915421009063721,
            0.028957776725292206,
            0.7469964027404785,
            0.0577295646071434,
            0.9935194849967957,
            0.03884382173418999,
            0.7492603659629822,
            0.012810380198061466
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all the players who won in both the years 2013 and 2016.",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select players.player_id",
            "select players.first_name, players.last_name",
            "select matches.winner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings",
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9932892918586731,
            0.5740317106246948,
            0.1052117571234703,
            0.028130607679486275,
            0.9375196695327759,
            0.11914811283349991,
            0.9744490385055542,
            0.88102787733078
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the names of all players who have won in both 2013 and 2016?",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.player_id, players.first_name, players.last_name",
            "select rankings.player_id, players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.player_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9411033987998962,
            0.24998225271701813,
            0.0003303876146674156,
            0.0003600618802011013,
            0.0004396618460305035,
            0.0005534679512493312,
            0.00019944064843002707,
            0.00019948702538385987
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all players who won both the 2013 and 2016 tournaments?",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.player_id, players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.player_id",
            "select players.first_name, players.last_name, matches.winner_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.8995590209960938,
            0.012630775570869446,
            0.00024032119836192578,
            0.00019329831411596388,
            0.00015157778398133814,
            0.00014199575525708497,
            0.0002983092563226819,
            0.00017593739903531969
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which players won in both 2013 and 2016? List their names.",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.player_id, players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.player_id",
            "select players.first_name.c1, players.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9801004528999329,
            0.006347319111227989,
            0.000318968144711107,
            0.00022930681006982923,
            0.00022086691751610488,
            0.00015237016486935318,
            0.00042501886491663754,
            0.00015980811440385878
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which player had won in both 2013 and 2016? List his name.",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.player_id, players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.player_id",
            "select players.first_name.c1, players.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.806359589099884,
            0.0004988862783648074,
            0.00029837462352588773,
            0.00018712265591602772,
            0.00020338587637525052,
            0.00012718557263724506,
            0.00029703922336921096,
            0.00011657735012704507
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What was the number of games played by any group in the year of 2013 or 2016?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.year",
            "select count(*), matches.minutes",
            "select count(*), matches.loser_entry2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.043854422867298126,
            0.372262179851532,
            0.0002139061107300222,
            0.0017618772108107805,
            0.00021173871937207878,
            0.00019904244982171804,
            0.00019692217756528407,
            0.0003295084461569786
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "In either 2013 or 2016, how many matches happened?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.year",
            "select count(*), matches.match_num",
            "select count(*) dependant on matches.year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9870680570602417,
            0.0001079879657481797,
            0.0003052982792723924,
            9.68959866440855e-05,
            0.00025661493418738246,
            0.00013965177640784532,
            0.06465443968772888,
            0.00011134857777506113
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In either 2013 or 2016, how many matches were played?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.year",
            "select count(*) in matches.minutes, matches.surface",
            "select count(*), matches.minutes, matches.surface"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9813641905784607,
            9.498198778601363e-05,
            0.00027969852089881897,
            9.233586024492979e-05,
            0.00022561007062904537,
            0.00010303744784323499,
            0.00014801138604525477,
            8.145336323650554e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the number of matches played between 2013 and 2016?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select matches.match_num, count(*)",
            "select matches.year, count(*)",
            "select matches.minutes, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.00021245279640424997,
            0.0017689259257167578,
            0.0058355326764285564,
            0.0005722716450691223,
            0.00439006183296442,
            0.0001819263561628759,
            0.00018989280215464532,
            0.000175085078808479
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "For 2013 or 2016, how many matches were played?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.year",
            "select count(*) pour matches.minutes, matches.surface",
            "select count(*) pour matches.year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9205430746078491,
            6.232708983588964e-05,
            0.0002141071017831564,
            5.8222438383381814e-05,
            0.00020502468396443874,
            8.564603194827214e-05,
            0.0006854106904938817,
            7.565018313471228e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "If matches are counted from 2013 to 2016, how many are there?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.match_num",
            "select count(*), matches.year",
            "select count(*), matches.minutes"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9935733675956726,
            0.00019599232473410666,
            0.0002511151833459735,
            0.0004474977031350136,
            0.0002118566626450047,
            0.0005039442330598831,
            0.00032745563657954335,
            0.0001879027404356748
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the players who have won in both the Australian Open and the WTA Championships? List their first names and country codes.",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select t0-c1, players.country_code",
            "select players.first_name, t.0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9590260982513428,
            0.006085407920181751,
            0.00021763074619229883,
            0.00014670632663182914,
            0.0003785505541600287,
            0.00018816825468093157,
            0.0004688419576268643,
            0.0002951202914118767
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Who were the players that won both tourneys WTA championships and the Australian open? Give their first names and country codes.",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.first_name, players.last_name",
            "select players.first_name, players.birth_date",
            "select t0-c1, players.country_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9631773233413696,
            0.0019592815078794956,
            0.00035356884473003447,
            0.0003966733056586236,
            0.0004433661524672061,
            0.0002551112265791744,
            0.0002812896855175495,
            0.0002022322005359456
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the name, nationality, country code, and first name of the player who won in both the WTA Championships and the Australian Open?",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.last_name, players.country_code",
            "select players.first_name, players.last_name, players.country_code",
            "select players.first_name, players.country_code, players.birth_date",
            "select players.first_name, players.last_name, players.country_code, players.birth_date"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.0016213622875511646,
            0.0002620273735374212,
            0.0016213622875511646,
            0.0002620273735374212,
            0.000435865658801049,
            0.0001725560869090259,
            0.00042758966446854174,
            0.00015269072900991887
        ],
        "align_select": "select players.first_name, players.last_name, players.country_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can I know the country code and first name of those who have won in both the WTA Championships and Australian Open?",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.country_code, players.first_name",
            "select players.first_name, players.country_code",
            "select t0-c5, players.first_name",
            "select t2.c5, players.first_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9909641742706299,
            0.0017386351246386766,
            0.9912605881690979,
            0.0006368372705765069,
            0.0002877821389120072,
            0.0002042658452410251,
            0.0006335385842248797,
            0.000288203387754038
        ],
        "align_select": "select players.country_code, players.first_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.player_id, players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select players.first_name, players.last_name, players.country_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9894648790359497,
            0.0033684400841593742,
            0.00021033223310951144,
            0.00012016695109196007,
            0.00014811869186814874,
            0.00010563184332568198,
            0.0007322154124267399,
            0.00015595143486279994
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which tennis players won both the WTA Championships and the Australian Open, and what are their first names and country codes?",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.first_name, players.last_name, players.country_code",
            "select players.player_id, players.first_name, players.country_code",
            "select players.first_name, players.hand, players.country_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9833387136459351,
            0.0033216127194464207,
            0.01628316566348076,
            0.0009683338575996459,
            0.0007202489068731666,
            0.00027419233811087906,
            0.000594042707234621,
            0.0003451162774581462
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "For each player who won both the WTA Championships and the Australian Open, list her first names and country code. Give a complete list.",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.first_name, players.last_name, players.country_code",
            "select players.player_id, players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.8893736004829407,
            0.0009441461879760027,
            0.0037462087348103523,
            0.00021781671966891736,
            0.0003444991307333112,
            0.00013486309035215527,
            0.00020333427528385073,
            0.00011741786875063553
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "List the first names and country codes for all players who won both the WTA Championships and the Australian Open.",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select players.first_name, players.last_name, players.country_code",
            "select players.first_name, players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9878701567649841,
            0.001783606712706387,
            0.00014669458323623985,
            9.66086081461981e-05,
            0.0007855761214159429,
            0.00036448403261601925,
            0.00025007157819345593,
            0.00017746248340699822
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.player_id, players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select players.first_name, players.last_name, players.country_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.988009512424469,
            0.001306522754020989,
            0.00022148712014313787,
            0.00013242960267234594,
            0.00014934972568880767,
            9.636826871428639e-05,
            0.0009469335782341659,
            0.0003709494776558131
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find me the first name and country code of the oldest player?",
        "gold_select": "select players.first_name, players.country_code",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.player_id, players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select players.first_name, players.country_code, max(players.birth_date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9947403073310852,
            9.177746687782928e-05,
            0.0002206911303801462,
            8.438058284809813e-05,
            0.00016255045193247497,
            7.03891200828366e-05,
            0.00027619869797490537,
            6.19053389527835e-05
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you find out the first name and country code of the oldest player?",
        "gold_select": "select players.first_name, players.country_code",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.player_id, players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select players.first_name, players.country_code, max(players.birth_date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9942948222160339,
            9.084596240427345e-05,
            0.00021514009858947247,
            8.591532241553068e-05,
            0.0001612226478755474,
            6.962885527173057e-05,
            0.00032436224864795804,
            5.979502384434454e-05
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which player was born earliest and what is his/her/their first name, country code?",
        "gold_select": "select players.first_name, players.country_code",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.player_id, players.first_name, players.country_code",
            "select players.first_name, players.last_name, players.country_code",
            "select players.birth_date, players.first_name, players.country_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9923018217086792,
            0.00026633311063051224,
            0.000677218078635633,
            0.0001931082078954205,
            0.016768483445048332,
            0.00023541421978734434,
            0.0033746138215065002,
            0.00011274673306616023
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the first name and country code of the oldest player?",
        "gold_select": "select players.first_name, players.country_code",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.player_id, players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select players.first_name, players.country_code, max(players.birth_date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9947420358657837,
            8.439121302217245e-05,
            0.00020895220222882926,
            8.259492460638285e-05,
            0.00015260762302204967,
            6.67680797050707e-05,
            0.0002523267176002264,
            5.936690649832599e-05
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List all the first names and last names of all players in the order of birth date.",
        "gold_select": "select players.first_name, players.last_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name (Date, Last)",
            "select players.first_name, players.last_name (Date, Last"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9939528107643127,
            0.9939528107643127,
            0.00025889574317261577,
            0.00025889574317261577,
            0.00036410934990271926,
            0.00036410934990271926,
            0.00030680859345011413,
            0.00030680859345011413
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list the first and last names of all players from birth in ascending order by birth date?",
        "gold_select": "select players.first_name, players.last_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.first_name, players.last_name (Date, Last)",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name (Date, Last"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9934675097465515,
            0.9934675097465515,
            0.0005492951604537666,
            0.0005492951604537666,
            0.0002221444301540032,
            0.0002221444301540032,
            0.0006689471192657948,
            0.0006689471192657948
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me the full names of all players sorted by their birth dates.",
        "gold_select": "select players.first_name, players.last_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name, players.player_id",
            "select players.first_name, players.last_name, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9949324727058411,
            0.9949324727058411,
            0.0006927862414158881,
            0.0006927862414158881,
            0.00016660161782056093,
            0.00016660161782056093,
            0.0006927862414158881,
            0.0006927862414158881
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me in order the full names of all left handed players starting from their birth date.",
        "gold_select": "select players.first_name, players.last_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.hand",
            "select players.first_name, players.last_name (Date)",
            "select players.first_name, players.last_name, players.hand, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9782178997993469,
            0.00012071891251252964,
            0.0003232927992939949,
            7.620872929692268e-05,
            0.001046244171448052,
            0.00015055104449857026,
            0.0002481631236150861,
            7.697517867200077e-05
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Could you list the full names, in order of birth date, of all left handed players?",
        "gold_select": "select players.first_name, players.last_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.hand",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name (Date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9938595294952393,
            0.00011890083260368556,
            0.0005229712696745992,
            8.944780711317435e-05,
            0.0008993380470201373,
            7.752923556836322e-05,
            0.001022050273604691,
            0.00013005390064790845
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Which players have had the most tours? List them by first name and country code.",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.player_id, players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select players.first_name, players.last_name, players.country_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9913002848625183,
            0.00010673896758817136,
            0.0002820329973474145,
            8.40648717712611e-05,
            0.0002641741302795708,
            7.799812010489404e-05,
            0.007006824016571045,
            9.306025458499789e-05
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Where can I find the first name and country code of the player doing the most number of tours?",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select players.first_name, players.last_name, players.country_code",
            "select players.first_name, players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9805049300193787,
            0.0001265989849343896,
            0.0002479712711647153,
            7.843145431252196e-05,
            0.0014808661071583629,
            0.0001167954396805726,
            0.0009354749345220625,
            9.56887161009945e-05
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the country code and first name of the player with the most tours.",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.country_code, players.first_name",
            "select players.first_name, players.country_code",
            "select players.first_name, players.last_name",
            "select players.last_name, players.country_code"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9942343831062317,
            7.13855042704381e-05,
            0.9944602251052856,
            7.736690167803317e-05,
            0.0003337528323754668,
            9.671341103967279e-05,
            0.0010993938194587827,
            7.021790224825963e-05
        ],
        "align_select": "select players.country_code, players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who has the most tours? List his first name and country code.",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select players.first_name, players.last_name, players.country_code",
            "select players.first_name, players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9931888580322266,
            8.641834574518725e-05,
            0.00020447609131224453,
            6.836553802713752e-05,
            0.0010009993566200137,
            8.802826050668955e-05,
            0.000452104868600145,
            7.392903353320435e-05
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the first name and country code of the player who has had the most tours.",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.player_id, players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select players.first_name, players.last_name, players.country_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9893012642860413,
            8.260217146016657e-05,
            0.0003827241889666766,
            7.671533239772543e-05,
            0.00020362877694424242,
            6.239732465473935e-05,
            0.0018583039054647088,
            8.072210039244965e-05
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which player has the most tours? List his first name and his country code.",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.first_name, players.last_name, players.country_code",
            "select players.player_id, players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9926497340202332,
            9.239134669769555e-05,
            0.0017314909491688013,
            9.428965131519362e-05,
            0.0002947294560726732,
            8.508061728207394e-05,
            0.0002276257728226483,
            7.120901136659086e-05
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you find out the year that has the most number of matches?",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.tourney_date",
            "select matches.year, matches.winner_entry",
            "select matches.year, matches.loser_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9927089214324951,
            6.413775554392487e-05,
            0.000826303381472826,
            6.920658051967621e-05,
            0.00023900909582152963,
            6.565255898749456e-05,
            0.00037863358738832176,
            6.651508010691032e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which years had most numbers matched?",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.winner_entry",
            "select matches.year, matches.match_num",
            "select matches.year (matches.match_num)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9491115808486938,
            7.744300091871992e-05,
            0.0004920533392578363,
            5.8553563576424494e-05,
            0.0005320913041941822,
            5.275303919916041e-05,
            0.0011586204636842012,
            5.1836363127222285e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the year with the most number of matches.",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.winner_entry",
            "select matches.year, matches.tourney_date",
            "select matches.year (matches.match_num)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9937880635261536,
            6.764577119611204e-05,
            0.00015279717626981437,
            5.5181495554279536e-05,
            0.00044491124572232366,
            5.501430496224202e-05,
            0.00025017911684699357,
            5.7911838666768745e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you show me which year had the most matches?",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.tourney_date",
            "select matches.year, matches.winner_entry",
            "select matches.year, matches.tourney_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.995964527130127,
            5.9573449107119814e-05,
            0.0006157417665235698,
            5.932163185207173e-05,
            0.00022806937340646982,
            5.695829895557836e-05,
            0.0004973417380824685,
            5.777680780738592e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which year did the most matches occur?",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.tourney_date",
            "select matches.year (matches.match_num)",
            "select matches.year (matches.tourney_date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9921479821205139,
            5.974309897283092e-05,
            0.0004295252438168973,
            5.510414848686196e-05,
            0.00031843947363086045,
            5.593696187133901e-05,
            0.0003073554253205657,
            5.6333839893341064e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What was the year with the most matches?",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.winner_entry",
            "select matches.year, matches.tourney_date",
            "select matches.year, matches.loser_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9961068034172058,
            7.813955744495615e-05,
            0.00020494728232733905,
            5.906125079491176e-05,
            0.0005698181921616197,
            5.857758515048772e-05,
            0.0003115934378001839,
            5.730047996621579e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you find the name and rank points of the winner who has won the most times?",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select matches.winner_name, matches.winner_rank_points",
            "select matches.winner_name, matches.winner_rank",
            "select matches.winner_name, rankings.player_id9",
            "select matches.loser_age, matches.winner_rank_points"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9926069974899292,
            9.938862785929814e-05,
            0.993145227432251,
            9.532860713079572e-05,
            0.0004818163870368153,
            9.762701665749773e-05,
            0.00033950951183214784,
            9.396938548889011e-05
        ],
        "align_select": "select matches.winner_name, matches.winner_rank_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who won the most times? Provide his name and points ranking.",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select players.first_name, players.last_name, rankings.ranking_points",
            "select players.first_name, players.last_name, rankings.ranking",
            "select rankings.ranking, players.first_name",
            "select rankings.player_id7, rankings.ranking_points"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9874060750007629,
            7.631519838469103e-05,
            0.9851543307304382,
            7.5105759606231e-05,
            0.013330809772014618,
            7.522445957874879e-05,
            0.0005875665228813887,
            8.834983600536361e-05
        ],
        "align_select": "select players.first_name, players.last_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which player has won the most times? List his name and rank points.",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select players.first_name, players.last_name, rankings.ranking_points",
            "select matches.draw_size, players.last_name, rankings.ranking_points",
            "select players.first_name, players.last_name, players.hand",
            "select rankings.ranking, rankings.ranking_points"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches rankings",
            "players rankings",
            "players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9877846240997314,
            8.72034506755881e-05,
            0.0002408381988061592,
            8.710804831935093e-05,
            0.00023878950742073357,
            7.720630674157292e-05,
            0.009052346460521221,
            7.937777991173789e-05
        ],
        "align_select": "select players.first_name, players.last_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you find the most times winner's name and corresponding rank point value?",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select matches.winner_name, rankings.player_id9",
            "select matches.winner_name, rankings.ranking_points",
            "select rankings.player_id7, rankings.player_id9",
            "select matches.winner_name, rankings.player_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "rankings"
        ],
        "align_scores": [
            0.0003739804378710687,
            7.998283399501815e-05,
            0.995152473449707,
            0.00011208277283003554,
            0.000220260422793217,
            6.508375372504815e-05,
            0.0008650877862237394,
            9.202890214510262e-05
        ],
        "align_select": "select matches.winner_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who has won the most times among the winners? List his name and point ranks.",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select matches.winner_name, matches.winner_rank_points",
            "select matches.winner_name, matches.winner_rank",
            "select matches.winner_name, rankings.player_id9",
            "select rankings.player_id7, rankings.player_id9"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "matches",
            "rankings"
        ],
        "align_scores": [
            0.9765963554382324,
            7.801062020007521e-05,
            0.9273437857627869,
            6.9645800977014e-05,
            0.0005757923354394734,
            0.00011254951095907018,
            0.0002039733371930197,
            7.384476339211687e-05
        ],
        "align_select": "select matches.winner_name, matches.winner_rank_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who was the player who ranked highly and won the most number of times? How many rank points did this player get?",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select rankings.player_id, rankings.ranking_points",
            "select rankings.ranking, rankings.ranking_points",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select players.first_name, players.last_name, sum(rankings.ranking_points)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches rankings",
            "players rankings",
            "matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.8299330472946167,
            0.0011019185185432434,
            0.9190813302993774,
            0.000883566914126277,
            0.9484874606132507,
            0.0009724724804982543,
            0.9232950210571289,
            0.0005189367802813649
        ],
        "align_select": "select rankings.player_id, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which player has won the most matches? What is the name of the player who has won the most matches and how many rank points does he/she have?",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select players.first_name, players.last_name, rankings.ranking_points",
            "select players.first_name, players.last_name, sum(rankings.ranking_points)",
            "select rankings.ranking, players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.hand"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.9879698753356934,
            0.00011094561341451481,
            0.9763873815536499,
            7.651069608982652e-05,
            0.16918209195137024,
            0.00012524719932116568,
            0.0023064797278493643,
            9.799067629501224e-05
        ],
        "align_select": "select players.first_name, players.last_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who was the winner with highest rank points and participated in the Australian Open tournament?",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select rankings.player_id7",
            "select matches.winner_name",
            "select rankings.ranking_date, rankings.player_id7",
            "select rankings.ranking_date, t2.c7"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.006552939768880606,
            0.0063083358108997345,
            0.9645859003067017,
            0.11095385998487473,
            0.0002446541911922395,
            0.00016766536282375455,
            0.00037585990503430367,
            0.00020264140039216727
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the name of the winner who has the highest rank points and participated in the Australian Open tournament?",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select matches.winner_name, rankings.ranking_points",
            "select matches.tourney_name, matches.winner_name",
            "select matches.winner_name, matches.winner_rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.8600220084190369,
            0.8322815895080566,
            0.0006664958200417459,
            0.0010616452200338244,
            0.00037408704520203173,
            0.00035551522159948945,
            0.00040974494186230004,
            0.0005297392490319908
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average ranking for each player and his/her first name.",
        "gold_select": "select avg(rankings.ranking), players.first_name",
        "select_candidates": [
            "select rankings.player_id, avg(rankings.ranking)",
            "select rankings.ranking, players.first_name",
            "select avg(rankings.ranking), players.first_name",
            "select players.player_id, players.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.0003737181250471622,
            0.00013424108328763396,
            0.22270850837230682,
            0.000596348661929369,
            0.9963080883026123,
            0.0001987352588912472,
            0.00397742772474885,
            0.0023638647980988026
        ],
        "align_select": "select avg(rankings.ranking), players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the average ranking for each player and his first name?",
        "gold_select": "select avg(rankings.ranking), players.first_name",
        "select_candidates": [
            "select rankings.player_id, avg(rankings.ranking)",
            "select avg(rankings.ranking), players.first_name",
            "select players.player_id, players.first_name",
            "select rankings.ranking, players.first_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.0009314607013948262,
            0.00015196186723187566,
            0.9961095452308655,
            0.00017170392675325274,
            0.010634023696184158,
            0.004209125880151987,
            0.16339567303657532,
            0.0005901988479308784
        ],
        "align_select": "select avg(rankings.ranking), players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you find the average ranking of each player and his/her first name?",
        "gold_select": "select avg(rankings.ranking), players.first_name",
        "select_candidates": [
            "select avg(rankings.ranking), players.first_name",
            "select rankings.ranking, players.first_name",
            "select rankings.player_id, avg(rankings.ranking)",
            "select players.player_id, players.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9957736134529114,
            0.00025590931181795895,
            0.03382143750786781,
            0.0016065349336713552,
            0.000351301277987659,
            0.00012494396651163697,
            0.0009853579103946686,
            0.005395035725086927
        ],
        "align_select": "select avg(rankings.ranking), players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you find the average ranking for each player, and their first name?",
        "gold_select": "select avg(rankings.ranking), players.first_name",
        "select_candidates": [
            "select avg(rankings.ranking), players.first_name",
            "select rankings.ranking, players.first_name",
            "select rankings.player_id, avg(rankings.ranking)",
            "select players.player_id, players.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9952149391174316,
            0.00021856794774066657,
            0.05883597582578659,
            0.000351300259353593,
            0.00032243618625216186,
            0.0001286322221858427,
            0.0002593129756860435,
            0.0018291596788913012
        ],
        "align_select": "select avg(rankings.ranking), players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please give me the average rankings of all players, and also list all their first names.",
        "gold_select": "select avg(rankings.ranking), players.first_name",
        "select_candidates": [
            "select avg(rankings.ranking), players.first_name",
            "select avg(rankings.ranking), players.first_name, players.last_name",
            "select an avg(rankings.ranking), players.first_name",
            "select the avg(rankings.ranking), players.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9947689771652222,
            0.5816377401351929,
            0.00017144758021458983,
            0.00024995097192004323,
            0.00026931733009405434,
            0.00022474055003840476,
            0.00033833051566034555,
            0.00024500806466676295
        ],
        "align_select": "select avg(rankings.ranking), players.first_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the first names of all players and their average rankings?",
        "gold_select": "select avg(rankings.ranking), players.first_name",
        "select_candidates": [
            "select players.first_name, avg(rankings.ranking)",
            "select rankings.ranking, players.first_name",
            "select matches.draw_size, avg(rankings.ranking)",
            "select rankings.player_id, avg(rankings.ranking)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.7032107710838318,
            0.00027217771275900304,
            0.9693562388420105,
            0.013997387140989304,
            0.00037790011265315115,
            0.00024275071336887777,
            0.00022859100135974586,
            0.00014510667824652046
        ],
        "align_select": "select rankings.ranking, players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List all players' first names and their average rankings.",
        "gold_select": "select avg(rankings.ranking), players.first_name",
        "select_candidates": [
            "select players.first_name, avg(rankings.ranking)",
            "select rankings.ranking, players.first_name",
            "select matches.draw_size, avg(rankings.ranking)",
            "select rankings.player_id, avg(rankings.ranking)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9014313220977783,
            0.00020539744582492858,
            0.9860174059867859,
            0.00454586511477828,
            0.00036323737003840506,
            0.0001950311561813578,
            0.00021891687356401235,
            0.00013087109255138785
        ],
        "align_select": "select players.first_name, avg(rankings.ranking)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each player, find the total amount of ranking points and his/her first name.",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select sum(rankings.ranking_points), players.first_name",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select players.player_id, sum(rankings.ranking_points), players.first_name",
            "select players.first_name, sum(rankings.ranking_points)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9850978851318359,
            0.00023505379795096815,
            0.0002689165703486651,
            0.00014385272515937686,
            0.043739203363657,
            0.0001633874053368345,
            0.9908242225646973,
            0.00031588258570991457
        ],
        "align_select": "select sum(rankings.ranking_points), players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How can I calculate the total ranking points for each player and his first name?",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select sum(rankings.ranking_points), players.first_name",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select sum(rankings.ranking_points), players.first_name, players.last_name",
            "select players.player_id, players.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9958794116973877,
            0.0003284123376943171,
            0.00032440770883113146,
            0.00016559293726459146,
            0.0002505825541447848,
            8.554580563213676e-05,
            0.0009240307263098657,
            0.003128275740891695
        ],
        "align_select": "select sum(rankings.ranking_points), players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For every player, find his total ranking points and his first name.",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select sum(rankings.ranking_points), players.first_name",
            "select rankings.ranking, players.first_name",
            "select players.player_id, sum(rankings.ranking_points), players.first_name",
            "select rankings.player_id, sum(rankings.ranking_points)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9530282616615295,
            0.00015432982763741165,
            0.9734253883361816,
            0.00257905968464911,
            0.0397643968462944,
            0.00015268228889908642,
            0.000339057354722172,
            0.00012678441999014467
        ],
        "align_select": "select sum(rankings.ranking_points), players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How much total ranking points does each player have? Give the players' first names.",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select sum(rankings.ranking_points), players.first_name",
            "select players.first_name, sum(rankings.ranking_points)",
            "select sum(rankings.ranking_points), players.first_name,",
            "select sum(rankings.ranking_points), players.first_name."
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9850939512252808,
            0.00017030070011969656,
            0.9862309098243713,
            0.00016302791482303292,
            0.0010080336360260844,
            0.00010029098484665155,
            0.0015725281555205584,
            0.00010782044410007074
        ],
        "align_select": "select sum(rankings.ranking_points), players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you find out the total ranking points for each player and the first character of his/her first name?",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select sum(rankings.ranking_points), players.first_name",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select sum(rankings.ranking_points), rankings.ranking, players.first_name",
            "select sum(rankings.ranking_points), players.first_name, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.025107629597187042,
            0.0003544571518432349,
            0.09437026083469391,
            0.0002424393896944821,
            0.005015702452510595,
            0.00013648303865920752,
            0.00014870031736791134,
            8.852220344124362e-05
        ],
        "align_select": "select sum(rankings.ranking_points), players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each player, list his first name and his ranking points.",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select players.first_name, rankings.ranking_points",
            "select players.first_name, rankings.player_id",
            "select players.first_name, rankings.ranking",
            "select players.first_name, players.hand"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.991741418838501,
            0.059559185057878494,
            0.00035372766433283687,
            0.00038237025728449225,
            0.9928972721099854,
            0.5239467620849609,
            0.0004235607630107552,
            0.00028610185836441815
        ],
        "align_select": "select players.first_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the first name and ranking points of all players?",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select players.first_name, rankings.ranking_points",
            "select players.first_name, players.last_name, rankings.ranking_points",
            "select players.first_name, rankings.player_id",
            "select rankings.ranking, rankings.ranking_points"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9494118094444275,
            0.00018561293836683035,
            0.0004653415235225111,
            7.792525866534561e-05,
            0.000372768787201494,
            0.00010075799946207553,
            0.0011357361217960715,
            0.0001089967554435134
        ],
        "align_select": "select players.first_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the first name of each player and his sum ranking points?",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select players.first_name, sum(rankings.ranking_points)",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select players.first_name, rankings.ranking_points",
            "select matches.draw_size, sum(rankings.ranking_points)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9833393096923828,
            0.00018117227591574192,
            0.00031627374119125307,
            0.00019701851124409586,
            0.2942439913749695,
            0.00035406401730142534,
            0.00040013494435697794,
            0.0002868447918444872
        ],
        "align_select": "select players.first_name, sum(rankings.ranking_points)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "I want to know all players and their ranking points starting from the first name.",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select rankings.player_id, rankings.ranking_points",
            "select players.first_name, rankings.ranking_points",
            "select players.player_id, rankings.player_id, rankings.ranking_points",
            "select players.player_id, rankings.ranking_points"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.0040456210263073444,
            0.00044574710773304105,
            0.9833881855010986,
            0.0006118066376075149,
            0.0003634701715782285,
            0.0001517241180408746,
            0.0028243069536983967,
            0.00042184663470834494
        ],
        "align_select": "select players.first_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "For each player, list their first name and total ranking points.",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select players.first_name, sum(rankings.ranking_points)",
            "select players.first_name, rankings.ranking_points",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select players.first_name, total(rankings.ranking_points)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9187058210372925,
            0.0001497338671470061,
            0.2996199429035187,
            0.0003531457332428545,
            0.000233443031902425,
            0.0001761235180310905,
            0.0009019928402267396,
            0.00012681851512752473
        ],
        "align_select": "select players.first_name, sum(rankings.ranking_points)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the number of players for each of these countries.",
        "gold_select": "select count(*), players.country_code",
        "select_candidates": [
            "select players.country_code, count(*)",
            "select count(*), players.country_code",
            "select players.country_code.c5, count(*)",
            "select country_code, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9933570027351379,
            0.00015874893870204687,
            0.9918394088745117,
            0.00014849343278910965,
            0.0004145547572989017,
            0.00011746009840862826,
            0.6359918713569641,
            0.00011374734458513558
        ],
        "align_select": "select players.country_code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the total number of players from each country.",
        "gold_select": "select count(*), players.country_code",
        "select_candidates": [
            "select players.country_code, count(*)",
            "select count(*), players.country_code",
            "select players.country_code, count(*), players.player_id",
            "select sum(players.country_code), players.country_code"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9967886209487915,
            0.00015707698184996843,
            0.9963678121566772,
            0.00014983040455263108,
            0.0001460564526496455,
            8.282175986096263e-05,
            0.00014119266415946186,
            8.166723273461685e-05
        ],
        "align_select": "select players.country_code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List all the countries with the number of players they have.",
        "gold_select": "select count(*), players.country_code",
        "select_candidates": [
            "select players.country_code, count(*)",
            "select players.country_code, count(*), t0.c6",
            "select players.country_code.c5, count(*)",
            "select players.country_code, count(*), players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9964258074760437,
            0.00018899970746133476,
            0.0002488146419636905,
            0.00011273673590039834,
            0.00040413078386336565,
            0.00010986922279698774,
            0.00016865452926140279,
            8.714127034181729e-05
        ],
        "align_select": "select players.country_code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please give me information on how many players are from which countries?",
        "gold_select": "select count(*), players.country_code",
        "select_candidates": [
            "select players.country_code, count(*)",
            "select count(*), players.country_code",
            "select distinct players.country_code, count(*)",
            "select stats(*), players.country_code"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9957131147384644,
            0.00020614945970010012,
            0.9949910044670105,
            0.00017596222460269928,
            0.00031644388218410313,
            9.172978025162593e-05,
            0.0003792856587097049,
            0.0001600406685611233
        ],
        "align_select": "select players.country_code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the number of players from each country.",
        "gold_select": "select count(*), players.country_code",
        "select_candidates": [
            "select players.country_code, count(*)",
            "select count(*), players.country_code",
            "select players.country_code, count(*), players.player_id",
            "select players.country_code, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9967458248138428,
            0.0001417557505192235,
            0.9963715076446533,
            0.00012990317190997303,
            0.0001405929506290704,
            7.920961797935888e-05,
            0.9967458248138428,
            0.0001417557505192235
        ],
        "align_select": "select players.country_code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which country has the most players? Show me the code of the country with the most players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, t0.c6",
            "select players.country_code, players.birth_date",
            "select players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9955123066902161,
            8.871048339642584e-05,
            0.0006401775171980262,
            7.430902041960508e-05,
            0.00020718340238090605,
            6.44612664473243e-05,
            0.00023626757320016623,
            6.618190673179924e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the country with the most players? Show its country code.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, t0.c6",
            "select players.country_code, players.birth_date",
            "select players.country_code, players.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches"
        ],
        "align_scores": [
            0.9950862526893616,
            9.047965431818739e-05,
            0.0005583325400948524,
            7.154498598538339e-05,
            0.00018272393208462745,
            6.224893149919808e-05,
            0.00024403774295933545,
            6.435648538172245e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the code for the country with most players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, players.birth_date",
            "select players.country_code, t0.c6",
            "select players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9957965612411499,
            7.945540710352361e-05,
            0.00015465567412320524,
            5.375755063141696e-05,
            0.0005868389853276312,
            6.344469875330105e-05,
            0.00016371614765375853,
            5.369760765461251e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which countries have the most players? Show them by country code.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, count(*)",
            "select players.country_code dec1, players.last_name",
            "select players.country_code, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.975892961025238,
            8.710970723768696e-05,
            0.1253691017627716,
            6.951501563889906e-05,
            0.0001655761880101636,
            6.782430136809126e-05,
            0.00017199036665260792,
            6.35519390925765e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please find the codes of countries which have more than 50 players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, t0.c6",
            "select players.country_code, count(*)",
            "select players.country_code, max(players.country_code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches",
            "players rankings"
        ],
        "align_scores": [
            0.9946497082710266,
            0.00016918330220505595,
            0.0004216040251776576,
            7.402900519082323e-05,
            0.0038282983005046844,
            9.550294635118917e-05,
            0.00013962584489490837,
            6.646752444794402e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Where can I find the code of countries with more than 50 players?",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, t0.c6",
            "select players.country_code, players.birth_date",
            "select players.country_code, players.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.985599160194397,
            0.00018060964066535234,
            0.00037027610233053565,
            7.523808744736016e-05,
            0.0001387095107929781,
            7.084124808898196e-05,
            0.00017196248518303037,
            7.43608979973942e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which countries have more than 50 players? List their codes.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, t0.c6",
            "select players.country_code, max(players.player_id)",
            "select players.country_code, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches"
        ],
        "align_scores": [
            0.9935053586959839,
            0.00019332743249833584,
            0.00042712080175988376,
            6.863087037345394e-05,
            0.0002487140882294625,
            7.374708366114646e-05,
            0.0032350991386920214,
            8.402423554798588e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the list of [country code] with codes of countries more than 50 members.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, t0.c6",
            "select players.country_code, t0.c63",
            "select players.country_code with t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.97622150182724,
            0.00012378912651911378,
            0.0004279904824215919,
            6.694142211927101e-05,
            0.00043466113856993616,
            6.706985004711896e-05,
            0.00048756939941085875,
            7.037302566459402e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give the country codes of countries with more than 50 players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, t0.c6",
            "select players.country_code, players.birth_date",
            "select players.country_code, max(players.player_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches",
            "players rankings"
        ],
        "align_scores": [
            0.9858109951019287,
            0.00012378110841382295,
            0.00041360955219715834,
            6.512826803373173e-05,
            0.00014328198449220508,
            5.7848592405207455e-05,
            0.00014460527745541185,
            5.7663197367219254e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which countries have more than 50 players? List them by their country codes.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, count(*)",
            "select players.country_code, t0.c6",
            "select players.country_code, players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches"
        ],
        "align_scores": [
            0.9889472723007202,
            0.00013333123933989555,
            0.0027122364845126867,
            8.928008901420981e-05,
            0.0004411942500155419,
            6.663597014266998e-05,
            0.0001929326099343598,
            7.679306872887537e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the country codes of countries with more than 50 players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, t0.c6",
            "select players.country_code, max(players.player_id)",
            "select players.country_code, max(players.country_code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches",
            "players rankings"
        ],
        "align_scores": [
            0.9808617234230042,
            0.00012572006380651146,
            0.00041337456787005067,
            6.402226426871493e-05,
            0.000143378070788458,
            5.71743912587408e-05,
            0.00015065357729326934,
            6.12532821833156e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For each ranking date, find the total number of tours.",
        "gold_select": "select sum(rankings.tours), rankings.ranking_date",
        "select_candidates": [
            "select rankings.ranking_date, sum(rankings.tours)",
            "select for rankings.ranking_date, sum(rankings.tours)",
            "select sum(rankings.tours), rankings.ranking_date",
            "select rankings.ranking, sum(rankings.tours)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "rankings",
        "table_candidates": [
            "rankings",
            "players rankings"
        ],
        "align_scores": [
            0.9963294863700867,
            0.00020238960860297084,
            0.000313868309604004,
            0.0001614083012100309,
            0.9959045052528381,
            0.00016699302068445832,
            0.9936197400093079,
            0.00013596215285360813
        ],
        "align_select": "select rankings.ranking_date, sum(rankings.tours)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many tours were done on each ranking date?",
        "gold_select": "select sum(rankings.tours), rankings.ranking_date",
        "select_candidates": [
            "select rankings.ranking_date, sum(rankings.tours)",
            "select rankings.ranking_date, count(*)",
            "select rankings.ranking_date, rankings.tours",
            "select distinct rankings.ranking_date, sum(rankings.tours)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "rankings",
        "table_candidates": [
            "rankings",
            "players rankings"
        ],
        "align_scores": [
            0.9960724115371704,
            0.00013579774531535804,
            0.9944599866867065,
            0.00015192186401691288,
            0.991587221622467,
            0.00035366928204894066,
            0.0001718451239867136,
            7.073189044604078e-05
        ],
        "align_select": "select rankings.ranking_date, sum(rankings.tours)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What were the sum of total tours of each ranking date?",
        "gold_select": "select sum(rankings.tours), rankings.ranking_date",
        "select_candidates": [
            "select rankings.ranking_date, sum(rankings.tours)",
            "select sum(rankings.tours), rankings.ranking_date",
            "select the rankings.ranking_date, sum(rankings.tours)",
            "select the sum(rankings.tours), rankings.ranking_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "rankings",
        "table_candidates": [
            "rankings",
            "players rankings"
        ],
        "align_scores": [
            0.9957566857337952,
            0.00015780809917487204,
            0.9948498606681824,
            0.0001323259639320895,
            0.0005505880108103156,
            0.00017543451394885778,
            0.00034555577440187335,
            0.00015346080181188881
        ],
        "align_select": "select rankings.ranking_date, sum(rankings.tours)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "In each ranking date, how many total tours did we have?",
        "gold_select": "select sum(rankings.tours), rankings.ranking_date",
        "select_candidates": [
            "select rankings.ranking_date, sum(rankings.tours)",
            "select sum(rankings.tours), rankings.ranking_date",
            "select rankings.ranking_date-rankings.ranking, sum(rankings.tours)",
            "select for rankings.ranking_date, sum(rankings.tours)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "rankings",
        "table_candidates": [
            "rankings",
            "players rankings"
        ],
        "align_scores": [
            0.9948558807373047,
            0.00014679755258839577,
            0.9943059086799622,
            0.00017209780344273895,
            0.00043058497249148786,
            0.0001541389210615307,
            0.0005203355103731155,
            0.00013346275954972953
        ],
        "align_select": "select rankings.ranking_date, sum(rankings.tours)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many total tours did each tour for each ranking date have?",
        "gold_select": "select sum(rankings.tours), rankings.ranking_date",
        "select_candidates": [
            "select rankings.ranking_date, sum(rankings.tours)",
            "select rankings.ranking, sum(rankings.tours)",
            "select tour rankings.ranking_date, sum(rankings.tours)",
            "select rankings.ranking_date-rankings.ranking, sum(rankings.tours)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "rankings",
        "table_candidates": [
            "rankings",
            "players rankings"
        ],
        "align_scores": [
            0.9950371384620667,
            0.0004143526603002101,
            0.9954763054847717,
            0.00026087622973136604,
            0.0013937258627265692,
            0.00015733721374999732,
            0.0007774574914947152,
            0.0002798121131490916
        ],
        "align_select": "select rankings.ranking_date, sum(rankings.tours)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me the total number of tours for each ranking date.",
        "gold_select": "select sum(rankings.tours), rankings.ranking_date",
        "select_candidates": [
            "select rankings.ranking_date, sum(rankings.tours)",
            "select sum(rankings.tours), rankings.ranking_date",
            "select tour_rankings.ranking_date, sum(rankings.tours)",
            "select the rankings.ranking_date, sum(rankings.tours)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "rankings",
        "table_candidates": [
            "rankings",
            "players rankings"
        ],
        "align_scores": [
            0.9966244697570801,
            0.00014683592598885298,
            0.9963100552558899,
            0.0001371285179629922,
            0.98972088098526,
            0.00016300367133226246,
            0.0005894671776331961,
            0.0001595450157765299
        ],
        "align_select": "select rankings.ranking_date, sum(rankings.tours)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give the number of matches in each year.",
        "gold_select": "select count(*), matches.year",
        "select_candidates": [
            "select matches.year, count(*)",
            "select count(*), matches.year",
            "select match_count(*), matches.year",
            "select stats(*), matches.year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9970992803573608,
            0.00011287162487860769,
            0.9969764947891235,
            0.00013001446495763958,
            0.0005059321410953999,
            9.567448432790115e-05,
            0.00035982424742542207,
            0.0001367982040392235
        ],
        "align_select": "select matches.year, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Calculate the number of matches occurring in each year.",
        "gold_select": "select count(*), matches.year",
        "select_candidates": [
            "select matches.year, count(*)",
            "select count(*), matches.year",
            "select match_count(*), matches.year",
            "select stats(*), matches.year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9967206120491028,
            0.00010784471669467166,
            0.9965270161628723,
            0.00012312200851738453,
            0.0005667706136591733,
            8.903803245630115e-05,
            0.0003779071557801217,
            0.00012889388017356396
        ],
        "align_select": "select matches.year, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show the number of matches in each year.",
        "gold_select": "select count(*), matches.year",
        "select_candidates": [
            "select matches.year, count(*)",
            "select count(*), matches.year",
            "select stats(*), matches.year",
            "select matches.winner_seed, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9969933032989502,
            0.00011169994832016528,
            0.9968962669372559,
            0.00011968664330197498,
            0.00032291177194565535,
            0.00012801917910110205,
            0.00024082533491309732,
            0.00017789450066629797
        ],
        "align_select": "select matches.year, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "In the following years, how many matches were played?",
        "gold_select": "select count(*), matches.year",
        "select_candidates": [
            "select matches.year, count(*)",
            "select count(*), matches.year",
            "select in matches.year, count(*)",
            "select sum(matches.loser_id), matches.year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9944549202919006,
            0.0003253291069995612,
            0.9941653609275818,
            0.0002825524425134063,
            0.002813096856698394,
            0.00010234941873932257,
            0.0003246895794291049,
            0.0001667718606768176
        ],
        "align_select": "select matches.year, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "In each year, how many matches were played?",
        "gold_select": "select count(*), matches.year",
        "select_candidates": [
            "select matches.year, count(*)",
            "select count(*), matches.year",
            "select matches.winner_seed, count(*)",
            "select table matches.year, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9964948296546936,
            0.00012356671504676342,
            0.9962319731712341,
            0.000153490953380242,
            0.00029565198929049075,
            0.00022804831678513438,
            0.0007583303959108889,
            0.00011105844896519557
        ],
        "align_select": "select matches.year, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "In every year, how many matches were played?",
        "gold_select": "select count(*), matches.year",
        "select_candidates": [
            "select matches.year, count(*)",
            "select count(*), matches.year",
            "select in matches.year, count(*)",
            "select stats(*), matches.year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.996178388595581,
            0.00010830434621311724,
            0.9960799813270569,
            0.0001381358742946759,
            0.0015597690362483263,
            0.00011352737783454359,
            0.0003806316526606679,
            0.00011174363316968083
        ],
        "align_select": "select matches.year, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me all the names and ranks of the three youngest winners in all matches.",
        "gold_select": "select distinct matches.winner_name, matches.winner_rank",
        "select_candidates": [
            "select matches.winner_name, matches.winner_rank",
            "select matches.loser_ioc, matches.winner_rank",
            "select matches.loser_age, matches.winner_rank",
            "select matches.winner_rank, matches.winner_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9522973299026489,
            5.164497270016e-05,
            0.00023177301045507193,
            6.770217441953719e-05,
            0.0002298779145348817,
            7.353957334998995e-05,
            0.9702975153923035,
            5.2796927775489166e-05
        ],
        "align_select": "select matches.winner_name, matches.winner_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please show me the names and ranks of the three youngest winners across all matches.",
        "gold_select": "select distinct matches.winner_name, matches.winner_rank",
        "select_candidates": [
            "select matches.winner_name, matches.winner_rank",
            "select matches.loser_ioc, matches.winner_rank",
            "select matches.loser_age, matches.winner_rank",
            "select t1.c 27, matches.winner_rank"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9943827390670776,
            5.9474230511114e-05,
            0.0002815797342918813,
            7.699441630393267e-05,
            0.00027245134697295725,
            8.245972276199609e-05,
            0.0004593078629113734,
            8.47209885250777e-05
        ],
        "align_select": "select matches.winner_name, matches.winner_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me how many different players who competed in the WTA Championships and were left-handed won the tournament.",
        "gold_select": "select count(distinct matches.winner_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.loser_age)",
            "select count(distinct matches.loser_ht)",
            "select count(distinct matches.winner_hand)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9597797989845276,
            0.6244708299636841,
            0.0008054686477407813,
            0.00020268351363483816,
            0.01113203912973404,
            0.0005943297874182463,
            0.07106422632932663,
            0.0007425902877002954
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many times has a different player won the WTA Championships when they were a left-handed player?",
        "gold_select": "select count(distinct matches.winner_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.loser_age)",
            "select count(distinct matches.loser_ht)",
            "select count(*), players.hand"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9526982307434082,
            0.004458798095583916,
            0.001198010751977563,
            0.00035090226447209716,
            0.024734405800700188,
            0.0011125847231596708,
            0.0007109369616955519,
            0.32926854491233826
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all players who won the WTA Championships and also participated in it and were left-handed.",
        "gold_select": "select count(distinct matches.winner_name)",
        "select_candidates": [
            "select matches.winner_name",
            "select players.player_id",
            "select matches.winner_name, players.player_id",
            "select players.first_name, players.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.973105251789093,
            0.7655266523361206,
            0.24685460329055786,
            0.006043192930519581,
            0.0016199782257899642,
            0.0015988621162250638,
            0.5897222757339478,
            0.0647764652967453
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the list of players who won the WTA Championships, but also participated in them in the past and are left-handed.",
        "gold_select": "select count(distinct matches.winner_name)",
        "select_candidates": [
            "select matches.winner_name",
            "select players.player_id",
            "select players.player_id, players.first_name, players.hand",
            "select players.first_name, players.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.5277466177940369,
            0.27369990944862366,
            0.05083874240517616,
            0.004755696281790733,
            0.0001913655869429931,
            0.0002898387610912323,
            0.03882449120283127,
            0.014911111444234848
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "How many left-handed players won both of the WTA championships and did participate in them?",
        "gold_select": "select count(distinct matches.winner_name)",
        "select_candidates": [
            "select count(*)",
            "select count(*), players.hand",
            "select count(*), matches.tourney_name",
            "select count(*) when players.hand, matches.tourney_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.5410261750221252,
            0.17740492522716522,
            0.000986786326393485,
            0.0018235815223306417,
            0.0009634923189878464,
            0.003645030315965414,
            0.0003341938427183777,
            0.0001490296417614445
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of left-handed winners who have played in the WTA Championships?",
        "gold_select": "select count(distinct matches.winner_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.loser_age)",
            "select count(*), matches.winner_entry",
            "select count(distinct matches.winner_entry)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.8795171976089478,
            0.000721289194189012,
            0.0006073041004128754,
            0.00012475872063077986,
            0.0004065300745423883,
            0.0008270303369499743,
            0.009764418005943298,
            0.00017495873908046633
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Is there a way to find the number of left-handed winners in WTA Championships?",
        "gold_select": "select count(distinct matches.winner_name)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.tourney_name",
            "select count(distinct matches.loser_age)",
            "select count(distinct matches.winner_hand)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.989993155002594,
            0.0008086867746897042,
            0.00026237411657348275,
            0.005104606039822102,
            0.0002885893627535552,
            0.0001229077170137316,
            0.0007390350801870227,
            0.0001536390045657754
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the first name, birth date and country code of the winner who won the highest match rank points in all the matches?",
        "gold_select": "select players.first_name, players.country_code, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.birth_date, players.country_code",
            "select players.first_name, players.last_name, players.birth_date, players.country_code",
            "select players.first_name, players.hand, players.birth_date, players.country_code",
            "select players.first_name, players.birth_date), players.country_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9613154530525208,
            0.001035988563671708,
            0.020266292616724968,
            0.0004949845606461167,
            0.002026122761890292,
            0.0003271773166488856,
            0.011307420209050179,
            0.0002700568293221295
        ],
        "align_select": "select players.first_name, players.birth_date, players.country_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Where can I find the first name, country code and birth date of the winner who has the highest rank points in all matches?",
        "gold_select": "select players.first_name, players.country_code, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.country_code, players.birth_date",
            "select players.first_name, players.birth_date, players.country_code",
            "select players.first_name, players.last_name, players.country_code, players.birth_date",
            "select players.first_name, players.last_name, players.birth_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9417569637298584,
            0.0006098034209571779,
            0.9368994832038879,
            0.0006400171550922096,
            0.0083064716309309,
            0.00033710928983055055,
            0.0005689898389391601,
            0.00011860416998388246
        ],
        "align_select": "select players.first_name, players.country_code, players.birth_date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the first name, country code and birth date of the player with the most winner rank points from all matches.",
        "gold_select": "select players.first_name, players.country_code, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.country_code, players.birth_date",
            "select players.first_name, players.birth_date, players.country_code",
            "select players.first_name, players.country_code, players.birth_date",
            "select players.first_name, players.country_code), players.birth_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9865250587463379,
            0.00014711706899106503,
            0.9867962598800659,
            0.00016407168004661798,
            0.9865250587463379,
            0.00014711706899106503,
            0.010068068280816078,
            9.535188291920349e-05
        ],
        "align_select": "select players.first_name, players.country_code, players.birth_date",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For each hand type, how many players are there?",
        "gold_select": "select count(*), players.hand",
        "select_candidates": [
            "select players.hand, count(*)",
            "select players.hand, count(*), players.birth_date",
            "select players.last_name, count(*)",
            "select players.hand, count(*), players.player_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9965284466743469,
            0.00021648975962307304,
            0.00022396151325665414,
            0.00011937615636270493,
            0.00032203501905314624,
            0.00031167574343271554,
            0.00020969707111362368,
            9.283096005674452e-05
        ],
        "align_select": "select players.hand, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the number of players for each hand type?",
        "gold_select": "select count(*), players.hand",
        "select_candidates": [
            "select players.hand, count(*)",
            "select count(*), players.hand",
            "select players.hand, count(*), players.birth_date",
            "select players.hand, count(*), players.player_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9965440630912781,
            0.00031281381961889565,
            0.996488094329834,
            0.00030286022229120135,
            0.00021051359362900257,
            0.00014949761680327356,
            0.0002882409899029881,
            8.97413628990762e-05
        ],
        "align_select": "select players.hand, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many players would be playing for each hand type?",
        "gold_select": "select count(*), players.hand",
        "select_candidates": [
            "select players.hand, count(*)",
            "select players.first_name, players.hand, count(*)",
            "select players.hand, count(*), matches.loser_age",
            "select players.hand, count(*), matches.winner_entry"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches"
        ],
        "align_scores": [
            0.9957128763198853,
            0.0003113309503532946,
            0.00023678895377088338,
            0.00016423588385805488,
            0.00020076934015378356,
            8.295628504129127e-05,
            0.00028559117345139384,
            0.00010238466347800568
        ],
        "align_select": "select players.hand, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "In each of the hands, how many players are there?",
        "gold_select": "select count(*), players.hand",
        "select_candidates": [
            "select players.hand, count(*)",
            "select count(*), players.hand",
            "select players.first_name, players.hand, count(*)",
            "select players.hand, count(*), players.player_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.996301531791687,
            0.00013379914162214845,
            0.9961102604866028,
            0.00017196805856656283,
            0.00020078312081750482,
            0.00014908163575455546,
            0.00036176934372633696,
            8.57985723996535e-05
        ],
        "align_select": "select players.hand, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How many players will be playing each hand type?",
        "gold_select": "select count(*), players.hand",
        "select_candidates": [
            "select players.hand, count(*)",
            "select players.last_name, count(*)",
            "select count(*), players.hand",
            "select players.first_name, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches",
            "players rankings"
        ],
        "align_scores": [
            0.995749831199646,
            0.0004173203487880528,
            0.00039352235035039485,
            0.0002251304395031184,
            0.9956024885177612,
            0.0003423071466386318,
            0.0003503978659864515,
            0.0002535259409341961
        ],
        "align_select": "select players.hand, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the notes (notes) of death event, which contains substring 'East'.",
        "gold_select": "select death.note",
        "select_candidates": [
            "select death.note",
            "select death.caused_by_ship_id, death.note",
            "select death.id, death.note",
            "select death.note, death.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.9932317733764648,
            9.20735765248537e-05,
            0.00022336418624036014,
            6.368237518472597e-05,
            0.00014701049076393247,
            6.992295675445348e-05,
            0.000146757549373433,
            6.46263433736749e-05
        ],
        "align_select": "select death.note",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me those death event notes with the substring 'East'.",
        "gold_select": "select death.note",
        "select_candidates": [
            "select death.note",
            "select death.caused_by_ship_id, death.note",
            "select death.id, death.note",
            "select death.note, death.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.983641505241394,
            7.218855898827314e-05,
            0.00019899956532754004,
            6.790286715840921e-05,
            0.00015848787734284997,
            7.415525760734454e-05,
            0.00014942121924832463,
            6.337775994325057e-05
        ],
        "align_select": "select death.note",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the note of all the death events that starts with substring 'East'?",
        "gold_select": "select death.note",
        "select_candidates": [
            "select death.note",
            "select death.caused_by_ship_id, death.note",
            "select death.id, death.note",
            "select death.note, death.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death",
            "ship death"
        ],
        "align_scores": [
            0.9927632212638855,
            9.115010470850393e-05,
            0.00021286420815158635,
            6.922354805283248e-05,
            0.00017678052245173603,
            7.205191650427878e-05,
            0.00013281656720209867,
            6.785794539609924e-05
        ],
        "align_select": "select death.note",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the death note events with substring 'East' in them?",
        "gold_select": "select death.note",
        "select_candidates": [
            "select death.note",
            "select death.caused_by_ship_id",
            "select death.id",
            "select death.injured"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.9924719333648682,
            7.41794501664117e-05,
            0.0019718739204108715,
            6.98775693308562e-05,
            0.002676157746464014,
            6.989056419115514e-05,
            0.0032488990109413862,
            6.773181667085737e-05
        ],
        "align_select": "select death.note",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of ships that ended up being captured.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), ship.disposition_of_ship",
            "select count(*) dependant on ship.disposition_of_ship",
            "select count(*) denoted by ship.disposition_of_ship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship",
        "table_candidates": [
            "ship"
        ],
        "align_scores": [
            0.9917562007904053,
            0.0029145441949367523,
            0.0001670290221227333,
            0.0016746463952586055,
            0.000564602087251842,
            0.00014127350004855543,
            0.001069527235813439,
            0.00015570150571875274
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In total, how many ships were captured?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), ship.disposition_of_ship",
            "select count(*) in sum(ship.disposition_of_ship)",
            "select count(*) In sum(ship.disposition_of_ship)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "ship",
        "table_candidates": [
            "ship"
        ],
        "align_scores": [
            0.9841626882553101,
            0.9919013381004333,
            0.00027649247203953564,
            0.00017317089077550918,
            0.0005149816861376166,
            0.0002653663686942309,
            0.0005149816861376166,
            0.0002653663686942309
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Of how many ships were any captured?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), ship.disposition_of_ship",
            "select count(*), ship.id",
            "select count(*), ship.lost_in_battle"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship",
        "table_candidates": [
            "ship"
        ],
        "align_scores": [
            0.8836877346038818,
            0.008868487551808357,
            0.00018697035557124764,
            0.001193427131511271,
            0.00025987601839005947,
            0.0004339163424447179,
            0.0001902833755593747,
            0.00018765422282740474
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of ships that got captured.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*) dependant on ship.disposition_of_ship",
            "select count(*), ship.disposition_of_ship",
            "select count(*) denoted by ship.disposition_of_ship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship",
        "table_candidates": [
            "ship"
        ],
        "align_scores": [
            0.9933528900146484,
            0.0022948463447391987,
            0.0005760305793955922,
            0.0001460106432205066,
            0.00016310691717080772,
            0.0012448937632143497,
            0.000986616127192974,
            0.0001479507191106677
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In the period under review how many ships were Captured?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), ship.disposition_of_ship",
            "select count(*) in ship.disposition_of_ship",
            "select sum(ship.disposition_of_ship)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "ship",
        "table_candidates": [
            "ship",
            "ship death"
        ],
        "align_scores": [
            0.0011715786531567574,
            6.498453149106354e-05,
            0.07663621753454208,
            6.271337042562664e-05,
            0.00025957764592021704,
            6.918706640135497e-05,
            0.00025457816082052886,
            7.606845611007884e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "What is the name, tonnage ordered by, in descending alphaetical order for the names?",
        "gold_select": "select ship.name, ship.tonnage",
        "select_candidates": [
            "select ship.name, ship.tonnage",
            "select ship.name, ship.tonnage, ship.ship_type",
            "select ship.name, ship.tonnage, in descending alphaetical order",
            "select ship.name, ship.tonnage in descending alphaetical order"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "ship",
        "table_candidates": [
            "ship"
        ],
        "align_scores": [
            0.9718144536018372,
            0.9718144536018372,
            0.00010599246161291376,
            0.00010599246161291376,
            0.001798219163902104,
            0.001798219163902104,
            0.05609886720776558,
            0.05609886720776558
        ],
        "align_select": "select ship.name, ship.tonnage",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list the name and tonnage ordered by in descending alphabetical order?",
        "gold_select": "select ship.name, ship.tonnage",
        "select_candidates": [
            "select ship.name, ship.tonnage",
            "select t1.c 2, ship.tonnage",
            "select ship.name., ship.tonnage",
            "select ship.name, ship.tonnage)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "ship",
        "table_candidates": [
            "ship"
        ],
        "align_scores": [
            0.9914765954017639,
            0.9914765954017639,
            0.00040311957127414644,
            0.00040311957127414644,
            0.001683225273154676,
            0.001683225273154676,
            0.0009564534411765635,
            0.0009564534411765635
        ],
        "align_select": "select ship.name, ship.tonnage",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all the names, tonnages ordered by in descending alphabetic order.",
        "gold_select": "select ship.name, ship.tonnage",
        "select_candidates": [
            "select ship.name, ship.tonnage",
            "select t1.c 2, ship.tonnage",
            "select ship.name., ship.tonnage",
            "select ship.name, ship.tonnage"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "ship",
        "table_candidates": [
            "ship"
        ],
        "align_scores": [
            0.9898266792297363,
            0.9898266792297363,
            0.0003358165849931538,
            0.0003358165849931538,
            0.0015988150844350457,
            0.0015988150844350457,
            0.9898266792297363,
            0.9898266792297363
        ],
        "align_select": "select ship.name, ship.tonnage",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Please list the names, dates and results for all battles.",
        "gold_select": "select battle.name, battle.date",
        "select_candidates": [
            "select battle.name, battle.date, battle.result",
            "select battle.name, battle.date, battle.result",
            "select battle.name., battle.date, battle.result",
            "select battle.name, battle.date, battle.result"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.994897186756134,
            0.00013976155605632812,
            0.994897186756134,
            0.00013976155605632812,
            0.022357530891895294,
            0.0001607556623639539,
            0.994897186756134,
            0.00013976155605632812
        ],
        "align_select": "select battle.name, battle.date, battle.result",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the list of names, dates and results of all battles.",
        "gold_select": "select battle.name, battle.date",
        "select_candidates": [
            "select battle.name, battle.date, battle.result",
            "select battle.name, battle.date, battle.result",
            "select battle.name, battle.date, battle.result",
            "select battle.name., battle.date, battle.result"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9941813349723816,
            0.00011910397734027356,
            0.9941813349723816,
            0.00011910397734027356,
            0.9941813349723816,
            0.00011910397734027356,
            0.015601161867380142,
            0.00014823934179730713
        ],
        "align_select": "select battle.name, battle.date, battle.result",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In each battle, list the name, date, and result.",
        "gold_select": "select battle.name, battle.date",
        "select_candidates": [
            "select battle.name, battle.date, battle.result",
            "select battle.id, battle.name, battle.date, battle.result",
            "select battle.name, battle.bulgarian_commander, battle.date, battle.result",
            "select battle.name, battle.date, battle.result"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9941721558570862,
            0.00011299103789497167,
            0.0004529391007963568,
            0.00012181710917502642,
            0.0002467973972670734,
            8.525409793946892e-05,
            0.9941721558570862,
            0.00011299103789497167
        ],
        "align_select": "select battle.name, battle.date, battle.result",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the maximum and minimum number of deaths per incident?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select max(death.killed), min(death.killed)",
            "select max(death.killed), min(death.killed), death.caused_by_ship_id",
            "select max(death.killed), min(death.killed) per death.caused_by_ship_id",
            "select max(death.injured), min(death.killed)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.9944604635238647,
            0.9623731970787048,
            0.0005759234772995114,
            0.14372815191745758,
            0.0016913845902308822,
            0.0009595933952368796,
            0.00045687935198657215,
            0.0004920304054394364
        ],
        "align_select": "select max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the maximum and minimum death tolls caused by each event.",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select death.caused_by_ship_id, max(death.killed), min(death.killed)",
            "select death.id, max(death.killed), min(death.killed)",
            "select battle.name, max(death.killed), min(death.killed)",
            "select t3.c1, max(death.killed), min(death.killed)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death",
            "battle death",
            "ship death",
            "battle ship death"
        ],
        "align_scores": [
            0.0005496389348991215,
            0.0002505865995772183,
            0.008339484222233295,
            0.0025150999426841736,
            0.9916080236434937,
            0.5891550183296204,
            0.0002303083601873368,
            0.00021572303376160562
        ],
        "align_select": "select battle.name, max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Calculating the maximum and the minimum death amounts causes every time.",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select max(death.killed), min(death.injured)",
            "select max(death.killed), min(death.killed)",
            "select max(death.injured), min(death.injured)",
            "select max(t2.c6), min(t2.c6)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.006715516559779644,
            0.0010491986759006977,
            0.984906017780304,
            0.00775417173281312,
            0.9119517207145691,
            0.012980890460312366,
            0.005365157965570688,
            0.0010240951087325811
        ],
        "align_select": "select max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many people died in both the maximum and minimum numbers?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select max(death.killed), min(death.killed)",
            "select sum(death.killed), min(death.killed)",
            "select count(*) max(death.killed), min(death.killed)",
            "select death.killed, death.injured"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.13373474776744843,
            7.663322321604937e-05,
            0.0008376400801353157,
            6.175810267450288e-05,
            0.000741922645829618,
            7.415879372274503e-05,
            0.00619371235370636,
            0.0002578598214313388
        ],
        "align_select": "select max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the average number of injuries occurring every time?",
        "gold_select": "select avg(death.injured)",
        "select_candidates": [
            "select avg(death.injured)",
            "select death.caused_by_ship_id, avg(death.injured)",
            "select death.id, avg(death.injured)",
            "select avg(death.injured), death.caused_by_ship_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.003325299359858036,
            0.9419869780540466,
            0.06359325349330902,
            0.0005166840855963528,
            0.00129992316942662,
            0.00017857567581813782,
            0.005329568404704332,
            0.00023041729582473636
        ],
        "align_select": "select avg(death.injured)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the average number of injuries each time.",
        "gold_select": "select avg(death.injured)",
        "select_candidates": [
            "select death.id, avg(death.injured)",
            "select death.caused_by_ship_id, avg(death.injured)",
            "select avg(death.injured), death.id",
            "select t2.c5, avg(death.injured)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.0031932585407048464,
            9.832023351918906e-05,
            0.261908620595932,
            0.0001226348103955388,
            0.001211995491757989,
            7.997017382876948e-05,
            0.0003333998320158571,
            0.0001680963032413274
        ],
        "align_select": "select death.caused_by_ship_id, avg(death.injured)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the average number of injuries each incident.",
        "gold_select": "select avg(death.injured)",
        "select_candidates": [
            "select death.id, avg(death.injured)",
            "select death.caused_by_ship_id, avg(death.injured)",
            "select death.injured, avg(death.injured)",
            "select death.note, avg(death.injured)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.9885708689689636,
            9.540681639919057e-05,
            0.9494243264198303,
            8.607391646364704e-05,
            0.0010459033073857427,
            0.00015936711861286312,
            0.052013590931892395,
            9.622979996493086e-05
        ],
        "align_select": "select death.id, avg(death.injured)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "The average number of injured people each time was what?",
        "gold_select": "select avg(death.injured)",
        "select_candidates": [
            "select death.id, avg(death.injured)",
            "select death.caused_by_ship_id, avg(death.injured)",
            "select avg(death.injured), death.id",
            "select death.injured, avg(death.injured)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.18591265380382538,
            9.575106378179044e-05,
            0.8403846025466919,
            9.231930016539991e-05,
            0.01889859326183796,
            8.585864998167381e-05,
            0.0018190545961260796,
            0.00014361232751980424
        ],
        "align_select": "select death.caused_by_ship_id, avg(death.injured)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What were the deaths and injuries inflicted on the people by the ship with tonnage 't'?",
        "gold_select": "select death.killed, death.injured",
        "select_candidates": [
            "select death.killed, death.injured",
            "select death.caused_by_ship_id, death.killed, death.injured",
            "select sum(death.killed), sum(death.injured)",
            "select death.killed, death.injured, ship.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death"
        ],
        "align_scores": [
            0.9892683625221252,
            0.00017933532944880426,
            0.0002992449444718659,
            7.155447383411229e-05,
            0.9684032201766968,
            9.674872853793204e-05,
            0.00019401991448830813,
            6.374519580276683e-05
        ],
        "align_select": "select death.killed, death.injured",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For each death and injury situation, what is the death and injury resulting from the ship with tonnage 't'?",
        "gold_select": "select death.killed, death.injured",
        "select_candidates": [
            "select death.killed, death.injured",
            "select death.killed, death.injured, death.killed, death.injured",
            "select death.killed, death.injured, death.killed",
            "select death.killed, death.injured, death.killed, max(death.injured)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death"
        ],
        "align_scores": [
            0.8712060451507568,
            0.0003279398661106825,
            0.00036847422597929835,
            0.00011795091268140823,
            0.0002809477155096829,
            0.0001273654488613829,
            0.0001491726579843089,
            9.457150008529425e-05
        ],
        "align_select": "select death.killed, death.injured",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Give me the death and injury statistics for the ship with tonnage 't'.",
        "gold_select": "select death.killed, death.injured",
        "select_candidates": [
            "select death.killed, death.injured",
            "select stats(death.killed), stats(death.injured)",
            "select ship-specific death.killed, death.injured",
            "select stat(death.killed), stat(death.injured)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death"
        ],
        "align_scores": [
            0.9643985033035278,
            9.782653796719387e-05,
            0.0006102865445427597,
            8.09006451163441e-05,
            0.004198751412332058,
            7.35938738216646e-05,
            0.011247911490499973,
            8.231971878558397e-05
        ],
        "align_select": "select death.killed, death.injured",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What were the death and injury situations caused by the ship with tonnage 't'? List them.",
        "gold_select": "select death.killed, death.injured",
        "select_candidates": [
            "select death.killed, death.injured",
            "select distinct death.killed, death.injured",
            "select death.caused_by_ship_id, death.killed, death.injured",
            "select list(death.killed), death.injured"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death"
        ],
        "align_scores": [
            0.9595388174057007,
            9.570204565534368e-05,
            0.009618640877306461,
            8.373492892133072e-05,
            0.00025152708985842764,
            7.21287724445574e-05,
            0.00042228438542224467,
            7.502001972170547e-05
        ],
        "align_select": "select death.killed, death.injured",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What were the names and results of the battles fought by the Bulgarian commanders when they were not Boril?",
        "gold_select": "select battle.name, battle.result",
        "select_candidates": [
            "select battle.name, battle.result",
            "select battle.name, battle.bulgarian_commander, battle.result",
            "select battle.name, battle.date, battle.result",
            "select battle.name, battle.result, battle.bulgarian_commander"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9863218069076538,
            0.0002598584978841245,
            0.00026826918474398553,
            9.382504504173994e-05,
            0.0003535910800565034,
            0.00016066526586655527,
            0.0002494983491487801,
            9.221935033565387e-05
        ],
        "align_select": "select battle.name, battle.result",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the names and results of all the battles fought by the bulgarian commander 'not Boril'.",
        "gold_select": "select battle.name, battle.result",
        "select_candidates": [
            "select battle.name, battle.result",
            "select battle.name, battle.bulgarian_commander, battle.result",
            "select battle.name, battle.date, battle.result",
            "select battle.name, battle.result, battle.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9933977127075195,
            0.00022583993268199265,
            0.0002307776449015364,
            7.91384227341041e-05,
            0.00028191093588247895,
            7.576483039883897e-05,
            0.00021400052355602384,
            8.013017941266298e-05
        ],
        "align_select": "select battle.name, battle.result",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need to know the different ids, names, and ids of all the battles that lose either 'Brig' type ship.",
        "gold_select": "select distinct battle.id, battle.name",
        "select_candidates": [
            "select distinct battle.name, ship.name, ship.id",
            "select battle.name, ship.name, ship.id",
            "select distinct ship.id, ship.name, battle.id",
            "select distinct ship.id, battle.name, ship.lost_in_battle"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.0013234836515039206,
            0.0001555902126710862,
            0.0004353644326329231,
            0.00016480436897836626,
            0.978619396686554,
            0.005366255529224873,
            0.0030354417394846678,
            0.00019605137640610337
        ],
        "align_select": "select distinct ship.id, ship.name, battle.id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me what are the different ids and names of the battles which lost any 'Brig' battle ships?",
        "gold_select": "select distinct battle.id, battle.name",
        "select_candidates": [
            "select distinct battle.id, battle.name",
            "select distinct battle.name, battle.id",
            "select distinct battle.name, battle.date",
            "select distinct battle.name, ship.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.9873917698860168,
            0.0002775921020656824,
            0.984862744808197,
            0.0002297663886565715,
            0.0005118903936818242,
            7.867326348787174e-05,
            0.060936618596315384,
            0.00017904385458678007
        ],
        "align_select": "select distinct battle.id, battle.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you provide the different ids and names of battles where ships of brig type were lost?",
        "gold_select": "select distinct battle.id, battle.name",
        "select_candidates": [
            "select distinct battle.id, battle.name",
            "select distinct battle.name, ship.id",
            "select distinct battle.name, battle.id",
            "select distinct battle.name, battle.date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.9931225180625916,
            0.00016450231487397105,
            0.04463529586791992,
            0.00016103398229461163,
            0.9916186928749084,
            0.0001611576444702223,
            0.00037994468584656715,
            7.909028499852866e-05
        ],
        "align_select": "select distinct battle.id, battle.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the ids and names of the battles where ships were lost by losing any 'Brig' type ships.",
        "gold_select": "select distinct battle.id, battle.name",
        "select_candidates": [
            "select battle.id, battle.name",
            "select battle.name, ship.id",
            "select battle.name, battle.date",
            "select battle.name, battle.id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.9545626640319824,
            0.0003812653594650328,
            0.006032044067978859,
            0.0001453526201657951,
            0.0004043381195515394,
            8.185100159607828e-05,
            0.980117917060852,
            0.00024023915466386825
        ],
        "align_select": "select battle.id, battle.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the different ids and names of the battles that lost any 'Brig' type ships?",
        "gold_select": "select distinct battle.id, battle.name",
        "select_candidates": [
            "select distinct battle.id, battle.name",
            "select distinct battle.name, battle.id",
            "select distinct battle.name, battle.date",
            "select different battle.id, battle.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.9889624714851379,
            0.0003295225615147501,
            0.9857762455940247,
            0.0002900762192439288,
            0.0003524676722008735,
            7.701754657318816e-05,
            0.0057494197972118855,
            0.00018327969883102924
        ],
        "align_select": "select distinct battle.id, battle.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What battles had more than 10 people killed in total? Show me their names and ids.",
        "gold_select": "select battle.id, battle.name",
        "select_candidates": [
            "select battle.name, battle.id",
            "select battle.id, battle.name",
            "select battle.name, battle.date",
            "select battle.name., battle.id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship death",
        "table_candidates": [
            "battle death",
            "battle ship death"
        ],
        "align_scores": [
            0.9159970879554749,
            0.00010616288636811078,
            0.9258774518966675,
            0.000107352010672912,
            0.0003734805795829743,
            7.712845399510115e-05,
            0.004738961346447468,
            8.593023085268214e-05
        ],
        "align_select": "select battle.name, battle.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the ids and names of battles that resulted in more than 10 people being killed.",
        "gold_select": "select battle.id, battle.name",
        "select_candidates": [
            "select battle.id, battle.name",
            "select battle.name, battle.id",
            "select death.id, battle.name",
            "select battle.date, battle.name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship death",
        "table_candidates": [
            "battle death"
        ],
        "align_scores": [
            0.7919955253601074,
            0.00019549326680134982,
            0.8127081990242004,
            0.00018274103058502078,
            0.0037696913350373507,
            0.00014823992387391627,
            0.0005500513943843544,
            8.930138574214652e-05
        ],
        "align_select": "select battle.id, battle.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you tell me the ship name and id causing the most total injuries?",
        "gold_select": "select ship.id, ship.name",
        "select_candidates": [
            "select ship.name, ship.id",
            "select ship.name, ship.id, death.injured",
            "select ship.name, ship.id, min(death.injured)",
            "select ship.name, ship.id, death.caused_by_ship_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death"
        ],
        "align_scores": [
            0.9913660287857056,
            7.256049866555259e-05,
            0.007012873888015747,
            6.553752609761432e-05,
            0.00039896887028589845,
            5.860539749846794e-05,
            0.000514757412020117,
            6.781608681194484e-05
        ],
        "align_select": "select ship.name, ship.id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you show me the ship name and id that caused the most total injuries?",
        "gold_select": "select ship.id, ship.name",
        "select_candidates": [
            "select ship.name, ship.id",
            "select ship.name, ship.id, death.injured",
            "select ship.name, ship.id, death.caused_by_ship_id",
            "select ship.name, ship.lost_in_battle"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death"
        ],
        "align_scores": [
            0.9892183542251587,
            7.634664507349953e-05,
            0.006567766424268484,
            7.158278458518907e-05,
            0.0005099078407511115,
            7.200286927400157e-05,
            0.0409303680062294,
            7.576425559818745e-05
        ],
        "align_select": "select ship.name, ship.id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the ships name and id that has caused most total injuries?",
        "gold_select": "select ship.id, ship.name",
        "select_candidates": [
            "select ship.name, ship.id",
            "select ship.name, ship.id, death.injured",
            "select ship.name, ship.id, death.caused_by_ship_id",
            "select ship.name, ship.lost_in_battle"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death"
        ],
        "align_scores": [
            0.9879157543182373,
            7.680969429202378e-05,
            0.006951332092285156,
            7.192903285613284e-05,
            0.000518418091814965,
            7.149751036195084e-05,
            0.022292857989668846,
            7.208249007817358e-05
        ],
        "align_select": "select ship.name, ship.id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the total number of different results for battle events?",
        "gold_select": "select count(distinct battle.result)",
        "select_candidates": [
            "select count(distinct battle.result)",
            "select count (distinct battle.result)",
            "select count(distinct t0.c6)",
            "select count(distinct battle.bulgarian_commander)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9955714344978333,
            0.9955714344978333,
            0.010895490646362305,
            0.010895490646362305,
            0.0007531120791099966,
            0.0007531120791099966,
            0.00632574362680316,
            0.00632574362680316
        ],
        "align_select": "select count(distinct battle.result)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Describe in detail how many different outcomes there were for battle results.",
        "gold_select": "select count(distinct battle.result)",
        "select_candidates": [
            "select count(distinct battle.result)",
            "select count(distinct t0.c6)",
            "select count(different battle.result)",
            "select count(diff. battle.result)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9494666457176208,
            0.9494666457176208,
            0.0009703841642476618,
            0.0009703841642476618,
            0.0041047353297472,
            0.0041047353297472,
            0.001275422633625567,
            0.001275422633625567
        ],
        "align_select": "select count(distinct battle.result)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the number of different results for battles?",
        "gold_select": "select count(distinct battle.result)",
        "select_candidates": [
            "select count(distinct battle.result)",
            "select count (distinct battle.result)",
            "select count(distinct t0.c6)",
            "select count(distinct battle.bulgarian_commander)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.996071457862854,
            0.996071457862854,
            0.009440978989005089,
            0.009440978989005089,
            0.0007113726460374892,
            0.0007113726460374892,
            0.017186323180794716,
            0.017186323180794716
        ],
        "align_select": "select count(distinct battle.result)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "State the number of possible results for each battles.",
        "gold_select": "select count(distinct battle.result)",
        "select_candidates": [
            "select battle.name, count(distinct battle.result)",
            "select battle.name, count(*)",
            "select count(*), battle.name",
            "select count(distinct battle.result), battle.name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9950543642044067,
            9.636524191591889e-05,
            0.989602267742157,
            0.00011278738384135067,
            0.9784932732582092,
            0.00013159199443180114,
            0.9855232238769531,
            0.00010400672908872366
        ],
        "align_select": "select battle.name, count(distinct battle.result)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you list the names and dates of battles that have lost the ships named 'Lettice' and 'HMS Atalanta'?",
        "gold_select": "select battle.name, battle.date",
        "select_candidates": [
            "select battle.name, battle.date",
            "select ship.id, battle.date",
            "select battle.name., battle.date",
            "select battle.name, battle.date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship",
            "battle ship death"
        ],
        "align_scores": [
            0.10095057636499405,
            0.0002317884936928749,
            0.0003269147709943354,
            0.0001034295346471481,
            0.0016000560717657208,
            0.00013451733684632927,
            0.10095057636499405,
            0.0002317884936928749
        ],
        "align_select": "select battle.name, battle.date",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What was the name and date of the battle which lost the ships, Lettice and HMS Atalanta?",
        "gold_select": "select battle.name, battle.date",
        "select_candidates": [
            "select battle.name, battle.date",
            "select battle.name, battle.date, ship.lost_in_battle",
            "select battle.name, battle.date, battle.bulgarian_commander",
            "select ship.id, battle.date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship",
            "battle ship death"
        ],
        "align_scores": [
            0.1280653327703476,
            0.00024642591597512364,
            0.00018130741955246776,
            6.951713294256479e-05,
            0.00024570239474996924,
            9.773245983524248e-05,
            0.00025233899941667914,
            9.68372478382662e-05
        ],
        "align_select": "select battle.name, battle.date",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "List the names and dates of battles where the ships 'Lettice' and 'HMS Atalanta' were lost.",
        "gold_select": "select battle.name, battle.date",
        "select_candidates": [
            "select battle.name, battle.date",
            "select ship.id, battle.date",
            "select battle.name., battle.date",
            "select battle.name, battle.date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship",
            "battle ship death"
        ],
        "align_scores": [
            0.9937945604324341,
            0.8851245641708374,
            0.0007090450963005424,
            0.00044182513374835253,
            0.0222993865609169,
            0.011781095527112484,
            0.9937945604324341,
            0.8851245641708374
        ],
        "align_select": "select battle.name, battle.date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find names, battle results and bulgarian commanders from the battles without ship losses in the English Channel?",
        "gold_select": "select battle.name, battle.result, battle.bulgarian_commander",
        "select_candidates": [
            "select battle.name, battle.result, battle.bulgarian_commander",
            "select battle.name, battle.date, battle.result, battle.bulgarian_commander",
            "select battle.name, battle.bulgarian_commander, battle.result",
            "select battle.name, battle.date, battle.bulgarian_commander"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship",
        "table_candidates": [
            "battle ship"
        ],
        "align_scores": [
            0.00043790717609226704,
            0.9932344555854797,
            0.00025375542463734746,
            0.002647302346304059,
            0.00036962010199204087,
            0.9937876462936401,
            0.0004121327947359532,
            0.022104287520051003
        ],
        "align_select": "select battle.name, battle.bulgarian_commander, battle.result",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the list of section names ordered in reversed lexicographical order.",
        "gold_select": "select Sections.section_name",
        "select_candidates": [
            "select Sections.section_name",
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_id, Sections.section_name",
            "select Sections.course_id, Sections.section_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Degree_Programs Sections",
            "Departments Sections",
            "Addresses Sections",
            "Courses Sections",
            "Addresses Departments",
            "Departments"
        ],
        "align_scores": [
            0.9960963129997253,
            0.9960963129997253,
            0.00014244964404497296,
            0.00014244964404497296,
            0.00013053123257122934,
            0.00013053123257122934,
            0.00017372294678352773,
            0.00017372294678352773
        ],
        "align_select": "select Sections.section_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list the section names in reversed lexicographical order?",
        "gold_select": "select Sections.section_name",
        "select_candidates": [
            "select Sections.section_name",
            "select Sections.section_name, Sections.section_description",
            "select Sections.course_id, Sections.section_name",
            "select Sections.section_name, Sections.course_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Degree_Programs Sections",
            "Departments Sections",
            "Addresses Courses Sections",
            "Addresses Sections",
            "Courses Sections"
        ],
        "align_scores": [
            0.9955253005027771,
            0.9955253005027771,
            0.000220973277464509,
            0.000220973277464509,
            0.0002159321156796068,
            0.0002159321156796068,
            0.0001676049578236416,
            0.0001676049578236416
        ],
        "align_select": "select Sections.section_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me the first name, middle name and last name of the first student to register.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9912902116775513,
            6.990036490606144e-05,
            0.0002688324893824756,
            7.991399616003036e-05,
            0.9912902116775513,
            6.990036490606144e-05,
            0.032173771411180496,
            9.93233552435413e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which student was the first to be registered? List their first name, middle name and last name.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9912911653518677,
            9.036876144818962e-05,
            0.0004001309280283749,
            9.539308666717261e-05,
            0.9912911653518677,
            9.036876144818962e-05,
            0.05372476205229759,
            0.00014449114678427577
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total number of transcript?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student_Enrolment_Courses.course_id",
            "select count(*), Student_Enrolment_Courses.student_course_id",
            "select count(Student_Enrolment_Courses.student_course_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment",
            "Addresses"
        ],
        "align_scores": [
            0.9942261576652527,
            9.623594814911485e-05,
            0.00017555532394908369,
            6.939718150533736e-05,
            0.00014005212869960815,
            6.337486411212012e-05,
            0.0002064758155029267,
            6.259143265197054e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all the transcripts on the list.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select t8.c5",
            "select Student_Enrolment_Courses.course_id",
            "select t8.c5, t8.c6",
            "select Student_Enrolment.degree_program_id, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Courses Student_Enrolment_Courses",
            "Addresses Transcripts",
            "Addresses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0013890708796679974,
            0.0005362444208003581,
            0.0008825802942737937,
            0.002022982109338045,
            0.0017867371207103133,
            0.0004209075414109975,
            0.00013892713468521833,
            0.00023921199317555875
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In all, how many transcripts are listed here?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student_Enrolment_Courses.course_id",
            "select count(*), Student_Enrolment.semester_id",
            "select count(*), Student_Enrolment.degree_program_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Courses"
        ],
        "align_scores": [
            0.9900004267692566,
            8.467156294500455e-05,
            0.00023474068439099938,
            7.853900751797482e-05,
            0.00025626039132475853,
            9.409905032953247e-05,
            0.00021024140005465597,
            9.436493564862758e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give the last transcript date.",
        "gold_select": "select Transcripts.transcript_date",
        "select_candidates": [
            "select t12.c5",
            "select t9.c5",
            "select t10.c5",
            "select t8.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0008111978531815112,
            6.898433639435098e-05,
            0.000738502771127969,
            6.619636405957863e-05,
            0.0008445441490039229,
            6.494134140666574e-05,
            0.0008981263381429017,
            6.714921619277447e-05
        ],
        "align_select": "select t12.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When was the last transcript release date?",
        "gold_select": "select Transcripts.transcript_date",
        "select_candidates": [
            "select t8.c5",
            "select t9.c5",
            "select t12.c5",
            "select max(t8.c6)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0024742819368839264,
            0.0033673837315291166,
            0.0019562067463994026,
            0.003005631733685732,
            0.002172218170017004,
            0.002223118208348751,
            0.0002420855307718739,
            0.0008977079996839166
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the semester id where both masters and bachelors students were enrolled.",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Student_Enrolment.degree_program_id",
            "select Student_Enrolment.student_enrolment_id",
            "select Student_Enrolment.degree_program_id, Students.ssn",
            "select Student_Enrolment.degree_program_id, Students.student_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Student_Enrolment",
            "Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Addresses Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.0005227545043453574,
            0.0001138890947913751,
            0.0005854099290445447,
            0.00012030958896502852,
            0.000555874255951494,
            0.0001183993008453399,
            9.630947897676378e-05,
            7.036832539597526e-05
        ],
        "align_select": "select Student_Enrolment.degree_program_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the semester id of the semester that had both Masters and Bachelors students enrolled?",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Student_Enrolment.degree_program_id",
            "select Student_Enrolment_Courses.course_id",
            "select Transcript_Contents.student_course_id",
            "select Students.student_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Addresses Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Semesters Student_Enrolment",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.0012884738389402628,
            0.00013042136561125517,
            0.0012953015975654125,
            0.00016654221690259874,
            0.0003697882348205894,
            0.00010308796481695026,
            0.0005387160344980657,
            9.756921645021066e-05
        ],
        "align_select": "select Student_Enrolment.degree_program_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the id of the semester where both the Masters and the Bachelors classes were held?",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Semesters.semester_id",
            "select Semesters.semester_name",
            "select Semesters.semester_name, Semesters.semester_description",
            "select Semesters.semester_id, Semesters.semester_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Courses Degree_Programs Sections Semesters",
            "Courses Student_Enrolment_Courses",
            "Courses Semesters",
            "Courses Degree_Programs Student_Enrolment",
            "Courses Student_Enrolment",
            "Courses Sections Semesters",
            "Courses Degree_Programs Sections",
            "Courses Degree_Programs Semesters"
        ],
        "align_scores": [
            0.0019219183595851064,
            0.9941324591636658,
            0.0008437277865596116,
            0.9613290429115295,
            7.177828229032457e-05,
            0.00016890799452085048,
            9.91178530966863e-05,
            0.0002071719354717061
        ],
        "align_select": "select Semesters.semester_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id of the semester where both Masters and Bachelors students were enrolled?",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Student_Enrolment.degree_program_id",
            "select Student_Enrolment.student_enrolment_id",
            "select Student_Enrolment.degree_program_id, Student_Enrolment.semester_id",
            "select Student_Enrolment.degree_program_id, Students.current_address_id3"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Student_Enrolment",
            "Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Addresses Students Student_Enrolment",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.1515265703201294,
            0.00022350586368702352,
            0.16444087028503418,
            0.00021879251289647073,
            0.00023776083253324032,
            0.00016857043374329805,
            0.00012173339928267524,
            8.446286665275693e-05
        ],
        "align_select": "select Student_Enrolment.degree_program_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the mobile phone number of the student named Timmothy Ward?",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.cell_mobile_number, Students.last_name",
            "select Students.cell_mobile_number, Students.ssn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Addresses Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Addresses Students",
            "Semesters Students"
        ],
        "align_scores": [
            0.9945027828216553,
            0.00016973770107142627,
            0.0001853034773375839,
            6.749157182639465e-05,
            0.00015211990103125572,
            7.60054390411824e-05,
            0.0001735226105665788,
            8.015661296667531e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the mobile number of the student named Timmothy Ward?",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.cell_mobile_number, Students.last_name",
            "select Students.cell_mobile_number, Students.ssn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Addresses Students",
            "Semesters Students",
            "Degree_Programs Students",
            "Courses Students",
            "Students Student_Enrolment_Courses",
            "Sections Students"
        ],
        "align_scores": [
            0.9949187636375427,
            0.00015712807362433523,
            0.00017373188165947795,
            6.74808252369985e-05,
            0.00013919870252721012,
            7.723060844000429e-05,
            0.00016813316324260086,
            7.997558714123443e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the cell mobile number of the student named Timmothy Ward?",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.cell_mobile_number, Students.first_name, Students.last_name",
            "select Students.cell_mobile_number, Students.email_address, Students.ssn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Addresses Students",
            "Semesters Students",
            "Degree_Programs Students",
            "Students Student_Enrolment_Courses",
            "Courses Students",
            "Sections Students"
        ],
        "align_scores": [
            0.9947287440299988,
            0.00011906103463843465,
            0.00014196880511008203,
            6.191460852278396e-05,
            0.00019973369489889592,
            7.454286969732493e-05,
            0.00015792492195032537,
            6.609707634197548e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can I get the cell mobile phone number of the student named Timmothy Ward?",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.cell_mobile_number, Students.last_name",
            "select Students.cell_mobile_number, Students.date_first_registered"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Addresses Students",
            "Semesters Students",
            "Degree_Programs Students",
            "Courses Students"
        ],
        "align_scores": [
            0.9945570230484009,
            0.00012696237536147237,
            0.00016976083861663938,
            6.284105620579794e-05,
            0.00013691683125216514,
            6.851283978903666e-05,
            0.00018310415907762945,
            6.369555921992287e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give the list of first, middle, last name and id of all students including student id and 2 degrees in 1 semester?",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name and Students.student_id",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students",
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Students",
            "Students Student_Enrolment_Courses",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students",
            "Departments Degree_Programs Students"
        ],
        "align_scores": [
            0.0021071264054626226,
            0.008771203458309174,
            0.0009568853420205414,
            0.0028551786672323942,
            0.001929605146870017,
            0.012233482673764229,
            0.0036219230387359858,
            0.005352230276912451
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are all the addresses (line 1 and line 2)?",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.other_address_details",
            "select Addresses.line_2, Addresses.line_3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9951139092445374,
            7.119618385331705e-05,
            0.0001696161925792694,
            7.078074122546241e-05,
            0.0001693212689133361,
            6.503089389298111e-05,
            0.00026910481392405927,
            9.411106293555349e-05
        ],
        "align_select": "select Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "what is the complete address including line 1, line 2?",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.other_address_details",
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9921970367431641,
            0.00018836178060155362,
            0.9948275685310364,
            0.00015271284792106599,
            0.00017233510152436793,
            9.184917144011706e-05,
            0.007612346671521664,
            0.00010072562872665003
        ],
        "align_select": "select Addresses.other_address_details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the address lines starting from line 2 and ending at line 1.",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3",
            "select Addresses.line_2, Addresses.line_1"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.0013253329088911414,
            7.290910434676334e-05,
            0.00014289721730165184,
            6.977535667829216e-05,
            0.0002779745263978839,
            7.381603791145608e-05,
            0.04265283793210983,
            8.077923121163622e-05
        ],
        "align_select": "select Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the address including line 1 and line 2.",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.other_address_details",
            "select Addresses.other_address_details, Addresses.line_1, Addresses.line_2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.7758520841598511,
            0.00011100964911747724,
            0.00014413282042369246,
            8.07729156804271e-05,
            0.9892352223396301,
            0.010694489814341068,
            0.0001944549585459754,
            8.004356641322374e-05
        ],
        "align_select": "select Addresses.other_address_details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the addresses (including lines), starting from line 1 and ending with line 2.",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1 - Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.00017161687719635665,
            0.00016774822142906487,
            0.0012479883152991533,
            0.009931761771440506,
            0.0001690546196186915,
            0.0001724317407933995,
            0.00017781938367988914,
            0.0001396640291204676
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you show me the first and second lines for all addresses?",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3",
            "select distinct Addresses.line_1, Addresses.line_2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9941245913505554,
            0.00010347244824515656,
            0.00018578468007035553,
            7.694919622736052e-05,
            0.00022386372438631952,
            7.203989662230015e-05,
            0.001707624294795096,
            9.280963422497734e-05
        ],
        "align_select": "select Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For every address, what is the first and second lines?",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3",
            "select distinct Addresses.line_1, Addresses.line_2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9942542910575867,
            0.008272677659988403,
            0.0002024312998401001,
            0.00022408687800634652,
            0.0008803177042864263,
            0.00018980605818796903,
            0.0020093293860554695,
            0.0003969434183090925
        ],
        "align_select": "select Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the first and second line for each address?",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3",
            "select distinct Addresses.line_1, Addresses.line_2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9940791130065918,
            0.006494837813079357,
            0.0001721055305097252,
            0.0001751426752889529,
            0.00040812502265907824,
            0.00017373851733282208,
            0.0023374787997454405,
            0.00033118610735982656
        ],
        "align_select": "select Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are both lines for all addresses?",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select distinct Addresses.line_1, Addresses.line_2",
            "select Addresses.line_2, Addresses.line_1"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9939234852790833,
            0.000138735311338678,
            0.00018960909801535308,
            8.254453132394701e-05,
            0.0020621605217456818,
            9.795414371183142e-05,
            0.9927814602851868,
            0.0001109385266317986
        ],
        "align_select": "select Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "I need to know the total number of courses. Please tell me how many are there?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Courses.course_id",
            "select count(*), Courses.course_name",
            "select count(*), Courses.course_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9930949211120605,
            0.9930949211120605,
            0.0002214182895841077,
            0.0002214182895841077,
            0.00024337087234016508,
            0.00024337087234016508,
            0.00023426354164257646,
            0.00023426354164257646
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the total number of courses listed?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Courses.course_name",
            "select count(*), Courses.course_name, Courses.course_description",
            "select count(*), Courses.course_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment",
            "Courses Transcripts",
            "Courses Sections"
        ],
        "align_scores": [
            0.9940720200538635,
            0.9940720200538635,
            0.00022861214529257268,
            0.00022861214529257268,
            0.00019236576918046921,
            0.00019236576918046921,
            0.00020888386643491685,
            0.00020888386643491685
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many lessons/courses are there altogether?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Courses.course_description",
            "select count(*), Courses.course_id",
            "select count(*), Courses.course_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses Student_Enrolment_Courses",
            "Courses",
            "Courses Transcript_Contents",
            "Courses Transcripts",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9930709004402161,
            8.809694554656744e-05,
            0.0002662561892066151,
            9.122854680754244e-05,
            0.0002959633420687169,
            8.74315228429623e-05,
            0.0003813384391833097,
            9.734144259709865e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many courses are there altogether?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Courses.course_name",
            "select count(*), Courses.course_name, Courses.course_description",
            "select count(*), Courses.course_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment",
            "Courses Sections",
            "Courses Transcripts"
        ],
        "align_scores": [
            0.9936915636062622,
            8.155687828548253e-05,
            0.00022255105432122946,
            6.369950278894976e-05,
            0.00017407546692993492,
            5.65262816962786e-05,
            0.0002137085684807971,
            6.410711648641154e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many total courses do you have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Courses.course_name",
            "select count(*), Courses.course_name, Courses.course_description",
            "select count(*), Courses.course_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment",
            "Courses Sections",
            "Courses Transcripts",
            "Courses Transcript_Contents"
        ],
        "align_scores": [
            0.9905562996864319,
            6.798748654546216e-05,
            0.00027188778039999306,
            6.717745418427512e-05,
            0.00021179465693421662,
            5.447289368021302e-05,
            0.0002382460079388693,
            6.800777919124812e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "There are how many courses?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Courses.course_name",
            "select count(*), Courses.course_id",
            "select count(Courses.course_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment",
            "Courses Transcripts"
        ],
        "align_scores": [
            0.9936849474906921,
            0.9936849474906921,
            0.00022328156046569347,
            0.00022328156046569347,
            0.00020619684073608369,
            0.00020619684073608369,
            0.0006520184688270092,
            0.0006520184688270092
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many total courses exist?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Courses.course_name",
            "select count(*), Courses.course_name, Courses.course_description",
            "select count(*), Courses.course_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment",
            "Courses Transcripts"
        ],
        "align_scores": [
            0.9944795370101929,
            0.9944795370101929,
            0.00024700502399355173,
            0.00024700502399355173,
            0.00017967935127671808,
            0.00017967935127671808,
            0.00021709477005060762,
            0.00021709477005060762
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "how many courses are there?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Courses.course_name",
            "select count(*), Courses.course_name, Courses.course_description",
            "select count(*), Courses.course_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9942461848258972,
            0.9942461848258972,
            0.00022241465921979398,
            0.00022241465921979398,
            0.0001646448072278872,
            0.0001646448072278872,
            0.00021598317835014313,
            0.00021598317835014313
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the number of courses?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Courses.course_name",
            "select count(*), Courses.course_id",
            "select count(Courses.course_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment",
            "Courses Sections",
            "Courses Transcripts"
        ],
        "align_scores": [
            0.9936432838439941,
            7.31152031221427e-05,
            0.00020634396059904248,
            6.464853504439816e-05,
            0.0001883727527456358,
            5.949124533799477e-05,
            0.0005853964830748737,
            6.72090463922359e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the way the math course is described.",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select Courses.course_description, Courses.other_details",
            "select Courses.course_description, t1.c4",
            "select Courses.course_description (or Courses.other_details)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9922184944152832,
            9.016106923809275e-05,
            0.00020204910833854228,
            6.537573790410534e-05,
            0.00042012418271042407,
            9.001082071335986e-05,
            0.9889934659004211,
            7.793492113705724e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Describe the math class here [math].",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select Courses.course_id, Courses.course_description",
            "select t1.c5, Courses.course_description",
            "select Courses.course_description, Courses.course_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment",
            "Addresses Courses",
            "Courses Transcripts"
        ],
        "align_scores": [
            0.9940452575683594,
            6.21499857516028e-05,
            0.00012270068691577762,
            6.021497756591998e-05,
            0.00025472091510891914,
            6.379305705195293e-05,
            0.00010712561197578907,
            5.526654786081053e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please describe the math class.",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select Courses.course_description, Courses.other_details",
            "select Courses.course_description, Courses.course_id",
            "select t1.c5, Courses.course_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Departments Degree_Programs",
            "Courses Departments Sections",
            "Courses Departments",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9962933659553528,
            9.156111627817154e-05,
            0.00022141891531646252,
            6.630786811001599e-05,
            0.00011552561772987247,
            6.171283166622743e-05,
            0.0002546764735598117,
            7.122897659428418e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the course description of math?",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select Courses.course_description, Courses.other_details",
            "select Courses.course_description (or Courses.other_details)",
            "select Courses.course_description, t1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment",
            "Addresses Courses"
        ],
        "align_scores": [
            0.9958056211471558,
            7.922827353468165e-05,
            0.00015634614101145416,
            6.128653330961242e-05,
            0.9920690059661865,
            7.249563350342214e-05,
            0.0003087628574576229,
            6.636770558543503e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me all the description for all math courses.",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select Courses.course_description, Courses.other_details",
            "select t1.c5, Courses.course_description",
            "select Courses.course_description, Courses.course_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9939642548561096,
            0.00010118319187313318,
            0.00019482891366351396,
            6.699735968140885e-05,
            0.0002280944027006626,
            9.097808651858941e-05,
            0.00011708000238286331,
            6.38562923995778e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Describe all the math courses.",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select t1.c5, Courses.course_description",
            "select t1.c6, Courses.course_description",
            "select Courses.course_description, Courses.other_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Departments Degree_Programs",
            "Courses Student_Enrolment_Courses",
            "Courses Departments",
            "Courses Departments Sections",
            "Courses Departments Degree_Programs Sections",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9948683977127075,
            0.000100679237220902,
            0.0002562051813583821,
            7.571593596367165e-05,
            0.00025804087636061013,
            7.298924901988357e-05,
            0.0002088353066937998,
            6.375425436999649e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the descriptions for all the maths courses.",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select Courses.course_description, Courses.other_details",
            "select Courses.course_description, Courses.course_name",
            "select t1.c5, Courses.course_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Transcript_Contents",
            "Courses Student_Enrolment",
            "Courses Students"
        ],
        "align_scores": [
            0.9950591325759888,
            0.0001260067947441712,
            0.00019970969879068434,
            6.307743024080992e-05,
            0.000136012356961146,
            6.273866893025115e-05,
            0.00025750751956366,
            8.14327722764574e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the description of every single math course.",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select Courses.course_description, Courses.course_id",
            "select Courses.course_description, Courses.other_details",
            "select Courses.course_description, Courses.course_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9953572154045105,
            9.667135600466281e-05,
            0.0001248796470463276,
            5.989267083350569e-05,
            0.0001663731673033908,
            5.8967096265405416e-05,
            0.0001310303050559014,
            6.134242721600458e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the course description for each of the math courses.",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select t1.c5, Courses.course_description",
            "select Courses.course_description, Courses.other_details",
            "select t1.c6, Courses.course_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.994857907295227,
            7.97011234681122e-05,
            0.00024079871946014464,
            7.88875186117366e-05,
            0.00017210027726832777,
            6.0763890360249206e-05,
            0.0002456115325912833,
            7.584506965940818e-05
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The zip code of the address in the city Port Chelsea is?",
        "gold_select": "select Addresses.zip_postcode",
        "select_candidates": [
            "select Addresses.zip_postcode",
            "select Addresses.zip_postcode, Addresses.state_province_county",
            "select Addresses.zip_postcode, Addresses.other_address_details",
            "select Addresses.zip_postcode, Addresses.country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9885931015014648,
            0.00010401297186035663,
            0.00023973987845238298,
            6.503684562630951e-05,
            0.00017448126163799316,
            5.93220247537829e-05,
            0.00018697143241297454,
            5.881502147531137e-05
        ],
        "align_select": "select Addresses.zip_postcode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the zip postcode for the address in the city Port Chelsea?",
        "gold_select": "select Addresses.zip_postcode",
        "select_candidates": [
            "select Addresses.zip_postcode",
            "select Addresses.zip_postcode, Addresses.city",
            "select Addresses.zip_postcode, Addresses.state_province_county",
            "select Addresses.zip_postcode (or Addresses.state_province_county)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9847090244293213,
            0.0001354311389150098,
            0.00020046748977620155,
            6.600580672966316e-05,
            0.0002717205788940191,
            6.733375630574301e-05,
            0.9745324850082397,
            9.920304728439078e-05
        ],
        "align_select": "select Addresses.zip_postcode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find the zip code for the address in the city Port Chelsea?",
        "gold_select": "select Addresses.zip_postcode",
        "select_candidates": [
            "select Addresses.zip_postcode",
            "select Addresses.address_id, Addresses.zip_postcode",
            "select Addresses.zip_postcode, Addresses.city",
            "select Addresses.zip_postcode, Addresses.state_province_county"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9819447994232178,
            0.0001558301446493715,
            0.00017527464660815895,
            7.277684198925272e-05,
            0.0002379014331381768,
            6.7844484874513e-05,
            0.0002573436067905277,
            7.308285421459004e-05
        ],
        "align_select": "select Addresses.zip_postcode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the zip code for the city of Port Chelsea?",
        "gold_select": "select Addresses.zip_postcode",
        "select_candidates": [
            "select Addresses.zip_postcode",
            "select Addresses.zip_postcode, Addresses.city",
            "select Addresses.zip_postcode (or Addresses.state_province_county)",
            "select Addresses.zip_postcode, Addresses.state_province_county"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9932450652122498,
            0.00010986482811858878,
            0.00027479109121486545,
            6.503920303657651e-05,
            0.9783737659454346,
            7.946783443912864e-05,
            0.00030431951745413244,
            6.0305479564704e-05
        ],
        "align_select": "select Addresses.zip_postcode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which zip code corresponds to Port Chelsea?",
        "gold_select": "select Addresses.zip_postcode",
        "select_candidates": [
            "select Addresses.zip_postcode",
            "select Addresses.zip_postcode, Addresses.city",
            "select Addresses.zip_postcode, Addresses.state_province_county",
            "select Addresses.zip_postcode, Addresses.country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9935433864593506,
            0.00013603465049527586,
            0.0002096304961014539,
            6.062636384740472e-05,
            0.00033109899959526956,
            6.907558417879045e-05,
            0.00020111248886678368,
            6.219480565050617e-05
        ],
        "align_select": "select Addresses.zip_postcode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The zip code for Port Chelsea is - what?",
        "gold_select": "select Addresses.zip_postcode",
        "select_candidates": [
            "select Addresses.zip_postcode",
            "select Addresses.zip_postcode - Addresses.city",
            "select Addresses.zip_postcode - Addresses.country",
            "select Addresses.zip_postcode - Addresses.other_address_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9947097301483154,
            8.96701094461605e-05,
            0.0024241898208856583,
            7.162799738580361e-05,
            0.0010547195561230183,
            6.566665251739323e-05,
            0.00028222991386428475,
            6.0185237089172006e-05
        ],
        "align_select": "select Addresses.zip_postcode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Is there any zip code for the city Port Chelsea?",
        "gold_select": "select Addresses.zip_postcode",
        "select_candidates": [
            "select Addresses.zip_postcode",
            "select distinct Addresses.zip_postcode",
            "select Addresses.zip_postcode, Addresses.city",
            "select distinct Addresses.zip_postcode, Addresses.city"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9779466390609741,
            0.0001391185651300475,
            0.027278296649456024,
            0.0003480604791548103,
            0.00023028090072330087,
            7.412400736939162e-05,
            0.00027975294506177306,
            6.984671927057207e-05
        ],
        "align_select": "select Addresses.zip_postcode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "From which zip code can I enter for Port Chelsea?",
        "gold_select": "select Addresses.zip_postcode",
        "select_candidates": [
            "select Addresses.zip_postcode",
            "select distinct Addresses.zip_postcode",
            "select Addresses.zip_postcode, Addresses.state_province_county",
            "select Addresses.zip_postcode, Addresses.country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9087120294570923,
            0.00014870372251607478,
            0.022943533957004547,
            0.00026525332941673696,
            0.00031464971834793687,
            7.069277489790693e-05,
            0.0001984322734642774,
            6.78578726365231e-05
        ],
        "align_select": "select Addresses.zip_postcode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me which department has the most number of degrees offered. List department name and id.",
        "gold_select": "select Departments.department_name, Degree_Programs.department_id",
        "select_candidates": [
            "select Departments.department_name, Degree_Programs.department_id",
            "select Departments.department_name, Departments.department_id",
            "select Departments.department_name, Degree_Programs.degree_program_id",
            "select Departments.department_name, Degree_Programs.department_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments Degree_Programs",
        "table_candidates": [
            "Departments Degree_Programs"
        ],
        "align_scores": [
            0.9926058053970337,
            0.00013923256483394653,
            0.990041196346283,
            0.00011859896767418832,
            0.004798451904207468,
            0.00011973002983722836,
            0.9926058053970337,
            0.00013923256483394653
        ],
        "align_select": "select Departments.department_name, Degree_Programs.department_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which department does the most number of degrees exist? Give the department name and id here.",
        "gold_select": "select Departments.department_name, Degree_Programs.department_id",
        "select_candidates": [
            "select Departments.department_name, Degree_Programs.department_id",
            "select Departments.department_name, Departments.department_id",
            "select Departments.department_name, Degree_Programs.degree_program_id",
            "select Departments.department_name, Degree_Programs.department_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments Degree_Programs",
        "table_candidates": [
            "Departments Degree_Programs"
        ],
        "align_scores": [
            0.991426944732666,
            0.0001501782680861652,
            0.9901365041732788,
            0.00012254562170710415,
            0.005431681405752897,
            0.00011265066132182255,
            0.991426944732666,
            0.0001501782680861652
        ],
        "align_select": "select Departments.department_name, Degree_Programs.department_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Department with the most number of degrees, what is its name and id?",
        "gold_select": "select Departments.department_name, Degree_Programs.department_id",
        "select_candidates": [
            "select Departments.department_name, Degree_Programs.department_id",
            "select Departments.department_name, Departments.department_id",
            "select Departments.department_name, Degree_Programs.degree_program_id",
            "select Departments.department_name, Degree_Programs.department_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments Degree_Programs",
        "table_candidates": [
            "Departments Degree_Programs"
        ],
        "align_scores": [
            0.9947150349617004,
            7.352729880949482e-05,
            0.9940980672836304,
            6.152057903818786e-05,
            0.005797890014946461,
            8.002586400834844e-05,
            0.9947150349617004,
            7.352729880949482e-05
        ],
        "align_select": "select Departments.department_name, Degree_Programs.department_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total number of departments offering any degree?",
        "gold_select": "select count(distinct Degree_Programs.department_id)",
        "select_candidates": [
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct Degree_Programs.department_id )",
            "select count(distinct Degree_Programs.department_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs",
            "Departments Degree_Programs",
            "Addresses Departments Degree_Programs"
        ],
        "align_scores": [
            0.9870044589042664,
            0.9870044589042664,
            0.9870044589042664,
            0.9870044589042664,
            0.7763145565986633,
            0.7763145565986633,
            0.3610258400440216,
            0.3610258400440216
        ],
        "align_select": "select count(distinct Degree_Programs.department_id)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "how many departments are offering degrees?",
        "gold_select": "select count(distinct Degree_Programs.department_id)",
        "select_candidates": [
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct Degree_Programs.department_id )",
            "select count(distinct Degree_Programs.department_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs",
            "Departments Degree_Programs",
            "Addresses Departments Degree_Programs"
        ],
        "align_scores": [
            0.994594395160675,
            9.934353147400543e-05,
            0.994594395160675,
            9.934353147400543e-05,
            0.7960628867149353,
            0.00010739891877165064,
            0.25535058975219727,
            0.00013170260353945196
        ],
        "align_select": "select count(distinct Degree_Programs.department_id)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In what number of departments does one study to receive a degree?",
        "gold_select": "select count(distinct Degree_Programs.department_id)",
        "select_candidates": [
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct Degree_Programs.department_id )",
            "select count(distinct Degree_Programs.department_id), Degree_Programs.degree_summary_name",
            "select count(distinct Degree_Programs.department_id), Student_Enrolment.semester_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs",
            "Departments Degree_Programs",
            "Addresses Departments Degree_Programs",
            "Courses Degree_Programs"
        ],
        "align_scores": [
            0.9901109337806702,
            0.00010408044909127057,
            0.8435554504394531,
            9.865636093309149e-05,
            0.00029853341402485967,
            5.9126112319063395e-05,
            0.00018684043607208878,
            5.555982716032304e-05
        ],
        "align_select": "select count(distinct Degree_Programs.department_id)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many departments can offer degrees?",
        "gold_select": "select count(distinct Degree_Programs.department_id)",
        "select_candidates": [
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct Degree_Programs.department_id )",
            "select count(distinct t3, Degree_Programs.department_id)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs",
            "Departments Degree_Programs",
            "Addresses Departments Degree_Programs"
        ],
        "align_scores": [
            0.9922206997871399,
            0.00010286408360116184,
            0.9922206997871399,
            0.00010286408360116184,
            0.8224420547485352,
            0.00010544565157033503,
            0.0007427127566188574,
            8.436731150140986e-05
        ],
        "align_select": "select count(distinct Degree_Programs.department_id)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the numbers offered of the following degrees?",
        "gold_select": "select count(distinct Degree_Programs.degree_summary_name)",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name, count(*)",
            "select count(*), Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, count(distinct Student_Enrolment_Courses.student_course_id)",
            "select Degree_Programs.degree_summary_name, count(distinct Student_Enrolment.degree_program_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs",
            "Departments Degree_Programs"
        ],
        "align_scores": [
            0.7048497200012207,
            0.00016957623302005231,
            0.06019637733697891,
            0.00014248442312236875,
            0.00035494743497110903,
            7.889473636168987e-05,
            0.001424864400178194,
            7.251277565956116e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the total number of different degree names.",
        "gold_select": "select count(distinct Degree_Programs.degree_summary_name)",
        "select_candidates": [
            "select count(distinct Degree_Programs.degree_summary_name)",
            "select count(distinct t3.c6)",
            "select count(distinct Degree_Programs.degree_summary_name",
            "select count(distinct Degree_Programs.department_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs"
        ],
        "align_scores": [
            0.9965136647224426,
            0.9965136647224426,
            0.0005605739424936473,
            0.0005605739424936473,
            0.12088195979595184,
            0.12088195979595184,
            0.0004970628069713712,
            0.0004970628069713712
        ],
        "align_select": "select count(distinct Degree_Programs.degree_summary_name)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of different degree programs offered?",
        "gold_select": "select count(distinct Degree_Programs.degree_summary_name)",
        "select_candidates": [
            "select count(distinct Degree_Programs.degree_program_id)",
            "select count(distinct Degree_Programs.degree_summary_name)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct Degree_Programs.degree_program_id0)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs"
        ],
        "align_scores": [
            0.9836381673812866,
            0.9836381673812866,
            0.09457149356603622,
            0.09457149356603622,
            0.003332684747874737,
            0.003332684747874737,
            0.0009066693601198494,
            0.0009066693601198494
        ],
        "align_select": "select count(distinct Degree_Programs.degree_program_id)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the number of different degree programs offered?",
        "gold_select": "select count(distinct Degree_Programs.degree_summary_name)",
        "select_candidates": [
            "select count(distinct Degree_Programs.degree_program_id)",
            "select count(distinct Degree_Programs.degree_summary_name)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct t3.c)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Degree_Programs",
        "table_candidates": [
            "Degree_Programs"
        ],
        "align_scores": [
            0.9853690266609192,
            0.9853690266609192,
            0.12308067828416824,
            0.12308067828416824,
            0.003908083774149418,
            0.003908083774149418,
            0.004047846887260675,
            0.004047846887260675
        ],
        "align_select": "select count(distinct Degree_Programs.degree_program_id)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of engineering degree offered by the engineering department?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Degree_Programs.degree_program_id)",
            "select count(*), Degree_Programs.department_id",
            "select count(*), Departments.department_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments Degree_Programs",
        "table_candidates": [
            "Degree_Programs",
            "Departments Degree_Programs",
            "Addresses Departments Degree_Programs",
            "Courses Degree_Programs"
        ],
        "align_scores": [
            0.9832686185836792,
            0.0001612850755918771,
            0.0006864150636829436,
            8.066776354098693e-05,
            0.0002154584799427539,
            0.0003177425533067435,
            0.00020074369967915118,
            0.0002866547729354352
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of degrees offered by the engineering department.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Degree_Programs.degree_program_id)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(*), Departments.department_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments Degree_Programs",
        "table_candidates": [
            "Departments Degree_Programs",
            "Courses Departments Degree_Programs",
            "Addresses Departments Degree_Programs"
        ],
        "align_scores": [
            0.9831594228744507,
            0.00017652618407737464,
            0.0005167944473214447,
            7.149778684834018e-05,
            0.00042606095666997135,
            9.920560842147097e-05,
            0.0002061645791400224,
            0.005053024739027023
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The number of degrees offers by the engineering department.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Degree_Programs.degree_program_id)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct Degree_Programs.degree_summary_name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments Degree_Programs",
        "table_candidates": [
            "Departments Degree_Programs",
            "Courses Departments Degree_Programs",
            "Addresses Departments Degree_Programs"
        ],
        "align_scores": [
            0.9843909740447998,
            0.0001612813794054091,
            0.0007134689367376268,
            7.199010724434629e-05,
            0.0004176948277745396,
            0.00010566105629550293,
            0.0005939724505878985,
            7.972559978952631e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The engineering department offers how many degrees?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct Degree_Programs.degree_program_id)",
            "select count(*), Departments.department_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments Degree_Programs",
        "table_candidates": [
            "Departments Degree_Programs",
            "Courses Departments Degree_Programs",
            "Addresses Departments Degree_Programs"
        ],
        "align_scores": [
            0.9944190382957458,
            0.001041072653606534,
            0.00040320082916878164,
            0.00012200007040519267,
            0.00041881142533384264,
            0.00010355991253163666,
            0.0002190546947531402,
            0.0009670127183198929
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many engineering degrees are offered by the engineering department?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Degree_Programs.degree_program_id)",
            "select count(*), Degree_Programs.department_id",
            "select count(distinct Degree_Programs.department_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments Degree_Programs",
        "table_candidates": [
            "Degree_Programs",
            "Departments Degree_Programs",
            "Addresses Departments Degree_Programs",
            "Degree_Programs Departments Degree_Programs",
            "Courses Degree_Programs",
            "Degree_Programs Departments Student_Enrolment",
            "Degree_Programs Departments",
            "Degree_Programs Departments Sections"
        ],
        "align_scores": [
            0.9505546689033508,
            0.00021546753123402596,
            0.000734065193682909,
            7.4898918683175e-05,
            0.00022389274090528488,
            0.0014415282057598233,
            0.0005829858710058033,
            9.785929432837293e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the numbers of degrees offered by the engineering department?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Degree_Programs.degree_program_id)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(*), Departments.department_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments Degree_Programs",
        "table_candidates": [
            "Departments Degree_Programs",
            "Courses Departments Degree_Programs",
            "Addresses Departments Degree_Programs"
        ],
        "align_scores": [
            0.9750974178314209,
            0.000201591887162067,
            0.000406974257202819,
            7.431241101585329e-05,
            0.0004905538517050445,
            0.00010297555854776874,
            0.000205771837499924,
            0.007293584290891886
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of degrees offered by the Engineering Department?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Degree_Programs.degree_program_id)",
            "select count(distinct Degree_Programs.department_id)",
            "select count(distinct Degree_Programs.degree_summary_name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments Degree_Programs",
        "table_candidates": [
            "Departments Degree_Programs",
            "Courses Departments Degree_Programs",
            "Addresses Departments Degree_Programs"
        ],
        "align_scores": [
            0.9795687198638916,
            0.00018480781000107527,
            0.00045470608165487647,
            6.971257244003937e-05,
            0.0004590264870785177,
            0.00010482688958290964,
            0.0003421107248868793,
            8.968105248641223e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names and descriptions of all sections.",
        "gold_select": "select Sections.section_name, Sections.section_description",
        "select_candidates": [
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_id, Sections.section_name, Sections.section_description",
            "select Sections.section_name, Sections.section_description, Sections.section_id",
            "select Departments.department_description, Sections.section_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Departments Sections"
        ],
        "align_scores": [
            0.9951282739639282,
            0.00012311802129261196,
            0.00017135981761384755,
            7.642909622518346e-05,
            0.00018088814977090806,
            7.313247624551877e-05,
            0.0002727993705775589,
            8.237012661993504e-05
        ],
        "align_select": "select Sections.section_name, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the names and descriptions of all the sections?",
        "gold_select": "select Sections.section_name, Sections.section_description",
        "select_candidates": [
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_id, Sections.section_name, Sections.section_description",
            "select Sections.section_name, Sections.section_description, Sections.section_id",
            "select Sections.section_name, Sections.section_description, Sections.other_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections"
        ],
        "align_scores": [
            0.9889862537384033,
            0.002579733496531844,
            0.00019549921853467822,
            0.00011477763473521918,
            0.00021457509137690067,
            0.0001065941178239882,
            0.0005930441548116505,
            0.00017958480748347938
        ],
        "align_select": "select Sections.section_name, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the names and descriptions of all the sections?",
        "gold_select": "select Sections.section_name, Sections.section_description",
        "select_candidates": [
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_id, Sections.section_name, Sections.section_description",
            "select Sections.section_name, Sections.section_description, Sections.section_id",
            "select Sections.section_name, Sections.section_description, Sections.other_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Departments Degree_Programs Sections"
        ],
        "align_scores": [
            0.9885187745094299,
            0.00015674781752750278,
            0.0002130485518136993,
            8.221725875046104e-05,
            0.00022140686633065343,
            7.84652802394703e-05,
            0.0007774263503961265,
            7.383223419310525e-05
        ],
        "align_select": "select Sections.section_name, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "list all the section names and describe them in detail.",
        "gold_select": "select Sections.section_name, Sections.section_description",
        "select_candidates": [
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_id, Sections.section_name, Sections.section_description",
            "select Sections.course_id, Sections.section_description",
            "select Sections.section_name, Sections.section_description, Sections.other_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections"
        ],
        "align_scores": [
            0.9942680597305298,
            0.011499478481709957,
            0.0001572121400386095,
            0.0001130576420109719,
            0.0002870858006644994,
            0.0001390697289025411,
            0.0009729382582008839,
            0.00014359535998664796
        ],
        "align_select": "select Sections.section_name, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give us the names and descriptions of all of the sections.",
        "gold_select": "select Sections.section_name, Sections.section_description",
        "select_candidates": [
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_id, Sections.section_name, Sections.section_description",
            "select Sections.section_name, Sections.section_description, Sections.section_id",
            "select Sections.section_name), Sections.section_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections"
        ],
        "align_scores": [
            0.9833655953407288,
            0.00011029173765564337,
            0.00019725215679500252,
            7.79341789893806e-05,
            0.00019025328219868243,
            6.763944838894531e-05,
            0.001787754474207759,
            9.552881238050759e-05
        ],
        "align_select": "select Sections.section_name, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the names and descriptions for all the sections?",
        "gold_select": "select Sections.section_name, Sections.section_description",
        "select_candidates": [
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_id, Sections.section_name, Sections.section_description",
            "select Sections.section_name, Sections.section_description, Sections.section_id",
            "select Sections.section_name, Sections.section_description, Sections.other_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Departments Degree_Programs Sections"
        ],
        "align_scores": [
            0.9901199340820312,
            0.00014644258772023022,
            0.0002142348967026919,
            8.262108167400584e-05,
            0.0002212216058978811,
            7.778954022796825e-05,
            0.0006304428679868579,
            7.320938311750069e-05
        ],
        "align_select": "select Sections.section_name, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the section name and description for each of the sections.",
        "gold_select": "select Sections.section_name, Sections.section_description",
        "select_candidates": [
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_id, Sections.section_name, Sections.section_description",
            "select Sections.section_name, Sections.section_description, Sections.section_id",
            "select Sections.course_id, Sections.section_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections"
        ],
        "align_scores": [
            0.9936026930809021,
            0.0011510305339470506,
            0.0001648614415898919,
            0.00010079181811306626,
            0.0001524122926639393,
            8.567683107685298e-05,
            0.0002940031117759645,
            0.0001712307712296024
        ],
        "align_select": "select Sections.section_name, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which sections have names and descriptions? List them and give their descriptions and names.",
        "gold_select": "select Sections.section_name, Sections.section_description",
        "select_candidates": [
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_id, Sections.section_name, Sections.section_description",
            "select Sections.course_id, Sections.section_description",
            "select Sections.section_id, Sections.course_id, Sections.section_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections"
        ],
        "align_scores": [
            0.9941732287406921,
            0.0002466019650455564,
            0.00024371291510760784,
            8.051837357925251e-05,
            0.0003722272231243551,
            7.779488078085706e-05,
            0.00015398145478684455,
            6.811493949498981e-05
        ],
        "align_select": "select Sections.section_name, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Name and description of each section?",
        "gold_select": "select Sections.section_name, Sections.section_description",
        "select_candidates": [
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_id, Sections.section_name, Sections.section_description",
            "select Sections.section_name, Sections.section_description, Sections.section_id",
            "select Sections.course_id, Sections.section_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections"
        ],
        "align_scores": [
            0.9945230484008789,
            0.0020696171559393406,
            0.0001532065507490188,
            0.00014729180838912725,
            0.00015881116269156337,
            8.814920875011012e-05,
            0.00025310664204880595,
            0.00016953307203948498
        ],
        "align_select": "select Sections.section_name, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all the section names and descriptions.",
        "gold_select": "select Sections.section_name, Sections.section_description",
        "select_candidates": [
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_id, Sections.section_name, Sections.section_description",
            "select Sections.section_name, Sections.section_description, Sections.section_id",
            "select Sections.course_id, Sections.section_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections"
        ],
        "align_scores": [
            0.9954808950424194,
            0.0012849431950598955,
            0.00019458089082036167,
            0.00010774079419206828,
            0.00020561258133966476,
            7.462829671567306e-05,
            0.0002729578409343958,
            0.0001714364771032706
        ],
        "align_select": "select Sections.section_name, Sections.section_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which courses have at most 2 sections? List them by name and id.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections"
        ],
        "align_scores": [
            0.9775517582893372,
            0.00012393973884172738,
            0.002358150202780962,
            9.563708590576425e-05,
            0.9944222569465637,
            0.00015851510397624224,
            0.0005030583124607801,
            7.823067426215857e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "There must be less than or equal to two sections in each course Name and id for courses with section count of less than 2 (number; 2).",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Departments",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.028301920741796494,
            0.00019766298646572977,
            0.042292315512895584,
            0.00022024674399290234,
            0.026039380580186844,
            0.00020737668091896921,
            0.0004516958142630756,
            0.0001481315412092954
        ],
        "align_select": "select Courses.course_name, Courses.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names and ids of every course that has under 2 sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections",
            "Courses Departments",
            "Courses Departments Degree_Programs Sections"
        ],
        "align_scores": [
            0.9691275358200073,
            8.890924073057249e-05,
            0.9898380041122437,
            9.213751764036715e-05,
            0.0014626983320340514,
            8.886186697054654e-05,
            0.00041180409607477486,
            8.854407496983185e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names and ids of all courses whose number of sections are under 2.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections"
        ],
        "align_scores": [
            0.10752999782562256,
            0.0001170760951936245,
            0.3568674623966217,
            0.00011740992340492085,
            0.0002184531622333452,
            0.00011249414092162624,
            0.0002886625879909843,
            0.00011828160495497286
        ],
        "align_select": "select Courses.course_name, Courses.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all the section names in reverse alphabetical order.",
        "gold_select": "select Sections.section_name",
        "select_candidates": [
            "select Sections.section_name",
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_name, Sections.course_id",
            "select Sections.section_name, t4.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Degree_Programs Sections"
        ],
        "align_scores": [
            0.995817244052887,
            0.995817244052887,
            0.00028495906735770404,
            0.00028495906735770404,
            0.00014643868780694902,
            0.00014643868780694902,
            0.0009250349830836058,
            0.0009250349830836058
        ],
        "align_select": "select Sections.section_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the section names in reverse alphabetical order?",
        "gold_select": "select Sections.section_name",
        "select_candidates": [
            "select Sections.section_name",
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_name, Sections.course_id",
            "select Sections.course_id, Sections.section_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Degree_Programs Sections"
        ],
        "align_scores": [
            0.9956166744232178,
            0.9956166744232178,
            0.00023632297234144062,
            0.00023632297234144062,
            0.0001497224293416366,
            0.0001497224293416366,
            0.0002411136811133474,
            0.0002411136811133474
        ],
        "align_select": "select Sections.section_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you show me the names of the sections in reverse alphabetical order?",
        "gold_select": "select Sections.section_name",
        "select_candidates": [
            "select Sections.section_name",
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_name, Sections.course_id",
            "select Sections.course_id, Sections.section_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Degree_Programs Sections",
            "Departments Sections"
        ],
        "align_scores": [
            0.9955970644950867,
            0.9955970644950867,
            0.00039323954842984676,
            0.00039323954842984676,
            0.00017260629101656377,
            0.00017260629101656377,
            0.00020066254364792258,
            0.00020066254364792258
        ],
        "align_select": "select Sections.section_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me the section names ordered in reverse alphabetical order.",
        "gold_select": "select Sections.section_name",
        "select_candidates": [
            "select Sections.section_name",
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_id, Sections.section_name",
            "select Sections.section_name, Sections.course_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Degree_Programs Sections"
        ],
        "align_scores": [
            0.9962661862373352,
            0.9962661862373352,
            0.0001520246296422556,
            0.0001520246296422556,
            0.00014382570225279778,
            0.00014382570225279778,
            0.00014016033674124628,
            0.00014016033674124628
        ],
        "align_select": "select Sections.section_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show the semester during which the most students registered. List both the name and id.",
        "gold_select": "select Semesters.semester_name, Semesters.semester_id",
        "select_candidates": [
            "select Semesters.semester_name, Semesters.semester_id",
            "select Semesters.semester_name, Student_Enrolment.student_enrolment_id",
            "select Semesters.semester_name, Student_Enrolment.semester_id",
            "select Semesters.semester_name, Student_Enrolment.degree_program_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Semesters Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment",
            "Semesters Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9947858452796936,
            0.00010757868585642427,
            0.0006495022680610418,
            9.811026393435895e-05,
            0.9942538142204285,
            0.00012886032345704734,
            0.00036865691072307527,
            9.7766584076453e-05
        ],
        "align_select": "select Semesters.semester_name, Semesters.semester_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the semester where most students enrolled in? Show both the name and id.",
        "gold_select": "select Semesters.semester_name, Semesters.semester_id",
        "select_candidates": [
            "select Semesters.semester_name, Student_Enrolment.student_enrolment_id",
            "select Semesters.semester_name, Semesters.semester_id",
            "select Semesters.semester_name, Student_Enrolment.degree_program_id",
            "select Semesters.semester_name, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Departments Semesters Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.0004935071337968111,
            8.203408651752397e-05,
            0.9812599420547485,
            7.158448715927079e-05,
            0.00044916491606272757,
            9.195100574288517e-05,
            0.9849274158477783,
            9.1422742116265e-05
        ],
        "align_select": "select Semesters.semester_name, Student_Enrolment.semester_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For what semester did most student register? Can you show me both the name and id?",
        "gold_select": "select Semesters.semester_name, Semesters.semester_id",
        "select_candidates": [
            "select Semesters.semester_name, Student_Enrolment.student_enrolment_id",
            "select Semesters.semester_name, Semesters.semester_id",
            "select Semesters.semester_name, Student_Enrolment.degree_program_id",
            "select Semesters.semester_name, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment",
            "Departments Semesters Student_Enrolment",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.8460507988929749,
            9.563015919411555e-05,
            0.9929224252700806,
            8.624628389952704e-05,
            0.00089960329933092,
            9.821659477893263e-05,
            0.9929794669151306,
            0.00010010447294916958
        ],
        "align_select": "select Semesters.semester_name, Student_Enrolment.student_enrolment_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the semester when most students registered? Provide both the id and name.",
        "gold_select": "select Semesters.semester_name, Semesters.semester_id",
        "select_candidates": [
            "select Semesters.semester_id, Semesters.semester_name",
            "select Semesters.semester_name, Semesters.semester_description",
            "select Students.student_id, Semesters.semester_name",
            "select Semesters.semester_name, Semesters.semester_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Courses Semesters Student_Enrolment",
            "Departments Semesters Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.9942003488540649,
            8.931177580961958e-05,
            0.0002061036939267069,
            7.584449485875666e-05,
            0.00134798523504287,
            8.827942656353116e-05,
            0.9944133162498474,
            8.937106758821756e-05
        ],
        "align_select": "select Semesters.semester_id, Semesters.semester_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "This is the semester during which most students enrolled. Show both the name and the id.",
        "gold_select": "select Semesters.semester_name, Semesters.semester_id",
        "select_candidates": [
            "select Semesters.semester_name, Student_Enrolment.student_enrolment_id",
            "select Semesters.semester_name, Student_Enrolment.degree_program_id",
            "select Semesters.semester_name, Semesters.semester_id",
            "select Semesters.semester_name, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment",
            "Departments Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.08885446935892105,
            8.071394404396415e-05,
            0.00044139407691545784,
            8.923855057219043e-05,
            0.9931875467300415,
            7.245235610753298e-05,
            0.9930546879768372,
            7.98776454757899e-05
        ],
        "align_select": "select Semesters.semester_name, Semesters.semester_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For each semester, list the names and ids of those with the most students registered.",
        "gold_select": "select Semesters.semester_name, Semesters.semester_id",
        "select_candidates": [
            "select Semesters.semester_name, Student_Enrolment.student_enrolment_id",
            "select Semesters.semester_name, Student_Enrolment.semester_id",
            "select Semesters.semester_name, Student_Enrolment.degree_program_id",
            "select Semesters.semester_name, Semesters.semester_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Students Student_Enrolment",
            "Departments Semesters Students Student_Enrolment",
            "Semesters Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Students Student_Enrolment",
            "Courses Students Student_Enrolment"
        ],
        "align_scores": [
            0.005535387434065342,
            0.00011212936806259677,
            0.9925685524940491,
            0.00013350528024602681,
            0.003521075239405036,
            0.00012808217434212565,
            0.9943366646766663,
            0.0001172346092062071
        ],
        "align_select": "select Semesters.semester_name, Semesters.semester_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you list the names by semester and give me the ids for each with most students enrolled?",
        "gold_select": "select Semesters.semester_name, Semesters.semester_id",
        "select_candidates": [
            "select Semesters.semester_name, Students.student_id",
            "select Semesters.semester_name, Semesters.semester_id",
            "select Semesters.semester_name, Student_Enrolment.student_enrolment_id",
            "select Semesters.semester_name, Students.current_address_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Courses Semesters Student_Enrolment",
            "Departments Semesters Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Sections Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.0004050751740578562,
            0.0001198972895508632,
            0.9761880040168762,
            0.00013429176760837436,
            0.0004584496491588652,
            0.0001250791538041085,
            0.0010977183701470494,
            0.00013272036449052393
        ],
        "align_select": "select Semesters.semester_name, Semesters.semester_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you describe the department whose name has the substring the computer?",
        "gold_select": "select Departments.department_description",
        "select_candidates": [
            "select Departments.department_description",
            "select Departments.department_description, Departments.other_details",
            "select Departments.department_description, Departments.department_id",
            "select Departments.department_name, Departments.department_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments",
        "table_candidates": [
            "Departments",
            "Courses Departments",
            "Addresses Departments",
            "Departments Student_Enrolment",
            "Departments Transcripts",
            "Departments Degree_Programs",
            "Departments Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9699552059173584,
            0.00013079287600703537,
            0.0002389120199950412,
            6.560838664881885e-05,
            0.00014564063167199492,
            6.363513966789469e-05,
            0.00019887815869878978,
            7.049882697174326e-05
        ],
        "align_select": "select Departments.department_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the description for the department whose name starts with the substring the computer?",
        "gold_select": "select Departments.department_description",
        "select_candidates": [
            "select Departments.department_description",
            "select Departments.department_description, Departments.other_details",
            "select Departments.department_description, Departments.department_id",
            "select Departments.department_description, Departments.department_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments",
        "table_candidates": [
            "Departments",
            "Courses Departments",
            "Addresses Departments",
            "Departments Student_Enrolment",
            "Departments Transcripts",
            "Departments Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9848191738128662,
            0.00010621099499985576,
            0.00018870476924348623,
            6.470360676757991e-05,
            0.00015023384185042232,
            6.442905578296632e-05,
            0.00017581666179466993,
            6.239440699573606e-05
        ],
        "align_select": "select Departments.department_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the department description for the one whose name contains the word 'computer'?",
        "gold_select": "select Departments.department_description",
        "select_candidates": [
            "select Departments.department_description",
            "select Departments.department_name, Departments.department_description",
            "select Departments.department_description, Departments.other_details",
            "select Departments.department_description, Departments.department_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments",
        "table_candidates": [
            "Departments",
            "Departments Transcripts",
            "Departments Student_Enrolment",
            "Departments Student_Enrolment_Courses",
            "Courses Departments",
            "Addresses Departments"
        ],
        "align_scores": [
            0.9951733946800232,
            9.442462032893673e-05,
            0.000194390639080666,
            7.229404582176358e-05,
            0.0001687708281679079,
            6.454596586991102e-05,
            0.0001806089567253366,
            6.567692616954446e-05
        ],
        "align_select": "select Departments.department_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the department description for whose name has the word 'computer' in it?",
        "gold_select": "select Departments.department_description",
        "select_candidates": [
            "select Departments.department_description",
            "select Departments.department_name, Departments.department_description",
            "select Departments.department_description, Departments.other_details",
            "select Departments.department_description, Departments.department_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments",
        "table_candidates": [
            "Departments",
            "Departments Transcripts",
            "Courses Departments",
            "Departments Student_Enrolment",
            "Departments Student_Enrolment_Courses",
            "Addresses Departments",
            "Departments Degree_Programs"
        ],
        "align_scores": [
            0.9924174547195435,
            0.00010193936032010242,
            0.00018861214630305767,
            7.162471592891961e-05,
            0.00018595696019474417,
            6.728394509991631e-05,
            0.00019017871818505228,
            6.581586058018729e-05
        ],
        "align_select": "select Departments.department_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the department description for whose name contains the word computer?",
        "gold_select": "select Departments.department_description",
        "select_candidates": [
            "select Departments.department_description",
            "select Departments.department_description, Departments.other_details",
            "select Departments.department_name, Departments.department_description",
            "select Departments.department_description, t2.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments",
        "table_candidates": [
            "Departments",
            "Departments Transcripts",
            "Courses Departments",
            "Addresses Departments",
            "Departments Degree_Programs",
            "Departments Student_Enrolment",
            "Departments Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9945759773254395,
            9.81105404207483e-05,
            0.00018571349210105836,
            6.514013512060046e-05,
            0.0001867711398517713,
            6.998620665399358e-05,
            0.0004261093563400209,
            7.114385516615584e-05
        ],
        "align_select": "select Departments.department_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the first name, middle name, last name of all those who are enrolled in a Bachelor degree program?",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select distinct Students.first_name, Students.middle_name, Students.last_name",
            "select Students.current_address_id, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Students",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Departments Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.6243979334831238,
            0.00017715716967359185,
            0.00019892842101398855,
            9.493527613813058e-05,
            0.049221981316804886,
            7.132039900170639e-05,
            0.00044719286961480975,
            9.732714534038678e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who has the following information about his/her enrollment in a Bachelor degree program? First name, middle name, last name.",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select distinct Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name.c3, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Degree_Programs Students"
        ],
        "align_scores": [
            0.9778188467025757,
            0.00037525055813603103,
            0.06729141622781754,
            0.00012133309792261571,
            0.00023690365196671337,
            8.200444426620379e-05,
            0.00036189352977089584,
            8.060471736826003e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me everyone's first, middle, and last name for people enrolled in a bachelor's program?",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Students",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Departments Degree_Programs Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.9708765149116516,
            0.00011738630564650521,
            0.0001885261881398037,
            8.617148705525324e-05,
            0.9708765149116516,
            0.00011738630564650521,
            0.009080024436116219,
            0.0001011602216749452
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the first, middle, and last name for people taking up bachelor courses?",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select distinct Students.first_name, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.6634149551391602,
            9.47598964557983e-05,
            0.0001726815098663792,
            7.780735177220777e-05,
            0.6634149551391602,
            9.47598964557983e-05,
            0.02570166066288948,
            5.896125003346242e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the names of everyone enrolled in a bachelor program starting with first, middle, and last name?",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Students",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Departments Degree_Programs Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.0019052550196647644,
            0.0004970286972820759,
            0.00010147654393222183,
            0.00010233878128929064,
            0.0007730286451987922,
            0.0005476548685692251,
            0.0019052550196647644,
            0.0004970286972820759
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Please list the first, middle, and last names for everyone enrolled in a Bachelor program.",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.9757290482521057,
            0.0001258630509255454,
            0.00017353288421873003,
            8.632973185740411e-05,
            0.9757290482521057,
            0.0001258630509255454,
            0.009037191048264503,
            0.00010715198004618287
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the first, middle, and last names for every one of those who are enrolled in a Bachelor degree program.",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select distinct Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Students",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Departments Degree_Programs Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.5245763063430786,
            0.00018304829427506775,
            0.00023061751562636346,
            8.686069486429915e-05,
            0.0686800628900528,
            7.124085823306814e-05,
            0.5245763063430786,
            0.00018304829427506775
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the kind of program which has most number of students enrolled in it?",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.department_id",
            "select Student_Enrolment.degree_program_id",
            "select Student_Enrolment.semester_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Departments Degree_Programs Student_Enrolment",
            "Semesters Degree_Programs Student_Enrolment",
            "Courses Student_Enrolment",
            "Semesters Student_Enrolment",
            "Sections Student_Enrolment"
        ],
        "align_scores": [
            0.9488367438316345,
            9.775371290743351e-05,
            0.055220168083906174,
            9.631874854676425e-05,
            0.931182324886322,
            9.330345346825197e-05,
            0.0018865624442696571,
            7.44062926969491e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give me the degree summary name with the most number of students enrolled?",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.student_id",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment",
            "Departments Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9949393272399902,
            0.00013114180183038116,
            0.0001964866678463295,
            7.542939420090988e-05,
            0.0003985212533734739,
            7.498997001675889e-05,
            0.00034379225689917803,
            7.522617670474574e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the degree summary name with the most number of enrolled students?",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.student_id",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9944266080856323,
            8.027395961107686e-05,
            0.0002259749744553119,
            7.48134043533355e-05,
            0.0004173559427727014,
            7.225972512969747e-05,
            0.0003642764932010323,
            6.952536205062643e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you find the program with the most number of students enrolled in it? List both the id and the summary.",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.department_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_program_id, Courses.course_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.other_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Courses Degree_Programs Student_Enrolment",
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Departments Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment",
            "Semesters Student_Enrolment",
            "Sections Student_Enrolment",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9582232236862183,
            0.00010014476720243692,
            0.0007710996433161199,
            0.0001023651275318116,
            0.4221741259098053,
            0.0001335424603894353,
            0.9807577133178711,
            0.00011012526374543086
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the program most number of students are enrolled in, where both the id and summary are listed.",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.department_id, Degree_Programs.degree_summary_name",
            "select Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_name",
            "select Departments.department_id, Degree_Programs.degree_summary_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9862737059593201,
            7.849984103813767e-05,
            0.0013679822441190481,
            7.337711576838046e-05,
            0.9919875860214233,
            9.106131619773805e-05,
            0.007044453639537096,
            8.9011897216551e-05
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which programs have the largest number of students enrolling them? Show me the program id and summary of degree program with most students enrolled.",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.other_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Degree_Programs Student_Enrolment_Courses",
            "Courses Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment_Courses",
            "Degree_Programs Transcripts",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Degree_Programs Students"
        ],
        "align_scores": [
            0.9883456230163574,
            0.00018153419659938663,
            0.9888090491294861,
            0.00017413325258530676,
            0.000534862105268985,
            9.164295624941587e-05,
            0.9890299439430237,
            0.00021086959168314934
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the program id and degree summary that has the most enrollment.",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9937361478805542,
            8.498169336235151e-05,
            0.9939175844192505,
            8.319538028445095e-05,
            0.9897474050521851,
            0.00010184997518081218,
            0.00037182471714913845,
            6.0610993386944756e-05
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you show me the program id and summary of the degree that has the most students enrolled?",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description",
            "select Sections.section_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.993655800819397,
            0.00012312366743572056,
            0.9935302138328552,
            0.00011972500942647457,
            0.0005125318421050906,
            8.050655014812946e-05,
            0.00017799173656385392,
            7.600427488796413e-05
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please give me the program id and the summary of the degree that has the most students enrolled?",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.department_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.other_details"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9938008189201355,
            0.00011903401900781319,
            0.9938250780105591,
            0.00012164263898739591,
            0.0005985324387438595,
            0.00010585549171082675,
            0.9927421808242798,
            0.00014172535156831145
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which student has enrolled for the most times in any program? List all the student ids, first names, middle names, last names, the number of enrollments and student ids.",
        "gold_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*), Students.student_id",
        "select_candidates": [
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*)",
            "select Students.first_name, Students.middle_name, Students.last_name, count(*), Students.student_id",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Students Transcript_Contents",
            "Students",
            "Students Transcripts"
        ],
        "align_scores": [
            0.18814638257026672,
            0.00024668354308232665,
            0.13645446300506592,
            0.00033668146352283657,
            0.12152909487485886,
            0.00023093391791917384,
            0.18814638257026672,
            0.00024668354308232665
        ],
        "align_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which student has had the most enrollments in any program? List his name, student id, first name, middle name, last name, the number of enrollments, and id.",
        "gold_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*), Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name, count(*), Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name, count(*)",
            "select Students.current_address_id, Students.middle_name, Students.last_name, count(*), Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name, count(Students.student_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.05605989322066307,
            0.0002463389828335494,
            0.019742706790566444,
            0.0001555267081130296,
            0.0003147604293189943,
            0.00010715350799728185,
            0.0025718894321471453,
            0.00011640671436907724
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name, count(*), Students.student_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which student has registered for the most times in any program? List the student ids, first names, middle names, last names, the numbers of enrollment and student ids.",
        "gold_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*), Students.student_id",
        "select_candidates": [
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*)",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*), Students.student_id",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.1635654717683792,
            0.00023421889636665583,
            0.09350423514842987,
            0.0003158019098918885,
            0.11247679591178894,
            0.00021414220100268722,
            0.1635654717683792,
            0.00023421889636665583
        ],
        "align_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "The student who enrolled the most in any program has what first, middle, and last names? Also, list his enrollment number and number of enrollments.",
        "gold_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*), Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name, count(*)",
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id, count(*)",
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name, sum(Students.ssn)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.17051450908184052,
            9.32362163439393e-05,
            0.017294300720095634,
            0.00016026865341700613,
            0.10349654406309128,
            0.00020576320821419358,
            0.017660073935985565,
            0.00010494470916455612
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the first, middle, and last names, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "gold_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*), Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id, count(*)",
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id, count(Students.student_id)",
            "select Students.first_name, Students.middle_name, Students.last_name ainsi Students.student_id, count(*)",
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id, count(Students.current_address_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.986770749092102,
            0.0001979485241463408,
            0.09941700845956802,
            0.00011780007480410859,
            0.1786397248506546,
            0.00012014427193207666,
            0.003630833700299263,
            0.00010561835370026529
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first, middle and last name of each student who enrolled the most in any program, including the id and enrollment number?",
        "gold_select": "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*), Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id, count(*)",
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id, max(Students.date_first_registered)",
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id, Students.current_address_id3"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.03367098420858383,
            0.00015291014278773218,
            0.0020273937843739986,
            9.581006452208385e-05,
            0.00205171387642622,
            7.582048419862986e-05,
            0.0004382801416795701,
            8.651011739857495e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which semesters are no students enrolled? List the semester name.",
        "gold_select": "select Semesters.semester_name",
        "select_candidates": [
            "select Semesters.semester_name",
            "select Semesters.semester_name, Student_Enrolment.semester_id",
            "select Semesters.semester_name, Semesters.semester_description",
            "select Semesters.semester_name, Student_Enrolment.degree_program_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.8708917498588562,
            0.8841547966003418,
            0.00038543567643500865,
            0.00019045418594032526,
            0.002696554409340024,
            0.0005392853054217994,
            0.00038239595596678555,
            0.0001663541333982721
        ],
        "align_select": "select Semesters.semester_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "For which semesters are no students enrolled? List the semester name.",
        "gold_select": "select Semesters.semester_name",
        "select_candidates": [
            "select Semesters.semester_name",
            "select Semesters.semester_name, Student_Enrolment.semester_id",
            "select Semesters.semester_name, Student_Enrolment.degree_program_id",
            "select Semesters.semester_name, Student_Enrolment.semester_id, Semesters.other_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.8725075721740723,
            0.9721906185150146,
            0.0003348421596456319,
            0.00017702308832667768,
            0.00039093222585506737,
            0.0001786640495993197,
            0.00019148954015690833,
            0.0001452138094464317
        ],
        "align_select": "select Semesters.semester_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which semesters are not occupied by any student enrollments? List the semester name.",
        "gold_select": "select Semesters.semester_name",
        "select_candidates": [
            "select Semesters.semester_name",
            "select Semesters.semester_name, Student_Enrolment.semester_id",
            "select Semesters.semester_name, Student_Enrolment.semester_id, Semesters.other_details",
            "select Semesters.semester_name, Semesters.semester_description, Semesters.other_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Semesters"
        ],
        "align_scores": [
            0.9547739028930664,
            0.7266244888305664,
            0.0006180995842441916,
            0.0002714226138778031,
            0.0002884785062633455,
            0.0001921388175105676,
            0.000583755667321384,
            0.0006882465677335858
        ],
        "align_select": "select Semesters.semester_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Give me the semester name with no students enrolled.",
        "gold_select": "select Semesters.semester_name",
        "select_candidates": [
            "select Semesters.semester_name",
            "select Semesters.semester_name, Student_Enrolment.semester_id",
            "select Semesters.semester_name, Student_Enrolment.degree_program_id",
            "select Semesters.semester_name, Student_Enrolment.student_enrolment_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Semesters"
        ],
        "align_scores": [
            0.8927714228630066,
            0.6712427139282227,
            0.00014124385779723525,
            0.00022329027706291527,
            0.00012875752872787416,
            0.0001813641283661127,
            9.555576980346814e-05,
            0.00011026681022485718
        ],
        "align_select": "select Semesters.semester_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Tell what the name of the semester without any students enrolled is?",
        "gold_select": "select Semesters.semester_name",
        "select_candidates": [
            "select Semesters.semester_name",
            "select Semesters.semester_name, Semesters.semester_description",
            "select Semesters.semester_name, Student_Enrolment.semester_id",
            "select Semesters.semester_name, Semesters.semester_description, Semesters.other_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Semesters",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.9929531216621399,
            0.5002263188362122,
            0.0004468110855668783,
            0.001162670087069273,
            0.0001421615743311122,
            0.0002982972946483642,
            0.00028280308470129967,
            0.0006315960781648755
        ],
        "align_select": "select Semesters.semester_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the name of the semester with no students enrolled?",
        "gold_select": "select Semesters.semester_name",
        "select_candidates": [
            "select Semesters.semester_name",
            "select Semesters.semester_name, Student_Enrolment.semester_id",
            "select Semesters.semester_name, Semesters.semester_description",
            "select Semesters.semester_name, Student_Enrolment.degree_program_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.646902322769165,
            0.8481867909431458,
            0.00015139997412916273,
            0.0003214518947061151,
            0.000622736057266593,
            0.001885644276626408,
            0.00016256998060271144,
            0.00024837238015607
        ],
        "align_select": "select Semesters.semester_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What is the name of the semester without any students enrolled in it?",
        "gold_select": "select Semesters.semester_name",
        "select_candidates": [
            "select Semesters.semester_name",
            "select Semesters.semester_name, Student_Enrolment.semester_id",
            "select Semesters.semester_name, Semesters.semester_description",
            "select Semesters.semester_name, Semesters.semester_description, Semesters.other_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Semesters",
            "Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.9889985918998718,
            0.8055145740509033,
            0.00016090106510091573,
            0.0003780907136388123,
            0.0004678509139921516,
            0.001670550787821412,
            0.0003199518541805446,
            0.0010149769950658083
        ],
        "align_select": "select Semesters.semester_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all course names from which there are students enrolled?",
        "gold_select": "select distinct Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select distinct Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select distinct Courses.course_name, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Courses"
        ],
        "align_scores": [
            0.2681282162666321,
            0.4838109612464905,
            0.6967833042144775,
            0.0019092924194410443,
            0.00015317954239435494,
            0.0001848548708949238,
            0.00032330481917597353,
            0.0001392812846461311
        ],
        "align_select": "select distinct Courses.course_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the list of all course names which have ever been enrolled by any student.",
        "gold_select": "select distinct Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select distinct Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.degree_program_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses"
        ],
        "align_scores": [
            0.8368561863899231,
            0.002196582965552807,
            0.4073484539985657,
            0.012628844007849693,
            0.00018856447422876954,
            9.79271499090828e-05,
            0.0002279841573908925,
            0.00010666264279279858
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please show me all the course names of the courses which ever have students enrolled in?",
        "gold_select": "select distinct Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select distinct Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select distinct Courses.course_name, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses"
        ],
        "align_scores": [
            0.5118246078491211,
            0.7372008562088013,
            0.5501453280448914,
            0.11391008645296097,
            0.00016351255180779845,
            0.00012302532559260726,
            0.0012725541600957513,
            0.00038766179932281375
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the course names of all the courses, which ever enrolled any students.",
        "gold_select": "select distinct Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select distinct Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id, Courses.other_details"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses"
        ],
        "align_scores": [
            0.9225751757621765,
            0.0010588997974991798,
            0.00012320409587118775,
            7.247744360938668e-05,
            0.20658372342586517,
            0.00628611259162426,
            0.00013276160461828113,
            6.924652552697808e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are all the course names of the courses ever had students enrolled?",
        "gold_select": "select distinct Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select distinct Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.semester_id, Courses.other_details"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment"
        ],
        "align_scores": [
            0.46575984358787537,
            0.8167203068733215,
            0.8461318612098694,
            0.20340295135974884,
            0.00015109824016690254,
            0.00011978941620327532,
            0.00016268008039332926,
            0.00012432882795110345
        ],
        "align_select": "select distinct Courses.course_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can I get the names of all courses that have at least one student enrolling in them?",
        "gold_select": "select distinct Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.semester_id, Courses.other_details",
            "select Courses.course_name, Student_Enrolment.semester_id, Student_Enrolment.student_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment"
        ],
        "align_scores": [
            0.507465124130249,
            0.8740057945251465,
            0.00017815573664847761,
            0.00018502735474612564,
            0.00017023058899212629,
            0.00015422450087498873,
            0.00011145512689836323,
            0.00010331272642361
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which courses have some students enrolled? List their names.",
        "gold_select": "select distinct Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.semester_id, Courses.other_details",
            "select distinct Courses.course_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Courses Student_Enrolment Sections",
            "Courses"
        ],
        "align_scores": [
            0.06318853795528412,
            0.0008878962835296988,
            0.0002115054812747985,
            9.848191257333383e-05,
            0.00018520488811191171,
            9.178806067211553e-05,
            0.31649813055992126,
            0.027424488216638565
        ],
        "align_select": "select distinct Courses.course_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the names of all courses which have students enrolled.",
        "gold_select": "select distinct Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.degree_program_id",
            "select distinct Courses.course_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses"
        ],
        "align_scores": [
            0.838581383228302,
            0.000933855539187789,
            0.00017337279859930277,
            9.339219832327217e-05,
            0.0002021539257839322,
            9.664499521022663e-05,
            0.903902530670166,
            0.013054064474999905
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which courses have some students enrolled? List the name of each course.",
        "gold_select": "select distinct Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.degree_program_id",
            "select Courses.course_name, Student_Enrolment.student_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Addresses Courses Student_Enrolment"
        ],
        "align_scores": [
            0.15704427659511566,
            0.9354766607284546,
            0.00028029250097461045,
            0.00024102105817291886,
            0.0003146371163893491,
            0.0003234543837606907,
            0.00033613512641750276,
            0.00033000545226968825
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the last names of students who live in North Carolina but have not registered in a degree program.",
        "gold_select": "select Students.last_name",
        "select_candidates": [
            "select Students.last_name",
            "select Students.last_name, Students.date_first_registered",
            "select Students.last_name, Student_Enrolment.semester_id",
            "select Students.last_name, Student_Enrolment.degree_program_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students Student_Enrolment",
        "table_candidates": [
            "Addresses Students Student_Enrolment",
            "Addresses Departments Degree_Programs Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Addresses Courses Students Student_Enrolment",
            "Addresses Semesters Students Student_Enrolment",
            "Addresses Departments Students Student_Enrolment",
            "Addresses Students",
            "Addresses Sections Students Student_Enrolment"
        ],
        "align_scores": [
            0.6917374730110168,
            0.8224632143974304,
            0.0003459028375800699,
            0.0003079338348470628,
            0.0001887162943603471,
            0.00018589381943456829,
            0.0005277512827888131,
            0.0005047372542321682
        ],
        "align_select": "select Students.last_name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Find all the last names belonging to students in North Carolina who are not registered in any degree program?",
        "gold_select": "select Students.last_name",
        "select_candidates": [
            "select Students.last_name",
            "select Students.last_name, Student_Enrolment.semester_id",
            "select Students.last_name, Student_Enrolment.degree_program_id",
            "select Students.last_name, Students.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students Student_Enrolment",
        "table_candidates": [
            "Addresses Students Student_Enrolment",
            "Addresses Departments Degree_Programs Students Student_Enrolment",
            "Addresses Semesters Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Addresses Students",
            "Addresses Courses Students Student_Enrolment",
            "Addresses Departments Students Student_Enrolment",
            "Addresses Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.878289520740509,
            0.1553063541650772,
            0.00018875875684898347,
            0.00024622250930406153,
            0.0005776705802418292,
            0.0003135165898129344,
            0.00020810677960980684,
            0.0002615691046230495
        ],
        "align_select": "select Students.last_name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Find all the students who currently live in North Carolina but have not registered in any degree program. Give me their last names.",
        "gold_select": "select Students.last_name",
        "select_candidates": [
            "select Students.last_name",
            "select Students.last_name, Students.ssn",
            "select Students.last_name, Students.date_left",
            "select Students.last_name, Students.current_address_id3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students Student_Enrolment",
        "table_candidates": [
            "Addresses Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Addresses Departments Degree_Programs Students Student_Enrolment",
            "Addresses Courses Students Student_Enrolment",
            "Addresses Semesters Students Student_Enrolment",
            "Addresses Students",
            "Addresses Sections Students Student_Enrolment",
            "Addresses Departments Students Student_Enrolment"
        ],
        "align_scores": [
            0.7756836414337158,
            0.8564536571502686,
            0.0008660428575240076,
            0.0007417818997055292,
            0.00025206003920175135,
            0.0002545009774621576,
            0.00040955771692097187,
            0.0003809332847595215
        ],
        "align_select": "select Students.last_name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show me the last names of students who do not have degree programs registered in NorthCarolina.",
        "gold_select": "select Students.last_name",
        "select_candidates": [
            "select Students.last_name",
            "select Students.last_name, Addresses.state_province_county",
            "select Students.last_name, Students.cell_mobile_number",
            "select Students.last_name, Students.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses Students Student_Enrolment",
        "table_candidates": [
            "Addresses Degree_Programs Students Student_Enrolment",
            "Addresses Departments Degree_Programs Students Student_Enrolment",
            "Addresses Courses Degree_Programs Students Student_Enrolment",
            "Addresses Courses Departments Degree_Programs Students Student_Enrolment",
            "Addresses Semesters Degree_Programs Students Student_Enrolment",
            "Addresses Sections Students Student_Enrolment",
            "Addresses Courses Students Student_Enrolment",
            "Addresses Students Student_Enrolment"
        ],
        "align_scores": [
            0.9648284316062927,
            0.9553430080413818,
            0.0009613246074877679,
            0.0010145535925403237,
            0.00018073782848659903,
            0.00018640146299730986,
            0.00015916697157081217,
            0.0001706527837086469
        ],
        "align_select": "select Students.last_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the last names of the students from North Carolina who have not registered in any degree program?",
        "gold_select": "select Students.last_name",
        "select_candidates": [
            "select Students.last_name",
            "select Students.last_name, Student_Enrolment.degree_program_id",
            "select Students.last_name, Student_Enrolment.semester_id",
            "select Students.last_name, Students.ssn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students Student_Enrolment",
        "table_candidates": [
            "Addresses Students Student_Enrolment",
            "Addresses Departments Degree_Programs Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Addresses Courses Students Student_Enrolment",
            "Addresses Semesters Students Student_Enrolment",
            "Addresses Students",
            "Addresses Departments Students Student_Enrolment",
            "Addresses Sections Students Student_Enrolment"
        ],
        "align_scores": [
            0.8196772336959839,
            0.09431574493646622,
            0.000440146162873134,
            0.00020983265130780637,
            0.00017049700545612723,
            0.00022294097288977355,
            0.0004269481578376144,
            0.00028848592774011195
        ],
        "align_select": "select Students.last_name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show me the last names of the students from North Carolina who have not registered in any degree programs.",
        "gold_select": "select Students.last_name",
        "select_candidates": [
            "select Students.last_name",
            "select Students.last_name, Student_Enrolment.degree_program_id",
            "select Students.last_name, Student_Enrolment.semester_id",
            "select Students.last_name, Student_Enrolment.degree_program_id0"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students Student_Enrolment",
        "table_candidates": [
            "Addresses Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Addresses Departments Degree_Programs Students Student_Enrolment",
            "Addresses Courses Students Student_Enrolment",
            "Addresses Semesters Students Student_Enrolment",
            "Addresses Sections Students Student_Enrolment",
            "Addresses Departments Students Student_Enrolment",
            "Addresses Students"
        ],
        "align_scores": [
            0.7366046905517578,
            0.09906258434057236,
            0.0004940450889989734,
            0.000202371840714477,
            0.00017148435290437192,
            0.0002208313235314563,
            0.0005826833657920361,
            0.00028089465922676027
        ],
        "align_select": "select Students.last_name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you show me the last names of the students who live in North Carolina and have not registered in any degree program?",
        "gold_select": "select Students.last_name",
        "select_candidates": [
            "select Students.last_name",
            "select Students.last_name, Students.date_first_registered",
            "select Students.last_name, Students.ssn",
            "select Students.last_name, Students.date_left"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students Student_Enrolment",
        "table_candidates": [
            "Addresses Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Addresses Departments Degree_Programs Students Student_Enrolment",
            "Addresses Courses Students Student_Enrolment",
            "Addresses Semesters Students Student_Enrolment",
            "Addresses Departments Students Student_Enrolment",
            "Addresses Sections Students Student_Enrolment",
            "Addresses Students"
        ],
        "align_scores": [
            0.7597594857215881,
            0.8413059115409851,
            0.0005445474525913596,
            0.0004168982559349388,
            0.0005966454627923667,
            0.0004940863000229001,
            0.00024307449348270893,
            0.0002196708373958245
        ],
        "align_select": "select Students.last_name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you show me the transcript with the dates and id of the transcript with at least 2 course results?",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t8.c5, t7.c6",
            "select t8.c3, t8.c4"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Semesters Student_Enrolment_Courses",
            "Semesters Student_Enrolment",
            "Transcripts Transcript_Contents",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.01066152099519968,
            5.926509038545191e-05,
            0.0003054992121178657,
            8.105655433610082e-05,
            0.008635829202830791,
            6.0996284446446225e-05,
            0.008283575996756554,
            5.7851681049214676e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which transcript contains at least 2 courses? Find its date and id?",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t9.c5, Transcripts.transcript_id",
            "select t14.c5, t14.c0",
            "select t14.c3, t14.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment",
            "Courses Transcripts",
            "Student_Enrolment_Courses",
            "Semesters Student_Enrolment",
            "Semesters Student_Enrolment_Courses",
            "Transcript_Contents"
        ],
        "align_scores": [
            0.0002993196831084788,
            8.162153244484216e-05,
            0.00044767785584554076,
            9.888805652735755e-05,
            0.0002915637451224029,
            6.376343662850559e-05,
            0.0002360919170314446,
            6.59495490253903e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Where can I find a man with the first name Timmothy and the last name Ward's cell mobile number?",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.last_name, Students.cell_mobile_number",
            "select Students.current_address_id, Students.permanent_address_id",
            "select Students.current_address_id, Students.cell_mobile_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Addresses Students",
            "Degree_Programs Students",
            "Addresses Courses Students",
            "Courses Students",
            "Semesters Students",
            "Sections Students",
            "Departments Students"
        ],
        "align_scores": [
            0.9544553756713867,
            0.00018308877770323306,
            0.00035030097933486104,
            0.00010961409861920401,
            0.0004336453275755048,
            0.00012494539259932935,
            0.00019254523795098066,
            8.517412788933143e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the number of the man whose first name is Timmothy and the last name is Ward?",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.current_address_id, Students.permanent_address_id",
            "select Students.last_name, Students.cell_mobile_number",
            "select Students.current_address_id, Students.cell_mobile_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Degree_Programs Students",
            "Semesters Students",
            "Addresses Students",
            "Courses Students",
            "Sections Students",
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9834581613540649,
            0.0001395716390106827,
            0.00038839143235236406,
            7.580038072774187e-05,
            0.00020079899695701897,
            7.303937309188768e-05,
            0.0001415044243913144,
            6.150591070763767e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the first, middle, and last names of the first student that registered.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9929826259613037,
            6.402910366887227e-05,
            0.9929826259613037,
            6.402910366887227e-05,
            0.0002945417654700577,
            7.509974966524169e-05,
            0.021248016506433487,
            8.707084634806961e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "The first student to register was (first name, middle name, last name).",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Student_Enrolment.degree_program_id, Students.first_name, Students.middle_name, Students.last_name",
            "select t7.c9, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name.c3, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9940394163131714,
            6.368602043949068e-05,
            0.00032275021658279,
            6.78469441481866e-05,
            0.00024371639301534742,
            6.193875742610544e-05,
            0.00021453377848956734,
            6.822174327680841e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the first name, middle name, and last name of the earliest graduate of the school.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment_Courses",
            "Students",
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9912368059158325,
            7.371003448497504e-05,
            0.00027748916181735694,
            9.108772064791992e-05,
            0.9912368059158325,
            7.371003448497504e-05,
            0.07308723777532578,
            9.706079436000437e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who was the earliest (in order) to leave your school and give us his/her first, middle and last names?",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students"
        ],
        "align_scores": [
            0.9403966665267944,
            9.838457481237128e-05,
            0.0002881984109990299,
            6.974017014726996e-05,
            0.9403966665267944,
            9.838457481237128e-05,
            0.028705110773444176,
            0.00014394945173989981
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who is the earliest school graduate? Provide his first, middle, and last names.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9711553454399109,
            0.9711553454399109,
            0.00029140536207705736,
            0.00029140536207705736,
            0.9711553454399109,
            0.9711553454399109,
            0.017027245834469795,
            0.017027245834469795
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Could you tell me the first, middle, and last names of the earliest school graduate?",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses",
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.897296130657196,
            8.59680149005726e-05,
            0.897296130657196,
            8.59680149005726e-05,
            0.0002791917650029063,
            9.246070112567395e-05,
            0.01718851551413536,
            0.00012042298476444557
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who has a permanent address different from his/her current address? List his/her first name.",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select distinct Students.first_name",
            "select distinct Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Addresses Students",
            "Semesters Students",
            "Departments Students",
            "Sections Students",
            "Degree_Programs Students",
            "Courses Students",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.590509831905365,
            0.0003906390629708767,
            0.0398065559566021,
            0.00023985831649042666,
            0.0004200753755867481,
            7.264060695888475e-05,
            0.00022007629740983248,
            0.00010622456466080621
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List first names of people whose permanent addresses are different from their current addresses.",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select distinct Students.first_name",
            "select distinct Students.first_name, Students.middle_name",
            "select Students.first_name, Students.middle_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Semesters Students",
            "Departments Students",
            "Addresses Courses",
            "Addresses Students Student_Enrolment_Courses",
            "Degree_Programs Students",
            "Addresses Courses Students",
            "Sections Students"
        ],
        "align_scores": [
            0.8012282252311707,
            0.00016378640430048108,
            0.037577081471681595,
            0.00014146906323730946,
            0.00023918507213238627,
            6.455390393966809e-05,
            0.00027624136419035494,
            7.770383672323078e-05
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who has a permanent address other than his or her current address? Give his or her first name.",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select Students.student_id, Students.first_name",
            "select Students.first_name, Students.last_name",
            "select Students.first_name, Students.middle_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Semesters Students",
            "Departments Students",
            "Addresses Courses Students",
            "Courses Students",
            "Addresses Courses",
            "Addresses Students Student_Enrolment_Courses",
            "Degree_Programs Students"
        ],
        "align_scores": [
            0.5604913830757141,
            0.00047958813956938684,
            0.00024442150606773794,
            9.997816960094497e-05,
            0.000290706375380978,
            9.398067777510732e-05,
            0.00027016858803108335,
            9.824095468502492e-05
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who has a permanent address which differs from his or her current address? List his or her first name.",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select distinct Students.first_name",
            "select Students.student_id, Students.first_name",
            "select distinct Students.first_name, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Addresses Students",
            "Semesters Students",
            "Departments Students",
            "Sections Students",
            "Degree_Programs Students",
            "Courses Students",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.49234938621520996,
            0.000859392574056983,
            0.0412246435880661,
            0.0002992101653944701,
            0.00023861884255893528,
            0.00010842008487088606,
            0.0004386734508443624,
            7.889850530773401e-05
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who has a permanent address different from his/her current one? List his/her first name.",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select distinct Students.first_name",
            "select Students.student_id, Students.first_name",
            "select distinct Students.first_name, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Addresses Students",
            "Students",
            "Departments Students",
            "Semesters Students",
            "Courses Students",
            "Degree_Programs Students",
            "Sections Students",
            "Addresses Courses"
        ],
        "align_scores": [
            0.5922802686691284,
            0.0004659548867493868,
            0.04360867291688919,
            0.0002586926566436887,
            0.000214185900404118,
            9.822539868764579e-05,
            0.00046790976193733513,
            7.081537478370592e-05
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which student has a different permanent address than his/her current one? Show me the student's first name.",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select Students.student_id, Students.first_name",
            "select distinct Students.first_name",
            "select Students.first_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Addresses Students",
            "Semesters Students",
            "Departments Students",
            "Sections Students",
            "Courses Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.5694054961204529,
            0.05069625377655029,
            0.00031464072526432574,
            0.00014699113671667874,
            0.05308179557323456,
            0.00046748045133426785,
            0.00017090520123019814,
            0.00017479847883805633
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me an address that has the most number of students living there? List its address id and all the lines.",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_3",
            "select Addresses.address_id, Addresses.line_1",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment",
            "Addresses Student_Enrolment",
            "Addresses Semesters Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Courses Students"
        ],
        "align_scores": [
            0.9410740733146667,
            0.00013930001296103,
            0.07460635900497437,
            0.0001486603287048638,
            0.023082731291651726,
            0.00015362918202299625,
            0.9815162420272827,
            0.0001439918705727905
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the address holding the most number of students. List the address id and lines.",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_3",
            "select Addresses.address_id, Addresses.line_1",
            "select Addresses.address_id, Addresses.line_2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Students Student_Enrolment",
            "Addresses Semesters Students",
            "Addresses Students Transcripts",
            "Addresses Courses Students",
            "Addresses Sections Students",
            "Addresses Student_Enrolment"
        ],
        "align_scores": [
            0.9896891117095947,
            7.031116547295824e-05,
            0.4638734757900238,
            7.969306170707569e-05,
            0.9600539803504944,
            7.759920117678121e-05,
            0.023150434717535973,
            7.308438216568902e-05
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please tell me the id, line 1, and line 2 of the adress having the most students.",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select student_Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.other_address_details, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Students Student_Enrolment",
            "Addresses Courses Departments Students",
            "Addresses Semesters Students",
            "Addresses Student_Enrolment",
            "Addresses Courses Students",
            "Addresses Sections Students"
        ],
        "align_scores": [
            0.9930475354194641,
            8.191690722014755e-05,
            0.9840860366821289,
            0.00010004569048760459,
            0.0015985508216544986,
            7.671226194361225e-05,
            0.00024260311329271644,
            7.465625822078437e-05
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the address with the most students. What is the id, line 1, and line 2 of this address?",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select student_Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Students Student_Enrolment",
            "Addresses Semesters Students",
            "Addresses Student_Enrolment",
            "Addresses Students Transcripts",
            "Addresses Sections Students",
            "Addresses Courses Students"
        ],
        "align_scores": [
            0.9929064512252808,
            0.00010170401219511405,
            0.9826906323432922,
            0.00012563330528791994,
            0.0002715957525651902,
            8.249637903645635e-05,
            0.9929064512252808,
            0.00010170401219511405
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you show me the id, line 1, and line 2 of the address with the most students?",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select student_Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Students.student_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Students Student_Enrolment",
            "Addresses Semesters Students",
            "Addresses Student_Enrolment",
            "Addresses Courses Departments Students",
            "Addresses Courses Students",
            "Addresses Sections Students"
        ],
        "align_scores": [
            0.9938597679138184,
            9.169410623144358e-05,
            0.9818628430366516,
            0.00011260747851338238,
            0.05739033222198486,
            9.102954209083691e-05,
            0.0002162265300285071,
            7.609609747305512e-05
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the id, line 1, and line 2 of the address with the most students?",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select student_Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3",
            "select Addresses.other_address_details, Addresses.line_1, Addresses.line_2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Students Student_Enrolment",
            "Addresses Semesters Students",
            "Addresses Courses Departments Students",
            "Addresses Student_Enrolment",
            "Addresses Courses Students",
            "Addresses Sections Students"
        ],
        "align_scores": [
            0.9936705827713013,
            9.283795952796936e-05,
            0.9817628860473633,
            0.00011564774467842653,
            0.00023216803674586117,
            7.801812898833305e-05,
            0.000534361694008112,
            7.910114072728902e-05
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For each transcript printed, at what time was it printed on average?",
        "gold_select": "select avg(Transcripts.transcript_date)",
        "select_candidates": [
            "select t8.c5, avg(t9.c6)",
            "select t8.c5, avg(t8.c6)",
            "select Student_Enrolment.degree_program_id, avg(t7.c8)",
            "select Student_Enrolment.degree_program_id, avg(t7.c5)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment",
            "Semesters Student_Enrolment",
            "Semesters Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.000327193207340315,
            0.00012374571815598756,
            0.0003425386094022542,
            0.00010163952538277954,
            0.000448166741989553,
            0.0001479247584939003,
            0.00044973561307415366,
            0.00017005600966513157
        ],
        "align_select": "select t8.c5, avg(t9.c6)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In this case, on average how often was the transcript printed?",
        "gold_select": "select avg(Transcripts.transcript_date)",
        "select_candidates": [
            "select avg(t7.c8)",
            "select avg(t9.c4)",
            "select avg(t8.c8)",
            "select avg(t8.c4)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Semesters Student_Enrolment_Courses",
            "Addresses Transcripts",
            "Semesters Student_Enrolment",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.002066188957542181,
            7.136591011658311e-05,
            0.0010183088015764952,
            7.825738430256024e-05,
            0.010620991699397564,
            7.18435476301238e-05,
            0.0015589584363624454,
            7.916800677776337e-05
        ],
        "align_select": "select avg(t7.c8)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What was the average date when the transcripts were printed?",
        "gold_select": "select avg(Transcripts.transcript_date)",
        "select_candidates": [
            "select avg(t10.c5)",
            "select avg(t9.c5)",
            "select avg(t8.c5)",
            "select avg(t10.c6)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcript_Contents",
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.0008432029862888157,
            6.133184069767594e-05,
            0.0008529193000867963,
            6.0849248257e-05,
            0.0008785093668848276,
            5.9550842706812546e-05,
            0.0008915883372537792,
            5.992877049720846e-05
        ],
        "align_select": "select avg(t10.c5)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average date when transcripts were printed?",
        "gold_select": "select avg(Transcripts.transcript_date)",
        "select_candidates": [
            "select avg(t10.c5)",
            "select avg(t9.c5)",
            "select avg(t10.c6)",
            "select avg(t8.c5)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0007275961106643081,
            6.794056389480829e-05,
            0.0007605300052091479,
            6.573369319085032e-05,
            0.0007650007028132677,
            6.776623922633007e-05,
            0.0007462878711521626,
            6.597283208975568e-05
        ],
        "align_select": "select avg(t10.c5)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average printing date of transcripts?",
        "gold_select": "select avg(Transcripts.transcript_date)",
        "select_candidates": [
            "select avg(t10.c5)",
            "select avg(t10.c6)",
            "select avg(t9.c5)",
            "select avg(t9.c8)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Transcripts"
        ],
        "align_scores": [
            0.0008413145551458001,
            6.436470721382648e-05,
            0.0008447430445812643,
            6.578968896064907e-05,
            0.0007816730067133904,
            6.350644252961501e-05,
            0.000833618629258126,
            5.928453538217582e-05
        ],
        "align_select": "select avg(t10.c5)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the average transcript date?",
        "gold_select": "select avg(Transcripts.transcript_date)",
        "select_candidates": [
            "select avg(Student_Enrolment.degree_program_id0)",
            "select avg(t7.c9)",
            "select avg(Student_Enrolment_Courses.course_id0)",
            "select avg(t8.c5)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcript_Contents",
            "Transcripts",
            "Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0003579425101634115,
            8.646740752737969e-05,
            0.0007023046491667628,
            7.755593105684966e-05,
            0.0003563613281585276,
            7.757692947052419e-05,
            0.0005438373191282153,
            7.916408503660932e-05
        ],
        "align_select": "select avg(Student_Enrolment.degree_program_id0)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the date, details of first transcript ordered.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t7.c9, Student_Enrolment.degree_program_id1",
            "select t8.c5, t8.c6",
            "select t7.c9, Student_Enrolment.degree_program_id2",
            "select t7.c9, Student_Enrolment.degree_program_id3"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses",
            "Transcript_Contents",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0003473171382211149,
            0.00010078970808535814,
            0.0004458253097254783,
            5.408695506048389e-05,
            0.0004011726414319128,
            0.0001017809336190112,
            0.000420117168687284,
            9.997739834943786e-05
        ],
        "align_select": "select t7.c9, Student_Enrolment.degree_program_id1",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List when transcripts are released. What are the date and details of the first one?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t12.c5, t12.c6",
            "select t9.c5, t9.c6",
            "select t10.c5, t10.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.002121412893757224,
            6.508046499220654e-05,
            0.002102965721860528,
            6.327087612589821e-05,
            0.0026723805349320173,
            6.376465171342716e-05,
            0.00216701440513134,
            6.292687612585723e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me when the first transcript is released? List the date and detail.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t8.c5, t9.c6",
            "select t12.c5, t12.c6",
            "select t9.c5, t9.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Courses Student_Enrolment_Courses",
            "Addresses Transcripts",
            "Courses",
            "Student_Enrolment",
            "Addresses Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.0019183224067091942,
            7.063657540129498e-05,
            0.002252955222502351,
            6.946736539248377e-05,
            0.0022962004877626896,
            7.006592932157218e-05,
            0.0027189645916223526,
            6.835778913227841e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the earliest release date of transcript, and give me more information about it.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t10.c5, t10.c6",
            "select t9.c5, t9.c6",
            "select t8.c5, t10.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.0007533676107414067,
            6.273634062381461e-05,
            0.0008538503898307681,
            6.416381802409887e-05,
            0.0008480488322675228,
            6.338283856166527e-05,
            0.0007341816672123969,
            6.104871863499284e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give me the earliest date of a transcript release? What details can you provide about this transcript?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5",
            "select t13.c5",
            "select t12.c5",
            "select t10.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Student_Enrolment",
            "Courses Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.002384628402069211,
            0.00030147971119731665,
            0.002787378616631031,
            0.00025280710542574525,
            0.002838429529219866,
            0.000264461908955127,
            0.002755925990641117,
            0.0002280772168887779
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please give me the earliest release date, and any additional information regarding the transcript?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t8.c5, t10.c6",
            "select t10.c5, t10.c6",
            "select t9.c5, t9.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.001421825378201902,
            0.00010276858665747568,
            0.0013073455775156617,
            0.00010527576523600146,
            0.001364325056783855,
            0.00010526763799134642,
            0.001522072940133512,
            0.00010900102643063292
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What was the earliest date of a transcript release? What details can you give about it?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t10.c5, t10.c6",
            "select t8.c5, t10.c6",
            "select t8.c5, t9.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.010643870569765568,
            5.916288500884548e-05,
            0.013900653459131718,
            5.913739005336538e-05,
            0.004383226856589317,
            5.837476419401355e-05,
            0.012995616532862186,
            5.985013194731437e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the earliest date that we will send out transcripts, and can you tell me any other details about those transcripts?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t12.c5, t12.c6",
            "select t10.c5, t10.c6",
            "select t8.c5, t8.c6",
            "select t9.c5, t9.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Student_Enrolment",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.02253098040819168,
            0.0023032703902572393,
            0.024061135947704315,
            0.0028460596222430468,
            0.018529796972870827,
            0.0016604671254754066,
            0.02541997842490673,
            0.002127081621438265
        ],
        "align_select": "select t12.c5, t12.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the number of released transcripts.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student_Enrolment_Courses.course_id",
            "select count(Student_Enrolment_Courses.student_course_id)",
            "select count(*), Student_Enrolment_Courses.student_course_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Addresses",
            "Transcripts Transcript_Contents",
            "Addresses Transcripts"
        ],
        "align_scores": [
            0.9933363199234009,
            6.78934738971293e-05,
            0.00015064235776662827,
            9.080446761799976e-05,
            0.00019625559798441827,
            7.544666004832834e-05,
            0.0001229637418873608,
            7.480911881430075e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me how many transcripts have been released.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student_Enrolment_Courses.course_id",
            "select count(*), Student_Enrolment_Courses.student_course_id",
            "select count(Student_Enrolment_Courses.student_course_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Addresses",
            "Addresses Transcripts",
            "Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.9930562376976013,
            7.766264025121927e-05,
            0.00015150468971114606,
            0.00010194227797910571,
            0.00013956832117401063,
            8.211798558477312e-05,
            0.0002723209618125111,
            9.358870011055842e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of transcripts released?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(Student_Enrolment_Courses.student_course_id)",
            "select count(*), Student_Enrolment_Courses.course_id",
            "select count(*), Student_Enrolment.semester_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Transcripts Transcript_Contents",
            "Addresses"
        ],
        "align_scores": [
            0.9912010431289673,
            7.240692502819002e-05,
            0.00022065684606786817,
            7.149485463742167e-05,
            0.00017470384773332626,
            9.970786777557805e-05,
            0.0001535026531200856,
            9.92325585684739e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "When did the last transcript arrive?",
        "gold_select": "select Transcripts.transcript_date",
        "select_candidates": [
            "select t8.c5",
            "select t12.c5",
            "select t10.c5",
            "select t11.c3"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.001254651928320527,
            6.479017611127347e-05,
            0.0011859338264912367,
            6.547181692440063e-05,
            0.0011918918462470174,
            6.45803811494261e-05,
            0.000840224209241569,
            6.571564154000953e-05
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When did the latest transcript come out?",
        "gold_select": "select Transcripts.transcript_date",
        "select_candidates": [
            "select t10.c5",
            "select t9.c5",
            "select t8.c5",
            "select max(t10.c5)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcript_Contents",
            "Transcripts",
            "Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0016357157146558166,
            6.403239967767149e-05,
            0.001887545920908451,
            6.50599249638617e-05,
            0.0017413301393389702,
            6.461759039666504e-05,
            0.00022756373800802976,
            7.071367872413248e-05
        ],
        "align_select": "select t10.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "In terms of release dates, when was the most recent transcript released?",
        "gold_select": "select Transcripts.transcript_date",
        "select_candidates": [
            "select max(t8.c6)",
            "select max(t9.c6)",
            "select max(t8.c5)",
            "select max(t10.c6)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Transcripts Transcript_Contents",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0003770850016735494,
            0.00016507205145899206,
            0.00044838720350526273,
            0.00020330326515249908,
            0.00039734115125611424,
            0.00016993573808576912,
            0.0004581624234560877,
            0.0002142747543985024
        ],
        "align_select": "select max(t8.c6)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many times at most can a course enrollment result show in different transcripts? Also list the course enrollment id for each time.",
        "gold_select": "select count(*), Transcript_Contents.student_course_id",
        "select_candidates": [
            "select count(*), Transcript_Contents.student_course_id",
            "select count(*), Student_Enrolment_Courses.student_course_id",
            "select count(*), Students.student_id",
            "select count(*), Student_Enrolment.student_enrolment_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Student_Enrolment",
            "Semesters Student_Enrolment",
            "Transcript_Contents",
            "Students Student_Enrolment_Courses",
            "Semesters Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.005225180182605982,
            0.02078559622168541,
            0.14424005150794983,
            0.04292568191885948,
            0.000649302382953465,
            0.0004225668963044882,
            0.0007241194834932685,
            0.00046737308730371296
        ],
        "align_select": "select count(*), Transcript_Contents.student_course_id",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many times at most can the same course enrollment result be shown on different transcripts? Also, list the course enrollment id.",
        "gold_select": "select count(*), Transcript_Contents.student_course_id",
        "select_candidates": [
            "select count(*), Students.student_id",
            "select count(*), Transcript_Contents.student_course_id",
            "select count(*), t12.c0",
            "select count(*), Student_Enrolment_Courses.student_course_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Student_Enrolment",
            "Semesters Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Students Student_Enrolment",
            "Semesters Student_Enrolment_Courses",
            "Transcript_Contents"
        ],
        "align_scores": [
            0.0003739522653631866,
            0.0007880601333454251,
            0.0720260813832283,
            0.02565820887684822,
            0.00886395014822483,
            0.006231814157217741,
            0.08742418885231018,
            0.442330926656723
        ],
        "align_select": "select count(*), Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please show me the course enrollment result number of time at most in a single transcript, including that course enrollment ids must match.",
        "gold_select": "select count(*), Transcript_Contents.student_course_id",
        "select_candidates": [
            "select count(*)",
            "select count(*), Sections.section_id",
            "select count(*), Semesters.semester_id",
            "select count(*), Student_Enrolment_Courses.student_course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Student_Enrolment",
            "Transcripts",
            "Semesters Student_Enrolment",
            "Transcript_Contents",
            "Students Student_Enrolment_Courses",
            "Semesters Student_Enrolment_Courses",
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.6553173065185547,
            0.00013085648242849857,
            0.0004976750933565199,
            0.0001063555246219039,
            0.0005724920192733407,
            8.35288519738242e-05,
            0.11609510332345963,
            0.00016245563165284693
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "At most how many times can a course enrollment results be shown in a transcript? Give the number plus corresponding course enrollment id for each record.",
        "gold_select": "select count(*), Transcript_Contents.student_course_id",
        "select_candidates": [
            "select count(*), Students.student_id",
            "select count(*), Student_Enrolment_Courses.student_course_id",
            "select count(*), Student_Enrolment.student_enrolment_id",
            "select count(*), Transcript_Contents.student_course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Students Student_Enrolment_Courses",
            "Transcript_Contents",
            "Semesters Student_Enrolment_Courses",
            "Student_Enrolment",
            "Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.0004048821283504367,
            0.0007661905838176608,
            0.27562952041625977,
            0.25026705861091614,
            0.0005258189048618078,
            0.0010289268102496862,
            0.03265003487467766,
            0.001995460595935583
        ],
        "align_select": "select count(*), Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the maximum number of times a course appears in different transcriptions and what is that course's enrollment id?",
        "gold_select": "select count(*), Transcript_Contents.student_course_id",
        "select_candidates": [
            "select max(Student_Enrolment_Courses.student_course_id), Student_Enrolment_Courses.student_course_id",
            "select max(t8.c6), Student_Enrolment_Courses.student_course_id",
            "select max(Student_Enrolment_Courses.student_course_id), Student_Enrolment_Courses.course_id",
            "select max(Student_Enrolment.student_enrolment_id), Student_Enrolment.semester_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcript_Contents",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Student_Enrolment_Courses",
            "Transcript_Contents",
            "Semesters Student_Enrolment",
            "Courses Sections",
            "Semesters Student_Enrolment_Courses",
            "Transcripts",
            "Sections Student_Enrolment"
        ],
        "align_scores": [
            0.00013767431664746255,
            7.437125168507919e-05,
            0.0002036445221165195,
            0.00010625009599607438,
            0.00018077109416481107,
            8.37879633763805e-05,
            0.00010488277621334419,
            7.72998682805337e-05
        ],
        "align_select": "select max(Student_Enrolment_Courses.student_course_id), Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the maximum number of times that a course appears in transcript orders and its enrollment id.",
        "gold_select": "select count(*), Transcript_Contents.student_course_id",
        "select_candidates": [
            "select Student_Enrolment.degree_program_id, max(Student_Enrolment.semester_id)",
            "select max(Student_Enrolment_Courses.student_course_id), Student_Enrolment.semester_id",
            "select Student_Enrolment_Courses.course_id, max(Student_Enrolment_Courses.student_enrolment_id)",
            "select Student_Enrolment_Courses.course_id, max(Transcripts.other_details)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcript_Contents",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Student_Enrolment Sections Semesters",
            "Student_Enrolment Sections Students",
            "Student_Enrolment Courses Student_Enrolment",
            "Student_Enrolment Sections",
            "Student_Enrolment Sections Student_Enrolment",
            "Courses Student_Enrolment Transcripts"
        ],
        "align_scores": [
            0.00012863958545494825,
            8.300440094899386e-05,
            9.890343790175393e-05,
            8.066591544775292e-05,
            0.003028100123628974,
            0.0001078741333913058,
            0.0007915565511211753,
            8.833147876430303e-05
        ],
        "align_select": "select Student_Enrolment.degree_program_id, max(Student_Enrolment.semester_id)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How can I see the date of the transcript that shows the least number of results and list the result id?",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t8.c5, t8.c6",
            "select t7.c5, Student_Enrolment.student_enrolment_id",
            "select t10.c5, Transcript_Contents.student_course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.00037176127079874277,
            9.534806304145604e-05,
            0.00019780793809331954,
            6.65597544866614e-05,
            0.0003359382681082934,
            9.081815369427204e-05,
            0.0003405552706681192,
            0.00011003656982211396
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which transcript from the list has the least number of results? Also, can you list the transcript id, transcript date, and transcript id?",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Student_Enrolment_Courses.student_course_id",
            "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, t8.c3",
            "select t8.c5, t8.c6, Student_Enrolment_Courses.student_course_id",
            "select t8.c5, t8.c6, t8.c7"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.00016049621626734734,
            7.703687151661143e-05,
            0.00017333906725980341,
            8.313225407619029e-05,
            0.00014433360775001347,
            8.66580885485746e-05,
            0.00023049925221130252,
            6.593842408619821e-05
        ],
        "align_select": "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the document date and transcript id of the transcript showing the least number of results.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t12.c5, t12.c0",
            "select t9.c5, Transcripts.transcript_id",
            "select t12.c3, t12.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents"
        ],
        "align_scores": [
            0.00026553848874755204,
            0.00011437818466220051,
            0.00014416634803637862,
            6.834878877270967e-05,
            0.00032342105987481773,
            8.441632962785661e-05,
            0.0001584519341122359,
            6.928695074748248e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the transcript which has the least number of results. List the transcript id, transcript date and transcript id.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Student_Enrolment_Courses.student_course_id",
            "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, t8.c3",
            "select t8.c5, t8.c6, Student_Enrolment_Courses.student_course_id",
            "select t8.c5, t8.c6, t8.c7"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Semesters Student_Enrolment",
            "Transcripts Transcript_Contents",
            "Student_Enrolment_Courses Transcripts"
        ],
        "align_scores": [
            0.00013143861724529415,
            6.642374501097947e-05,
            0.00013265229063108563,
            7.732427184237167e-05,
            0.00010875433508772403,
            8.027135481825098e-05,
            0.00017618080892134458,
            5.709926335839555e-05
        ],
        "align_select": "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the date of the transcript showing the least number of records? Also list its id.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t8.c5, t8.c6",
            "select t12.c5, t12.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Semesters Student_Enrolment_Courses",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.0003413111553527415,
            8.76866834005341e-05,
            0.00023577138199470937,
            8.417532808380201e-05,
            0.0001945953699760139,
            5.290877015795559e-05,
            0.00014698132872581482,
            5.908254024689086e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the transcript for the least number of search results. Please enter the date and transcript id.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t8.c5, t8.c6",
            "select t7.c5, Student_Enrolment.student_enrolment_id",
            "select t7.c5, t7.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.0002207721845479682,
            0.00010805852070916444,
            0.0002634597767610103,
            6.526672223117203e-05,
            0.00020782402134500444,
            8.379507198696956e-05,
            0.0002540834539104253,
            6.309097079792991e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you find the semester when both Master and Bachelor students get enrolled in?",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Semesters.semester_name",
            "select Semesters.semester_name, Degree_Programs.degree_summary_name",
            "select Semesters.semester_name, Semesters.semester_description",
            "select Semesters.semester_name, Students.date_first_registered"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Semesters Student_Enrolment",
            "Departments Degree_Programs Semesters Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Semesters Students Student_Enrolment",
            "Addresses Departments Degree_Programs Semesters Student_Enrolment",
            "Addresses Degree_Programs Semesters Student_Enrolment",
            "Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9890101552009583,
            0.06977047026157379,
            0.00018845357408281416,
            0.00035672367084771395,
            0.0006622528890147805,
            0.0008034135098569095,
            0.0003295866772532463,
            0.0006877699051983654
        ],
        "align_select": "select Semesters.semester_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the semester when both Master and Bachelor students were enrolled.",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Student_Enrolment.degree_program_id",
            "select Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_name",
            "select Semesters.semester_name",
            "select Student_Enrolment.degree_program_id, Departments.department_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Degree_Programs Semesters Students Student_Enrolment",
            "Addresses Departments Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Semesters Student_Enrolment",
            "Degree_Programs Departments Student_Enrolment"
        ],
        "align_scores": [
            0.061929572373628616,
            0.015819581225514412,
            0.0002117201656801626,
            0.00025108669069595635,
            0.9949150085449219,
            0.04049285873770714,
            0.0002628150105010718,
            0.00024278569617308676
        ],
        "align_select": "select Semesters.semester_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "When were the Bachelor and Master students enrolled in? Give me semester when both degree were conferred to them.",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Semesters.semester_name",
            "select Students.date_first_registered",
            "select Semesters.semester_name, Semesters.semester_description",
            "select Students.date_first_registered, Students.date_left"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Departments Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Sections Students Student_Enrolment"
        ],
        "align_scores": [
            0.9430292248725891,
            0.0010964329121634364,
            0.9877817630767822,
            0.023040693253278732,
            0.0004394349525682628,
            0.00012353209604043514,
            0.0009046501363627613,
            0.00010321564332116395
        ],
        "align_select": "select Semesters.semester_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the name, semester ID, enrolled students, who are at least Master's and Bachelor's.",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.date_first_registered",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.date_first_registered, Students.date_left",
            "select Students.first_name, Students.middle_name, Students.ssn"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Students",
            "Departments Degree_Programs Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Degree_Programs Semesters Students Student_Enrolment"
        ],
        "align_scores": [
            0.00015027222980279475,
            0.0001762077008606866,
            0.0004111570888198912,
            0.00028986530378460884,
            0.00010824922355823219,
            0.00016665039584040642,
            0.020060114562511444,
            0.028672249987721443
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.date_first_registered",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the semester information for both Masters and Bachelors.",
        "gold_select": "select distinct Student_Enrolment.semester_id",
        "select_candidates": [
            "select Semesters.semester_name, Semesters.semester_description",
            "select Semesters.semester_name",
            "select Semesters.semester_name, Semesters.other_details",
            "select Semesters.semester_name, Semesters.semester_description, Semesters.other_details"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Semesters",
            "Semesters Student_Enrolment_Courses",
            "Semesters Student_Enrolment",
            "Semesters Transcripts",
            "Semesters Students",
            "Degree_Programs Semesters",
            "Sections Semesters"
        ],
        "align_scores": [
            0.0006007012561894953,
            0.00013386449427343905,
            0.9961077570915222,
            0.013770755380392075,
            0.00028950432897545397,
            0.00010006743832491338,
            0.0008706274093128741,
            0.00013036727614235133
        ],
        "align_select": "select Semesters.semester_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "How many address do the students live at?",
        "gold_select": "select count(distinct Students.current_address_id)",
        "select_candidates": [
            "select count(distinct Addresses.address_id)",
            "select count(*)",
            "select count(distinct Addresses.other_address_details)",
            "select count(distinct Addresses.line_2)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Addresses Students",
            "Students",
            "Students Student_Enrolment_Courses",
            "Addresses Students Student_Enrolment_Courses",
            "Courses Students",
            "Semesters Students",
            "Degree_Programs Students",
            "Addresses Students Transcripts"
        ],
        "align_scores": [
            0.01841018907725811,
            6.564924115082249e-05,
            0.9837561845779419,
            6.400883285095915e-05,
            0.37039777636528015,
            5.8040106523549184e-05,
            0.0014955300139263272,
            6.0892485635122284e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the total number of current resident addresses of the students.",
        "gold_select": "select count(distinct Students.current_address_id)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Students.current_address_id)",
            "select count(Students.current_address_id)",
            "select count(current_Students.current_address_id)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Addresses Students",
            "Semesters Students",
            "Degree_Programs Students",
            "Sections Students",
            "Courses Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9858249425888062,
            9.781534026842564e-05,
            0.5548206567764282,
            6.557942106155679e-05,
            0.08447383344173431,
            9.691465675132349e-05,
            0.028067609295248985,
            9.22346516745165e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the list of student addresses by address type?",
        "gold_select": "select count(distinct Students.current_address_id)",
        "select_candidates": [
            "select Addresses.other_address_details",
            "select Addresses.other_address_details, Student_Enrolment.degree_program_id",
            "select Addresses.other_address_details, Student_Enrolment_Courses.course_id",
            "select Addresses.address_id, Addresses.other_address_details"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Addresses Transcripts",
            "Addresses"
        ],
        "align_scores": [
            0.9245859384536743,
            0.0013519811909645796,
            0.00021576542349066585,
            0.00015681673539802432,
            0.0002985462488140911,
            0.00016520936333108693,
            0.00022839994926471263,
            0.00012462328595574945
        ],
        "align_select": "select Addresses.other_address_details",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are all the different addresses with students at their residence?",
        "gold_select": "select count(distinct Students.current_address_id)",
        "select_candidates": [
            "select distinct Addresses.other_address_details",
            "select distinct Addresses.line_1, Addresses.other_address_details",
            "select distinct Addresses.address_id",
            "select distinct Students.permanent_address_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Semesters Students",
            "Addresses Students Transcripts",
            "Addresses Students Student_Enrolment",
            "Courses Students",
            "Departments Students",
            "Degree_Programs Students"
        ],
        "align_scores": [
            0.6425111889839172,
            0.00017086805019062012,
            0.0008198095019906759,
            6.994269642746076e-05,
            0.4283437728881836,
            0.0007530797738581896,
            0.3505502939224243,
            0.0005082807620055974
        ],
        "align_select": "select distinct Addresses.other_address_details",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In which areas have student reside at?",
        "gold_select": "select count(distinct Students.current_address_id)",
        "select_candidates": [
            "select distinct Addresses.city, Addresses.zip_postcode",
            "select distinct Addresses.city",
            "select distinct Addresses.line_1, Addresses.line_2",
            "select distinct Addresses.zip_postcode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Students Student_Enrolment",
            "Addresses Students Transcripts",
            "Addresses Semesters Students",
            "Addresses Transcripts"
        ],
        "align_scores": [
            0.0018547765212133527,
            0.0004945070832036436,
            0.05181804299354553,
            0.0024126137141138315,
            0.0011619383003562689,
            0.0003186851681675762,
            0.7365894913673401,
            0.00243253237567842
        ],
        "align_select": "select distinct Addresses.zip_postcode",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the list of all the different addresses where students live.",
        "gold_select": "select count(distinct Students.current_address_id)",
        "select_candidates": [
            "select distinct Addresses.other_address_details",
            "select distinct Addresses.line_1, Addresses.other_address_details",
            "select distinct Addresses.line_1, Addresses.line_2",
            "select distinct Addresses.address_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Students Transcripts",
            "Courses Students",
            "Departments Students",
            "Addresses Students Student_Enrolment",
            "Students",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.8018280267715454,
            0.00011757115134969354,
            0.0008090779301710427,
            6.61604426568374e-05,
            0.013885478489100933,
            7.445150549756363e-05,
            0.17547063529491425,
            0.00021731742890551686
        ],
        "align_select": "select distinct Addresses.other_address_details",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give the names of the various addresses where students reside.",
        "gold_select": "select count(distinct Students.current_address_id)",
        "select_candidates": [
            "select distinct Addresses.line_1, Addresses.other_address_details",
            "select distinct Addresses.other_address_details",
            "select distinct Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Students Transcripts",
            "Addresses Semesters Students",
            "Addresses Students Student_Enrolment",
            "Addresses Transcripts"
        ],
        "align_scores": [
            0.0010320215951651335,
            6.394562660716474e-05,
            0.7578950524330139,
            0.0001243821607204154,
            0.004102498292922974,
            6.347187445499003e-05,
            0.003519310848787427,
            7.036255556158721e-05
        ],
        "align_select": "select distinct Addresses.other_address_details",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the list of all the student details in reversed lexicographical order?",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select Students.other_student_details",
            "select Students.current_address_id, Students.permanent_address_id",
            "select Students.last_name, Students.cell_mobile_number",
            "select Students.date_first_registered, Students.date_left"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students",
            "Courses Students",
            "Sections Students"
        ],
        "align_scores": [
            0.9823169708251953,
            0.9823169708251953,
            0.0018969454104080796,
            0.0018969454104080796,
            0.0010002851486206055,
            0.0010002851486206055,
            0.001418775413185358,
            0.001418775413185358
        ],
        "align_select": "select Students.other_student_details",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you give me other information on the students in reverse alphabetical order?",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select *",
            "select Students.current_address_id3, Students.current_address_id4",
            "select Students.other_student_details",
            "select Student_Enrolment_Courses.course_id, Students.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment_Courses",
            "Semesters Students"
        ],
        "align_scores": [
            0.9866855144500732,
            0.0002782006631605327,
            0.0005509596667252481,
            0.00013135756307747215,
            0.9952644109725952,
            0.0003092946426477283,
            0.0003031484957318753,
            0.0002499721886124462
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you tell me some more details about students in reverse alphabetical order?",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select Students.other_student_details",
            "select Students.current_address_id3, Students.current_address_id4",
            "select Students.other_student_details, Students.first_name",
            "select Students.last_name, Students.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students",
            "Semesters Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9922917485237122,
            0.9922917485237122,
            0.001395763480104506,
            0.001395763480104506,
            0.00020997755927965045,
            0.00020997755927965045,
            0.0016478827456012368,
            0.0016478827456012368
        ],
        "align_select": "select Students.other_student_details",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What additional information can you provide for the students in reverse alphabetical order?",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select *",
            "select Students.current_address_id3, Students.current_address_id4",
            "select Student_Enrolment_Courses.course_id, Students.first_name",
            "select Student_Enrolment_Courses.course_id, Students.permanent_address_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment",
            "Students",
            "Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment",
            "Semesters Students Student_Enrolment_Courses",
            "Semesters Students"
        ],
        "align_scores": [
            0.9668387174606323,
            0.9668387174606323,
            0.0020666667260229588,
            0.0020666667260229588,
            0.00024959398433566093,
            0.00024959398433566093,
            0.00022587418789044023,
            0.00022587418789044023
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "With respect to the students, please give me some more details in reverse alphabetical order.",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select Students.other_student_details",
            "select Students.current_address_id3, Students.current_address_id4",
            "select Students.other_student_details, Students.first_name",
            "select Students.last_name, Students.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment",
            "Semesters Students Student_Enrolment_Courses",
            "Semesters Students",
            "Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.9939290285110474,
            0.9939290285110474,
            0.002401197561994195,
            0.002401197561994195,
            0.00019834678096231073,
            0.00019834678096231073,
            0.0013784334296360612,
            0.0013784334296360612
        ],
        "align_select": "select Students.other_student_details",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you give me some other details about students in reverse alphabetical order?",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select Students.other_student_details",
            "select Students.last_name, Students.first_name",
            "select Students.current_address_id, Students.last_name",
            "select Students.date_first_registered, Students.date_left"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses",
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9942693710327148,
            0.9942693710327148,
            0.0010327749187126756,
            0.0010327749187126756,
            0.0002086603344650939,
            0.0002086603344650939,
            0.0044517130590975285,
            0.0044517130590975285
        ],
        "align_select": "select Students.other_student_details",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Give me the description of the section h.",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_description, Sections.other_details",
            "select Sections.section_description, Sections.section_name",
            "select Sections.section_description, t4.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Sections",
            "Courses Sections",
            "Sections Transcripts",
            "Sections Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9961525797843933,
            8.027718286029994e-05,
            0.00019422573677729815,
            5.5091219110181555e-05,
            0.00012345670256763697,
            5.652110849041492e-05,
            0.0002648156660143286,
            6.798528193030506e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need help describing the section named 'h'.",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_description, Sections.section_name",
            "select Sections.course_id, Sections.section_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Courses Departments Sections",
            "Addresses Departments Sections"
        ],
        "align_scores": [
            0.9966976642608643,
            8.514279033988714e-05,
            0.00016980567306745797,
            6.610248965444043e-05,
            0.00016538839554414153,
            6.76140989526175e-05,
            0.00015011026698630303,
            6.20852952124551e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Describe the section named h.",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_name, Sections.section_description",
            "select Sections.course_id, Sections.section_description",
            "select Sections.section_description, Sections.section_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Departments Sections",
            "Addresses Courses Departments Sections",
            "Addresses Sections",
            "Addresses Courses Sections"
        ],
        "align_scores": [
            0.9965882301330566,
            8.201929449569434e-05,
            0.00015238107880577445,
            6.142491474747658e-05,
            0.00014018960064277053,
            5.7391538575757295e-05,
            0.00012984313070774078,
            5.763422814197838e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Describe the section named 'h'.",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_name, Sections.section_description",
            "select Sections.course_id, Sections.section_description",
            "select Sections.section_description, Sections.section_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Departments Sections",
            "Addresses Courses Departments Sections",
            "Addresses Sections",
            "Addresses Courses Sections"
        ],
        "align_scores": [
            0.9966865181922913,
            9.193838195642456e-05,
            0.00014911877224221826,
            6.41876831650734e-05,
            0.00013838795712217689,
            6.069578739698045e-05,
            0.00013072877482045442,
            6.34326643194072e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first name of students who have cell phone number 09700166582 and live permanently in country Haiti.",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select Students.first_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.last_name, Addresses.country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment"
        ],
        "align_scores": [
            0.9472119212150574,
            0.2008524090051651,
            0.00019950985733885318,
            0.0001545543927932158,
            0.00022573661408387125,
            0.00013194518396630883,
            0.00016666915325913578,
            0.00010977581405313686
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the first names of the students who permanently live in the country Haiti and have the cell phone number 09700166582.",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select Students.first_name, Students.last_name",
            "select Students.first_name, Students.last_name, Students.cell_mobile_number",
            "select Students.first_name, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment",
            "Addresses Courses Students",
            "Addresses Semesters Students",
            "Addresses Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9099090695381165,
            0.005692115984857082,
            0.0002651195682119578,
            0.00015223103400785476,
            0.00015722893294878304,
            9.569090616423637e-05,
            0.00036745937541127205,
            0.00011142844596179202
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the first names of the students who permanently live in the country Haiti or have the cell phone number 09700166582?",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select Students.first_name, Students.last_name",
            "select Students.first_name, Students.last_name, Students.cell_mobile_number",
            "select Students.student_id, Students.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Semesters Students",
            "Addresses Courses Students",
            "Addresses Sections Students",
            "Addresses Degree_Programs Students"
        ],
        "align_scores": [
            0.8257346749305725,
            0.9852633476257324,
            0.0002782237424980849,
            0.0001828109088819474,
            0.0001622928975848481,
            0.00013822915207128972,
            0.0002038195525528863,
            0.00015801227709744126
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the first names of the students who permanently live in the country Haiti or whose cell phone number is 09700166582.",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select Students.student_id, Students.first_name",
            "select Students.first_name, Students.last_name",
            "select Addresses.country, Students.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Semesters Students",
            "Addresses Sections Students",
            "Addresses Students Student_Enrolment"
        ],
        "align_scores": [
            0.8740273714065552,
            0.9853744506835938,
            0.0001787952787708491,
            0.0001467281545046717,
            0.00018694788741413504,
            0.00012158361641922966,
            0.0006746002472937107,
            0.0003637235495261848
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the first names of the students living in Haiti permanently/having 09700166582 as their cell mobile number.",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select Students.first_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.last_name, Students.cell_mobile_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment",
            "Addresses Courses Students",
            "Addresses Semesters Students",
            "Addresses Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9244503974914551,
            0.0009874770184978843,
            0.0001798661978682503,
            8.290337427752092e-05,
            0.00032619686680845916,
            7.726773765170947e-05,
            0.00016870390390977263,
            7.297337288036942e-05
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the first names of the students living in Haiti permanently or having the cell phone number 09700166582.",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select Students.first_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.last_name, Students.cell_mobile_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Semesters Students",
            "Addresses Courses Students"
        ],
        "align_scores": [
            0.9191665649414062,
            0.9789155125617981,
            0.00021194355213083327,
            0.000149350002175197,
            0.0003912989632226527,
            0.00021758340881206095,
            0.0001299188006669283,
            0.00012761417019646615
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the countries which do not play cartoons written by Todd Casey.",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Written_by",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.986856997013092,
            0.9884566068649292,
            0.0004290399083402008,
            0.00046941477921791375,
            0.03797154128551483,
            0.014904691837728024,
            0.00020950939506292343,
            0.00028130042483098805
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries that have no cartoon series written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Written_by",
            "select TV_Channel.Country, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9865083694458008,
            0.9865083694458008,
            0.00049412134103477,
            0.00049412134103477,
            0.00023744185455143452,
            0.00023744185455143452,
            0.00031318500987254083,
            0.00031318500987254083
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the list of countries that are not playing cartoon movies written by Todd Casey.",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.Country, Cartoon.Written_by",
            "select TV_Channel.Country, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9801990389823914,
            0.006927213165909052,
            0.0002680170873645693,
            0.00016577032511122525,
            0.0005232903640717268,
            0.00023288857482839376,
            0.00015348101442214102,
            0.0001326212950516492
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find all the countries which does not play cartoons written by Todd Casey.",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Written_by",
            "select TV_Channel.Country, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9898137450218201,
            0.992805540561676,
            0.03993815556168556,
            0.014497454278171062,
            0.0006657340563833714,
            0.0006820487324148417,
            0.0001699639396974817,
            0.00020466317073442042
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which is the TV channel which provides high definition TV? What is the package choice and series name?",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.id, TV_Channel.series_name, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9873091578483582,
            0.0001817324955482036,
            0.9890367388725281,
            0.00015573386917822063,
            0.00026269478257745504,
            7.676699897274375e-05,
            0.0008061355329118669,
            0.00010500736243557185
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find the package choice and series name of the TV channel that has high definition TV?",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Pay_per_view_PPV, TV_Channel.series_name",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9896401166915894,
            0.00017642539751250297,
            0.9901300072669983,
            0.0001521114754723385,
            0.9255383014678955,
            0.00021782107069157064,
            0.000342039653332904,
            9.080204472411424e-05
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the package option and series name of the TV station that has high definition TV.",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.id, TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.series_name, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9725239872932434,
            0.0001154696656158194,
            0.00019438026356510818,
            7.043989171506837e-05,
            0.9820386171340942,
            0.00012046938354615122,
            0.00017298343300353736,
            6.668554851785302e-05
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the package selection and series name for the TV channel which has high definition TV?",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.series_name",
            "select TV_Channel.Pay_per_view_PPV, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9888002872467041,
            0.0001620264956727624,
            0.989538311958313,
            0.00014805092359893024,
            0.00029976980295032263,
            8.483222336508334e-05,
            0.9793789386749268,
            0.0001627061574254185
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the package option and series name of the TV channel that has high definition TV?",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.id, TV_Channel.series_name",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9871188402175903,
            0.00012256071204319596,
            0.9886990189552307,
            0.00013159275113139302,
            0.0007376517751254141,
            0.00013316074910108,
            0.0003248611174058169,
            8.705897198524326e-05
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me a list of each language and the number of TV channels that use it",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country",
            "select TV_Channel.Language.c3, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9957642555236816,
            0.00021022195869591087,
            0.0001306929043494165,
            9.475808474235237e-05,
            0.0009358208626508713,
            0.00014770377310924232,
            0.00014320510672405362,
            0.00010214964277110994
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you list each language along with the number of channels which use it?",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country",
            "select TV_Channel.Language.c3, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.995633065700531,
            0.00021612615091726184,
            0.00014630748773925006,
            0.00011394252942409366,
            0.0015443438896909356,
            0.0001756286364980042,
            0.0001603730779606849,
            0.00011126430763397366
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you list each language, and the number of tv channels using it?",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country",
            "select TV_Channel.Language.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9959371089935303,
            0.00019652899936772883,
            0.9959371089935303,
            0.00019652899936772883,
            0.00013240585394669324,
            0.00010392285912530497,
            0.000890555907972157,
            0.00016709401097614318
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please list the languages and the number of TV channels that use them.",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country",
            "select TV_Channel.Language.c3, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9960116147994995,
            0.00021993157861288637,
            0.0001310517982346937,
            9.234342724084854e-05,
            0.0012263644021004438,
            0.00017548435425851494,
            0.00014053854101803154,
            0.00010369884694227949
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Where can I find the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "gold_select": "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.Pixel_aspect_ratio_PAR.c5, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9633028507232666,
            0.0002069709444185719,
            0.00020403497910592705,
            8.686301589477807e-05,
            0.0003972890553995967,
            0.00011234919656999409,
            0.9756109118461609,
            0.00017466788995079696
        ],
        "align_select": "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find the pixel aspect ratio and country of origin for all TV channels not using English?",
        "gold_select": "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.Pixel_aspect_ratio_PAR.c5, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9725897312164307,
            0.00018508061475586146,
            0.00019084173254668713,
            8.149639324983582e-05,
            0.00041796427103690803,
            0.00010468065011082217,
            0.9792482852935791,
            0.0001510808215243742
        ],
        "align_select": "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the episode for the TV series named 'Sky Radio'?",
        "gold_select": "select TV_series.Episode",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_series.Episode, TV_Channel.Country",
            "select TV_series.Episode, TV_Channel.series_name",
            "select TV_series.Episode, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9942747950553894,
            7.832368282834068e-05,
            0.00013657611270900816,
            6.0082362324465066e-05,
            0.00012986799993086606,
            6.264827243285254e-05,
            0.00023931007308419794,
            6.0831491282442585e-05
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What episode is the TV series named 'Sky Radio'?",
        "gold_select": "select TV_series.Episode",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_series.Episode, TV_Channel.Country",
            "select TV_series.Episode, TV_Channel.series_name",
            "select TV_series.Episode, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9939498901367188,
            6.882407615194097e-05,
            0.0001267444167751819,
            5.844812767463736e-05,
            0.00012434161908458918,
            5.9540059737628326e-05,
            0.00023304764181375504,
            5.811631490360014e-05
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the titles of cartoons listed them in alphabetical order.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, t2.c9",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, t2.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9716331958770752,
            0.9716331958770752,
            0.0012723584659397602,
            0.0012723584659397602,
            0.0001292305823881179,
            0.0001292305823881179,
            0.0010423249332234263,
            0.0010423249332234263
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all the cartoon titles in alphabetical order.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Written_by",
            "select Cartoon.Title, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9949636459350586,
            0.9949636459350586,
            0.0002879660460166633,
            0.0002879660460166633,
            0.0002580875880084932,
            0.0002580875880084932,
            0.00013406631478574127,
            0.00013406631478574127
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List cartoon titles in alphabetical order.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9965168237686157,
            0.00047901016660034657,
            0.00023998091637622565,
            0.0001337634603260085,
            0.00012990615505259484,
            0.00017993582878261805,
            0.00022498324688058347,
            0.00013710001076105982
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the titles of all cartoons listed in alphabetical order?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9958546161651611,
            0.9958546161651611,
            0.0001388977252645418,
            0.0001388977252645418,
            0.00020348480029497296,
            0.00020348480029497296,
            0.00019749907369259745,
            0.00019749907369259745
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list cartoon titles in alphabetical order?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Written_by",
            "select Cartoon.Title, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.995422899723053,
            0.0003378491092007607,
            0.0003173913573846221,
            0.00014065341383684427,
            0.00029394731973297894,
            0.00014897904475219548,
            0.0001406078226864338,
            0.00017303027561865747
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me all the cartoon titles in the list, sorted alphabetically.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, t2.c8",
            "select Cartoon.Title, t2.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.991072952747345,
            0.0003198210324626416,
            0.00012945949856657535,
            0.00013221989502198994,
            0.00091881665866822,
            0.00021950501832179725,
            0.0012043965980410576,
            0.00022401595197152346
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the cartoon titles listed alphabetically?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.995684027671814,
            0.00023540412075817585,
            0.00046242898679338396,
            0.00014538559480570257,
            0.00014227384235709906,
            9.314157796325162e-05,
            0.00033074943348765373,
            0.00014746945817023516
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you show me the cartoon names of cartoons sorted in order of ascending title?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.id",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9952865242958069,
            0.00026108225574716926,
            0.00014118339458946139,
            0.00014011023449711502,
            0.00015969783999025822,
            9.801282430998981e-05,
            0.00013779147411696613,
            0.00012775771028827876
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Sort all the cartoon titles alphabetically.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9956806898117065,
            0.0005454932106658816,
            0.00014824401296209544,
            0.00017951650079339743,
            0.00032776989974081516,
            0.00011325089872116223,
            0.00031667263829149306,
            0.00012450688518583775
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list all cartoons directed by \"Ben Jones\"?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.id, Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.id, Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9948203563690186,
            0.0001382575137540698,
            0.00021470974024850875,
            6.671767187071964e-05,
            0.00013694321387447417,
            6.672307790722698e-05,
            0.00022878441086504608,
            6.607514660572633e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list all cartoons directed by Ben Jones?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.id, Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.id, Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9942726492881775,
            0.0001891832798719406,
            0.0002235288411611691,
            7.061354699544609e-05,
            0.0001402595516992733,
            6.819110421929508e-05,
            0.0002449772146064788,
            6.71761081321165e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the names of all cartoons directed by Ben Jones?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9919346570968628,
            0.00020660521113313735,
            0.0003026457270607352,
            6.518499867524952e-05,
            0.00016881655028555542,
            5.671877443091944e-05,
            0.00019703543512150645,
            5.677581430063583e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the names of all cartoons directed by Ben Jones?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.990730345249176,
            0.00019068349502049387,
            0.00028516098973341286,
            6.295718776527792e-05,
            0.00016660049732308835,
            5.557434633374214e-05,
            0.00019225098367314786,
            5.5706150305923074e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list the names of all cartoon movies directed by Ben Jones.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Production_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9857267737388611,
            0.00016164503176696599,
            0.00028730405028909445,
            6.301352550508454e-05,
            0.00018554850248619914,
            5.617687929770909e-05,
            0.00021132467372808605,
            6.35922042420134e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "From where many cartoon scripts were written by Joseph Kuhr?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select Cartoon.Channel",
            "select Cartoon.Directed_by",
            "select Cartoon.Channel, t2.c7",
            "select Cartoon.Production_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.0025968465488404036,
            0.0005951165803708136,
            0.44843870401382446,
            0.011459658853709698,
            0.0005716820014640689,
            0.00018784988787956536,
            0.8908754587173462,
            0.03908469155430794
        ],
        "align_select": "select Cartoon.Production_code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the total number of cartoons written by Joseph Kuhr.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Title",
            "select count(*), Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9907442927360535,
            0.0003227184934075922,
            0.0002838846994563937,
            0.00015516763960476965,
            0.0002461861295159906,
            0.0005350548308342695,
            0.00027768395375460386,
            0.0015234934398904443
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of cartoones written by Joseph Kuhr?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Title",
            "select count(*), Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9811438322067261,
            0.00028297732933424413,
            0.00026757438899949193,
            0.0001510765141574666,
            0.00026073248591274023,
            0.0005063252174295485,
            0.00023043641704134643,
            0.000865924870595336
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of cartoons written by Joseph Kuhr?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Title",
            "select count(*), Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9909074306488037,
            0.0002597504644654691,
            0.00027636068989522755,
            0.0001582284749019891,
            0.00025624819681979716,
            0.0005760454223491251,
            0.00024341313110198826,
            0.0007888824911788106
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the number of cartoon-books written by Joseph Kuhr.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Written_by",
            "select count(*), Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9906609654426575,
            0.0003487639769446105,
            0.00026754377176985145,
            0.00023325526854023337,
            0.0002764165692497045,
            0.0026089586317539215,
            0.00023732100089546293,
            0.0009051020024344325
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all cartoon titles and their directors sorted by original air date.",
        "gold_select": "select Cartoon.Title, Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date",
            "select Cartoon.Title, Cartoon.Directed_by (ordered by",
            "select Cartoon.Title, Cartoon.Directed_by - Cartoon.Original_air_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9956091046333313,
            0.0003854254318866879,
            0.00026811985298991203,
            9.74219583440572e-05,
            0.04689033329486847,
            0.00019316858379170299,
            0.0028618264477699995,
            0.00012928630167152733
        ],
        "align_select": "select Cartoon.Title, Cartoon.Directed_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all cartoon titles and their directors ordered by their original air date.",
        "gold_select": "select Cartoon.Title, Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date",
            "select Cartoon.Title, Cartoon.Directed_by - Cartoon.Original_air_date",
            "select Cartoon.Title, Cartoon.Directed_by (ordered by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9951719641685486,
            0.9951719641685486,
            0.0002862961555365473,
            0.0002862961555365473,
            0.0033983751200139523,
            0.0033983751200139523,
            0.05979038402438164,
            0.05979038402438164
        ],
        "align_select": "select Cartoon.Title, Cartoon.Directed_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you tell me all the cartoon titles and their directors ordered by their original air dates?",
        "gold_select": "select Cartoon.Title, Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date",
            "select Cartoon.Title, Cartoon.Directed_by (ordered Cartoon.Original_air_date)",
            "select Cartoon.Title, Cartoon.Directed_by (ordered by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9943040013313293,
            0.9943040013313293,
            0.0003747938317246735,
            0.0003747938317246735,
            0.010554233565926552,
            0.010554233565926552,
            0.11257263273000717,
            0.11257263273000717
        ],
        "align_select": "select Cartoon.Title, Cartoon.Directed_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are all the cartoon titles and their directors listed in order of their original air date?",
        "gold_select": "select Cartoon.Title, Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date",
            "select Cartoon.Title, Cartoon.Directed_by in Cartoon.Original_air_date",
            "select Cartoon.Title, Cartoon.Directed_by (ordered Cartoon.Original_air_date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9940377473831177,
            0.9940377473831177,
            0.0002776209148578346,
            0.0002776209148578346,
            0.0019629381131380796,
            0.0019629381131380796,
            0.014530990272760391,
            0.014530990272760391
        ],
        "align_select": "select Cartoon.Title, Cartoon.Directed_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you give me the names and directors of all the cartoon series listed in order of air date?",
        "gold_select": "select Cartoon.Title, Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.Directed_by",
            "select TV_series.Episode, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Directed_by, TV_series.Air_Date",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.0006492670509032905,
            0.0006492670509032905,
            0.0008411943563260138,
            0.0008411943563260138,
            0.0001246664469363168,
            0.0001246664469363168,
            0.00011745349911507219,
            0.00011745349911507219
        ],
        "align_select": "select Cartoon.Title, Cartoon.Directed_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Name and directors of all the cartoon ordered by air date?",
        "gold_select": "select Cartoon.Title, Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.id",
            "select Cartoon.Title, Cartoon.Directed_by (ordered Cartoon.Original_air_date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.00034860626328736544,
            0.00034860626328736544,
            0.00012309888552408665,
            0.00012309888552408665,
            0.00020002796372864395,
            0.00020002796372864395,
            0.00022608382278122008,
            0.00022608382278122008
        ],
        "align_select": "select Cartoon.Title, Cartoon.Directed_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names and directors of all cartoons ordered by air date?",
        "gold_select": "select Cartoon.Title, Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date",
            "select Cartoon.Title, Cartoon.Directed_by (ordered Cartoon.Original_air_date)",
            "select Cartoon.Title, Cartoon.Directed_by (ordered by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.0005667501245625317,
            0.0005667501245625317,
            0.00012749884626828134,
            0.00012749884626828134,
            0.0002447185979690403,
            0.0002447185979690403,
            0.00033708452247083187,
            0.00033708452247083187
        ],
        "align_select": "select Cartoon.Title, Cartoon.Directed_by",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all the cartoon titles directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by",
            "select Cartoon.Title, Cartoon.Directed_by, max(Cartoon.Channel)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.991729199886322,
            0.0003205723187420517,
            0.00021630797709804028,
            7.114480104064569e-05,
            0.00013104479876346886,
            7.072366133797914e-05,
            0.00012176483869552612,
            6.277439388213679e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Could you list the titles of all cartoons directed by 'Ben Jones' or 'Brandon Vietti'?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9881911873817444,
            0.0007314785616472363,
            0.0002396530326223001,
            7.820516475476325e-05,
            0.0002146235783584416,
            7.305497274501249e-05,
            0.0002490795450285077,
            8.458779484499246e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the titles of all cartoons directed by 'Ben Jones' or 'Brandon Vietti'?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9874767661094666,
            0.0007781494059599936,
            0.00024696713080629706,
            7.753182580927387e-05,
            0.00022056156012695283,
            7.369331433437765e-05,
            0.00025903177447617054,
            8.470345346722752e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the cartoon titles directed by Brandon Vietti or Ben Jones.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by",
            "select Cartoon.Title, Cartoon.Directed_by, max(Cartoon.Channel)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9891480803489685,
            0.0011378685012459755,
            0.00024285812105517834,
            8.061432890826836e-05,
            0.00014229799853637815,
            8.222078758990392e-05,
            0.00013074286107439548,
            6.635530735366046e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? List them.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9852468967437744,
            0.0013929959386587143,
            0.0002827939169947058,
            7.966989505803213e-05,
            0.00023713416885584593,
            7.117262430256233e-05,
            0.00027690507704392076,
            8.738593169255182e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have the most TV channels? List them by country and number.",
        "gold_select": "select TV_Channel.Country, count(*)",
        "select_candidates": [
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Country, count(*), TV_Channel.Language",
            "select TV_Channel.Country, count(TV_Channel.id)",
            "select TV_Channel.Country., count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9942213296890259,
            0.0001398490130668506,
            0.00012732998584397137,
            6.523512274725363e-05,
            0.0003676023334264755,
            8.113945659715682e-05,
            0.0031818090938031673,
            0.00010547019337536767
        ],
        "align_select": "select TV_Channel.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which country do they have the most number of TV channels and how many does it have?",
        "gold_select": "select TV_Channel.Country, count(*)",
        "select_candidates": [
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Country, count(*), TV_Channel.Language",
            "select TV_Channel.Country, count(TV_Channel.id)",
            "select TV_Channel.Country.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9940821528434753,
            0.0001118768923333846,
            0.00012617450556717813,
            5.857965152245015e-05,
            0.00033250346314162016,
            7.813554839231074e-05,
            0.021468961611390114,
            7.396682485705242e-05
        ],
        "align_select": "select TV_Channel.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the list of the number of different series names and contents on the TV channel table.",
        "gold_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
        "select_candidates": [
            "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
            "select count(distinct TV_Channel.series_name, count(distinct TV_Channel.Content)",
            "select count(distinct TV_Channel.series_name)., count(distinct TV_Channel.Content)",
            "select counts(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9890720844268799,
            0.9890720844268799,
            0.00426117330789566,
            0.00426117330789566,
            0.0007363597396761179,
            0.0007363597396761179,
            0.0005130573408678174,
            0.0005130573408678174
        ],
        "align_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the number of series names and contents in the TV channel table.",
        "gold_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
        "select_candidates": [
            "select count(*), count(*)",
            "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
            "select TV_Channel.series_name, TV_Channel.Content",
            "select count(TV_Channel.series_name), count(TV_Channel.Content)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.0003871812950819731,
            0.00022627874568570405,
            0.9945571422576904,
            7.333186658797786e-05,
            0.0004641298728529364,
            0.014221609570086002,
            0.9943661689758301,
            7.800511230016127e-05
        ],
        "align_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of series names and contents in the TV channel table.",
        "gold_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
        "select_candidates": [
            "select count(*), count(*)",
            "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
            "select TV_Channel.series_name, TV_Channel.Content",
            "select count(distinct TV_Channel.series_name, count(distinct TV_Channel.Content)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.0004155662900302559,
            0.00020686005882453173,
            0.9942082166671753,
            6.864507304271683e-05,
            0.00039426126750186086,
            0.010897438041865826,
            0.0043030064553022385,
            9.364207653561607e-05
        ],
        "align_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the list of numbers of different series' names and content in the TV channel table.",
        "gold_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
        "select_candidates": [
            "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
            "select count(*), TV_Channel.series_name, TV_Channel.Content",
            "select TV_Channel.series_name, TV_Channel.Content",
            "select count(*), count(distinct TV_Channel.series_name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9915404915809631,
            0.9377084970474243,
            0.08138792961835861,
            0.9843540191650391,
            0.00035600477713160217,
            0.00239944807253778,
            0.13503864407539368,
            0.0805252343416214
        ],
        "align_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the list of number of different series names and contents in the TV Channel table.",
        "gold_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
        "select_candidates": [
            "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
            "select count(distinct TV_Channel.series_name, count(distinct TV_Channel.Content)",
            "select counts(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
            "select count(distinct TV_Channel.series_name)., count(distinct TV_Channel.Content)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9869044423103333,
            0.9869044423103333,
            0.0037299268878996372,
            0.0037299268878996372,
            0.0005224660271778703,
            0.0005224660271778703,
            0.0008825773256830871,
            0.0008825773256830871
        ],
        "align_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In the TV channel table, how many different series and contents are listed?",
        "gold_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
        "select_candidates": [
            "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
            "select count(distinct TV_Channel.id, TV_Channel.series_name), TV_Channel.Content",
            "select count(distinct TV_Channel.series_name, TV_Channel.Content)",
            "select count(distinct TV_Channel.series_name), TV_Channel.Content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9948601722717285,
            0.9948601722717285,
            0.0001830238470574841,
            0.0001830238470574841,
            0.9779978394508362,
            0.9779978394508362,
            0.014385703019797802,
            0.014385703019797802
        ],
        "align_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the content of TV Channel with serial name \"Sky Radio\"?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Content, TV_Channel.Language",
            "select TV_Channel.Content, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9935146570205688,
            0.00012778976815752685,
            0.0001540904340799898,
            6.147312524262816e-05,
            0.0001644678122829646,
            6.41298684058711e-05,
            0.00017207450582645833,
            6.594597653020173e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the content of TV channel titled 'Sky Radio'?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Content, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series Cartoon",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9959318041801453,
            7.184430432971567e-05,
            0.0001225353335030377,
            5.8488265494816005e-05,
            0.0001551774184918031,
            5.7388584536965936e-05,
            0.00019969219283666462,
            6.0556278185686097e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the content of TV channel \"Sky Radio\"?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.series_name",
            "select TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Content, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.996148943901062,
            8.019217057153583e-05,
            0.0001624461729079485,
            5.728971882490441e-05,
            0.00014206320338416845,
            5.9108238929184154e-05,
            0.00014514556096401066,
            6.00933053647168e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the content for TV Channel Sky Radio?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9632229208946228,
            0.00010332887904951349,
            0.0002086639142362401,
            6.167954416014254e-05,
            0.00023818534100428224,
            6.578762258868665e-05,
            0.00015570715186186135,
            6.130003748694435e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the content of TV Channel whose name is \"Sky Radio\"?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.series_name, TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9957356452941895,
            0.00010998432117048651,
            0.00013521900109481066,
            5.861512181581929e-05,
            0.00021799707610625774,
            6.616290920646861e-05,
            0.00015476277621928602,
            6.0000027588102967e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I am looking for the content of the series Sky Radio. Can you show it to me?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Content, TV_Channel.Language",
            "select TV_Channel.Content, TV_Channel.Pay_per_view_PPV"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.5692007541656494,
            8.557909313822165e-05,
            0.000228253222303465,
            6.756878428859636e-05,
            0.00021593869314529002,
            6.623278750339523e-05,
            0.00027666628011502326,
            7.388539961539209e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the content of the radio series 'Sky Radio'?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.series_name, TV_Channel.Content",
            "select TV_Channel.Language, TV_Channel.Content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.8134306073188782,
            6.989523535594344e-05,
            0.00013689698243979365,
            5.802626765216701e-05,
            0.00019710832566488534,
            6.502433097921312e-05,
            0.00017027505964506418,
            5.7903005654225126e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the series content called Sky Radio?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Content, TV_Channel.series_name",
            "select TV_Channel.Content, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9853647351264954,
            6.535740976687521e-05,
            0.00014413859753403813,
            6.122221384430304e-05,
            0.00020692516409326345,
            6.270583980949596e-05,
            0.00014484318671748042,
            5.884570055059157e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell what is the content of the series 'Sky radio'?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Content, TV_Channel.Language",
            "select TV_Channel.Content, TV_Channel.Pay_per_view_PPV"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.7640775442123413,
            7.199148240033537e-05,
            0.00016541112563572824,
            6.107515946496278e-05,
            0.0001689556665951386,
            6.086851135478355e-05,
            0.0002238765446236357,
            6.934194971108809e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the content of the radio series called Sky Radio?",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Language, TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.165909081697464,
            6.349621253320947e-05,
            0.00014659880253020674,
            5.478577804751694e-05,
            0.00015480957517866045,
            5.333251829142682e-05,
            0.0001316449634032324,
            5.514119766303338e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me about the package options of the channel with the serial 'Sky Radio'?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, t0.c9",
            "select TV_Channel.Package_Option, TV_Channel.Pay_per_view_PPV"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9937923550605774,
            0.00012168116518296301,
            0.00021747038408648223,
            6.695048796245828e-05,
            0.0005208882503211498,
            7.743886817479506e-05,
            0.00029378460021689534,
            7.143236871343106e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the package option of the TV channel called 'Sky Radio'?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.Package_Option, TV_Channel.Pay_per_view_PPV",
            "select TV_Channel.Package_Option, t0.c9"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9954604506492615,
            7.173742778832093e-05,
            0.00012469830107875168,
            5.6018423492787406e-05,
            0.00020220364967826754,
            6.396324897650629e-05,
            0.0005541050340980291,
            7.488206756534055e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The TV channel was named \"Sky Radio\", what was its package option?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9944162368774414,
            6.664893589913845e-05,
            0.00012120219616917893,
            6.0859223594889045e-05,
            0.00016719280392862856,
            6.017547639203258e-05,
            0.00014624778123106807,
            6.626418326050043e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which package options does TV channel with the series name \"Sky Radio\" come under? List them out.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select distinct TV_Channel.Package_Option",
            "select list(distinct TV_Channel.Package_Option)",
            "select count(distinct TV_Channel.Package_Option)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.02884463034570217,
            0.00010779331205412745,
            0.06814318895339966,
            0.00016577048518229276,
            0.005632852669805288,
            7.415199797833338e-05,
            0.0039045398589223623,
            7.04397534718737e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the Package Option for TV channel named Sky Radio?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.id, TV_Channel.Package_Option",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9958860278129578,
            7.294060924323276e-05,
            0.00012294006592128426,
            5.821249942528084e-05,
            0.00015568800154142082,
            6.332834163913503e-05,
            0.00018949867808260024,
            5.971696009510197e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the package options for the TV channels whose series name is Sky Radio.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, t0.c9"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.5324072241783142,
            7.675038068555295e-05,
            0.00013237378152552992,
            6.170929555082694e-05,
            0.00018823934078682214,
            6.222191586857662e-05,
            0.0003266642743255943,
            7.546400593128055e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the package options of TV channels whose series names are Sky Radio.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, t0.c9"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.549317479133606,
            7.47093217796646e-05,
            0.0001371159596601501,
            6.117208977229893e-05,
            0.0001752943790052086,
            6.135962757980451e-05,
            0.000325608387356624,
            7.917896436993033e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the Package Options of the TV Channels with the series name 'Sky Radio'?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.Pay_per_view_PPV"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.6768865585327148,
            7.548811845481396e-05,
            0.00012941050226800144,
            6.450455111917108e-05,
            0.00020874233450740576,
            6.036267222953029e-05,
            0.00021833987557329237,
            6.332157499855384e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the total number of television channels that use the language English.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), TV_Channel.Language",
            "select count(*), TV_Channel.Language, TV_Channel.Content",
            "select count(*), TV_Channel.Language, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9940879344940186,
            0.00023286814393941313,
            0.0002880039101000875,
            0.0011285009095445275,
            0.00010008757817558944,
            8.741643250687048e-05,
            0.0001011137428577058,
            0.00011247043585171923
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many TV channels use English as language?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), TV_Channel.Language",
            "select count(*), TV_Channel.Language, TV_Channel.Content",
            "select count(*) the SELECT-FROM-WHERE"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9937153458595276,
            0.00033357474603690207,
            0.00027575218700803816,
            0.00014490092871710658,
            9.990726539399475e-05,
            6.978001329116523e-05,
            0.0005320264026522636,
            0.00012772409536410123
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In how many channels does the language of TV use English?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), TV_Channel.Language",
            "select count(*) dependant on TV_Channel.Language",
            "select count(*) denoted by TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9895496368408203,
            0.0008646979695186019,
            0.0002580959699116647,
            0.0003161187923979014,
            0.001555588562041521,
            0.00012205931125208735,
            0.0015191944548860192,
            0.00012882579176221043
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the total number of television channels using English as the main language.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), TV_Channel.Language",
            "select count(*), TV_Channel.Language, TV_Channel.Content",
            "select count(*), TV_Channel.Language, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9910724759101868,
            0.00027913719532079995,
            0.0002850982127711177,
            0.0017618905985727906,
            0.00010374514386057854,
            8.852507016854361e-05,
            0.00010887905955314636,
            0.0001097408530768007
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the number of TV channels using English as their language?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), TV_Channel.Language",
            "select count(*), TV_Channel.Language, TV_Channel.Content",
            "select count(*), TV_Channel.Language, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9930022358894348,
            6.70720255584456e-05,
            0.00024267667322419584,
            5.475898797158152e-05,
            0.00010125885455636308,
            5.165536640561186e-05,
            0.00010475313320057467,
            4.88816003780812e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In how many TV channels does the English language appear?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), TV_Channel.Language",
            "select count(*), TV_Channel.Language, TV_Channel.Content",
            "select count(*), TV_Channel.Language, TV_Channel.Content"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9816572666168213,
            0.0001394608261762187,
            0.00027650222182273865,
            7.674093649256974e-05,
            9.559523459756747e-05,
            5.550586138269864e-05,
            9.559523459756747e-05,
            5.550586138269864e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of TV channels that use the English language.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), TV_Channel.Language",
            "select count(*), TV_Channel.Language, TV_Channel.Content",
            "select count(*), TV_Channel.Language, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9901798963546753,
            0.00025600841036066413,
            0.00026958476519212127,
            0.0015358070377260447,
            0.00010922138608293608,
            7.876514428062364e-05,
            0.0001137332510552369,
            9.686809062259272e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the language used least number of TV channels? List language and number of TV channel.",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Language, count(TV_Channel.id)",
            "select TV_Channel.Language, count(*), TV_Channel.Country",
            "select TV_Channel.series_name, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9948004484176636,
            0.00012289246660657227,
            0.0013655851362273097,
            8.67444759933278e-05,
            0.00012354573118500412,
            6.185045640449971e-05,
            0.0005999094573780894,
            8.180855365935713e-05
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Of the least number of TV channels, how many use which language and how many use what number of languages?",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Country, TV_Channel.Language, count(*)",
            "select TV_Channel.series_name, TV_Channel.Language",
            "select TV_Channel.series_name, TV_Channel.Language, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9859529733657837,
            0.0007502732914872468,
            0.0002380216756137088,
            8.877080836100504e-05,
            0.0002754032611846924,
            0.00012879310816060752,
            0.00025003650807775557,
            9.810090705286711e-05
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the languages used by the least number of TV channels and how many of them use it.",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country",
            "select TV_Channel.series_name, count(*)",
            "select TV_Channel.Language.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9949969053268433,
            0.00011611847730819136,
            0.000130036540213041,
            6.113132258178666e-05,
            0.0005919935065321624,
            6.709415902150795e-05,
            0.03551783785223961,
            9.113845590036362e-05
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which language is used by the least number of TV channels and how many use it?",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.series_name, count(*)",
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9954593777656555,
            0.00010021468915510923,
            0.0007161747198551893,
            7.836551958462223e-05,
            0.000601433974225074,
            7.275173265952617e-05,
            0.00011754300066968426,
            6.168071558931842e-05
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What languages are used by the least number of TV channels and how many channels speak them?",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.series_name, count(*)",
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9947103261947632,
            0.00011848659050883725,
            0.0007631112239323556,
            7.87106400821358e-05,
            0.0005464223213493824,
            8.177392737707123e-05,
            0.00011343062942614779,
            5.958469773759134e-05
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the numbers of TV channels using each language.",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select count(*), TV_Channel.Language",
            "select TV_Channel.Language.c3, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9961943626403809,
            0.0001488437264924869,
            0.995854914188385,
            0.00015834739315323532,
            0.000899110920727253,
            0.00013841594045516104,
            0.000112572917714715,
            7.668176112929359e-05
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For every language, can you tell me about the number of TV channels using it?",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select count(*), TV_Channel.Language",
            "select TV_Channel.Language, count(*), TV_Channel.Country",
            "select TV_Channel.Language.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9945804476737976,
            0.0002450865868013352,
            0.9933949112892151,
            0.00022702451678924263,
            0.0001466660323785618,
            8.424012776231393e-05,
            0.0010746802436187863,
            0.00021800394461024553
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Provide the number of TV channels that use each language.",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select count(*), TV_Channel.Language",
            "select TV_Channel.Language.c3, count(*)",
            "select TV_channel_by_TV_Channel.Language, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9961252808570862,
            0.00016771141963545233,
            0.9957107305526733,
            0.00017809274140745401,
            0.0009525138884782791,
            0.00016101356595754623,
            0.00032050753361545503,
            0.00013079388008918613
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the number of TV channels that use which languages.",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select count(*), TV_Channel.Language",
            "select TV_Channel.Language.c3, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9958672523498535,
            0.00018780188111122698,
            0.9956150054931641,
            0.0001672795624472201,
            0.002331685973331332,
            0.00014078237290959805,
            0.0001137276049121283,
            6.818382098572329e-05
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each language, can you list the number of TV channels using it?",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Language.c3, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country",
            "select count(*), TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9958333969116211,
            0.00020441079686861485,
            0.0008670692332088947,
            0.00019336689729243517,
            0.00014132655633147806,
            9.592845890438184e-05,
            0.9954753518104553,
            0.00020390741701703519
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What TV channel is showing the cartoon \"The Rise of the Blue Beetle!\"? List the TV channel's series name.",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select Cartoon.Channel, TV_Channel.series_name",
            "select TV_Channel.series_name, Cartoon.Channel",
            "select TV_Channel.series_name, TV_series.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9923591017723083,
            0.00010898480104515329,
            0.0005243509076535702,
            9.65226863627322e-05,
            0.000766171608120203,
            9.205014794133604e-05,
            0.0004966751439496875,
            8.345521200681105e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the TV channel that broadcasts the animated series \"The Rise of the Blue Beetle!\"? List its series name.",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_Channel.series_name, TV_series.Channel",
            "select TV_Channel.series_name, Cartoon.Channel",
            "select TV_Channel.id, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9919989705085754,
            0.00010634030331857502,
            0.0007974321488291025,
            7.494464807678014e-05,
            0.0017628720961511135,
            8.488224557368085e-05,
            0.00026837456971406937,
            8.52684024721384e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the TV channel showing the cartoon \"The Rise of the Blue Beetle!\"? List the series name.",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_Channel.series_name, TV_series.Channel",
            "select TV_Channel.series_name, Cartoon.Channel",
            "select TV_Channel.id, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9929274916648865,
            9.040918666869402e-05,
            0.0007604434504173696,
            7.283544255187735e-05,
            0.0016145686386153102,
            8.233157132053748e-05,
            0.00021154663409106433,
            7.925531826913357e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the series name of the cartoon channel showing The Rise of the Blue Beetle?",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_Channel.series_name, TV_series.Channel",
            "select Cartoon.Title, TV_Channel.series_name",
            "select TV_Channel.series_name, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9615152478218079,
            7.864475628593937e-05,
            0.00022789918875787407,
            5.97140533500351e-05,
            0.00026692106621339917,
            6.664016109425575e-05,
            0.0008027247386053205,
            6.525845674332231e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the titles of all cartoons shown on TV channel with series name Sky Radio?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, TV_Channel.series_name",
            "select Cartoon.Title, TV_Channel.Country",
            "select Cartoon.Title, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.5652804970741272,
            0.0003141404304187745,
            0.00020039793162140995,
            7.909662235761061e-05,
            0.000297420599963516,
            7.268238550750539e-05,
            0.00022522921790368855,
            7.481739885406569e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the titles of all cartoons shown on TV Channel with the series name 'Sky Radio'?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, TV_Channel.series_name",
            "select Cartoon.Title, TV_Channel.Country",
            "select Cartoon.Title, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.8201343417167664,
            0.00019886487280018628,
            0.0002355226461077109,
            7.803963671904057e-05,
            0.00025875630672089756,
            7.207872113212943e-05,
            0.0002039441606029868,
            7.52456980990246e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the titles of all cartoons shown on TV channel Sky Radio with the series name.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title, TV_Channel.series_name",
            "select Cartoon.Title",
            "select Cartoon.Title, TV_Channel.Country",
            "select Cartoon.Title, Cartoon.Channel"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.000677829550113529,
            0.00012206780957058072,
            0.7114225625991821,
            0.012055433355271816,
            0.0003041226009372622,
            9.73661444731988e-05,
            0.00016989475989248604,
            9.305217827204615e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me all the titles of all cartoons shown on TV channel with the series name \"Sky Radio\".",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, TV_Channel.series_name",
            "select Cartoon.Title, TV_Channel.Country",
            "select Cartoon.Title, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.8936446905136108,
            0.00013671827036887407,
            0.0002403660910204053,
            6.830604979768395e-05,
            0.0002230842801509425,
            6.631482392549515e-05,
            0.0001914449967443943,
            6.767544255126268e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the cartoon titles shown on the TV channel with series name \"Sky Radio\".",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, TV_Channel.series_name",
            "select Cartoon.Title, TV_Channel.Country",
            "select Cartoon.Title, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.2543291747570038,
            0.00010760136501630768,
            0.00019901758059859276,
            6.682750972686335e-05,
            0.0002550020581111312,
            6.486925121862441e-05,
            0.00021523570467252284,
            6.614423909923062e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the titles of the cartools that are on the TV channel with the series name 'Sky Radio'.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, TV_Channel.Country",
            "select Cartoon.Title, TV_Channel.series_name",
            "select Cartoon.Title, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.1709020584821701,
            0.00013340398436412215,
            0.00023131979105528444,
            6.667740672128275e-05,
            0.0002385742263868451,
            6.985991058172658e-05,
            0.00020287880033720285,
            6.630508869420737e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the series names and titles of all the cartoons that are aired on the TV channel 'Sky Radio'?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select TV_Channel.series_name, Cartoon.Title",
            "select TV_series.Episode, Cartoon.Directed_by",
            "select TV_series.Channel, Cartoon.Title",
            "select Cartoon.Title, TV_Channel.series_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.37206020951271057,
            0.00017124268924817443,
            0.0005387224373407662,
            7.52520136302337e-05,
            0.0009872096125036478,
            7.171383185777813e-05,
            0.5765231847763062,
            0.00018809149332810193
        ],
        "align_select": "select Cartoon.Title, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the titles of all the cartools shown on the TV Channel with the series name \"Sky Radio\"?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, TV_Channel.Country",
            "select Cartoon.Title, TV_Channel.Language",
            "select Cartoon.Title, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.27989983558654785,
            0.0001701953588053584,
            0.00023278735170606524,
            6.966133514652029e-05,
            0.00018717587227001786,
            7.033390284050256e-05,
            0.0002265998045913875,
            7.399744936265051e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the titles of all the tools from the TV channel with the series name 'Sky Radio'?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, TV_Channel.Country",
            "select Cartoon.Title, TV_Channel.Language",
            "select Cartoon.Title, Cartoon.Directed_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.018665358424186707,
            0.00012149751273682341,
            0.0002475777582731098,
            6.842300354037434e-05,
            0.00023131162743084133,
            6.74590773996897e-05,
            0.0001804175553843379,
            6.472199311247095e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the Episode Order of all TV Series Sorted By Rating?",
        "gold_select": "select TV_series.Episode",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating, TV_series.Share",
            "select TV_series.Episode, TV_series.Rating, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.995793342590332,
            0.00020727784431073815,
            0.0003890541847795248,
            0.00012638658517971635,
            0.00017028544971253723,
            0.00010506165563128889,
            0.00015842261200305074,
            9.764340939000249e-05
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me all the episodes of TV series ordered by rating.",
        "gold_select": "select TV_series.Episode",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Episode",
            "select TV_series.Episode, TV_series.Rating, TV_series.Share"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.994675874710083,
            0.994675874710083,
            0.0004513869935180992,
            0.0004513869935180992,
            0.0002024766436079517,
            0.0002024766436079517,
            0.0001713830279186368,
            0.0001713830279186368
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the Episode number of each TV Series ordered by its rating?",
        "gold_select": "select TV_series.Episode",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Episode",
            "select TV_series.Episode (ordered TV_series.Rating)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9952754974365234,
            0.9952754974365234,
            0.00021072487288620323,
            0.00021072487288620323,
            0.00015974535199347883,
            0.00015974535199347883,
            0.0014238578733056784,
            0.0014238578733056784
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "For each episode of TV series, sort it according to their rating.",
        "gold_select": "select TV_series.Episode",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode descended TV_series.Rating",
            "select TV_series.Episode, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9947695136070251,
            0.0003309061285108328,
            0.0007968571153469384,
            0.0003337814996484667,
            0.001319031696766615,
            0.0006683149840682745,
            0.0001441078056814149,
            0.00012749448069371283
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show the list of episodes, ordered by ratings.",
        "gold_select": "select TV_series.Episode",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Episode",
            "select TV_series.Episode-, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9955175518989563,
            0.9955175518989563,
            0.00045245152432471514,
            0.00045245152432471514,
            0.00017728084640111774,
            0.00017728084640111774,
            0.00025281484704464674,
            0.00025281484704464674
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you show me the episode list ordered by rating?",
        "gold_select": "select TV_series.Episode",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode defintley-ORDER BY",
            "select TV_series.Episode descended TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9953076243400574,
            0.9953076243400574,
            0.0004728323547169566,
            0.0004728323547169566,
            0.0041868239641189575,
            0.0041868239641189575,
            0.0015904047759249806,
            0.0015904047759249806
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show all of the ordered episodes according to rating.",
        "gold_select": "select TV_series.Episode",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Episode",
            "select TV_series.Episode, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9900045990943909,
            0.9900045990943909,
            0.0006829462363384664,
            0.0006829462363384664,
            0.0001904516393551603,
            0.0001904516393551603,
            0.00018972629914060235,
            0.00018972629914060235
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me 3 Highest Rated TV series. List the Episodes and Ratings.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating, TV_series.Air_Date",
            "select TV_series.Episode.c1, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9949483871459961,
            7.167199510149658e-05,
            0.0003288092848379165,
            7.77440145611763e-05,
            0.00022808852372691035,
            6.93048641551286e-05,
            0.00036307639675214887,
            6.821940769441426e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the top 3 highest rated TV series. Show me their episode and rating.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating, TV_series.Air_Date",
            "select TV_series.Episode.c1, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating, TV_series.Viewers_m"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9947196245193481,
            6.312550976872444e-05,
            0.00029820032068528235,
            6.882381421746686e-05,
            0.0009123677155002952,
            5.983364098938182e-05,
            0.0002855258353520185,
            6.560575275216252e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you list the top 3 highest rated TV series? Describe them by episode number and rating.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating, TV_series.Air_Date",
            "select TV_series.Episode.c1, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.985052227973938,
            7.825261127436534e-05,
            0.00029372406424954534,
            8.550364873372018e-05,
            0.0001876794412964955,
            7.350549276452512e-05,
            0.00026883144164457917,
            8.198630530387163e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the value ranges of minimum and maximum shares of a TV series.",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select min(TV_series.Share), max(TV_series.Share)",
            "select TV_series.Share, min(TV_series.Share), max(TV_series.Share)",
            "select t1.c min(TV_series.Share), max(TV_series.Share)",
            "select t1.cmin(TV_series.Share), max(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9868796467781067,
            0.0005945977754890919,
            0.0002118191187037155,
            9.972088446374983e-05,
            0.0003236236807424575,
            0.00012283201795071363,
            0.00030182019690983,
            0.0001474615855840966
        ],
        "align_select": "select min(TV_series.Share), max(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the minimum and maximum shares of television series?",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select min(TV_series.Share), max(TV_series.Share)",
            "select min(TV_series.Rating), max(TV_series.Share)",
            "select min(TV_series.Share), max(TV_series.Share), TV_series.id",
            "select min(TV_series.Share), max(TV_series.Share), TV_series.Viewers_m"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9947553873062134,
            0.002094665542244911,
            0.012932130135595798,
            0.000513570150360465,
            0.00014825617836322635,
            0.00012485726620070636,
            0.00012883009912911803,
            0.00012758740922436118
        ],
        "align_select": "select min(TV_series.Share), max(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the minimum and maximum shares of TV series.",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select min(TV_series.Share), max(TV_series.Share)",
            "select min(TV_series.Rating), max(TV_series.Share)",
            "select min(TV_series.Air_Date), max(TV_series.Share)",
            "select min(TV_series.18_49_Rating_Share), max(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9948307871818542,
            8.267403609352186e-05,
            0.026366133242845535,
            6.820840644650161e-05,
            0.00019157685164827853,
            7.759572326904163e-05,
            0.9921202659606934,
            7.452737190760672e-05
        ],
        "align_select": "select min(TV_series.Share), max(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List minimum and maximum total shares of TV series.",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select min(TV_series.Share), max(TV_series.Share)",
            "select min(TV_series.Rating), max(TV_series.Share)",
            "select min(TV_series.18_49_Rating_Share), max(TV_series.Share)",
            "select min(TV_series.Air_Date), max(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9864115715026855,
            8.629062358522788e-05,
            0.0004340266459621489,
            7.204085704870522e-05,
            0.46089714765548706,
            8.177423296729103e-05,
            0.00023438307107426226,
            7.50180843169801e-05
        ],
        "align_select": "select min(TV_series.Share), max(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the minimum and maximum shares of the tv series.",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select min(TV_series.Share), max(TV_series.Share)",
            "select TV_series.Share, min(TV_series.Share), max(TV_series.Share)",
            "select min(TV_series.Share), max(TV_series.Share), TV_series.id",
            "select min(TV_series.Rating), max(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9939019680023193,
            0.00042635962017811835,
            0.00017410334839951247,
            8.578449342167005e-05,
            0.00012043758033541963,
            0.00011244127381360158,
            0.14679637551307678,
            0.0002541534777265042
        ],
        "align_select": "select min(TV_series.Share), max(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the maximum and minimum shares of the TV series?",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select max(TV_series.Share), min(TV_series.Share)",
            "select max(TV_series.18_49_Rating_Share), min(TV_series.Share)",
            "select max(TV_series.Viewers_m), min(TV_series.Share)",
            "select max(TV_series.Channel), min(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9932409524917603,
            0.0013636479852721095,
            0.9930014610290527,
            0.0009781947592273355,
            0.2293170988559723,
            0.001605047844350338,
            0.0007035747985355556,
            0.00043062359327450395
        ],
        "align_select": "select max(TV_series.Share), min(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the maximum and minimum share of the tv shows?",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select max(TV_series.Share), min(TV_series.Share)",
            "select max(TV_series.18_49_Rating_Share), min(TV_series.Share)",
            "select max(TV_series.Viewers_m), min(TV_series.Share)",
            "select max(TV_series.Rating), min(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9943325519561768,
            0.001101769506931305,
            0.9925493001937866,
            0.002430720953270793,
            0.004296745639294386,
            0.000720859388820827,
            0.1643712967634201,
            0.0005002266843803227
        ],
        "align_select": "select max(TV_series.Share), min(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please give me the minimum share amount and maximum share amount for the tv series?",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select min(TV_series.Share), max(TV_series.Share)",
            "select min(TV_series.Share), max(TV_series.Share), TV_series.id",
            "select min(TV_series.Share), max(TV_series.Share), TV_series.Viewers_m",
            "select min(TV_series.Rating), max(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9940711855888367,
            0.0007368669612333179,
            0.0001386231742799282,
            0.00026580318808555603,
            0.00012623710790649056,
            0.00025646667927503586,
            0.11638046056032181,
            0.0003745327121578157
        ],
        "align_select": "select min(TV_series.Share), max(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the maximum and minimum shares for the TV series?",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select max(TV_series.Share), min(TV_series.Share)",
            "select max(TV_series.18_49_Rating_Share), min(TV_series.Share)",
            "select max(TV_series.Viewers_m), min(TV_series.Share)",
            "select max(TV_series.Channel), min(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9938108325004578,
            0.00047991005703806877,
            0.9935947060585022,
            0.0006748677114956081,
            0.4399067461490631,
            0.0013216729275882244,
            0.0007666931487619877,
            0.00042173973633907735
        ],
        "align_select": "select max(TV_series.Share), min(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the air date of the episode \"A Love of a Lifetime\" in the TV series?",
        "gold_select": "select TV_series.Air_Date",
        "select_candidates": [
            "select TV_series.Air_Date",
            "select TV_series.id, TV_series.Air_Date",
            "select TV_series.Air_Date (https://TV_series.Air_Date)",
            "select TV_series.Air_Date (or TV_series.Rating)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9899941086769104,
            8.136538963299245e-05,
            0.00016283403965644538,
            6.372282223310322e-05,
            0.018633900210261345,
            8.897134102880955e-05,
            0.000663552840705961,
            7.21604228601791e-05
        ],
        "align_select": "select TV_series.Air_Date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the air date of Episode A Love of a Lifetime from TV series?",
        "gold_select": "select TV_series.Air_Date",
        "select_candidates": [
            "select TV_series.Air_Date",
            "select TV_series.id, TV_series.Air_Date",
            "select TV_series.Air_Date, TV_series.Rating",
            "select TV_series.Air_Date (website TV_series.Air_Date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9943655729293823,
            8.720353071112186e-05,
            0.00015346724831033498,
            6.537985609611496e-05,
            0.00013647833839058876,
            6.275650230236351e-05,
            0.00041940153460018337,
            8.602057641837746e-05
        ],
        "align_select": "select TV_series.Air_Date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the air date of the episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_series.Air_Date",
        "select_candidates": [
            "select TV_series.Air_Date",
            "select TV_series.id, TV_series.Air_Date",
            "select TV_series.Air_Date (or TV_series.Rating)",
            "select TV_series.Air_Date (https://TV_series.Air_Date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9937382936477661,
            7.496122270822525e-05,
            0.00015065731713548303,
            6.0323138313833624e-05,
            0.0004475045425351709,
            6.75214541843161e-05,
            0.0163669902831316,
            7.602261030115187e-05
        ],
        "align_select": "select TV_series.Air_Date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "On which day did the episode \"A Love of a Lifetime\" air?",
        "gold_select": "select TV_series.Air_Date",
        "select_candidates": [
            "select TV_series.Air_Date",
            "select TV_series.id, TV_series.Air_Date",
            "select TV_series.Air_Date, TV_series.Rating",
            "select Cartoon.Directed_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9909772872924805,
            7.163619011407718e-05,
            0.00016361221787519753,
            6.106933869887143e-05,
            0.00013923720689490438,
            5.733748912462033e-05,
            0.0046328394673764706,
            6.90673477947712e-05
        ],
        "align_select": "select TV_series.Air_Date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the air date of episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_series.Air_Date",
        "select_candidates": [
            "select TV_series.Air_Date",
            "select TV_series.id, TV_series.Air_Date",
            "select TV_series.Air_Date (https://TV_series.Air_Date)",
            "select TV_series.Air_Date, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9936296343803406,
            7.63234929763712e-05,
            0.00015318859368562698,
            6.090247552492656e-05,
            0.014954551123082638,
            7.924286182969809e-05,
            0.00012799317482858896,
            5.903050987399183e-05
        ],
        "align_select": "select TV_series.Air_Date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "At what time did the episode titled 'A Love of a Lifetime' aired on tv channel?",
        "gold_select": "select TV_series.Air_Date",
        "select_candidates": [
            "select TV_series.Air_Date",
            "select TV_series.id, TV_series.Air_Date",
            "select TV_series.Channel",
            "select TV_series.Air_Date, TV_series.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.017551936209201813,
            7.270643254742026e-05,
            0.00017644811305217445,
            6.447951454902068e-05,
            0.0018123593181371689,
            7.708970224484801e-05,
            0.0001365129865007475,
            6.089028101996519e-05
        ],
        "align_select": "select TV_series.Air_Date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The episode \"A Love of a Lifetime\" aired when?",
        "gold_select": "select TV_series.Air_Date",
        "select_candidates": [
            "select TV_series.Air_Date",
            "select TV_series.id, TV_series.Air_Date",
            "select avg(TV_series.Air_Date)",
            "select TV_series.Air_Date, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9909448623657227,
            6.874949758639559e-05,
            0.00015766882279422134,
            6.357873644446954e-05,
            0.00693409563973546,
            7.145968993427232e-05,
            0.00013031619891989976,
            5.6652992498129606e-05
        ],
        "align_select": "select TV_series.Air_Date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the weekly rank of TV series with the episode 'A Love of a lifetime'?",
        "gold_select": "select TV_series.Weekly_Rank",
        "select_candidates": [
            "select TV_series.Weekly_Rank",
            "select TV_series.id, TV_series.Weekly_Rank",
            "select TV_series.Weekly_Rank, TV_series.Channel",
            "select TV_series.Weekly_Rank, TV_series.Viewers_m"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9945782423019409,
            9.184663213090971e-05,
            0.0001572881592437625,
            6.490068335551769e-05,
            0.00016066036187112331,
            5.94661760260351e-05,
            0.00014172900409903377,
            6.0687798395520076e-05
        ],
        "align_select": "select TV_series.Weekly_Rank",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the weekly rank of TV series with the episode \"A Love of a Lifetime\".",
        "gold_select": "select TV_series.Weekly_Rank",
        "select_candidates": [
            "select TV_series.Weekly_Rank",
            "select TV_series.Weekly_Rank)",
            "select TV_series.Weekly_Rank",
            "select the TV_series.Weekly_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9954901337623596,
            9.411555220140144e-05,
            0.0030297846533358097,
            7.993265899131075e-05,
            0.9954901337623596,
            9.411555220140144e-05,
            0.0006180136115290225,
            8.151869405992329e-05
        ],
        "align_select": "select TV_series.Weekly_Rank",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the weekly rank of TV series with 'Episode A Love Of A Lifetime'?",
        "gold_select": "select TV_series.Weekly_Rank",
        "select_candidates": [
            "select TV_series.Weekly_Rank",
            "select TV_series.id, TV_series.Weekly_Rank",
            "select TV_series.Weekly_Rank, TV_series.Channel",
            "select TV_series.Weekly_Rank, TV_series.Viewers_m"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9958629608154297,
            0.00011226759670535102,
            0.00015947902284096926,
            7.191339682321995e-05,
            0.00016226629668381065,
            6.238066271180287e-05,
            0.00013309546920936555,
            6.198378832777962e-05
        ],
        "align_select": "select TV_series.Weekly_Rank",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the weekly rank for TV series with episode \"A Love of a Lifetime\".",
        "gold_select": "select TV_series.Weekly_Rank",
        "select_candidates": [
            "select TV_series.Weekly_Rank",
            "select TV_series.id, TV_series.Weekly_Rank",
            "select TV_series.Weekly_Rank, TV_series.Channel",
            "select TV_series.Weekly_Rank, TV_series.Viewers_m"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9956914782524109,
            8.399508078582585e-05,
            0.00015858010738156736,
            6.276589556364343e-05,
            0.0001729717041598633,
            6.106991349952295e-05,
            0.00013763914466835558,
            5.924790821154602e-05
        ],
        "align_select": "select TV_series.Weekly_Rank",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the TV channel of TV series whose episode is \"A love of a lifetime\"? List TV channel's series name.",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_Channel.series_name, TV_series.Channel",
            "select TV_series.Channel",
            "select TV_Channel.series_name, TV_series.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9799853563308716,
            8.026691648410633e-05,
            0.0006174294976517558,
            7.107658893801272e-05,
            0.3544892966747284,
            7.525301771238446e-05,
            0.0006174294976517558,
            7.107658893801272e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the channel list of TV Series with Episode \"A Love of a Lifetime\". List the series name of each channel.",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_Channel.series_name, TV_series.Channel",
            "select TV_series.Channel, TV_Channel.series_name",
            "select Cartoon.Title, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.992675244808197,
            0.9905010461807251,
            0.0015338953817263246,
            0.006634292658418417,
            0.8849200010299683,
            0.8827707171440125,
            0.00037782281287945807,
            0.00033183969208039343
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the title of the series that has the episode called \"A Love of a Lifetime\"?",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_series.Episode",
            "select TV_Channel.series_name, TV_series.Channel",
            "select TV_Channel.series_name, TV_series.Episode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_series",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9839703440666199,
            0.00010928137635346502,
            0.08950740098953247,
            7.797180296620354e-05,
            0.00022800853184890002,
            6.30487484158948e-05,
            0.0002167328493669629,
            6.421070429496467e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the title of the series whose episodes have the titles A Love of a Lifetime?",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_series.Episode",
            "select TV_series.Episode, TV_series.Air_Date",
            "select TV_Channel.series_name, TV_series.Episode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_series",
            "TV_Channel TV_series",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.9863499999046326,
            0.00020035894704051316,
            0.9449285864830017,
            0.0001233185757882893,
            0.00021569011732935905,
            7.520824874518439e-05,
            0.0003223440144211054,
            6.965237116673961e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which series have the episode 'A Love Of A Lifetime'? List the title of the series.",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_Channel.series_name",
            "select Cartoon.Title",
            "select TV_series.Episode, TV_series.Air_Date"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_series",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.6670054197311401,
            8.657151920488104e-05,
            0.9405738711357117,
            0.00019923763466067612,
            0.9652520418167114,
            0.0001395242870785296,
            0.00013606435095425695,
            6.61040612612851e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the title of the series that had the episode called 'A love of a lifetime'?",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_series.Episode",
            "select TV_Channel.series_name, TV_series.Channel",
            "select Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_series",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9843369126319885,
            0.00011420468217693269,
            0.0325208455324173,
            8.140093268593773e-05,
            0.0002198929723817855,
            6.25668399152346e-05,
            0.9862854480743408,
            0.0001001242344500497
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the name of the series that has the episode \"A Love of a Lifetime\"?",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_series.Episode",
            "select TV_Channel.series_name, TV_series.Channel",
            "select TV_Channel.series_name, TV_series.Episode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_series"
        ],
        "align_scores": [
            0.9137294888496399,
            0.0001028611368383281,
            0.9669551849365234,
            8.354820602107793e-05,
            0.0002213119005318731,
            6.398631376214325e-05,
            0.00021042468142695725,
            6.34892494417727e-05
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the episodes of all tv shows aired on channel with series name \"Sky Radio\"?",
        "gold_select": "select TV_series.Episode",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_series.Episode, TV_Channel.Country",
            "select TV_series.Episode, TV_Channel.Language",
            "select TV_series.Episode, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.49122217297554016,
            0.00011300569894956425,
            0.00017015558842103928,
            6.269160803640261e-05,
            0.00014425160770770162,
            6.36788536212407e-05,
            0.00017380545614287257,
            6.56552510918118e-05
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of cartoons directed by each director.",
        "gold_select": "select count(*), Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Directed_by, count(*)",
            "select Cartoon.Directed_by, count(*), Cartoon.Written_by",
            "select Cartoon.Directed_by, count(*), Cartoon.id",
            "select Cartoon.Directed_by.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9963452219963074,
            0.00019847507064696401,
            0.00011935682414332405,
            6.203694647410884e-05,
            0.00017128042236436158,
            7.811796967871487e-05,
            0.00036827477742917836,
            0.00012989624519832432
        ],
        "align_select": "select Cartoon.Directed_by, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the number of cartoons directed by each director.",
        "gold_select": "select count(*), Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Directed_by, count(*)",
            "select Cartoon.Directed_by, count(*), Cartoon.Written_by",
            "select Cartoon.Directed_by, count(*), Cartoon.id",
            "select Cartoon.Directed_by.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9966374635696411,
            0.0001869612606242299,
            0.00011507474118843675,
            6.089156158850528e-05,
            0.0001673392252996564,
            7.932610606076196e-05,
            0.000295274774543941,
            0.0001164151617558673
        ],
        "align_select": "select Cartoon.Directed_by, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What was the number of cartoons created by each director?",
        "gold_select": "select count(*), Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Directed_by, count(*)",
            "select Cartoon.Directed_by, count(*), Cartoon.Written_by",
            "select Cartoon.Directed_by, count(*), Cartoon.Production_code",
            "select Cartoon.Directed_by, count(*), Cartoon.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.996334433555603,
            0.0002304605586687103,
            0.00013197715452406555,
            7.527561683673412e-05,
            0.00013448168465401977,
            7.964763790369034e-05,
            0.00019059023179579526,
            8.03749862825498e-05
        ],
        "align_select": "select Cartoon.Directed_by, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the numbers of cartoons each director created?",
        "gold_select": "select count(*), Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Directed_by, count(*)",
            "select Cartoon.Directed_by, count(*), Cartoon.Written_by",
            "select Cartoon.Directed_by, count(*), Cartoon.Production_code",
            "select Cartoon.Directed_by.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9957801103591919,
            0.00023320676700677723,
            0.00015292763418983668,
            8.17651889519766e-05,
            0.00014442928659263998,
            8.880104724084958e-05,
            0.0006006628973409534,
            0.00017386545368935913
        ],
        "align_select": "select Cartoon.Directed_by, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Where can I find the production code and channel for the most recent aired cartoon?",
        "gold_select": "select Cartoon.Production_code, Cartoon.Channel",
        "select_candidates": [
            "select Cartoon.Production_code, Cartoon.Channel",
            "select max(Cartoon.Production_code), max(Cartoon.Channel)",
            "select min(Cartoon.Production_code), min(Cartoon.Channel)",
            "select Cartoon.Production_code, Cartoon.Channel, t2.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.92923504114151,
            9.179068729281425e-05,
            0.0008541180868633091,
            8.847368007991463e-05,
            0.0007764024776406586,
            8.457520743831992e-05,
            0.00027684937231242657,
            7.967096462380141e-05
        ],
        "align_select": "select Cartoon.Production_code, Cartoon.Channel",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you find the production code and channel of the cartoon aired most recently?",
        "gold_select": "select Cartoon.Production_code, Cartoon.Channel",
        "select_candidates": [
            "select Cartoon.Production_code, Cartoon.Channel",
            "select max(Cartoon.Production_code), max(Cartoon.Channel)",
            "select Cartoon.Production_code, Cartoon.Channel, t2.c7",
            "select Cartoon.Production_code.c6, Cartoon.Production_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9906101822853088,
            0.00011099864059360698,
            0.0008327913237735629,
            0.00012119157327106223,
            0.0004605233552865684,
            9.271383169107139e-05,
            0.0004356232821010053,
            0.00011136153625557199
        ],
        "align_select": "select Cartoon.Production_code, Cartoon.Channel",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "For the most recent cartoon, what is the production code and channel?",
        "gold_select": "select Cartoon.Production_code, Cartoon.Channel",
        "select_candidates": [
            "select Cartoon.Production_code, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Production_code, Cartoon.Channel",
            "select Cartoon.id, Cartoon.Production_code, Cartoon.Channel",
            "select max(Cartoon.Production_code), max(Cartoon.Channel)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9785044193267822,
            0.9939409494400024,
            0.0003356562228873372,
            0.00019990099826827645,
            0.00021477977861650288,
            0.00017612503143027425,
            0.0002974509843625128,
            0.01993664540350437
        ],
        "align_select": "select Cartoon.Production_code, Cartoon.Channel",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "I would like to know what the production code is and the channel of the most recent cartoon aired.",
        "gold_select": "select Cartoon.Production_code, Cartoon.Channel",
        "select_candidates": [
            "select Cartoon.Production_code, Cartoon.Channel",
            "select max(Cartoon.Production_code), max(Cartoon.Channel)",
            "select min(Cartoon.Production_code), min(Cartoon.Channel)",
            "select max(Cartoon.Production_code), Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-EXCEPT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9860596060752869,
            0.00026371562853455544,
            0.0018425919115543365,
            0.00011940280819544569,
            0.0008266364457085729,
            0.00011746859672712162,
            0.0002890718460548669,
            0.00012647615221794695
        ],
        "align_select": "select Cartoon.Production_code, Cartoon.Channel",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please give me some details about the package options and the name of the series for the channel with the support for high definition.",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.series_name",
            "select TV_Channel.Pay_per_view_PPV, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9889155626296997,
            0.00016516652249265462,
            0.9895377159118652,
            0.00018416083185002208,
            0.0003490911622066051,
            0.00010650166950654238,
            0.967985212802887,
            0.0002580300497356802
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "which package option of the high definition TV station have what names of TV shows in them?",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Hight_definition_TV"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.00030543978209607303,
            0.0005211028037592769,
            0.0003430216165725142,
            0.020367562770843506,
            0.5849947333335876,
            0.04132647439837456,
            0.00023184905876405537,
            0.00036521637230180204
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Could you tell me what the package options and the name of the series for high definition channel is?",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select t2.c8, TV_Channel.series_name",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9944794178009033,
            0.00016955213504843414,
            0.9945850968360901,
            0.0001365556672681123,
            0.0009639224736019969,
            0.00010072715667774901,
            0.00035810258123092353,
            9.840031998464838e-05
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The channel that support HDTV can be accessed through which package options? Specify the name of the series.",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.series_name ou TV_Channel.Package_Option"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.5609028339385986,
            0.0019010378746315837,
            0.0004495041794143617,
            0.00010872860730160028,
            0.0001473551819799468,
            8.361643995158374e-05,
            0.013545968569815159,
            0.00010146164277102798
        ],
        "align_select": "select TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me about the package options and the name of the series for the TV channel that supports high definition TV?",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.series_name",
            "select TV_Channel.Pay_per_view_PPV, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9835742712020874,
            0.00017552082135807723,
            0.9853876233100891,
            0.00014330045087262988,
            0.0005371032748371363,
            0.00010925721289822832,
            0.9220973253250122,
            0.000217127482756041
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the countries' television channels playing cartoons written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.Country, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9157826900482178,
            0.01209088135510683,
            0.15917757153511047,
            0.00030927284387871623,
            0.006485178135335445,
            0.00017654286057222635,
            0.00028329368797130883,
            0.00018178866594098508
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries' television channels are playing cartoons written by (Todd Casey)?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.Country, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9262397289276123,
            0.8777751922607422,
            0.3021121621131897,
            0.0006427822518162429,
            0.001963736256584525,
            0.002313032280653715,
            0.00025278591783717275,
            0.00035423008375801146
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Do any countries' TV channels play (which cartoon written by Todd Casey)?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.Country, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9685718417167664,
            0.008609099313616753,
            0.13223762810230255,
            0.0004089461581315845,
            0.0009138750028796494,
            0.00017816440958995372,
            0.00021630508126690984,
            0.00011767130490625277
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which countries' television channels are playing some cartoons written by Todd Casey? List them.",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.Country, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.5442641973495483,
            0.0011504731373861432,
            0.18461890518665314,
            0.008781597949564457,
            0.0031305858865380287,
            0.00022282579448074102,
            0.0003401068679522723,
            0.00017091791960410774
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me which countries' television channels are showing some cartoon written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.Country, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9022238254547119,
            0.0024080248549580574,
            0.25604212284088135,
            0.01676342450082302,
            0.0002607727947179228,
            0.00013064018276054412,
            0.0036493628285825253,
            0.00015230885765049607
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the list of countries that have cartoons on TV written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select count(distinct TV_Channel.Country)",
            "select TV_Channel.Country, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9390628337860107,
            0.9838868975639343,
            0.5456513166427612,
            0.0024402460549026728,
            0.0144263980910182,
            0.0002786128898151219,
            0.0003139080945402384,
            0.00047484092647209764
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the names of the countries that have cartoons on TV that were written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.Country, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9361053705215454,
            0.9746338129043579,
            0.2821916937828064,
            0.003868659259751439,
            0.00032255949918180704,
            0.0005246493965387344,
            0.0007722188020125031,
            0.0008778780465945601
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the countries that have cartoons written by Todd Casey on TV?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel",
            "select count(distinct TV_Channel.Country)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.944271445274353,
            0.0037137363106012344,
            0.2759157717227936,
            0.03721088543534279,
            0.0003783846041187644,
            0.00010560615919530392,
            0.006355582270771265,
            0.0001612752239452675
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have cartoons on TV written by Todd Casey? List them.",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select count(distinct TV_Channel.Country)",
            "select TV_Channel.Country, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.94784015417099,
            0.0017156513640657067,
            0.4420493245124817,
            0.011513982899487019,
            0.01143662165850401,
            0.00015615885786246508,
            0.0004736890841741115,
            0.0001047241676133126
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the countries that have cartoons from TV shows written by Todd Casey.",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.Country, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.8774810433387756,
            0.0008593897218815982,
            0.1726839393377304,
            0.013834506273269653,
            0.00031751938513480127,
            9.439040150027722e-05,
            0.0002540774003136903,
            0.0001057923145708628
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me which countries' TV channels are not showing any cartoons written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9788640141487122,
            0.02861115336418152,
            0.000801788701210171,
            0.0003077489382121712,
            0.050039809197187424,
            0.013890127651393414,
            0.00025065927184186876,
            0.00018470124632585794
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the countries' tv channels that are not playing any cartoon written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.series_name, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.986153244972229,
            0.9869434833526611,
            0.0008595756371505558,
            0.0013721955474466085,
            0.00028360605938360095,
            0.0003204809327144176,
            0.00018983449263032526,
            0.00022792091476731002
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "In which countries' TV channels, Cartoon written by Todd Casey is not played?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.Country, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9881755113601685,
            0.9796935319900513,
            0.024535708129405975,
            0.010217856615781784,
            0.001905068289488554,
            0.0030031250789761543,
            0.00026730610989034176,
            0.00032392589491792023
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list out all those countries where tv stations are not playing cartoon written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Written_by",
            "select TV_Channel.Country, Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9182645082473755,
            0.003305295715108514,
            0.02375577762722969,
            0.005094882566481829,
            0.0005464541027322412,
            0.00025102400104515254,
            0.0003014405956491828,
            0.00020156150276307017
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find a list of countries where none of the tv channels is broadcasting cartoons written by Todd Casey?",
        "gold_select": "select TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country",
            "select distinct TV_Channel.Country",
            "select TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.Country, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9641383290290833,
            0.08373887091875076,
            0.07127567380666733,
            0.0017747536767274141,
            0.001354362815618515,
            0.00042550492798909545,
            0.0009619857301004231,
            0.00030124871409498155
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the series name and country of the tv channel playing some cartoons directed by Ben Jones and Michael Chang?",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Country",
            "select Cartoon.Title, TV_Channel.Country",
            "select to.c1, TV_Channel.Country",
            "select t 0.c1, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon TV_series Cartoon"
        ],
        "align_scores": [
            0.0014936536317691207,
            0.00018149387324228883,
            0.0004837245505768806,
            0.0002532029466237873,
            0.0002762658696155995,
            8.466043072985485e-05,
            0.0002609642979223281,
            0.00012009260535705835
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "I want to know the country and series name of the TV channel playing some cartoons directed by Ben Jones and Michael Chang.",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Country",
            "select TV_Channel.Country., TV_Channel.series_name",
            "select TV_Channel.Country, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.000559027714189142,
            0.00013763205788563937,
            0.00031367596238851547,
            0.00015425862511619925,
            0.00023928451992105693,
            0.00010150478919968009,
            0.000559027714189142,
            0.00013763205788563937
        ],
        "align_select": "select TV_Channel.Country, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find the series name and country of the tv channel that is currently playing cartoons directed by Michael Chang and Ben Jones?",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Country",
            "select TV_Channel.series_name, TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.series_name, TV_Channel.Country, t2.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.012089304625988007,
            0.00019968686683569103,
            0.00020380243950057775,
            0.00010920222121058032,
            0.00017532195488456637,
            0.00010081604705192149,
            0.0001586611761013046,
            0.00010526874393690377
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the series name and country of the TV channel that plays cartoons directed by Ben Jones and Michael Chang.",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Country",
            "select TV_Channel.series_name, TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.series_name, TV_Channel.Country, t2.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon TV_series Cartoon",
            "TV_Channel TV_Channel Cartoon"
        ],
        "align_scores": [
            0.005901147145777941,
            0.0001447087270207703,
            0.0001812085829442367,
            7.65486474847421e-05,
            0.0001404802460456267,
            7.453747093677521e-05,
            0.00011588949564611539,
            7.082935189828277e-05
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the series name and country of the tv channel that is currently showing some cartoons directed by Ben Jones and Michael Chang?",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Country",
            "select TV_Channel.series_name, TV_Channel.Country, Cartoon.Channel",
            "select TV_Channel.series_name, TV_Channel.Country, t2.c8",
            "select TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon TV_series Cartoon"
        ],
        "align_scores": [
            0.002190039958804846,
            0.00021346562425605953,
            0.00016804980987217277,
            0.00010705373279051855,
            0.00014350857236422598,
            9.610939014237374e-05,
            0.0001551206223666668,
            9.361057163914666e-05
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which TV channels play cartoons directed by Ben Jones and Michael Chang? Give them a series name and country.",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.Country",
            "select t 0.c1, TV_Channel.Country",
            "select to.c1, TV_Channel.Country",
            "select TV_series.Episode, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon TV_series Cartoon"
        ],
        "align_scores": [
            0.01759064942598343,
            0.00021903797460254282,
            0.00026619856362231076,
            0.00011500332038849592,
            0.00021508635836653411,
            9.12718751351349e-05,
            0.00027494601090438664,
            0.00010928252595476806
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the nation and pixel aspect ratio of TV channel that do not use English?",
        "gold_select": "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Country, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Language, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Country.c3, TV_Channel.Pixel_aspect_ratio_PAR.",
            "select TV_Channel.Country, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.98347407579422,
            0.00019878052989952266,
            0.018550356850028038,
            0.00014356304018292576,
            0.00042460058466531336,
            9.326628060080111e-05,
            0.00015591990086250007,
            8.957413956522942e-05
        ],
        "align_select": "select TV_Channel.Country, TV_Channel.Pixel_aspect_ratio_PAR",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Is there a television channel not using English? Find out it's pixel aspect ration and the country that they belong to.",
        "gold_select": "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.Language, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9071018695831299,
            0.0001533487520646304,
            0.00031804319587536156,
            7.941919466247782e-05,
            0.0005469555617310107,
            8.729131513973698e-05,
            0.9084101319313049,
            0.00014250494132284075
        ],
        "align_select": "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out the ids of the TV channels from which countries have more than two TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Country",
            "select t0.c, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.Country, max(TV_Channel.Country)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel TV_series",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.976106584072113,
            0.00021033061784692109,
            0.20753361284732819,
            0.00013664711150340736,
            0.0013077589683234692,
            8.226541831390932e-05,
            0.0001410847471561283,
            6.0898815718246624e-05
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "can you give me the names and id of the countries that have more than two tv channels?",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.Country, TV_Channel.id",
            "select TV_Channel.Country, TV_Channel.series_name",
            "select TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.series_name, TV_Channel.id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.17119696736335754,
            0.0001450557610951364,
            0.000284647656371817,
            6.415604002540931e-05,
            0.00015493626415263861,
            6.364218279486522e-05,
            0.0003750588512048125,
            7.111108425306156e-05
        ],
        "align_select": "select TV_Channel.Country, TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the id of tv channel from countries with more than two tv stations?",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Country",
            "select t0.c, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series Cartoon",
            "TV_Channel TV_series",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9910688400268555,
            0.00015956556308083236,
            0.0013208941090852022,
            8.864756091497838e-05,
            0.00030513532692566514,
            7.013264985289425e-05,
            0.0013208941090852022,
            8.864756091497838e-05
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you give me the id of TV channels from those countries where have more than two TV channels?",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Country",
            "select t0.c, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9851868748664856,
            0.00017615694378037006,
            0.00495724705979228,
            0.00011088480096077546,
            0.00036386921419762075,
            9.383274300489575e-05,
            0.00495724705979228,
            0.00011088480096077546
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find which TV channels come from the countries with more than two TV channels? Give their IDs.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.Country, TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Country",
            "select t0.c, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_Channel TV_series",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9086959958076477,
            0.00017032408504746854,
            0.02974334917962551,
            0.00013583981490228325,
            0.00309026800096035,
            0.0001427633542334661,
            0.00030862336279824376,
            0.00010315709369024262
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all the channel id's (number, more than 2, id) of every TV channel which has more than two TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select tv.c0",
            "select tvchannel.c0",
            "select tv_c0",
            "select tv channel TV_Channel.id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.01727176271378994,
            0.00021913176169618964,
            0.011105228215456009,
            0.0001609028986422345,
            0.005919334944337606,
            0.00011009334411937743,
            0.0005176823469810188,
            7.608978921780363e-05
        ],
        "align_select": "select tv.c0",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the ids of all tv channels having more than 2 tv channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Hight_definition_TV",
            "select tv0.c0",
            "select TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9884737133979797,
            0.00011341073695803061,
            0.0004027097311336547,
            0.00010861639020731673,
            0.010640827938914299,
            0.000133189678308554,
            0.0002950009948108345,
            7.22300901543349e-05
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "which tv channels don't have any cartoon directed by Ben Jones? Give their id.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, Cartoon.Channel",
            "select TV_Channel.id, TV_Channel.series_name",
            "select t0.c, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9054335951805115,
            0.9054335951805115,
            0.0007287768530659378,
            0.0007287768530659378,
            0.00029850236023776233,
            0.00029850236023776233,
            0.00024539310834370553,
            0.00024539310834370553
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the tv-channel id of channels that don't play any cartoons directed by Ben Jones.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select Cartoon.Channel",
            "select TV_Channel.series_name",
            "select TV_Channel.id, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.9394701719284058,
            0.9544216990470886,
            0.9714325070381165,
            0.9698250889778137,
            0.011954889632761478,
            0.02322242222726345,
            0.00038574793143197894,
            0.00036574809928424656
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the id of those channels which do not broadcast cartoons directed by Ben Jones?",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select Cartoon.Channel",
            "select TV_Channel.series_name",
            "select tv.c0"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.9805475473403931,
            0.9805475473403931,
            0.9836750626564026,
            0.9836750626564026,
            0.16497576236724854,
            0.16497576236724854,
            0.6065434217453003,
            0.6065434217453003
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the id of TV channels that don't play any cartoon directed by Ben Jones?",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, Cartoon.Channel",
            "select TV_Channel.id, TV_Channel.series_name",
            "select t0.c, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9845632910728455,
            0.02750440500676632,
            0.0004937188350595534,
            0.00031510929693467915,
            0.00029528012964874506,
            0.0002596368140075356,
            0.00025988544803112745,
            0.00018826714949682355
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "For each TV channel which does not have any cartoons directed by Ben Jones, list their ids.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, Cartoon.Channel",
            "select TV_Channel.id, TV_Channel.series_name",
            "select t0.c, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9221279621124268,
            0.0035096416249871254,
            0.0006816698587499559,
            0.00041041988879442215,
            0.0002839929948095232,
            0.00017858928185887635,
            0.0003287462459411472,
            0.00017312350973952562
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "For each TV channel that does not have any cartoons directed by Ben Jones, list its id.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, Cartoon.Channel",
            "select TV_Channel.id, TV_Channel.series_name",
            "select t0.c, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.8919463157653809,
            0.005131143145263195,
            0.0007020075572654605,
            0.0004832939011976123,
            0.00024727763957343996,
            0.000144159363117069,
            0.00033214924042113125,
            0.00017014748300425708
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the ids of the TV channels where no cartoons are directed by Ben Jones?",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select Cartoon.Channel",
            "select TV_Channel.id, Cartoon.Channel",
            "select TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.9546979069709778,
            0.9546979069709778,
            0.9769089818000793,
            0.9769089818000793,
            0.0008073986391536891,
            0.0008073986391536891,
            0.05210215225815773,
            0.05210215225815773
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all the ids for TV channels that do not have cartoons directed by Ben Jones.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, Cartoon.Channel",
            "select TV_Channel.id, TV_Channel.series_name",
            "select TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9670388102531433,
            0.9670388102531433,
            0.0004246904281899333,
            0.0004246904281899333,
            0.000184416159754619,
            0.000184416159754619,
            0.1271187961101532,
            0.1271187961101532
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What package options does the tv channel that don't have any cartoon directed by Ben Jones has?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Channel",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9828458428382874,
            0.004731437657028437,
            0.00030798904481343925,
            0.00013729152851738036,
            0.00034226180287078023,
            0.00016261060955002904,
            0.00018301408272236586,
            0.00012520038580987602
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the TV channel with the package option of the TV channel that does not have any cartoon directed by Ben Jones.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.id, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.id, TV_Channel.id, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9233254194259644,
            0.01182409655302763,
            0.0002598802384454757,
            0.0001853103458415717,
            0.0001757572899805382,
            0.0001332398533122614,
            0.0001331776293227449,
            0.00011794260353781283
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the package options of the TV channels that does not contain cartoons that have been directed by Ben Jones.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Channel",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Directed_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9790030121803284,
            0.0029963040724396706,
            0.0003541259211488068,
            0.00015486730262637138,
            0.0002140507713193074,
            0.00013736133405473083,
            0.0002887231239583343,
            0.00011990551865892485
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the package option of the TV channel which has no cartoon directed by Ben Jones.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Channel",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9185097217559814,
            0.0016110168071463704,
            0.00020304947975091636,
            0.00013034912990406156,
            0.00013947213301435113,
            0.00011628268839558586,
            0.00011566638568183407,
            9.224186942446977e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the package options of the TV channel without any cartoon directed by Ben Jones?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Channel",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9788069128990173,
            0.0001789711241144687,
            0.00020762320491485298,
            7.674986409256235e-05,
            0.00017305139044765383,
            8.046816947171465e-05,
            0.0001305541372857988,
            7.516178447986022e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the package options for all TV channels that aren't playing any cartoons directed by Ben Jones.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Channel",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.8243849277496338,
            0.004459484480321407,
            0.00028547359397634864,
            0.00011441898823250085,
            0.00023765045625623316,
            0.00014351922436617315,
            0.00015749318117741495,
            0.00011113070650026202
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "For all channels not playing any cartoons directed by Ben Jones, list the package options.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Channel",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9610344171524048,
            0.004845250863581896,
            0.00037714935024268925,
            0.0001736465928843245,
            0.0002719167387112975,
            0.00013082752411719412,
            0.0001869176048785448,
            0.00011228301445953548
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "I want to know the package options of all TV channels which are not showing any cartoons directed by Ben Jones.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Channel",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9795133471488953,
            0.009074796922504902,
            0.00035249453503638506,
            0.00013849172682967037,
            0.00025498916511423886,
            0.00014535868831444532,
            0.00021620900952257216,
            0.00013007981760893017
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "How many tv channels play no cartoons directed by Ben Jones? List them by package option.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select count(*), TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, count(*)",
            "select count(distinct TV_Channel.id), TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, count(*), Cartoon.Title"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.00028921407647430897,
            9.951134416041896e-05,
            0.00018212593568023294,
            8.667750807944685e-05,
            8.094593795249239e-05,
            8.063178393058479e-05,
            9.127987868851051e-05,
            8.35016107885167e-05
        ],
        "align_select": "select count(*), TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "which tv channels do not play any cartoons directed by Ben Jones? List their package options.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.id, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, Cartoon.Channel",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9358072280883789,
            0.00313210254535079,
            0.0003401385329198092,
            0.00018990258104167879,
            0.0003566770756151527,
            0.00014943974383641034,
            0.0001903398078866303,
            0.00011439913214417174
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "The number of poker players was how many?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), poker_player.Poker_Player_ID",
            "select count(*), poker_player.People_ID",
            "select count(*), poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9911590218544006,
            0.9911590218544006,
            0.00016495876479893923,
            0.00016495876479893923,
            0.00021007486793678254,
            0.00021007486793678254,
            0.00019495435117278248,
            0.00019495435117278248
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the poker player earnings in descending order?",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Earnings, t0.c6",
            "select poker_player.Earnings-ORDER BY"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9952844977378845,
            0.9952844977378845,
            0.00022272150090429932,
            0.00022272150090429932,
            0.0003967814554926008,
            0.0003967814554926008,
            0.0052123344503343105,
            0.0052123344503343105
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list the earnings by poker player in descending order?",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Earnings, t0.c6",
            "select poker_player.Earnings-ORDER BY"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.995545506477356,
            0.995545506477356,
            0.00022704813454765826,
            0.00022704813454765826,
            0.0003596473252400756,
            0.0003596473252400756,
            0.004863342735916376,
            0.004863342735916376
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the earnings of poker players listed in descending order?",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Earnings, t0.c6",
            "select poker_player.Earnings, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.995686411857605,
            0.0002218053996330127,
            0.0001761025341693312,
            7.308759086299688e-05,
            0.00042188362567685544,
            0.00021516635024454445,
            0.0001761025341693312,
            7.308759086299688e-05
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the earnings of poker players in descending order?",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Earnings, t0.c6",
            "select poker_player.Earnings, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9957125186920166,
            0.9957125186920166,
            0.00018256911425851285,
            0.00018256911425851285,
            0.0003741648106370121,
            0.0003741648106370121,
            9.372883505420759e-05,
            9.372883505420759e-05
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Who are the poker players? List all the names of them.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select distinct people.Name",
            "select people.Name, poker_player.People_ID",
            "select distinct people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.905329167842865,
            0.054935481399297714,
            0.1261957585811615,
            0.0005409620935097337,
            0.00016926106764003634,
            0.00016808444343041629,
            0.00016729581693653017,
            0.00016416229482274503
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the names of poker players?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select distinct people.Name",
            "select people.Name, poker_player.People_ID",
            "select distinct people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9838045239448547,
            0.11434279382228851,
            0.22556310892105103,
            0.0004591953766066581,
            0.00012796095688827336,
            0.000128169049276039,
            0.00013296875113155693,
            0.00011799118510680273
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the birth date of the poker player having the lowest total earnings?",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, people.Height",
            "select people.People_ID, people.Birth_Date",
            "select people.Birth_Date, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.981187105178833,
            0.9799485802650452,
            0.00019620958482846618,
            0.0001774327247403562,
            0.0003147799288854003,
            0.00046008394565433264,
            0.000641982420347631,
            0.0010120068909600377
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the birth date of the poker player whose earnings are the lowest?",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, people.Height",
            "select people.Birth_Date, people.Name",
            "select people.Birth_Date, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9837032556533813,
            0.00012720620725303888,
            0.00018393639766145498,
            8.177938434528187e-05,
            0.0008684529457241297,
            0.00010027395910583436,
            0.0008133197552524507,
            7.94957231846638e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the money rank of the tallest poker player?",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.24982668459415436,
            6.563797069247812e-05,
            0.00013272262003738433,
            6.323908746708184e-05,
            0.00010934685269603506,
            6.0590242355829105e-05,
            0.00017735660367179662,
            5.900906035094522e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you list all the nationalities which are shared by at least two persons?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, count(*)",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9759212136268616,
            0.00010528269922360778,
            0.005367181729525328,
            7.75667285779491e-05,
            0.0004219826078042388,
            7.680200360482559e-05,
            0.0004247582401148975,
            9.026454790728167e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What nationalities are shared by at least two people?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, min(people.Nationality)",
            "select people.Nationality, min(people.Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9934053421020508,
            8.284577052108943e-05,
            0.0002244200004497543,
            6.211485015228391e-05,
            0.00016478927864227444,
            5.304654041538015e-05,
            0.00017543751164339483,
            5.3870451665716246e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all the nationalities that are shared by at least two persons.",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, count(*)",
            "select people.Nationality, min(people.Name)",
            "select people.Nationality, people.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9761977791786194,
            8.813728345558047e-05,
            0.0030497468542307615,
            6.54279938316904e-05,
            0.0001743853063089773,
            5.409974619396962e-05,
            0.0003255220944993198,
            7.30109604774043e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all the nationalities that are shared among at least two people.",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, count(*)",
            "select people.Nationality, people.People_ID",
            "select people.Nationality, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.992124617099762,
            8.823945972835645e-05,
            0.0026637096889317036,
            6.0963084251852706e-05,
            0.0004563674738164991,
            7.647195889148861e-05,
            0.00029079781961627305,
            5.96537247474771e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Among poker players whose total earnings are less than 200000, what is the maximum number of final tables they made?",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.Earnings",
            "select max(poker_player.Final_Table_Made), poker_player.Poker_Player_ID",
            "select max(poker_player.Final_Table_Made) defying poker_player.Earnings"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9904789328575134,
            0.00027996423887088895,
            0.0003369404294062406,
            0.000149350002175197,
            0.00011526351590873674,
            0.00013969627616461366,
            0.0003145099035464227,
            0.00013033646973781288
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the total number of poker players.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), poker_player.People_ID",
            "select count(*), poker_player.Poker_Player_ID",
            "select count(*), poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9930190443992615,
            0.9930190443992615,
            0.00016802064783405513,
            0.00016802064783405513,
            0.00014572645886801183,
            0.00014572645886801183,
            0.00018756871577352285,
            0.00018756871577352285
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "There are how many poker players?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), poker_player.People_ID",
            "select count(*), poker_player.Poker_Player_ID",
            "select count(*), poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9839418530464172,
            0.9839418530464172,
            0.00018168451788369566,
            0.00018168451788369566,
            0.00015447588521055877,
            0.00015447588521055877,
            0.00016452067939098924,
            0.00016452067939098924
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me how many poker players there are?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), poker_player.People_ID",
            "select count(*), poker_player.Poker_Player_ID",
            "select count(*), poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.983494222164154,
            0.983494222164154,
            0.00017856646445579827,
            0.00017856646445579827,
            0.00016125400725286454,
            0.00016125400725286454,
            0.00017197658598888665,
            0.00017197658598888665
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are Poker players earnings, ordered in descending order of amount earned?",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Poker_Player_ID",
            "select poker_player.Earnings, poker_player.Poker_Player_ID",
            "select poker_player.Earnings-ORDER BY"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9943370223045349,
            0.9943370223045349,
            0.00010535801266087219,
            0.00010535801266087219,
            0.00010535801266087219,
            0.00010535801266087219,
            0.009981195442378521,
            0.009981195442378521
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me the earnings of poker players listed in descending order of value.",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Earnings, t0.c6",
            "select poker_player.Earnings, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9951731562614441,
            0.9951731562614441,
            0.00020235621195752174,
            0.00020235621195752174,
            0.00048021026304923,
            0.00048021026304923,
            0.00010530839062994346,
            0.00010530839062994346
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me the list of poker player's earnings, ordered descending by value.",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Poker_Player_ID",
            "select poker_player.Earnings, t0.c6",
            "select poker_player.Earnings, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9937653541564941,
            0.9937653541564941,
            9.515169949736446e-05,
            9.515169949736446e-05,
            0.0003938634763471782,
            0.0003938634763471782,
            0.00017215150000993162,
            0.00017215150000993162
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the earning of poker players, listed in descending order according to the value of these earnings?",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Poker_Player_ID",
            "select poker_player.Poker_Player_ID, poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9930190443992615,
            0.0002607906935736537,
            0.00011459501547506079,
            8.906342554837465e-05,
            0.0001778470177669078,
            8.945079025579616e-05,
            0.00031807960476726294,
            8.220526797231287e-05
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you show us poker player earnings ordered descending by value?",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Earnings-ORDER BY",
            "select poker_player.Earnings, t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.994026780128479,
            0.994026780128479,
            0.00020920579845551401,
            0.00020920579845551401,
            0.007200977299362421,
            0.007200977299362421,
            0.000507296237628907,
            0.000507296237628907
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me the final table made and the best finishes of each poker player? List them.",
        "gold_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "select_candidates": [
            "select poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.Final_Table_Made.c2, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9917140007019043,
            0.23330184817314148,
            0.00037949939724057913,
            0.0007103748503141105,
            0.00031261760159395635,
            0.0006632881704717875,
            0.0003220159560441971,
            0.00017173768719658256
        ],
        "align_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the final tables made by poker players and their best finishes.",
        "gold_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "select_candidates": [
            "select poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.Final_Table_Made.c2, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9915964007377625,
            0.0059619783423841,
            0.00018554975395090878,
            0.00018087952048517764,
            0.00018040070426650345,
            0.00013212913472671062,
            0.0002646427310537547,
            0.00012066609633620828
        ],
        "align_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the final tables made by poker players and the best finishes they had?",
        "gold_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "select_candidates": [
            "select poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.Final_Table_Made.c2, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9901808500289917,
            0.00037986101233400404,
            0.00018950572120957077,
            8.010068268049508e-05,
            0.00018631118291523308,
            7.495808677049354e-05,
            0.00032811189885251224,
            9.561265324009582e-05
        ],
        "align_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For each player on all poker tables: Show the best finish and final tables made by him/her.",
        "gold_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "select_candidates": [
            "select poker_player.Best_Finish, poker_player.Final_Table_Made",
            "select poker_player.Poker_Player_ID, poker_player.Best_Finish, poker_player.Final_Table_Made",
            "select poker_player.People_ID, poker_player.Best_Finish, poker_player.Final_Table_Made",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9897720217704773,
            0.4957197308540344,
            0.006092559080570936,
            0.005296056624501944,
            0.0015126127982512116,
            0.002276105573400855,
            0.004270481877028942,
            0.004719933029264212
        ],
        "align_select": "select poker_player.Best_Finish, poker_player.Final_Table_Made",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For all poker players, give me the following information: final tables made, their best finishes.",
        "gold_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "select_candidates": [
            "select poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.Final_Table_Made.c2, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9938527345657349,
            0.00595345301553607,
            0.0008993753581307828,
            0.00021670723799616098,
            0.0007125326083041728,
            0.00019129208521917462,
            0.00030183602939359844,
            0.0001326180063188076
        ],
        "align_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For each poker player, what was his/her final table made and best finish?",
        "gold_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "select_candidates": [
            "select poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.Final_Table_Made), poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9931125044822693,
            0.09340695291757584,
            0.0024567737709730864,
            0.004092185292392969,
            0.0010292507940903306,
            0.002378646284341812,
            0.002890550997108221,
            0.0009644415113143623
        ],
        "align_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For all poker players, list all final tables made and best finish.",
        "gold_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "select_candidates": [
            "select poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.Earnings, poker_player.Final_Table_Made, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.994353175163269,
            0.0001694496750133112,
            0.0004095360345672816,
            7.907581311883405e-05,
            0.0003188042901456356,
            9.455130202695727e-05,
            0.00024334905901923776,
            8.839154179440811e-05
        ],
        "align_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the best finishes and final tables made by all poker players?",
        "gold_select": "select poker_player.Final_Table_Made, poker_player.Best_Finish",
        "select_candidates": [
            "select poker_player.Best_Finish, poker_player.Final_Table_Made",
            "select poker_player.People_ID, poker_player.Best_Finish, poker_player.Final_Table_Made",
            "select poker_player.Poker_Player_ID, poker_player.Best_Finish, poker_player.Final_Table_Made",
            "select poker_player.Final_Table_Made, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9894137382507324,
            0.00010154148912988603,
            0.0001963971444638446,
            9.150734695140272e-05,
            0.000169381033629179,
            9.757917723618448e-05,
            0.9913471341133118,
            0.00014492413902189583
        ],
        "align_select": "select poker_player.Best_Finish, poker_player.Final_Table_Made",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "The average earnings of poker players is how much?",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select avg(poker_player.Earnings), poker_player.Poker_Player_ID",
            "select avg(poker_player.Earnings), t0.c6",
            "select an avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9967177510261536,
            6.019614011165686e-05,
            9.765272261574864e-05,
            5.065814548288472e-05,
            0.0003523695340845734,
            7.27259975974448e-05,
            0.000397173163946718,
            8.674728451296687e-05
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For all poker players, return an average of their earnings over time?",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select poker_player.Earnings, avg(poker_player.Earnings)",
            "select poker_player.Earnings",
            "select poker_player.Poker_Player_ID, avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9947190284729004,
            0.0016069323755800724,
            0.00014565812307409942,
            0.0006403765291906893,
            0.007256324402987957,
            0.0005271665286272764,
            0.020217981189489365,
            0.15584763884544373
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all poker player's average earnings.",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select poker_player.Earnings, avg(poker_player.Earnings)",
            "select poker_player.Earnings",
            "select poker_player.Earnings0, avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9953731894493103,
            0.0006691314047202468,
            0.00020914553897455335,
            0.0004696945834439248,
            0.001890459912829101,
            0.29469189047813416,
            0.00015486168558709323,
            0.0002051079791272059
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please return the average earnings across all poker games played by each player.",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select poker_player.Poker_Player_ID, avg(poker_player.Earnings)",
            "select poker_player.People_ID, avg(poker_player.Earnings)",
            "select avg(poker_player.Earnings)",
            "select poker_player.Final_Table_Made, avg(poker_player.Earnings)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.14691101014614105,
            0.9082943797111511,
            0.03872976824641228,
            0.3142997622489929,
            0.9950540065765381,
            0.9333937764167786,
            0.00015811852063052356,
            0.0028713427018374205
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you return the average earnings among poker players?",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select an avg(poker_player.Earnings)",
            "select  avg(poker_player.Earnings)",
            "select the avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9957699179649353,
            7.260923302965239e-05,
            0.0004169369931332767,
            0.0001034206579788588,
            0.9957699179649353,
            7.260923302965239e-05,
            0.0003527140652295202,
            0.00010877723980229348
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the money rank of the poker player with the highest earnings?",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9808279871940613,
            7.880737393861637e-05,
            0.0002159300638595596,
            7.005009683780372e-05,
            0.0005955486558377743,
            7.321845623664558e-05,
            0.00022543803788721561,
            7.190051110228524e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What was the maximum final table made by all poker players who had earnings below 200000?",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.Best_Finish",
            "select max(poker_player.Final_Table_Made), poker_player.Earnings",
            "select max(poker_player.Final_Table_Made), poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9919924736022949,
            0.00010786673374241218,
            0.0001751860836520791,
            6.620431668125093e-05,
            0.00017462472897022963,
            6.480432057287544e-05,
            0.0001751860836520791,
            6.620431668125093e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the maximum final table made by all poker players with earnings below 200000?",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.Best_Finish",
            "select max(poker_player.Final_Table_Made), poker_player.Earnings",
            "select max(poker_player.Final_Table_Made), poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9948845505714417,
            0.00011312127753626555,
            0.00016904914809856564,
            6.899078289279714e-05,
            0.00016535971371922642,
            6.806454621255398e-05,
            0.00016904914809856564,
            6.899078289279714e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you return the maximum table made by all poker players whose earnings are below 200000?",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.Earnings",
            "select max(t0.c6)",
            "select max(poker_player.Final_Table_Made), poker_player.Earnings"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9927651286125183,
            0.00011101736890850589,
            0.00017670434317551553,
            6.816204404458404e-05,
            0.0004948156420141459,
            9.387104364577681e-05,
            0.00017670434317551553,
            6.816204404458404e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you return to me the names of all poker players?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select distinct people.Name",
            "select people.Name, poker_player.People_ID",
            "select distinct people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9732007384300232,
            0.06356237828731537,
            0.3401643633842468,
            0.00039944954914972186,
            0.00014297585585154593,
            0.00013053994916845113,
            0.0001314126857323572,
            0.00010768276843009517
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the names of all the poker players?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select distinct people.Name",
            "select people.Name, poker_player.People_ID",
            "select distinct people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9134007692337036,
            0.047307681292295456,
            0.4566904306411743,
            0.0004618041275534779,
            0.0001542768586659804,
            0.0001334001572104171,
            0.00013055151794105768,
            0.00011465315037639812
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the names of all the poker players?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select distinct people.Name",
            "select people.Name, poker_player.People_ID",
            "select distinct people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9213857054710388,
            0.04358501732349396,
            0.4963849186897278,
            0.0005345919053070247,
            0.00015169054677244276,
            0.00013604384730570018,
            0.000133193883812055,
            0.00010906443640124053
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names of poker players ordered by final tables made in ascending order?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Final_Table_Made",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.994440495967865,
            0.994440495967865,
            0.00043767347233369946,
            0.00043767347233369946,
            0.00011436226486694068,
            0.00011436226486694068,
            0.0001139866653829813,
            0.0001139866653829813
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all the poker player's names according to the final tables, sorted in ascending order.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Final_Table_Made",
            "select people.Name, poker_player.Best_Finish",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9898793697357178,
            0.9898793697357178,
            0.00028990203281864524,
            0.00028990203281864524,
            0.00042030849726870656,
            0.00042030849726870656,
            0.00011995470413239673,
            0.00011995470413239673
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of poker players listed ordered by final tables made in ascending order?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Final_Table_Made",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9944754242897034,
            0.9944754242897034,
            0.0001176121731987223,
            0.0001176121731987223,
            0.0004206279118079692,
            0.0004206279118079692,
            0.00011778884072555229,
            0.00011778884072555229
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the names of poker players sorted in ascending order of the final table.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID",
            "select people.Name, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9940999150276184,
            0.9940999150276184,
            0.00010677763202693313,
            0.00010677763202693313,
            0.00010741027654148638,
            0.00010741027654148638,
            0.00030443212017416954,
            0.00030443212017416954
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of poker players listed in ascending order by final tables reached at?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Final_Table_Made",
            "select people.Name, people.Birth_Date",
            "select people.Name (ordered by poker_player.Final_Table_Made)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9938287138938904,
            0.9938287138938904,
            0.0003937508736271411,
            0.0003937508736271411,
            0.00019953440641984344,
            0.00019953440641984344,
            0.0070961457677185535,
            0.0070961457677185535
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you give me the names of poker players, ordered ascending by the number of final tables they have made?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Final_Table_Made",
            "select people.Name, poker_player.People_ID",
            "select people.Name (ordered by poker_player.Final_Table_Made)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9904100894927979,
            0.9904100894927979,
            0.0006898761494085193,
            0.0006898761494085193,
            0.00017634853429626673,
            0.00017634853429626673,
            0.006281836424022913,
            0.006281836424022913
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of poker players, listed in ascending order by the number of final tables they have made?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Final_Table_Made",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9879506826400757,
            0.9879506826400757,
            0.0005377205670811236,
            0.0005377205670811236,
            0.00016895339649636298,
            0.00016895339649636298,
            0.00018733099568635225,
            0.00018733099568635225
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Give me the names of poker players, first ordered by the number of final tables they have made, then ascending.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Final_Table_Made",
            "select people.Name, poker_player.People_ID",
            "select people.Name (ordered by poker_player.Final_Table_Made)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9855980277061462,
            0.9855980277061462,
            0.0004923508386127651,
            0.0004923508386127651,
            0.0001615171495359391,
            0.0001615171495359391,
            0.00968907680362463,
            0.00968907680362463
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you return to me the birth date of the poker player with the lowest earnings?",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, people.Height",
            "select people.People_ID, people.Birth_Date",
            "select people.Birth_Date, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9814862608909607,
            9.307001892011613e-05,
            0.00017985678277909756,
            6.666062108706683e-05,
            0.00034021263127215207,
            7.025802915450186e-05,
            0.0002767514670267701,
            6.457471317844465e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the average earnings of poker players taller than 200 cm?",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select an avg(poker_player.Earnings)",
            "select avg(poker_player.Earnings), people.Height",
            "select  avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9962806105613708,
            0.00010879498586291447,
            0.00040964398067444563,
            0.00010945659596472979,
            0.00020463662804104388,
            0.006718895863741636,
            0.9962806105613708,
            0.00010879498586291447
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me the average earnings of poker players who are taller than 200 cm.",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select an avg(poker_player.Earnings)",
            "select  avg(poker_player.Earnings)",
            "select the avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9960401058197021,
            0.00011452082981122658,
            0.00044710806105285883,
            0.00011718790483428165,
            0.9960401058197021,
            0.00011452082981122658,
            0.000419388321461156,
            0.00015883403830230236
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the average earnings of poker players who are over 200 cm tall?",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select avg(poker_player.Earnings), people.Height",
            "select an avg(poker_player.Earnings)",
            "select avg(t0, poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9957016110420227,
            0.0001262681616935879,
            0.00022902207274455577,
            0.005954138934612274,
            0.0004580561362672597,
            0.00012671395961660892,
            0.0005361682851798832,
            0.0001203724677907303
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the average earnings of poker players who are more than 200 inches tall.",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select an avg(poker_player.Earnings)",
            "select avg(poker_player.Earnings), people.Height",
            "select  avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9932244420051575,
            0.000129444437334314,
            0.00041432143189013004,
            0.00011751622514566407,
            0.0002101844729622826,
            0.0018974842969328165,
            0.9932244420051575,
            0.000129444437334314
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me the names of poker players in descending order of earnings.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Earnings",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9945882558822632,
            0.9945882558822632,
            0.00024503350141458213,
            0.00024503350141458213,
            0.00014718931925017387,
            0.00014718931925017387,
            0.0001842776546254754,
            0.0001842776546254754
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list the names of poker players in descending order of their earnings?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Earnings",
            "select people.Name (ordered by poker_player.Earnings)",
            "select people.Nationality, poker_player.Earnings"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9924336671829224,
            0.9924336671829224,
            0.0004147956788074225,
            0.0004147956788074225,
            0.007095202337950468,
            0.007095202337950468,
            0.00018121152243111283,
            0.00018121152243111283
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you show me the names of poker players in descending order of earnings?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Earnings",
            "select people.Name, poker_player.People_ID",
            "select people.Nationality, poker_player.Earnings"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9940475225448608,
            0.9940475225448608,
            0.0002914561773650348,
            0.0002914561773650348,
            0.00014337328320834786,
            0.00014337328320834786,
            0.0001787224755389616,
            0.0001787224755389616
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Give me the poker players' names sorted in descending order of their earnings.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Earnings",
            "select people.Nationality, poker_player.Earnings",
            "select people.Nationality, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9941847920417786,
            0.9941847920417786,
            0.0002583330206107348,
            0.0002583330206107348,
            0.00015221739886328578,
            0.00015221739886328578,
            0.000160758281708695,
            0.000160758281708695
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Return the names of poker players in descending order of their earnings.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Earnings",
            "select people.Nationality, poker_player.Earnings",
            "select people.Name (ordered by poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9946528673171997,
            0.9946528673171997,
            0.0002472189662512392,
            0.0002472189662512392,
            0.00013599457452073693,
            0.00013599457452073693,
            0.00337783875875175,
            0.00337783875875175
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you tell me the poker player names ordered by their earnings descending?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Earnings",
            "select people.Name, poker_player.People_ID",
            "select people.Name (ordered by poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9943178296089172,
            0.9943178296089172,
            0.0002810870064422488,
            0.0002810870064422488,
            0.00014071527402848005,
            0.00014071527402848005,
            0.002806771779432893,
            0.002806771779432893
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of the poker players sorted in descending order of their earnings?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Earnings",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9928992986679077,
            0.9928992986679077,
            0.00024567850050516427,
            0.00024567850050516427,
            0.00013591292372439057,
            0.00013591292372439057,
            0.0001929762220242992,
            0.0001929762220242992
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you return the names of poker players ranked by their earnings descending?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Earnings",
            "select people.Name, poker_player.Money_Rank",
            "select people.Name, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9939560294151306,
            0.9939560294151306,
            0.00036492772051133215,
            0.00036492772051133215,
            0.00032183516304939985,
            0.00032183516304939985,
            0.0001668214681558311,
            0.0001668214681558311
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of people of different nationalities? List the numbers of people coming from each nation.",
        "gold_select": "select people.Nationality, count(*)",
        "select_candidates": [
            "select people.Name, count(*)",
            "select people.Name, count(*), people.Nationality",
            "select people.Nationality, count(*)",
            "select people.Name, people.Nationality, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9656203985214233,
            0.0003581466735340655,
            0.8903951644897461,
            0.0001376852160319686,
            0.020868441089987755,
            0.0002095307718263939,
            0.796454668045044,
            0.0001302494783885777
        ],
        "align_select": "select people.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the list of names and numbers of people for each nationality.",
        "gold_select": "select people.Nationality, count(*)",
        "select_candidates": [
            "select people.Name, count(*)",
            "select people.Name, count(*), people.Nationality",
            "select people.Nationality, count(*)",
            "select people.Name, people.Nationality, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.7243210077285767,
            0.00013128944556228817,
            0.987883985042572,
            0.00013825934729538858,
            0.000470962404506281,
            0.00016721512656658888,
            0.9877154231071472,
            0.0001477826590416953
        ],
        "align_select": "select people.Name, count(*), people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each different nations, can you tell what number of people come from each nation?",
        "gold_select": "select people.Nationality, count(*)",
        "select_candidates": [
            "select people.Nationality, count(*)",
            "select people.Nationality, count(*)",
            "select people.Nationality., count(*)",
            "select count(*), people.Nationality"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9929439425468445,
            0.00024311227025464177,
            0.9929439425468445,
            0.00024311227025464177,
            0.0024170533288270235,
            0.00018411500786896795,
            0.9930742979049683,
            0.0002429818268865347
        ],
        "align_select": "select people.Nationality, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each nationality, can you tell me the number of people from that nation?",
        "gold_select": "select people.Nationality, count(*)",
        "select_candidates": [
            "select people.Nationality, count(*)",
            "select people.Nationality, count(*)",
            "select people.Nationality, count(*), people.Name",
            "select people.Nationality., count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9962736368179321,
            0.00023884006077423692,
            0.9962736368179321,
            0.00023884006077423692,
            0.00029779403121210635,
            0.00012858120317105204,
            0.0023176309186965227,
            0.00018202263163402677
        ],
        "align_select": "select people.Nationality, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "In what proportion of cases are people of a particular nationality?",
        "gold_select": "select people.Nationality, count(*)",
        "select_candidates": [
            "select people.Nationality, count(*)",
            "select people.Nationality, count(*), people.Name",
            "select people.Nationality, count(*), people.People_ID",
            "select country people.Nationality, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.018064575269818306,
            0.0001389101817039773,
            0.00011489995085867122,
            7.828903471818194e-05,
            0.00011169184290338308,
            7.193862984422594e-05,
            0.0006674703327007592,
            0.0001550318847876042
        ],
        "align_select": "select people.Nationality, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "In total, the number of people from each nationality is How many?",
        "gold_select": "select people.Nationality, count(*)",
        "select_candidates": [
            "select people.Nationality, count(*)",
            "select people.Nationality, sum(people.Name)",
            "select people.Nationality, count(*), sum(people.Name)",
            "select people.Nationality, sum(people.Height)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9959251880645752,
            0.0002015870704781264,
            0.0015735123306512833,
            0.0002473778440617025,
            0.00022060194169171154,
            9.02791871340014e-05,
            0.001088573015294969,
            0.00014821025251876563
        ],
        "align_select": "select people.Nationality, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show the number of people in each nationality.",
        "gold_select": "select people.Nationality, count(*)",
        "select_candidates": [
            "select people.Nationality, count(*)",
            "select people.Nationality, count(*), people.Name",
            "select people.Nationality, count(*), people.People_ID",
            "select count(*), people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9963059425354004,
            0.000132138971821405,
            0.00021024761372245848,
            8.109760528896004e-05,
            0.0001609912869753316,
            7.581874524476007e-05,
            0.9963854551315308,
            0.0001335834531346336
        ],
        "align_select": "select people.Nationality, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the number of people from each nationality.",
        "gold_select": "select people.Nationality, count(*)",
        "select_candidates": [
            "select people.Nationality, count(*)",
            "select count(*), people.Nationality",
            "select people.Nationality, count(*), people.Name",
            "select people.Nationality, count(*), people.People_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9965044260025024,
            0.00013782051973976195,
            0.996554970741272,
            0.00015125265053939074,
            0.00019875341968145221,
            8.773410809226334e-05,
            0.00016003333439584821,
            7.776194979669526e-05
        ],
        "align_select": "select people.Nationality, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the number of people in each nationality?",
        "gold_select": "select people.Nationality, count(*)",
        "select_candidates": [
            "select people.Nationality, count(*)",
            "select count(*), people.Nationality",
            "select people.Nationality, count(*), people.Name",
            "select people_people.Nationality, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9963058233261108,
            0.0001300914736930281,
            0.9962687492370605,
            0.0001426656381227076,
            0.00023515756765846163,
            8.34244056022726e-05,
            0.000522078771609813,
            0.00013548873539548367
        ],
        "align_select": "select people.Nationality, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Among all people, what is the most common nationality?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.People_ID",
            "select people.Nationality, people.Name, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.994640588760376,
            6.255091284401715e-05,
            0.00040231033926829696,
            5.605305341305211e-05,
            0.0003008164931088686,
            5.45346483704634e-05,
            0.0001372945262119174,
            5.4042051488067955e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Of people, what is the most common nationality?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.People_ID",
            "select people.Nationality, people.Name, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.995315670967102,
            6.482032767962664e-05,
            0.0003142875211779028,
            5.46436567674391e-05,
            0.00021485761681105942,
            5.287659223540686e-05,
            0.00012468213390093297,
            5.22494301549159e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What nationality was the most common among people?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.People_ID",
            "select people.Nationality, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9935947060585022,
            7.280828867806122e-05,
            0.0002851765020750463,
            5.762801811215468e-05,
            0.00019837668514810503,
            5.428191798273474e-05,
            0.00016492274880874902,
            5.200059604248963e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Among all, which nationality is the most popular? Describe them to me.",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.Name, people.Birth_Date",
            "select people.Nationality, people.Name, people.Height"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9774972796440125,
            8.082021668087691e-05,
            0.0005593325477093458,
            6.490809755632654e-05,
            0.00012754288036376238,
            6.013223173795268e-05,
            0.00012554385466501117,
            5.84990884817671e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the nationality that is most often found among all people?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.Name, people.Birth_Date",
            "select people.Nationality, people.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9930444359779358,
            7.855766307329759e-05,
            0.00029120093677192926,
            6.0426773416111246e-05,
            0.00014258826558943838,
            5.6585820857435465e-05,
            0.00021145145001355559,
            5.7468594604870304e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you list all the nationalities with two or more people?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, count(*)",
            "select people.Nationality AFFECT-FROM-GROUP BY-HAVING",
            "select people.Nationality ARGENTINAL-GROUP BY-HAVING"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9940769672393799,
            0.0001421168417437002,
            0.0020287856459617615,
            7.983919203979895e-05,
            0.00019746781617868692,
            7.19874951755628e-05,
            0.00019543807138688862,
            7.825783541193232e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Return all nationalities of persons for which there are two or more persons.",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, count(*)",
            "select people.Nationality, people.Name, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9961230158805847,
            7.649843610124663e-05,
            0.46849745512008667,
            6.472316454164684e-05,
            0.05163039267063141,
            7.29795647202991e-05,
            0.00021625518274959177,
            5.324774974724278e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the list of names and birth dates sorted in ascending alphabetical order?",
        "gold_select": "select people.Name, people.Birth_Date",
        "select_candidates": [
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Birth_Date, people.Height",
            "select t1.c 2, people.Birth_Date",
            "select people.Name, people.Birth_Date, t1.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9953314661979675,
            0.9953314661979675,
            0.00012561246694531292,
            0.00012561246694531292,
            0.0005050493055023253,
            0.0005050493055023253,
            0.0001588506856933236,
            0.0001588506856933236
        ],
        "align_select": "select people.Name, people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "In ascending alphabetical order list the names and birth dates of people.",
        "gold_select": "select people.Name, people.Birth_Date",
        "select_candidates": [
            "select people.Name, people.Birth_Date",
            "select t1.c 2, people.Birth_Date",
            "select people.Name), people.Birth_Date",
            "select people.Name., people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9960286617279053,
            0.9960286617279053,
            0.0003402750880923122,
            0.0003402750880923122,
            0.0015412832144647837,
            0.0015412832144647837,
            0.0025754966773092747,
            0.0025754966773092747
        ],
        "align_select": "select people.Name, people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list the names and birth dates of people in ascending alphabetical order by name?",
        "gold_select": "select people.Name, people.Birth_Date",
        "select_candidates": [
            "select people.Name, people.Birth_Date",
            "select t1.c 2, people.Birth_Date",
            "select people.Name), people.Birth_Date",
            "select people.Birth_Date, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9949541687965393,
            0.9949541687965393,
            0.00034488673554733396,
            0.00034488673554733396,
            0.0020964962895959616,
            0.0020964962895959616,
            0.9955102205276489,
            0.9955102205276489
        ],
        "align_select": "select people.Name, people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me the list of names and birth dates of people in ascending alphabetical order of name.",
        "gold_select": "select people.Name, people.Birth_Date",
        "select_candidates": [
            "select people.Name, people.Birth_Date",
            "select t1.c 2, people.Birth_Date",
            "select people.Name), people.Birth_Date",
            "select people.Name., people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9950005412101746,
            0.9950005412101746,
            0.00028903078055009246,
            0.00028903078055009246,
            0.0016241155099123716,
            0.0016241155099123716,
            0.0020309339743107557,
            0.0020309339743107557
        ],
        "align_select": "select people.Name, people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me the names and birth dates of people in ascending alphabetical order.",
        "gold_select": "select people.Name, people.Birth_Date",
        "select_candidates": [
            "select people.Name, people.Birth_Date",
            "select t1.c 2, people.Birth_Date",
            "select people.Name), people.Birth_Date",
            "select people.Name., people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9955800175666809,
            0.9955800175666809,
            0.00038372777635231614,
            0.00038372777635231614,
            0.0018502147868275642,
            0.0018502147868275642,
            0.0019386829808354378,
            0.0019386829808354378
        ],
        "align_select": "select people.Name, people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me the names, and birth dates of everyone listed in alphabetical order.",
        "gold_select": "select people.Name, people.Birth_Date",
        "select_candidates": [
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Birth_Date",
            "select people.Name), people.Birth_Date",
            "select t1.c 2, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9908908009529114,
            0.9908908009529114,
            0.9908908009529114,
            0.9908908009529114,
            0.0017176028341054916,
            0.0017176028341054916,
            0.00041131090256385505,
            0.00041131090256385505
        ],
        "align_select": "select people.Name, people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you show me the names of people whose nationality is not \"Russia\"?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Name, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people"
        ],
        "align_scores": [
            0.9894605278968811,
            0.0001968339638551697,
            0.00022733969672117382,
            6.307207513600588e-05,
            0.0003157994942739606,
            6.91488676238805e-05,
            0.00017948381719179451,
            6.802964344387874e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the names of people whose nationality is not Russia?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Height"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people"
        ],
        "align_scores": [
            0.989273726940155,
            0.00018340871611144394,
            0.00022521504433825612,
            6.427711196010932e-05,
            0.00016126046830322593,
            6.92548492224887e-05,
            0.0001316334237344563,
            6.281260721152648e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me what are the names of the people not from Russia?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Height",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people"
        ],
        "align_scores": [
            0.9910104274749756,
            0.00015433895168825984,
            0.00014534722140524536,
            6.277804641285911e-05,
            0.00014019962691236287,
            5.9349022194510326e-05,
            0.00014917663065716624,
            6.33758245385252e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of those people who are not from russia.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Nationality",
            "select people.Name, people.Height"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9683285355567932,
            0.00012618882465176284,
            0.0001651394268264994,
            6.776340160286054e-05,
            0.00014822761295363307,
            6.965781358303502e-05,
            0.00014322626520879567,
            5.9179474192205817e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of people who are not from Russia, please?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Height"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.990892767906189,
            0.00012871995568275452,
            0.00016986882837954909,
            6.937620491953567e-05,
            0.0001958598877536133,
            6.883097375975922e-05,
            0.00015920431178528816,
            6.12016738159582e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of people who do not come from Russia?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Height"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people"
        ],
        "align_scores": [
            0.9901670217514038,
            0.0001545710547361523,
            0.00013417706941254437,
            6.82812969898805e-05,
            0.0001418836909579113,
            6.232887244550511e-05,
            0.00013551277515944093,
            5.610738298855722e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which people do not play poker? List them by name.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.People_ID",
            "select people.People_ID, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.5031300783157349,
            0.8139616847038269,
            0.0001680161658441648,
            0.00018588124657981098,
            0.000200852460693568,
            0.00020040998060721904,
            0.0002765488752629608,
            0.0003285451384726912
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of non-pokers players?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Nationality",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people"
        ],
        "align_scores": [
            0.9321521520614624,
            0.032914865761995316,
            0.00013226980809122324,
            9.163089998764917e-05,
            0.00011782322690123692,
            0.0001088059798348695,
            0.00014709446986671537,
            0.00010431554255774245
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of those who are not poker players?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "poker_player people",
            "people"
        ],
        "align_scores": [
            0.8639807105064392,
            0.00038866029353812337,
            0.00017225230112671852,
            7.245622691698372e-05,
            0.00011184682080056518,
            7.32318585505709e-05,
            0.0001295181573368609,
            7.179006206570193e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of people that are not poker players? List them.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Birth_Date, people.Height",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.9709269404411316,
            0.0006552902050316334,
            0.00016672858328092843,
            8.758146577747539e-05,
            0.0001300670555792749,
            8.284244540845975e-05,
            0.00011893190821865574,
            7.589556480525061e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which people aren't poker players? List them by name.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select distinct people.Name",
            "select people.Name, people.People_ID",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.7360701560974121,
            0.8468806147575378,
            0.026880791410803795,
            0.12160813063383102,
            0.00017793556617107242,
            0.0002021635591518134,
            0.00016856803267728537,
            0.00013939767086412758
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you list the names of people who don't like to play Poker?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Nationality",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "poker_player people",
            "people",
            "people poker_player people"
        ],
        "align_scores": [
            0.36854904890060425,
            0.9393725395202637,
            0.0002278652973473072,
            0.0002670020330697298,
            0.00032093681511469185,
            0.00027782347751781344,
            0.0002014109049923718,
            0.00017114622460212559
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the people who don't play poker? List their names.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Nationality, people.Name",
            "select people.People_ID, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.7680315375328064,
            0.9295483827590942,
            0.0002463474520482123,
            0.00017322308849543333,
            0.00026380637427791953,
            0.00028028737870045006,
            0.0002925508306361735,
            0.0003495786804705858
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What are the names of people (excluding poker players)?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.People_ID",
            "select people.Name, people.Birth_Date",
            "select people.Name (excluding poker_player.People_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "poker_player people",
            "people"
        ],
        "align_scores": [
            0.0030871431808918715,
            0.9938008189201355,
            0.0001588676532264799,
            0.00010105089313583449,
            9.999246685765684e-05,
            0.0001215704032802023,
            0.00021900955471210182,
            0.0008552888175472617
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the people without poker playing as names.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select distinct people.Name",
            "select people.People_ID, people.Name",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "poker_player people",
            "people"
        ],
        "align_scores": [
            0.036271993070840836,
            0.7247437238693237,
            0.006879524793475866,
            0.05145857855677605,
            0.00013714707165490836,
            0.00015335416537709534,
            0.00012803773279301822,
            0.00012492513633333147
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Who do NOT play poker? List their names.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select distinct people.Name",
            "select people.People_ID, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.6394213438034058,
            0.8842822313308716,
            0.00018217161414213479,
            0.00019654720381367952,
            0.020434493198990822,
            0.08137745410203934,
            0.00023917504586279392,
            0.00029321209876798093
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please provide me the count of distinct nationalities.",
        "gold_select": "select count(distinct people.Nationality)",
        "select_candidates": [
            "select count(distinct people.Nationality)",
            "select count (distinct people.Nationality)",
            "select count(distinct t1.c 1)",
            "select count(distinct people.Nationality)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9967478513717651,
            0.9967478513717651,
            0.0037081583868712187,
            0.0037081583868712187,
            0.0005705744842998683,
            0.0005705744842998683,
            0.9967478513717651,
            0.9967478513717651
        ],
        "align_select": "select count(distinct people.Nationality)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give the count of nationalities.",
        "gold_select": "select count(distinct people.Nationality)",
        "select_candidates": [
            "select count(distinct people.Nationality)",
            "select count(count(distinct people.Nationality)",
            "select count(*)",
            "select count(different people.Nationality)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9920485615730286,
            0.9920485615730286,
            0.00035628932528197765,
            0.00035628932528197765,
            0.9939414262771606,
            0.9939414262771606,
            0.001554211718030274,
            0.001554211718030274
        ],
        "align_select": "select count(distinct people.Nationality)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "There are how many different nationalities?",
        "gold_select": "select count(distinct people.Nationality)",
        "select_candidates": [
            "select count(distinct people.Nationality)",
            "select count (distinct people.Nationality)",
            "select count(count(distinct people.Nationality)",
            "select count(distinct t1.c 1)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9953118562698364,
            0.9953118562698364,
            0.011839696206152439,
            0.011839696206152439,
            0.00047141476534307003,
            0.00047141476534307003,
            0.0007833260460756719,
            0.0007833260460756719
        ],
        "align_select": "select count(distinct people.Nationality)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of distinct nationalities in the world.",
        "gold_select": "select count(distinct people.Nationality)",
        "select_candidates": [
            "select count(distinct people.Nationality)",
            "select count(count(distinct people.Nationality)",
            "select count(distinct people.Name)",
            "select count (distinct people.Nationality)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9949015378952026,
            0.9949015378952026,
            0.0003873655223287642,
            0.0003873655223287642,
            0.009904084727168083,
            0.009904084727168083,
            0.002772775711491704,
            0.002772775711491704
        ],
        "align_select": "select count(distinct people.Nationality)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you count the number of nationalities?",
        "gold_select": "select count(distinct people.Nationality)",
        "select_candidates": [
            "select count(distinct people.Nationality)",
            "select count(count(distinct people.Nationality)",
            "select count(different people.Nationality)",
            "select count(distinct people.Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.7621888518333435,
            0.7621888518333435,
            0.0005132407532073557,
            0.0005132407532073557,
            0.0033135470002889633,
            0.0033135470002889633,
            0.007265456952154636,
            0.007265456952154636
        ],
        "align_select": "select count(distinct people.Nationality)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In the following number, how many different nationalities does it contain?",
        "gold_select": "select count(distinct people.Nationality)",
        "select_candidates": [
            "select count(distinct people.Nationality)",
            "select count(distinct people.Nationality) in count(distinct people.Nationality)",
            "select count(distinct people.Nationality) in the count(distinct people.Nationality)",
            "select count(distinct people.Nationality), people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people"
        ],
        "align_scores": [
            0.987678587436676,
            0.000827924523036927,
            0.00014693985576741397,
            8.862195682013407e-05,
            0.0007725470350123942,
            0.00014097285747993737,
            0.00014310381084214896,
            0.00013313101953826845
        ],
        "align_select": "select count(distinct people.Nationality)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the number of different nationalities?",
        "gold_select": "select count(distinct people.Nationality)",
        "select_candidates": [
            "select count(distinct people.Nationality)",
            "select count (distinct people.Nationality)",
            "select count(distinct t1.c 1)",
            "select count(distinct people.Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9958043694496155,
            0.9958043694496155,
            0.01462232694029808,
            0.01462232694029808,
            0.0009887531632557511,
            0.0009887531632557511,
            0.006510207429528236,
            0.006510207429528236
        ],
        "align_select": "select count(distinct people.Nationality)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In which area codes did voters vote both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'?",
        "gold_select": "select AREA_CODE_STATE.area_code",
        "select_candidates": [
            "select AREA_CODE_STATE.area_code",
            "select VOTES.vote_id",
            "select t0.c, AREA_CODE_STATE.state",
            "select AREA_CODE_STATE.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE CONTESTANTS VOTES",
        "table_candidates": [
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9518716931343079,
            0.0010616957442834973,
            0.01933734491467476,
            0.0012464855099096894,
            0.00024131398822646588,
            0.00010618122178129852,
            0.09030688554048538,
            0.0007731719524599612
        ],
        "align_select": "select AREA_CODE_STATE.area_code",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the area codes in which voters voted for contestants 'Tabatha Gehling' and 'Kelly Clauss'.",
        "gold_select": "select AREA_CODE_STATE.area_code",
        "select_candidates": [
            "select VOTES.state",
            "select AREA_CODE_STATE.area_code",
            "select VOTES.phone_number, VOTES.state",
            "select VOTES.phone_number, AREA_CODE_STATE.area_code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE CONTESTANTS VOTES",
        "table_candidates": [
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.7578571438789368,
            0.000675774528644979,
            0.9089488387107849,
            0.0003590645792428404,
            0.00017064563871826977,
            8.833281754050404e-05,
            0.00030834958306513727,
            0.00010088876297231764
        ],
        "align_select": "select VOTES.state",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "list all the area codes where the voters have voted for the contestants Tabatha Gehling or Kelly Clauss.",
        "gold_select": "select AREA_CODE_STATE.area_code",
        "select_candidates": [
            "select distinct VOTES.vote_id",
            "select distinct VOTES.phone_number",
            "select distinct VOTES.state",
            "select distinct VOTES.phone_number, VOTES.state"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE CONTESTANTS VOTES",
        "table_candidates": [
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.0018972000107169151,
            0.00022562427329830825,
            0.06678809970617294,
            0.0010969677241519094,
            0.0016588254366070032,
            0.000254264276009053,
            0.00020030471205245703,
            8.347502443939447e-05
        ],
        "align_select": "select distinct VOTES.vote_id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the last date when votes were created from the state 'CA'?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select max(VOTES.created), AREA_CODE_STATE.state",
            "select max(VOTES.created), VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.8538608551025391,
            0.0003771446645259857,
            0.7948344349861145,
            0.9952972531318665,
            0.00014768305118195713,
            0.00010236366506433114,
            0.00012045697076246142,
            8.061517291935161e-05
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the last created date of votes from the state CA?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select min(VOTES.created)",
            "select max(VOTES.created), VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.4015595018863678,
            0.0002202322648372501,
            0.9223511219024658,
            0.9959498643875122,
            0.06488224118947983,
            0.00018152572738472372,
            9.83811987680383e-05,
            6.766118167433888e-05
        ],
        "align_select": "select VOTES.created",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Please specify the last created date of votes coming from the state 'CA.'.",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select VOTES.vote_id, max(VOTES.created)",
            "select min(VOTES.created)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9836445450782776,
            0.0001375252759316936,
            0.8143922090530396,
            0.9785837531089783,
            0.0001816947478801012,
            0.00010377797298133373,
            0.03484262153506279,
            0.00012172038987046108
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Do you know when was the last date the CA votes from the state was created?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select max(t2.c5)",
            "select max(VOTES.vote_id)",
            "select max(VOTES.contestant_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.30873993039131165,
            0.0006730294553562999,
            0.00047949215513654053,
            0.00020692794350907207,
            0.0006742319674231112,
            0.0002987569023389369,
            0.0005297241150401533,
            0.00036450717016123235
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "There are how many states?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct AREA_CODE_STATE.state)",
            "select count(count(distinct AREA_CODE_STATE.state)",
            "select count(count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "AREA_CODE_STATE",
        "table_candidates": [
            "AREA_CODE_STATE"
        ],
        "align_scores": [
            0.9919582605361938,
            0.9919582605361938,
            0.3589954078197479,
            0.3589954078197479,
            0.000379676726879552,
            0.000379676726879552,
            0.0005041312542743981,
            0.0005041312542743981
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In total, how many states are there?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), AREA_CODE_STATE.state",
            "select count(distinct AREA_CODE_STATE.state)",
            "select count(*), AREA_CODE_STATE.area_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "AREA_CODE_STATE",
        "table_candidates": [
            "AREA_CODE_STATE"
        ],
        "align_scores": [
            0.9926192164421082,
            0.9926192164421082,
            0.0006558338645845652,
            0.0006558338645845652,
            0.049894750118255615,
            0.049894750118255615,
            0.00023915701603982598,
            0.00023915701603982598
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the contestant numbers and names listed in ascending order by contestant name descending?",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, t1.c2",
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, t1.c3",
            "select VOTES.contestant_number, CONTESTANTS.contestant_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS"
        ],
        "align_scores": [
            0.9840131998062134,
            0.9840131998062134,
            0.00013899152691010386,
            0.00013899152691010386,
            0.00012816415983252227,
            0.00012816415983252227,
            0.0008274347055703402,
            0.0008274347055703402
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list the vote ids, phone numbers, and states of all votes?",
        "gold_select": "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
        "select_candidates": [
            "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
            "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
            "select VOTES.vote_id, VOTES.phone_number.c1, VOTES.state",
            "select VOTES.vote_id, VOTES.phone_number, VOTES.state."
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.9942269325256348,
            0.00013344902254175395,
            0.9942269325256348,
            0.00013344902254175395,
            0.0010675315279513597,
            8.561109279980883e-05,
            0.0105604138225317,
            0.0001079743669833988
        ],
        "align_select": "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For each vote, please list all the vote ids, phone numbers, and states.",
        "gold_select": "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
        "select_candidates": [
            "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
            "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
            "select VOTES.vote_id, VOTES.phone_number.c1, VOTES.state",
            "select VOTES.vote_id, VOTES.phone_number), VOTES.state"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.9906722903251648,
            0.0032509551383554935,
            0.9906722903251648,
            0.0032509551383554935,
            0.000834269099868834,
            0.0002529467165004462,
            0.000965108338277787,
            0.0003312925109639764
        ],
        "align_select": "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the phone numbers, vote ids and states of all votes.",
        "gold_select": "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
        "select_candidates": [
            "select VOTES.phone_number, VOTES.vote_id, VOTES.state",
            "select VOTES.phone_number, VOTES.vote_id, VOTES.state",
            "select VOTES.phone_number., VOTES.vote_id, VOTES.state",
            "select VOTES.phone_number, VOTES.vote_id, VOTES.state."
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.995587944984436,
            0.0057451422326266766,
            0.995587944984436,
            0.0057451422326266766,
            0.030807318165898323,
            0.0011193286627531052,
            0.007905997335910797,
            0.0006176420138217509
        ],
        "align_select": "select VOTES.phone_number, VOTES.vote_id, VOTES.state",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the list of the vote ids, phone number, and state of all votes?",
        "gold_select": "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
        "select_candidates": [
            "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
            "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
            "select VOTES.vote_id, VOTES.phone_number, VOTES.state.",
            "select VOTES.vote_id-, VOTES.phone_number, VOTES.state"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.9930661916732788,
            9.241637599188834e-05,
            0.9930661916732788,
            9.241637599188834e-05,
            0.007598412223160267,
            7.982548413565382e-05,
            0.0016296679386869073,
            8.026814612094313e-05
        ],
        "align_select": "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "list all the vote ids, phone numbers, and states for each voter.",
        "gold_select": "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
        "select_candidates": [
            "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
            "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
            "select VOTES.vote_id, VOTES.phone_number.c1, VOTES.state",
            "select VOTES.vote_id-, VOTES.phone_number, VOTES.state"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.993486762046814,
            0.00010576751083135605,
            0.993486762046814,
            0.00010576751083135605,
            0.000882254505995661,
            6.91539462422952e-05,
            0.006705832201987505,
            8.457455987809226e-05
        ],
        "align_select": "select VOTES.vote_id, VOTES.phone_number, VOTES.state",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find out the maximum and minimum values of the area codes.",
        "gold_select": "select max(AREA_CODE_STATE.area_code), min(AREA_CODE_STATE.area_code)",
        "select_candidates": [
            "select max(AREA_CODE_STATE.area_code), min(AREA_CODE_STATE.area_code)",
            "select max(t0.c2), min(t0.c2)",
            "select max(AREA_CODE_STATE.state), min(t0.c2)",
            "select max(t0.c4), min(t0.c4)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE",
        "table_candidates": [
            "AREA_CODE_STATE",
            "AREA_CODE_STATE CONTESTANTS",
            "AREA_CODE_STATE VOTES"
        ],
        "align_scores": [
            0.9938256740570068,
            0.000719862524420023,
            0.007718328852206469,
            0.001176374265924096,
            0.0004109384317416698,
            0.0003513391420710832,
            0.014703130349516869,
            0.0012977003352716565
        ],
        "align_select": "select max(AREA_CODE_STATE.area_code), min(AREA_CODE_STATE.area_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the maximum and minimum value of area codes?",
        "gold_select": "select max(AREA_CODE_STATE.area_code), min(AREA_CODE_STATE.area_code)",
        "select_candidates": [
            "select max(AREA_CODE_STATE.area_code), min(AREA_CODE_STATE.area_code)",
            "select max(t0.c2), min(t0.c2)",
            "select max(AREA_CODE_STATE.state), min(t0.c2)",
            "select max(t0.c6), min(t0.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE",
        "table_candidates": [
            "AREA_CODE_STATE",
            "AREA_CODE_STATE CONTESTANTS",
            "AREA_CODE_STATE VOTES"
        ],
        "align_scores": [
            0.9909789562225342,
            0.0010201402474194765,
            0.01104168314486742,
            0.0013692125212401152,
            0.0005009538726881146,
            0.00041839524055831134,
            0.018569204956293106,
            0.0016817549476400018
        ],
        "align_select": "select max(AREA_CODE_STATE.area_code), min(AREA_CODE_STATE.area_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the minimum and maximum of area codes?",
        "gold_select": "select max(AREA_CODE_STATE.area_code), min(AREA_CODE_STATE.area_code)",
        "select_candidates": [
            "select min(AREA_CODE_STATE.area_code), max(AREA_CODE_STATE.area_code)",
            "select min(AREA_CODE_STATE.area_code), max(t0.c2)",
            "select min(AREA_CODE_STATE.area_code), max(t0.c4)",
            "select min(t0.c2), max(t0.c2)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE",
        "table_candidates": [
            "AREA_CODE_STATE",
            "AREA_CODE_STATE CONTESTANTS",
            "AREA_CODE_STATE VOTES"
        ],
        "align_scores": [
            0.9917362332344055,
            6.843722076155245e-05,
            0.0003913853142876178,
            0.00010426600783830509,
            0.0004703119629994035,
            0.00012177866301499307,
            0.004041773267090321,
            9.31049944483675e-05
        ],
        "align_select": "select min(AREA_CODE_STATE.area_code), max(AREA_CODE_STATE.area_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which contestants' names are not 'Jessie Alloway'? List them.",
        "gold_select": "select CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_name, CONTESTANTS.contestant_number",
            "select distinct CONTESTANTS.contestant_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS"
        ],
        "align_scores": [
            0.9513860940933228,
            0.12414678931236267,
            0.00018728368740994483,
            9.300339297624305e-05,
            0.00018967637151945382,
            9.458034037379548e-05,
            0.06529395282268524,
            0.01051525492221117
        ],
        "align_select": "select CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the names of the contestants whose names are not 'Jessie Alloway'?",
        "gold_select": "select CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_name (not 'Jessie Alloway')",
            "select CONTESTANTS.contestant_name, t1.c2",
            "select CONTESTANTS.contestant_name (not 'Jessie Alloway'"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS"
        ],
        "align_scores": [
            0.9729482531547546,
            0.005453568883240223,
            0.035336531698703766,
            0.0004529222787823528,
            0.0006277391221374273,
            0.00014438234211411327,
            0.01660795509815216,
            0.000698621675837785
        ],
        "align_select": "select CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the contestants whose names do not contain 'Jessie Alloway'?",
        "gold_select": "select CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_name, CONTESTANTS.contestant_number",
            "select CONTESTANTS.contestant_name, t1.c2",
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS"
        ],
        "align_scores": [
            0.04853809252381325,
            0.9528087377548218,
            8.828026329865679e-05,
            0.00022763120068702847,
            0.00015581914340145886,
            0.0007306610350497067,
            9.531860996503383e-05,
            0.0002187533100368455
        ],
        "align_select": "select CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the contestants names whose names are not Jessie Alloway?",
        "gold_select": "select CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_name, t1.c2",
            "select CONTESTANTS.contestant_name (non-Jessie Alloway)",
            "select CONTESTANTS.contestant_name, t1.c2, t1.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS"
        ],
        "align_scores": [
            0.9909659624099731,
            0.006809240207076073,
            0.0005196302081458271,
            0.0001235647068824619,
            0.09994932264089584,
            0.0004739557043649256,
            0.0014092803467065096,
            0.0001841583871282637
        ],
        "align_select": "select CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the contestants whose names are not \"Jessie Alloway\"? Make a list.",
        "gold_select": "select CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_name, CONTESTANTS.contestant_number",
            "select CONTESTANTS.contestant_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS"
        ],
        "align_scores": [
            0.9021298885345459,
            0.00020966428564861417,
            0.0002449062594678253,
            7.336299313465133e-05,
            0.0002484329743310809,
            7.27386141079478e-05,
            0.0020430206786841154,
            0.0001591522595845163
        ],
        "align_select": "select CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Describe all the unique states and created times of all votes.",
        "gold_select": "select distinct VOTES.state, VOTES.created",
        "select_candidates": [
            "select distinct VOTES.state, VOTES.created",
            "select unique VOTES.state, VOTES.created",
            "select distinct VOTES.state, VOTES.contestant_number, VOTES.created",
            "select distinct VOTES.state.c2, VOTES.created"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.995141863822937,
            9.191593562718481e-05,
            0.0016238727839663625,
            8.680753671796992e-05,
            0.0002790996804833412,
            7.653777720406651e-05,
            0.0007542353123426437,
            7.913358422229066e-05
        ],
        "align_select": "select distinct VOTES.state, VOTES.created",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all the votes for which there is a created date and state.",
        "gold_select": "select distinct VOTES.state, VOTES.created",
        "select_candidates": [
            "select VOTES.vote_id, VOTES.created, VOTES.state",
            "select VOTES.created, VOTES.state",
            "select VOTES.vote_id",
            "select VOTES.vote_id, VOTES.created"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.00024635964655317366,
            8.39193380670622e-05,
            0.9948959946632385,
            0.00010666366870282218,
            0.039744921028614044,
            0.016979675740003586,
            0.0002466287696734071,
            7.503689266741276e-05
        ],
        "align_select": "select VOTES.created, VOTES.state",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the distinct times and states of all votes?",
        "gold_select": "select distinct VOTES.state, VOTES.created",
        "select_candidates": [
            "select distinct VOTES.created, VOTES.state",
            "select distinct t2.c5, VOTES.state",
            "select distinct VOTES.phone_number, VOTES.state",
            "select distinct VOTES.vote_id, VOTES.phone_number, VOTES.state"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.7758142352104187,
            8.25904353405349e-05,
            0.00038080060039646924,
            8.838034409563988e-05,
            0.0002478066016919911,
            9.85813167062588e-05,
            0.00016471483104396611,
            8.881857502274215e-05
        ],
        "align_select": "select distinct VOTES.created, VOTES.state",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the distinct states and create times of each vote?",
        "gold_select": "select distinct VOTES.state, VOTES.created",
        "select_candidates": [
            "select distinct VOTES.state, VOTES.created",
            "select VOTES.state, VOTES.created",
            "select distinct VOTES.state, VOTES.created, VOTES.vote_id",
            "select distinct VOTES.state, VOTES.contestant_number, VOTES.created"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES"
        ],
        "align_scores": [
            0.9908155202865601,
            0.00015325842832680792,
            0.9865868091583252,
            0.00016924686497077346,
            0.00024390468024648726,
            7.859092875150964e-05,
            0.00025693170027807355,
            0.00010142294922843575
        ],
        "align_select": "select distinct VOTES.state, VOTES.created",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list out the contestant numbers and names of those contestants who got at least two votes?",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.contestant_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.17287833988666534,
            0.00010594516061246395,
            0.005169496405869722,
            0.00010626710718497634,
            0.0003085936768911779,
            7.11134634912014e-05,
            0.00020968866010662168,
            8.978947153082117e-05
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you tell me the contestant numbers and names of the contestants who got at least two votes?",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.contestant_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.34364187717437744,
            9.423399751540273e-05,
            0.0075699943117797375,
            9.792873606784269e-05,
            0.0005643804324790835,
            6.668637797702104e-05,
            0.0002197844150941819,
            8.87549904291518e-05
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the contestant numbers and names of the contestants who received at least two votes from others.",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.contestant_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.5135911107063293,
            6.935173587407917e-05,
            0.0255354642868042,
            7.378550071734935e-05,
            0.00024415829102508724,
            6.278212094912305e-05,
            0.00026355928275734186,
            6.769390165572986e-05
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For every contestant who was voted for and had a number, what is the contestant number and name of the contestant who got least votes?",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.contestant_number, CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_name, CONTESTANTS.contestant_number",
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9711357951164246,
            0.9623823761940002,
            0.27055823802948,
            0.19213071465492249,
            0.9766112565994263,
            0.9765676856040955,
            0.0006590110715478659,
            0.000485144933918491
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who was voted the least by all the contestants? Show me the contestant number and name.",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.phone_number, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.contestant_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9849439263343811,
            7.75941734900698e-05,
            0.07791679352521896,
            7.735871622571722e-05,
            0.00040328793693333864,
            7.124894909793511e-05,
            0.00037931499537080526,
            6.58998906146735e-05
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the contestant number and name of the contestant who received least votes.",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_name, CONTESTANTS.contestant_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9934344291687012,
            0.9913144707679749,
            0.018551165238022804,
            0.002129969885572791,
            0.0008843804826028645,
            0.00026742543559521437,
            0.9938703775405884,
            0.9922038316726685
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the number of votes coming from state 'NY' or 'CA'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), VOTES.state",
            "select count(*), AREA_CODE_STATE.state",
            "select count(*), VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9908786416053772,
            0.00013958947965875268,
            0.00021206020028330386,
            0.012296020053327084,
            0.00022842150065116584,
            0.0014573009684681892,
            0.00021206020028330386,
            0.012296020053327084
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What %voted% percent contestants didn't got the vote?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select VOTES.state, VOTES.contestant_number",
            "select VOTES.state, CONTESTANTS.contestant_name",
            "select VOTES.contestant_number, VOTES.created",
            "select VOTES.contestant_number, VOTES.state"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.000160720432177186,
            0.00013016382581554353,
            0.00021453481167554855,
            0.00014282570919021964,
            0.00013565704284701496,
            0.00010728264169301838,
            0.00016371488163713366,
            0.00012851956125814468
        ],
        "align_select": "select VOTES.state, VOTES.contestant_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the total number of contestants who did not get voted?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), CONTESTANTS.contestant_number",
            "select count(*), CONTESTANTS.contestant_name",
            "select count(*), t1.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9751982092857361,
            0.00020148635667283088,
            0.0004476496542338282,
            0.00022346749028656632,
            0.0002775055472739041,
            0.00029795989394187927,
            0.000518117449246347,
            0.0001339416194241494
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many contestants did not get voted? Show me the number of contestants who didn't get voted.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), CONTESTANTS.contestant_name",
            "select count(*), CONTESTANTS.contestant_number",
            "select count(*), t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9935976266860962,
            0.001747536240145564,
            0.0002911495976150036,
            0.002445066813379526,
            0.00029077453655190766,
            0.0012666403781622648,
            0.0004385047359392047,
            0.0006242067902348936
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The area code in which the most people voted?",
        "gold_select": "select AREA_CODE_STATE.area_code",
        "select_candidates": [
            "select AREA_CODE_STATE.area_code",
            "select VOTES.state",
            "select AREA_CODE_STATE.area_code, AREA_CODE_STATE.state",
            "select AREA_CODE_STATE.area_code, VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "VOTES"
        ],
        "align_scores": [
            0.47075849771499634,
            8.146974141709507e-05,
            0.0022784112952649593,
            6.688080611638725e-05,
            0.00019505641830619425,
            5.73239303776063e-05,
            0.00030941766453906894,
            6.566295633092523e-05
        ],
        "align_select": "select AREA_CODE_STATE.area_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the area code with the most voters in it.",
        "gold_select": "select AREA_CODE_STATE.area_code",
        "select_candidates": [
            "select AREA_CODE_STATE.area_code",
            "select AREA_CODE_STATE.area_code, AREA_CODE_STATE.state",
            "select AREA_CODE_STATE.area_code, VOTES.state",
            "select AREA_CODE_STATE.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES",
            "VOTES"
        ],
        "align_scores": [
            0.974160373210907,
            6.936972931725904e-05,
            0.00019446459191385657,
            5.453786798170768e-05,
            0.00037431999226100743,
            6.346927693812177e-05,
            0.002804346615448594,
            6.725200364599004e-05
        ],
        "align_select": "select AREA_CODE_STATE.area_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give me the area code in which the most voters voted?",
        "gold_select": "select AREA_CODE_STATE.area_code",
        "select_candidates": [
            "select AREA_CODE_STATE.area_code",
            "select VOTES.state",
            "select AREA_CODE_STATE.area_code, AREA_CODE_STATE.state",
            "select AREA_CODE_STATE.area_code, VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "VOTES"
        ],
        "align_scores": [
            0.8510226607322693,
            8.630668162368238e-05,
            0.0029264073818922043,
            7.073823508108035e-05,
            0.00023362116189673543,
            6.259954534471035e-05,
            0.0004195279034320265,
            7.47803132981062e-05
        ],
        "align_select": "select AREA_CODE_STATE.area_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the create date, state, and phone numbers for only those votes which were for Tabatha Gehling.",
        "gold_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "select_candidates": [
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created), VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state.c3, VOTES.phone_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9932583570480347,
            0.0014017951907590032,
            0.9932583570480347,
            0.0014017951907590032,
            0.004875947255641222,
            0.00023203967430163175,
            0.0013328385539352894,
            0.00012803640856873244
        ],
        "align_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the create date, state, and phone number of all the votes for the contestant named Tabatha Gehling?",
        "gold_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "select_candidates": [
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state.c1, VOTES.phone_number",
            "select VOTES.state, VOTES.created, VOTES.phone_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9922502040863037,
            0.00017209468933288008,
            0.9922502040863037,
            0.00017209468933288008,
            0.004155783914029598,
            0.00010462935460964218,
            0.9925530552864075,
            0.00024370313622057438
        ],
        "align_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the create dates, states, and phone numbers of the votes for the contestant named Tabatha Gehling?",
        "gold_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "select_candidates": [
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created), VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state, VOTES.phone_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9936383366584778,
            0.00015175421140156686,
            0.9936383366584778,
            0.00015175421140156686,
            0.005080798640847206,
            9.436232357984409e-05,
            0.9936383366584778,
            0.00015175421140156686
        ],
        "align_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the creates dates, state, and phone numbers of the votes for contestant Tabatha Gehling.",
        "gold_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "select_candidates": [
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state, VOTES.phone_number",
            "select VOTES.created), VOTES.state, VOTES.phone_number",
            "select VOTES.created, VOTES.state.c1, VOTES.phone_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9941402077674866,
            0.00012533787230495363,
            0.9941402077674866,
            0.00012533787230495363,
            0.005395557265728712,
            8.385677938349545e-05,
            0.0026854644529521465,
            8.497375529259443e-05
        ],
        "align_select": "select VOTES.created, VOTES.state, VOTES.phone_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the contestants that contains 'Al'?",
        "gold_select": "select CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_name",
            "select distinct CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_name, t1.c2",
            "select CONTESTANTS.contestant_name, CONTESTANTS.contestant_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "AREA_CODE_STATE CONTESTANTS"
        ],
        "align_scores": [
            0.9960008263587952,
            9.572176350047812e-05,
            0.014225935563445091,
            7.715317769907415e-05,
            0.00027137211873196065,
            7.175008795456961e-05,
            0.00011897365766344592,
            6.666393164778128e-05
        ],
        "align_select": "select CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you return the list of contestants whose name contains the substring 'Al'?",
        "gold_select": "select CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_name",
            "select distinct CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_name, AREA_CODE_STATE.state",
            "select CONTESTANTS.contestant_name, CONTESTANTS.contestant_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "AREA_CODE_STATE CONTESTANTS"
        ],
        "align_scores": [
            0.9339908361434937,
            9.211264841724187e-05,
            0.02644558995962143,
            9.958852751879022e-05,
            0.00015707279089838266,
            7.181950059020892e-05,
            0.00015406397869810462,
            7.660998380742967e-05
        ],
        "align_select": "select CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the contestant names containing the substring 'Al'.",
        "gold_select": "select CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_name, t1.c2",
            "select CONTESTANTS.contestant_name, t1.c3",
            "select distinct CONTESTANTS.contestant_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS"
        ],
        "align_scores": [
            0.994597315788269,
            0.00012494729890022427,
            0.0003095273859798908,
            8.195275586331263e-05,
            0.00027785394922830164,
            8.073518984019756e-05,
            0.017871255055069923,
            9.915992268361151e-05
        ],
        "align_select": "select CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For how many languages does Aruba speak? Explain.",
        "gold_select": "select count(countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.Language)",
            "select count(speechcount(distinct countrylanguage.Language)",
            "select count(count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9814120531082153,
            0.9872658252716064,
            0.9626907706260681,
            0.921169102191925,
            0.0011372312437742949,
            0.0013407577062025666,
            0.0008031513425521553,
            0.001343557727523148
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In how many languages are spoken Aruba's inhabitants?",
        "gold_select": "select count(countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(speechcount(distinct countrylanguage.Language)",
            "select count(distinct countrylanguage.Language, country.Population)",
            "select count(countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9950359463691711,
            0.9911428689956665,
            0.0007712069782428443,
            0.0010199842508882284,
            0.000256208615610376,
            0.0003110283287242055,
            0.9953800439834595,
            0.9896013140678406
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In Aruba, how many languages are spoken?",
        "gold_select": "select count(countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(distinct countrylanguage.Language, count(distinct countrylanguage.IsOfficial)",
            "select count(speechcount(distinct countrylanguage.Language)",
            "select count(distinct countrylanguage.Language, count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9967948794364929,
            0.00023710298410151154,
            0.0003309838066343218,
            0.0001400566688971594,
            0.0012084681075066328,
            0.00014229773660190403,
            0.00017642877355683595,
            0.0001318857102887705
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of the 3 countries with the smallest populations.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9906693696975708,
            5.3045685490360484e-05,
            0.00039419703534804285,
            5.366208279156126e-05,
            0.002878348110243678,
            5.567066909861751e-05,
            0.0010021443013101816,
            5.4146403272170573e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "For what period after 1950 did the following countries become independent? Give a list of these country names.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select distinct country.Name",
            "select country.Name, country.IndepYear",
            "select period(country.Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.8246409296989441,
            0.005479965824633837,
            0.060379840433597565,
            0.0029644437599927187,
            0.0004545494157355279,
            0.0008141490397974849,
            0.006211118306964636,
            0.0008250490645878017
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the predominant language of Aruba? Explain.",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9925905466079712,
            0.979982852935791,
            0.0003779433318413794,
            0.0001894627057481557,
            0.0002943871368188411,
            0.00018957907741423696,
            0.00018651987193152308,
            0.0001781501341611147
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is Aruba's predominant language? Explain.",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9608073234558105,
            0.957802414894104,
            0.0003760975378099829,
            0.00023783791402820498,
            0.0003461179730948061,
            0.0002946591703221202,
            0.0003072200925089419,
            0.00022323963639792055
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In Aruba, which language is predominantly spoken?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9939835667610168,
            0.0076879533007740974,
            0.0003152700373902917,
            0.00018231183639727533,
            0.0003266393905505538,
            0.00019357274868525565,
            0.00018197803001385182,
            0.00012603287177626044
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which language has the largest number of Asian nations using it?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Code2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9937456846237183,
            9.533951379125938e-05,
            0.000750151404645294,
            7.586966967210174e-05,
            0.0004591713077388704,
            6.572843267349526e-05,
            0.000681909266859293,
            7.745245238766074e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which language is spoken in the largest number of nations in Asia?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Code2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.993026852607727,
            0.8011820912361145,
            0.0006794626242481172,
            0.0002774833410512656,
            0.00037496822187677026,
            0.0002120251883752644,
            0.0005839898949488997,
            0.00030833869823254645
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For each country that speaks at least three languages, what is the country name and the number of different languages spoken by them?",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(distinct country.Name)",
            "select country.Name, count(distinct countrylanguage.IsOfficial)",
            "select country.Name, count(distinct countrylanguage.Language)."
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.7633076310157776,
            0.00010977435886161402,
            0.0010866345837712288,
            7.541113154729828e-05,
            0.006917877122759819,
            8.569390774937347e-05,
            0.0007541785598732531,
            8.116894605336711e-05
        ],
        "align_select": "select country.Name, count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For which countries does at least three languages are spoken? List them by name and number the languages spoken.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(*)",
            "select country.Name, count(countrylanguage.Language)",
            "select country.Name, count(count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.8062323331832886,
            8.589155913796276e-05,
            0.8903577327728271,
            8.372846059501171e-05,
            0.22531887888908386,
            7.850119436625391e-05,
            0.0005606934428215027,
            7.840880425646901e-05
        ],
        "align_select": "select country.Name, count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "The countries that speak at least three languages. List the name and number of their languages.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(*)",
            "select country.Name, count(countrylanguage.Language)",
            "select country.Name, count(count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.00948383565992117,
            8.28520132927224e-05,
            0.6239593625068665,
            7.309783541131765e-05,
            0.0031595986802130938,
            6.529835081892088e-05,
            0.00027249936829321086,
            7.934349559945986e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For each country that has at least three languages spoken by its citizens, return the country name and the number of languages spoken by them.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(countrylanguage.Language)",
            "select country.Name, count(*)",
            "select country.Name, count(count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.3015367388725281,
            8.630577212898061e-05,
            0.005603964440524578,
            7.518702477682382e-05,
            0.926260232925415,
            9.06753703020513e-05,
            0.0006333912606351078,
            7.512266893172637e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which countries don't use English as their national language? List them by code.",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select country.Code",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Code2",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.6708068251609802,
            0.0027576249558478594,
            0.0004955643089488149,
            0.00020570472406689078,
            0.0003464679466560483,
            0.0001294535759370774,
            0.0006687858258374035,
            0.00015259960491675884
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please return the country code for those countries which do not speak English.",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9897481203079224,
            0.0003641711373347789,
            0.0004886180395260453,
            7.034591544652358e-05,
            0.004477350972592831,
            0.0001196982993860729,
            0.0001748946961015463,
            7.75338921812363e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For which countries does not speak English? List the country code.",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.CountryCode (http://countrylanguage.CountryCode.c1)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.414998859167099,
            0.00047318634460680187,
            0.07932691276073456,
            0.00015855439414735883,
            0.00021397283126134425,
            7.384616765193641e-05,
            0.00033800138044171035,
            0.00011127023753942922
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the city with the largest population where people speak English as first language.",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.Language",
            "select city.Name, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9720714092254639,
            0.9637332558631897,
            0.001319361967034638,
            0.0007455158047378063,
            0.0009695219341665506,
            0.0005933743086643517,
            0.0008773156441748142,
            0.0004683555453084409
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which city has the largest population that speaks English?",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.Name, countrylanguage.Language",
            "select city.Name, countrylanguage.IsOfficial",
            "select city.ID, city.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9514700174331665,
            0.9758686423301697,
            0.0010168503504246473,
            0.0019226529402658343,
            0.000903576728887856,
            0.002443734323605895,
            0.0007099003996700048,
            0.0010579550871625543
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Can you find the city with the largest population which speaks English?",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.Name, countrylanguage.Language",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9421586990356445,
            0.9856529235839844,
            0.0013189536985009909,
            0.0030368014704436064,
            0.000893628632184118,
            0.0016237872187048197,
            0.0006648653652518988,
            0.0013841241598129272
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the city with the largest population which speaks English?",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.Language",
            "select city.ID, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage"
        ],
        "align_scores": [
            0.9767125248908997,
            0.9676049947738647,
            0.000720201525837183,
            0.0010282068978995085,
            0.0009427260374650359,
            0.001677037333138287,
            0.0007618694216944277,
            0.00108708709012717
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me cities with largest populations using English.",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.Name, countrylanguage.Language",
            "select city.ID, city.Name",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage"
        ],
        "align_scores": [
            0.9907654523849487,
            0.8420209288597107,
            0.0005324297235347331,
            0.00019929463451262563,
            0.0002468463499099016,
            0.00018427008762955666,
            0.0002045416331384331,
            0.00022755352256353945
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the most populous city which speaks English.",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.Language",
            "select city.Name, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.002851060125976801,
            0.29237544536590576,
            0.00012752828479278833,
            0.0002268695825478062,
            0.00014870570157654583,
            0.00018775607168208808,
            0.00014870570157654583,
            0.00018775607168208808
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which city has the highest population speaking English?",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.Name, countrylanguage.Language",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9791672229766846,
            0.9858749508857727,
            0.0008650177041999996,
            0.0016430424293503165,
            0.000610082468483597,
            0.0009047458879649639,
            0.000867252703756094,
            0.002431010128930211
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which city has the most populace, which speaks English?",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.Name, countrylanguage.Language",
            "select city.ID, countrylanguage.Language",
            "select city.Name (city.Population), countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.04922015219926834,
            0.8244453072547913,
            0.0014520840486511588,
            0.0002816876512952149,
            0.0006498025613836944,
            0.0002880462270695716,
            0.00026752796838991344,
            0.00011206929775653407
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of countries that speak English and Dutch.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(*), countrylanguage.CountryCode, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9899455904960632,
            0.008750664070248604,
            0.00028771633515134454,
            0.0011619472643360496,
            0.09296388179063797,
            0.0003045641933567822,
            0.00010551325249252841,
            0.0001346780190942809
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number nations currently using both English and Dutch.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), countrylanguage.CountryCode, countrylanguage.Language",
            "select count(*) dependant on countrylanguage.CountryCode, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9889793395996094,
            0.005499600432813168,
            0.0006009434582665563,
            0.0021228701807558537,
            0.00011549388727871701,
            0.00011101546988356858,
            0.0002957072283606976,
            0.00010548186401138082
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of countries using English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), countrylanguage.Language",
            "select count(distinct countrylanguage.CountryCode)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.993543267250061,
            0.0053970846347510815,
            0.00031037491862662137,
            0.001277151401154697,
            0.0002634288975968957,
            0.000964793493039906,
            0.03789461404085159,
            0.00016367307398468256
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of nations using both English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), countrylanguage.CountryCode, countrylanguage.Language",
            "select count(*), countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9914679527282715,
            0.5350691080093384,
            0.00044499413343146443,
            0.0002518625697121024,
            0.00010876770102186128,
            0.0001120504894061014,
            0.00025383816682733595,
            0.0002428757434245199
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total surface area covered by countries in either Asia or Europe?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Continent",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea) delimited by country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9955933690071106,
            7.057361654005945e-05,
            0.00015186799282673746,
            6.40504076727666e-05,
            0.00016343135212082416,
            6.0521117120515555e-05,
            0.0012736122589558363,
            8.906563743948936e-05
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the total surface area covered by countries in Asia or Europe?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Continent",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea) delimited by country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9958221912384033,
            6.76472409395501e-05,
            0.00014981068670749664,
            6.700790981994942e-05,
            0.00018111839017365128,
            6.467923958553001e-05,
            0.002220788039267063,
            8.42010194901377e-05
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the total surface area covered by all countries in either Asia or Europe?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Continent",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9956996440887451,
            6.894133548485115e-05,
            0.00015254416211973876,
            8.25496535981074e-05,
            0.0001492430892540142,
            8.262706978712231e-05,
            0.00014235175331123173,
            7.135304622352123e-05
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the sum of the surface areas of the countries in Asia and Europe?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Continent",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea) dependant on country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9952967762947083,
            0.0001966157869901508,
            0.0001346302597085014,
            0.00010257305984850973,
            0.00016926106764003634,
            9.64874416240491e-05,
            0.0006259712972678244,
            0.00017432028835173696
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The number of distinct continents where Chinese is spoken is...?",
        "gold_select": "select count( distinct country.Continent)",
        "select_candidates": [
            "select count(distinct country.Continent)",
            "select count(distinct country.Population)",
            "select count(distinct country.Name)",
            "select count(distinct t2).c2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9964788556098938,
            0.00014333732542581856,
            0.0005397633067332208,
            0.00013469137775246054,
            0.0006864321185275912,
            0.00023668963694944978,
            0.0002673699054867029,
            0.00011567223555175588
        ],
        "align_select": "select count(distinct country.Continent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in Asia? Show the largest GNP among Asians.",
        "gold_select": "select sum(country.Population), max(country.GNP)",
        "select_candidates": [
            "select country.Population, country.GNP",
            "select country.GNP",
            "select country.Name, country.GNP",
            "select country.Code, country.Population"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.002339637139812112,
            0.0016167331486940384,
            0.9049032926559448,
            0.9552860856056213,
            0.0003389917255844921,
            0.0005426918505690992,
            0.000688879401423037,
            0.0014248013030737638
        ],
        "align_select": "select country.GNP",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the name of the country with the shortest life expectancy in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.LifeExpectancy",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9920473098754883,
            0.00028938206378370523,
            0.0002941500279121101,
            0.00014013734471518546,
            0.0010036214953288436,
            0.00010872715938603505,
            0.0011084534926339984,
            0.00014127847680356354
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the shortest life expectancy country in Asia? List their name.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9937997460365295,
            0.9937997460365295,
            0.0002720822230912745,
            0.0002720822230912745,
            0.0001859140320448205,
            0.0001859140320448205,
            0.00024731160374358296,
            0.00024731160374358296
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Give the names of the countries that became independent after 1950.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select distinct country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.985834538936615,
            9.98795367195271e-05,
            0.0797489657998085,
            6.896170816617087e-05,
            0.00018369400640949607,
            6.229987047845498e-05,
            0.00031677918741479516,
            6.820983981015161e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of all the countries which had been founded after 1950.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select distinct country.Name",
            "select country.Name, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.9821134209632874,
            0.00010411738912807778,
            0.0001683179580140859,
            6.897723505971953e-05,
            0.04388370364904404,
            9.162889182334766e-05,
            0.0001585104182595387,
            6.82592872180976e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of the nations which were founded after '1950.'",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select distinct country.Name",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9870502948760986,
            0.00012792863708455116,
            0.00020843683159910142,
            6.654040043940768e-05,
            0.05644151568412781,
            0.00011442858522059396,
            0.0003721477696672082,
            8.405862172367051e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the countries or nations that were formed after 1950? List them.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select distinct country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9836142063140869,
            0.0038516311906278133,
            0.07303236424922943,
            0.00020671576203312725,
            0.0003364528820384294,
            0.00013520945503842086,
            0.00025702331913635135,
            0.00012389328912831843
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of countries with republic as their form of government?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.GovernmentForm",
            "select count(*), country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9944536089897156,
            0.00014992144133429974,
            0.0003163934452459216,
            0.0012153410352766514,
            0.0003489956143312156,
            0.007715079467743635,
            0.0002654410491231829,
            0.0015781006077304482
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the number number countries which have Republic as their government form?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.GovernmentForm",
            "select count(*), country.Code",
            "select count(*), country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8848329782485962,
            0.0006336838123388588,
            0.00033428400638513267,
            0.0001668341865297407,
            0.0002732997527346015,
            0.00030438046087510884,
            0.00024106424825731665,
            0.0003542466729413718
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list the number of countries with republic as their form of government.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.GovernmentForm"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9945200085639954,
            0.00016321644943673164,
            0.0003096776199527085,
            0.0011781747452914715,
            0.00029384673689492047,
            0.001531753339804709,
            0.0003292342880740762,
            0.014416077174246311
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many countries have republic government systems?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.GovernmentForm",
            "select count(*), country.Name",
            "select count(*), country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9951295852661133,
            0.0005749927368015051,
            0.0004078737401869148,
            0.00034549913834780455,
            0.00047343355254270136,
            0.0006003092275932431,
            0.00046348190517164767,
            0.0005830767331644893
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know how many countries have the government form as a republic?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.992701530456543,
            0.0008924221037887037,
            0.00034999524359591305,
            0.006447118707001209,
            0.00036272400757297873,
            0.027876118198037148,
            0.00030166807118803263,
            0.00042593610123731196
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of countries that have governments that are republics?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.GovernmentForm"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.991426944732666,
            0.002704047132283449,
            0.00041542126564309,
            0.003319760086014867,
            0.00033803563565015793,
            0.004958771634846926,
            0.00040113538852892816,
            0.0034761351998895407
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much is the surface area of all the countries in the Caribbean region?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select country.SurfaceArea",
            "select sum(country.SurfaceArea), country.Name",
            "select avg(country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.7317401766777039,
            8.014622289920226e-05,
            0.9862779974937439,
            9.962964395526797e-05,
            0.00012795509246643633,
            6.809194746892899e-05,
            0.0006343860295601189,
            5.913095810683444e-05
        ],
        "align_select": "select country.SurfaceArea",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Total surface area of which countries in the Caribbean region?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select country.Name, sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select country.Name, sum(country.SurfaceArea), country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9965935349464417,
            0.00022471528791356832,
            0.0005319009069353342,
            0.0015330353053286672,
            0.00039020582335069776,
            0.20621076226234436,
            0.000129262640257366,
            0.0003100643225479871
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The total surface area of all the countries in the Caribbean region is?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Code",
            "select sum(country.SurfaceArea) delimited by country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9961943626403809,
            0.00014535675290971994,
            0.00014889812155161053,
            0.004814948420971632,
            0.00012319869711063802,
            0.002467139158397913,
            0.0002058972168015316,
            0.00011047097359551117
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much does the total surface area of the countries in the Carribean cover altogether?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Region",
            "select sum(country.SurfaceArea), country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.995555579662323,
            0.0008475875947624445,
            0.00020799273625016212,
            0.019482463598251343,
            0.00030021509155631065,
            0.0027489890344440937,
            0.00017277160077355802,
            0.023227203637361526
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For all the countries in the Carribean combined together, how large is their total surface area?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Code",
            "select sum(country.SurfaceArea) delimited by country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9950773119926453,
            0.00011376427573850378,
            0.0001757861318765208,
            8.364665700355545e-05,
            0.0001639961265027523,
            8.672702824696898e-05,
            0.00028180074878036976,
            0.00012015572428936139
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The total surface area of the countries in the Caribbean is how much?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Code",
            "select sum(country.SurfaceArea), country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9965043067932129,
            0.00022689792967867106,
            0.00018870190251618624,
            0.004982766229659319,
            0.00015798755339346826,
            0.005285915452986956,
            0.0003434499376453459,
            0.0033563789911568165
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the name of the continent where Anguilla is.",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Code, country.Continent",
            "select country.Code, country.Name",
            "select country.Continent (http://country.Continent)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9943472743034363,
            0.0001306589983869344,
            0.00018499628640711308,
            7.881292549427599e-05,
            0.0002149760548491031,
            7.381773320958018e-05,
            0.06264486908912659,
            7.418022869387642e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Is Anguilla located on any continent?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select distinct country.Continent",
            "select yes(country.Continent)",
            "select continent(country.Continent)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.9502990245819092,
            0.00030755155603401363,
            0.5532213449478149,
            0.00041930717998184264,
            0.0020827786065638065,
            9.41602629609406e-05,
            0.0016140829538926482,
            0.00010046594979939982
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the continent where Anguilla is in?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, country.Region",
            "select country.Continent (http://country.Continent)",
            "select country.Continent, country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9942893981933594,
            0.00012607636745087802,
            0.00022986388648860157,
            7.267670298460871e-05,
            0.02245466783642769,
            8.140761929098517e-05,
            0.00019297900144010782,
            7.150036981329322e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the continent of which Anguilla is part?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, country.Name",
            "select country.Code, country.Continent",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.991835355758667,
            0.00014632826787419617,
            0.0002633728727232665,
            7.874448783695698e-05,
            0.00022237584926187992,
            8.496119698975235e-05,
            0.00024461871362291276,
            0.00010070516145788133
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the continent name of Anguilla?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, country.Name",
            "select country.Continent, country.Name, country.Region",
            "select country.Continent, country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.996269941329956,
            0.00012150539259891957,
            0.0002029619790846482,
            8.110990893328562e-05,
            0.00017286158981733024,
            7.435238512698561e-05,
            0.0002321438951184973,
            8.411314047407359e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the continent where Anguilla is located?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, country.Name",
            "select country.Code, country.Continent",
            "select country.Continent (http://country.Continent)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9927405714988708,
            0.00014291821571532637,
            0.00025020871544256806,
            7.871213892940432e-05,
            0.00021155952708795667,
            8.469900785712525e-05,
            0.052285335958004,
            7.6818629167974e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the continent in which Anguilla is located?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, country.Name",
            "select country.Code, country.Continent",
            "select country.Continent (http://country.Continent)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9899001717567444,
            0.00013972504530102015,
            0.0002679517201613635,
            7.876183371990919e-05,
            0.0002171005617128685,
            8.320219058077782e-05,
            0.04313602298498154,
            7.81595372245647e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which region does the city of Kabul lie?",
        "gold_select": "select country.Region",
        "select_candidates": [
            "select country.Region",
            "select country.Region, city.CountryCode",
            "select country.Region, city.Name",
            "select distinct country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city country",
            "city sqlite_sequence country",
            "city"
        ],
        "align_scores": [
            0.9946827292442322,
            0.00013249754556454718,
            0.00016463821521028876,
            8.74934921739623e-05,
            0.00019151692686136812,
            7.651879423065111e-05,
            0.034721873700618744,
            0.00023301629698835313
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which region is Kabul situated in?",
        "gold_select": "select country.Region",
        "select_candidates": [
            "select country.Region",
            "select country.Region, city.CountryCode",
            "select country.Region, city.Name",
            "select distinct country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city country"
        ],
        "align_scores": [
            0.995511531829834,
            0.00013144976401235908,
            0.00015759818779770285,
            8.539958071196452e-05,
            0.00019286421593278646,
            7.596667273901403e-05,
            0.04790670424699783,
            0.00020754917932208627
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Is the city that is called Kabul, placed in which region?",
        "gold_select": "select country.Region",
        "select_candidates": [
            "select country.Region",
            "select country.Region, city.CountryCode",
            "select country.Name, city.District",
            "select city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city country",
            "city",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.9915686249732971,
            0.00010558974463492632,
            0.00017315206059720367,
            7.716774416621774e-05,
            0.00024524086620658636,
            6.77426069159992e-05,
            0.2043946534395218,
            0.00012465858890209347
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where is the city Kabul located? Which region is it?",
        "gold_select": "select country.Region",
        "select_candidates": [
            "select country.Region",
            "select country.Region, city.CountryCode",
            "select country.Name, country.Region",
            "select country.Name, city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city country",
            "city",
            "city sqlite_sequence country",
            "city sqlite_sequence"
        ],
        "align_scores": [
            0.9954319000244141,
            0.0001358530280413106,
            0.00043447886127978563,
            7.488135452149436e-05,
            0.0005813547759316862,
            7.580356759717688e-05,
            0.0005331526626832783,
            7.130305311875418e-05
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the region Kabul is in?",
        "gold_select": "select country.Region",
        "select_candidates": [
            "select country.Region",
            "select country.Name",
            "select country.Region, city.Name",
            "select country.Name, city.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city country"
        ],
        "align_scores": [
            0.9928665161132812,
            0.00010473325528437272,
            0.026063231751322746,
            0.00010159098746953532,
            0.00024408801982644945,
            7.448352698702365e-05,
            0.00017703625780995935,
            7.524441025452688e-05
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of region where Kabul is located?",
        "gold_select": "select country.Region",
        "select_candidates": [
            "select country.Region",
            "select country.Region, city.Name",
            "select country.Region, city.CountryCode",
            "select country.Name, city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city country"
        ],
        "align_scores": [
            0.9943506717681885,
            9.657147893449292e-05,
            0.0002890897449105978,
            7.604879647260532e-05,
            0.00022599933436140418,
            7.198584353318438e-05,
            0.00023205074830912054,
            7.682733848923817e-05
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which region is the city of Kabul located?",
        "gold_select": "select country.Region",
        "select_candidates": [
            "select country.Region",
            "select country.Region, city.CountryCode",
            "select distinct country.Region",
            "select country.Region, city.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city country",
            "city",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.9954133629798889,
            0.00013285581371746957,
            0.00016670252080075443,
            9.090497042052448e-05,
            0.033773958683013916,
            0.000258246116572991,
            0.00020237821445334703,
            7.927588740130886e-05
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where is Kabul located (and/or, in respect to Kabul, which region does Afghanistan belong)?",
        "gold_select": "select country.Region",
        "select_candidates": [
            "select city.Name, country.Region",
            "select country.Region, city.Name",
            "select city.CountryCode, country.Region",
            "select country.Capital, country.Region"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city country"
        ],
        "align_scores": [
            0.004231294617056847,
            9.38234370551072e-05,
            0.03669678792357445,
            9.876064723357558e-05,
            0.0005641956813633442,
            9.146966476691887e-05,
            0.08216299116611481,
            8.8004584540613e-05
        ],
        "align_select": "select city.Name, country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the region Kabul is located in?",
        "gold_select": "select country.Region",
        "select_candidates": [
            "select country.Region",
            "select country.Region, city.Name",
            "select country.Name",
            "select country.Region, city.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country",
        "table_candidates": [
            "city country"
        ],
        "align_scores": [
            0.9933111667633057,
            0.00011060779070248827,
            0.00025945939705707133,
            7.801879837643355e-05,
            0.01690753921866417,
            0.00010942841618089005,
            0.0002629197551868856,
            7.915608148323372e-05
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the population of Brazil and its life expectancy.",
        "gold_select": "select country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Population, country.LifeExpectancy",
            "select country.Code, country.Name, country.Population, country.LifeExpectancy",
            "select country.Code, country.Name, country.LifeExpectancy",
            "select country.Code, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9954074025154114,
            0.00022110353165771812,
            0.000196122593479231,
            7.622980047017336e-05,
            0.00023368575784843415,
            7.190462201833725e-05,
            0.00020209280773997307,
            8.035698556341231e-05
        ],
        "align_select": "select country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the population of Brazil and the average life expectancy?",
        "gold_select": "select country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Population, avg(country.LifeExpectancy)",
            "select avg(country.Population), country.Population",
            "select country.Code, avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.Population"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9947675466537476,
            0.0008505283622071147,
            0.00031045949435792863,
            0.00011334781447658315,
            0.0003180119674652815,
            0.00017304248467553407,
            0.9924708604812622,
            0.015851803123950958
        ],
        "align_select": "select country.Population, avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the population of Brazil and the life expectancy?",
        "gold_select": "select country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Population, country.LifeExpectancy",
            "select country.Code, country.Name, country.Population, country.LifeExpectancy",
            "select country.Code, country.Population, country.LifeExpectancy",
            "select country.Code, country.Name, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9952467083930969,
            0.00028276615194045007,
            0.00018330190505366772,
            7.450839621014893e-05,
            0.00021416058007162064,
            8.046656148508191e-05,
            0.00024780043167993426,
            6.803191354265437e-05
        ],
        "align_select": "select country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the information about the population size in Brazil and the life expectancy.",
        "gold_select": "select country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Population, country.LifeExpectancy",
            "select country.Code, country.Name, country.Population, country.LifeExpectancy",
            "select country.Code, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9945918917655945,
            0.00017944342107512057,
            0.00020301289623603225,
            8.736901509109885e-05,
            0.00020852767920587212,
            8.44498208607547e-05,
            0.00018168659880757332,
            7.701732829445973e-05
        ],
        "align_select": "select country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the population of Brazil and their life expectancy.",
        "gold_select": "select country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Population, country.LifeExpectancy",
            "select country.Code, country.Population, country.LifeExpectancy",
            "select country.Code, country.Name, country.Population, country.LifeExpectancy",
            "select country.Code, country.Name, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9951932430267334,
            0.00023437388881575316,
            0.00018914196698460728,
            7.96496169641614e-05,
            0.00018177548190578818,
            7.766574708512053e-05,
            0.00019399606389924884,
            6.984458741499111e-05
        ],
        "align_select": "select country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Provide me with Brazil\u2019s population and life expectancy.",
        "gold_select": "select country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Population, country.LifeExpectancy",
            "select country.Code, country.Name, country.Population, country.LifeExpectancy",
            "select country.Code, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.993934690952301,
            0.00022934113803785294,
            0.0002032313495874405,
            8.147238986566663e-05,
            0.0002186861529480666,
            8.421932579949498e-05,
            0.0002114536619046703,
            7.470219861716032e-05
        ],
        "align_select": "select country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me information about the population of Brazil. Also the life expectancy please.",
        "gold_select": "select country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Population, country.LifeExpectancy",
            "select country.Code, country.Name, country.Population, country.LifeExpectancy",
            "select country.Code, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9947251677513123,
            0.0005244084168225527,
            0.0002246617223136127,
            9.91035922197625e-05,
            0.00024601956829428673,
            0.00011498555250000209,
            0.0002404953702352941,
            9.4527771580033e-05
        ],
        "align_select": "select country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Brazil has population, %Brazil%, and life expectancies.",
        "gold_select": "select country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Population, country.LifeExpectancy, t2.c%",
            "select country.Population, country.LifeExpectancy, country.Name5",
            "select country.Population, country.LifeExpectancy, country.Code2",
            "select country.Population, country.LifeExpectancy, country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.00041819585021585226,
            7.974613254191354e-05,
            0.00021563749760389328,
            5.872679685126059e-05,
            0.00023848396085668355,
            6.7528075305745e-05,
            0.0002823658287525177,
            6.760410906281322e-05
        ],
        "align_select": "select country.Population, country.LifeExpectancy, t2.c%",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the population and life expectancy of Brazil?",
        "gold_select": "select country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Population, country.LifeExpectancy",
            "select country.Code, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.IndepYear, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.994621992111206,
            0.00030365094426088035,
            0.0002231528196716681,
            8.76554986461997e-05,
            0.00023801530187483877,
            8.151488873409107e-05,
            0.0002212908148067072,
            6.358431710395962e-05
        ],
        "align_select": "select country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which regions and populations make up Angola?",
        "gold_select": "select country.Population, country.Region",
        "select_candidates": [
            "select country.Region, country.Population",
            "select country.Name, country.Region, country.Population",
            "select distinct country.Region, country.Population",
            "select country.Region, country.Population, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9961133003234863,
            0.00018312197062186897,
            0.0002328825939912349,
            7.13164554326795e-05,
            0.007502456195652485,
            7.67784149502404e-05,
            0.00028136101900599897,
            7.524196553276852e-05
        ],
        "align_select": "select country.Region, country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where is the region of Angola? What is the population of Angola?",
        "gold_select": "select country.Population, country.Region",
        "select_candidates": [
            "select country.Region, country.Population",
            "select country.Name, country.Region, country.Population",
            "select country.Continent, country.Region, country.Population",
            "select country.Region.c3, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.9958315491676331,
            8.785801037447527e-05,
            0.00018649939738679677,
            7.078512862790376e-05,
            0.00021492052474059165,
            6.74316834192723e-05,
            0.0002782094234135002,
            7.245056622195989e-05
        ],
        "align_select": "select country.Region, country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the information on the region and population of Angola?",
        "gold_select": "select country.Population, country.Region",
        "select_candidates": [
            "select country.Region, country.Population",
            "select country.Name, country.Region, country.Population",
            "select country.Continent, country.Region, country.Population",
            "select country.Region, country.Population, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.9950751662254333,
            0.00011365420505171642,
            0.00023168441839516163,
            9.910490916809067e-05,
            0.0002460451505612582,
            9.80982804321684e-05,
            0.0002447381557431072,
            9.216010948875919e-05
        ],
        "align_select": "select country.Region, country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which are the region and population of Angola? List them.",
        "gold_select": "select country.Population, country.Region",
        "select_candidates": [
            "select country.Region, country.Population",
            "select country.Name, country.Region, country.Population",
            "select country.Continent, country.Region, country.Population",
            "select country.Region, country.Population, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9955494403839111,
            0.00012022012379020452,
            0.0002604016044642776,
            9.371274063596502e-05,
            0.000229814148042351,
            0.00010260133421979845,
            0.00020352397405076772,
            9.898222197080031e-05
        ],
        "align_select": "select country.Region, country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the information on Angola with regards to region and population.",
        "gold_select": "select country.Population, country.Region",
        "select_candidates": [
            "select country.Region, country.Population",
            "select country.Name, country.Region, country.Population",
            "select country.Continent, country.Region, country.Population",
            "select countryinfo(country.Region), country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9955061674118042,
            0.00010809965169755742,
            0.00023183446319308132,
            6.971482798689976e-05,
            0.00023565923038404435,
            6.970033427933231e-05,
            0.00020906499412376434,
            7.040731725282967e-05
        ],
        "align_select": "select country.Region, country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name and population of the region where Angola belongs to?",
        "gold_select": "select country.Population, country.Region",
        "select_candidates": [
            "select country.Name, country.Population",
            "select country.Region, country.Population",
            "select country.Code, country.Region, country.Population",
            "select country.Name, country.Region, country.Population"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "city sqlite_sequence country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.3767679035663605,
            0.00011184479080839083,
            0.9887900352478027,
            0.00012346213043201715,
            0.00019623804837465286,
            8.324807276949286e-05,
            0.00031877600122243166,
            8.497318776790053e-05
        ],
        "align_select": "select country.Region, country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the region in which Angola belongs? Give its population.",
        "gold_select": "select country.Population, country.Region",
        "select_candidates": [
            "select country.Region, country.Population",
            "select country.Name, country.Region, country.Population",
            "select country.Continent, country.Region, country.Population",
            "select country.Region, sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9910025000572205,
            5.981789581710473e-05,
            0.0001841782359406352,
            6.41025326331146e-05,
            0.0002580260916147381,
            5.721699562855065e-05,
            0.0008373740129172802,
            5.8440880820853636e-05
        ],
        "align_select": "select country.Region, country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the region named Angola and its population.",
        "gold_select": "select country.Population, country.Region",
        "select_candidates": [
            "select country.Region, country.Population",
            "select country.Region, count(*)",
            "select country.Name, country.Population",
            "select country.Region, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.9954146146774292,
            0.00013001482875552028,
            0.03205239400267601,
            0.00020220442092977464,
            0.00029383497894741595,
            9.595635492587462e-05,
            0.0002459011157043278,
            6.255866173887625e-05
        ],
        "align_select": "select country.Region, country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which region does Angola reside, and what is its population?",
        "gold_select": "select country.Population, country.Region",
        "select_candidates": [
            "select country.Region, country.Population",
            "select country.Name, country.Region, country.Population",
            "select country.Continent, country.Region, country.Population",
            "select country.Region, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.995555579662323,
            9.931436215993017e-05,
            0.00020149347255937755,
            8.327966497745365e-05,
            0.0003097204607911408,
            7.220860425150022e-05,
            0.946294367313385,
            9.660408977651969e-05
        ],
        "align_select": "select country.Region, country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the region that Angola belongs to and its (countrywide) population?",
        "gold_select": "select country.Population, country.Region",
        "select_candidates": [
            "select country.Region, country.Population",
            "select country.Name, country.Region, country.Population",
            "select country.Continent, country.Region, country.Population",
            "select country.Region, sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.995829164981842,
            0.5124115347862244,
            0.00024551129899919033,
            0.00028286883025430143,
            0.0003432450466789305,
            0.0003175726451445371,
            0.008308498188853264,
            0.9484800696372986
        ],
        "align_select": "select country.Region, country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the information about the region of Central Africa. Please include their life expectancy, on average.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy).",
            "select  avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9941662549972534,
            0.0005041597760282457,
            0.0005122750299051404,
            0.00018530063971411437,
            0.00047007083776406944,
            0.00017177681729663163,
            0.9941662549972534,
            0.0005041597760282457
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average life expectancy of countries in the region of Central Africa?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select Avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9951818585395813,
            0.00013055263843853027,
            0.00045085742021910846,
            0.00011180757428519428,
            0.9951818585395813,
            0.00013055263843853027,
            0.9951818585395813,
            0.00013055263843853027
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average life expectancy by country in the region of Central Africa?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.Name",
            "select country.Name, avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy) par country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9936107993125916,
            0.00011099450057372451,
            0.9823889136314392,
            0.00015601716586388648,
            0.9827866554260254,
            0.00012363177665974945,
            0.003454135498031974,
            0.00012839020928367972
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "How long on average does people live in Central Africa? List the region's average life expectancy.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select region's avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.Region",
            "select an avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9803140163421631,
            0.0016909738769754767,
            0.0005025862483307719,
            0.0002473571221344173,
            0.00025010519311763346,
            0.332070529460907,
            0.0005717482417821884,
            0.0002736658207140863
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Does anyone know how long the average life expectancy is in Central Africa?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select Avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.994670569896698,
            0.0002041922416538,
            0.00044988951412960887,
            0.00016699859406799078,
            0.994670569896698,
            0.0002041922416538,
            0.994670569896698,
            0.0002041922416538
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The people\u2019s average life expectancy in Central Africa is how long?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select avg(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9942228198051453,
            7.251997158164158e-05,
            0.0004345012712292373,
            0.00010942966764559969,
            0.9942228198051453,
            7.251997158164158e-05,
            0.0010318957502022386,
            7.414280844386667e-05
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of country in Asia which has the lowest life expectancy?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Region",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.990959644317627,
            0.00024586805375292897,
            0.00027839807444252074,
            0.00012157839955762029,
            0.00023447764397133142,
            0.00011292093404335901,
            0.00022265335428528488,
            9.301120007876307e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which country has the lowest life expectancy in Asia? List its name.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Code",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.988706111907959,
            0.0004095510521437973,
            0.0002774626773316413,
            0.00014399572683032602,
            0.0012674580793827772,
            0.000152226843056269,
            0.00021093673422001302,
            9.124784992309287e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the average life expectancy in African countries that have Republic as the government form?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.GovernmentForm",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9944702386856079,
            0.00031451531685888767,
            0.000199697315110825,
            0.0001762164174579084,
            0.0004739749419968575,
            0.0001239258999703452,
            0.00014208379434421659,
            8.951897325459868e-05
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Average life expectancy of republics from Africa. Can you please give me the average from these countries?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy)."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9958265423774719,
            9.884498285828158e-05,
            0.00035862019285559654,
            7.713669037912041e-05,
            0.9958265423774719,
            9.884498285828158e-05,
            0.0002871854812838137,
            6.680304068140686e-05
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of what African countries are republics? What is the average life expectancy in those republics?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select country.Name, avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.Name",
            "select an avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9934171438217163,
            0.0012301449896767735,
            0.006192350294440985,
            0.04669199511408806,
            0.0008337254403159022,
            0.5638463497161865,
            0.00039669827674515545,
            0.00018259836360812187
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which African countries are republics? Show the average life expectancy of those republics.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.Name",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9946881532669067,
            0.00021743121033068746,
            0.01585511304438114,
            0.16096562147140503,
            0.00037538385367952287,
            0.00016242804122157395,
            0.00021517067216336727,
            0.00017715024296194315
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries in Africa are republics? What is the average life expectancy of those countries?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.Name",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9942846894264221,
            0.00018051046936307102,
            0.0033558958675712347,
            0.3920377790927887,
            0.000387385836802423,
            0.00014275040302891284,
            0.9942846894264221,
            0.00018051046936307102
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries are republics in Africa and give their average life expectancy?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select country.Name, avg(country.LifeExpectancy)",
            "select countrycountry.Name, avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9943339824676514,
            0.00021692056907340884,
            0.9909193515777588,
            0.0014665366616100073,
            0.0005418646614998579,
            0.00019149573927279562,
            0.017564060166478157,
            0.0048134722746908665
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The total surface area of the continent Asia and the continent Europe together is...?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Continent",
            "select sum(country.SurfaceArea), country.Continent",
            "select sum(country.SurfaceArea) delimited by country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9955775737762451,
            7.536577322753146e-05,
            0.00017170229693874717,
            7.900269702076912e-05,
            0.00017170229693874717,
            7.900269702076912e-05,
            0.0002559908025432378,
            8.472793706459925e-05
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give approximate numbers of people that live in Gelderland district.",
        "gold_select": "select sum(city.Population)",
        "select_candidates": [
            "select avg(city.Population)",
            "select city.Population",
            "select approx(city.Population)",
            "select an approximation(city.Population)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.06895524263381958,
            6.182250217534602e-05,
            0.930052638053894,
            0.00012042895832564682,
            0.7512856721878052,
            9.403535659657791e-05,
            0.0006547652883455157,
            8.25141542009078e-05
        ],
        "align_select": "select city.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total population of the Gelderland district?",
        "gold_select": "select sum(city.Population)",
        "select_candidates": [
            "select sum(city.Population)",
            "select sum(city.Population), city.District",
            "select sum(city.Population), city.District, city.Population",
            "select sum(t0, city.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9966891407966614,
            0.000620954146143049,
            0.0001601745461812243,
            0.36744198203086853,
            0.00021736942289862782,
            0.00014005426783114672,
            0.0006090076640248299,
            0.00014830610598437488
        ],
        "align_select": "select sum(city.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the population of Gelderland District?",
        "gold_select": "select sum(city.Population)",
        "select_candidates": [
            "select city.Population",
            "select sum(city.Population)",
            "select city.ID, city.District, city.Population",
            "select city.ID, city.Population"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.995848536491394,
            9.1864938440267e-05,
            0.01329852920025587,
            5.812302333652042e-05,
            0.0001873501023510471,
            6.38683486613445e-05,
            0.00018708306015469134,
            6.573595601366833e-05
        ],
        "align_select": "select city.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The total population of Gelderland district was?",
        "gold_select": "select sum(city.Population)",
        "select_candidates": [
            "select sum(city.Population)",
            "select sum(city.Population), city.District",
            "select sum(city.Population), city.District, city.Population",
            "select sum(city.Population), city.District, city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9966578483581543,
            0.0015502918977290392,
            0.00014887822908349335,
            0.0016203344566747546,
            0.00017193821258842945,
            9.032016532728449e-05,
            0.00015355624782387167,
            8.265788346761838e-05
        ],
        "align_select": "select sum(city.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the total population of Gelderland district?",
        "gold_select": "select sum(city.Population)",
        "select_candidates": [
            "select sum(city.Population)",
            "select sum(city.Population), city.District",
            "select sum(city.Population), city.District, city.Population",
            "select sum(city.Population), city.District - city.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9966795444488525,
            0.0026491850148886442,
            0.0001508572604507208,
            0.0034076999872922897,
            0.0002000201347982511,
            0.0001070796643034555,
            0.00014591864601243287,
            0.00010235342051601037
        ],
        "align_select": "select sum(city.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the GNP and total population of US Territory countries in the order of GNP?",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select country.GNP, sum(country.Population)",
            "select country.GNP, country.Population",
            "select country.Code, country.GNP, sum(country.Population)",
            "select country.Code, country.GNP, country.Population"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9959717392921448,
            0.00046141829807311296,
            0.9950993657112122,
            0.0001759107253747061,
            0.0003578997275326401,
            0.00015008405898697674,
            0.00023324013454839587,
            0.00012556815636344254
        ],
        "align_select": "select country.GNP, sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Show the mean GNP and total population of all nations considered US territory.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.Population), sum(country.Population)",
            "select avg(country.Population), sum(country.GNP)",
            "select avg(country.LifeExpectancy), sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9958739876747131,
            0.005495152901858091,
            0.02664734236896038,
            0.00046134082367643714,
            0.9960601925849915,
            0.010943111963570118,
            0.3492712080478668,
            0.02455274946987629
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have US territory? Give their mean GNP and total population.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select country.GNP, sum(country.Population)",
            "select country.GNP, country.Population",
            "select country.Name, avg(country.GNP), sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.00482510169968009,
            0.9952680468559265,
            0.18901515007019043,
            0.018537549301981926,
            0.12854556739330292,
            0.9549419283866882,
            0.02277890220284462,
            0.003081823932006955
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Out of which, how many languages are there that are still being used today?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct countrylanguage.Language)",
            "select count(*), countrylanguage.Language",
            "select count(countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.979093611240387,
            0.9560114145278931,
            0.29133978486061096,
            0.9826480746269226,
            0.0005006898427382112,
            0.0008974501397460699,
            0.960273802280426,
            0.9117169976234436
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the total number of unique languages spoken in the world.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(speechcount(distinct countrylanguage.Language)",
            "select count(count(distinct countrylanguage.Language)",
            "select count(distinct countrylanguage.CountryCode)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.9961110949516296,
            0.9961110949516296,
            0.001049633021466434,
            0.001049633021466434,
            0.00069856783375144,
            0.00069856783375144,
            0.001840116921812296,
            0.001840116921812296
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In how many different languages do we speak?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(distinct countrylanguage.Language)."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.9955162405967712,
            0.9955162405967712,
            0.07437554001808167,
            0.07437554001808167,
            0.005131063051521778,
            0.005131063051521778,
            0.0008133739465847611,
            0.0008133739465847611
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "There are what number of unique languages in the world?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(selection count(distinct countrylanguage.Language)",
            "select count(unique countrylanguage.Language)",
            "select count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.9952684044837952,
            0.9952684044837952,
            0.0004043423687107861,
            0.0004043423687107861,
            0.8313202261924744,
            0.8313202261924744,
            0.022191563621163368,
            0.022191563621163368
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of languages spoken globally?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(*)",
            "select count(speechcount(distinct countrylanguage.Language)",
            "select count(count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.9962375164031982,
            0.0004789168306160718,
            0.9916623830795288,
            0.029718566685914993,
            0.0012129552196711302,
            0.00029800928314216435,
            0.0006426640320569277,
            0.00023544495343230665
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of types of government in Africa?",
        "gold_select": "select count(distinct country.GovernmentForm)",
        "select_candidates": [
            "select count(distinct country.GovernmentForm)",
            "select count(distinct country.Name)",
            "select count(distinct country.GovernmentForm",
            "select count(distinct country.LocalName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9935865998268127,
            0.00017355110321659595,
            0.009903284721076488,
            0.00018760575039777905,
            0.4510785639286041,
            0.00016199483070522547,
            0.003156584920361638,
            0.0001507024426246062
        ],
        "align_select": "select count(distinct country.GovernmentForm)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the number of different form of government in Africa?",
        "gold_select": "select count(distinct country.GovernmentForm)",
        "select_candidates": [
            "select count(distinct country.GovernmentForm)",
            "select count(distinct country.Name)",
            "select count(distinct country.GovernmentForm",
            "select count(distinct country.LocalName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9957243204116821,
            0.9957243204116821,
            0.02441463991999626,
            0.02441463991999626,
            0.5475583672523499,
            0.5475583672523499,
            0.012064112350344658,
            0.012064112350344658
        ],
        "align_select": "select count(distinct country.GovernmentForm)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of different forms of government in Africa?",
        "gold_select": "select count(distinct country.GovernmentForm)",
        "select_candidates": [
            "select count(distinct country.GovernmentForm)",
            "select count(distinct country.Name)",
            "select count(distinct country.GovernmentForm",
            "select count(distinct country.LocalName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9957678318023682,
            0.00013466968084685504,
            0.025537503883242607,
            0.0002896635851357132,
            0.44817304611206055,
            0.00017177518748212606,
            0.011146836914122105,
            0.0002097194519592449
        ],
        "align_select": "select count(distinct country.GovernmentForm)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The Africa continent has how many government forms?",
        "gold_select": "select count(distinct country.GovernmentForm)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct country.GovernmentForm)",
            "select count(distinct country.Name)",
            "select count(distinct country.GovernmentForm"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9938469529151917,
            0.009782721288502216,
            0.007921518757939339,
            0.00012080287706339732,
            0.015266826376318932,
            0.00015287281712517142,
            0.0021406891755759716,
            0.00010626812581904233
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In Africa, how many forms of government are there?",
        "gold_select": "select count(distinct country.GovernmentForm)",
        "select_candidates": [
            "select count(distinct country.GovernmentForm)",
            "select count(distinct country.Name)",
            "select count(distinct country.GovernmentForm",
            "select count(distinct country.LocalName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9947145581245422,
            9.227160626323894e-05,
            0.03896456956863403,
            9.27763685467653e-05,
            0.35848987102508545,
            0.00016098546620924026,
            0.016411451622843742,
            0.00010416802251711488
        ],
        "align_select": "select count(distinct country.GovernmentForm)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me how many languages are spoken here?",
        "gold_select": "select count(countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(distinct countrylanguage.Language, count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language), city.CountryCode",
            "select count(speechcount(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "city country countrylanguage",
            "country countrylanguage",
            "city countrylanguage",
            "sqlite_sequence countrylanguage",
            "city sqlite_sequence countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9843926429748535,
            6.374367512762547e-05,
            0.0001775494747562334,
            6.049988223821856e-05,
            0.00016065668023657054,
            6.467973435064778e-05,
            0.0012153502320870757,
            7.521671068388969e-05
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In Aruba, what is the total number of languages spoken?",
        "gold_select": "select count(countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select sum(countrylanguage.Language)",
            "select count(speechcount(distinct countrylanguage.Language)",
            "select count(count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.996469259262085,
            0.00027682058862410486,
            0.9941797256469727,
            0.00396722974255681,
            0.0013973809545859694,
            0.00014484843995887786,
            0.0012675105826929212,
            0.00012261925439815968
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of languages in Aruba?",
        "gold_select": "select count(countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.Language)",
            "select count(count(distinct countrylanguage.Language)",
            "select count(selection count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9900471568107605,
            0.000142017932375893,
            0.9969378709793091,
            0.0006205894169397652,
            0.0005336978938430548,
            0.0001054294771165587,
            0.00034413623507134616,
            9.747297735884786e-05
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The total number of languages spoken in Aruba is?",
        "gold_select": "select count(countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.Language)",
            "select count(*)",
            "select count(speechcount(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9968570470809937,
            0.9963186979293823,
            0.9967150688171387,
            0.9959591031074524,
            0.9951157569885254,
            0.9919354915618896,
            0.0013004136271774769,
            0.001626799930818379
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In the official languages of Afghanistan, how many languages are spoken?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(distinct countrylanguage.Language, countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language), country.Name",
            "select count(speechcount(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9955275654792786,
            0.0006673672469332814,
            0.00044901424553245306,
            0.00015883070591371506,
            0.0001814942224882543,
            0.0014714563731104136,
            0.0008607644704170525,
            0.00022371178783942014
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number languages officially in Afghanistan?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.Language)",
            "select count(*)",
            "select count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9963446259498596,
            0.000138397459522821,
            0.993765115737915,
            0.0009607148822396994,
            0.9797573685646057,
            0.01086017768830061,
            0.8362443447113037,
            0.0001135550846811384
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list all the official languages spoken in Afghanistan which is number? Which one is official language?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select count(distinct countrylanguage.Language)",
            "select distinct countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.8010359406471252,
            0.43001917004585266,
            0.004241290967911482,
            0.003427612828090787,
            0.0012254751054570079,
            0.005723684094846249,
            0.004419458564370871,
            0.19614025950431824
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "List all the official languages of Afghanistan.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select distinct countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9948917627334595,
            0.023196503520011902,
            0.4218915104866028,
            0.0004810564569197595,
            0.00028540496714413166,
            8.514888759236783e-05,
            0.0038256393745541573,
            7.643011485924944e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the name of the country that speaks the largest number of languages?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9897464513778687,
            8.002448885235935e-05,
            0.00533959548920393,
            0.00011454103514552116,
            0.00030014064395800233,
            7.032485154923052e-05,
            0.0014450667658820748,
            7.559646473964676e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the name of the country speaking the largest number of languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9942254424095154,
            6.203901284607127e-05,
            0.003890100633725524,
            7.25480422261171e-05,
            0.00020758538448717445,
            5.853619586559944e-05,
            0.0009959547314792871,
            5.909724495722912e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What nation has used the greatest amounts of languages? What is the name of this nation?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9810274839401245,
            8.565403550164774e-05,
            0.004314915277063847,
            9.64034697972238e-05,
            0.00023825941025279462,
            5.8169600379187614e-05,
            0.04139157012104988,
            8.398723002756014e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the continent with the most diverse languages?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, countrylanguage.Language",
            "select country.Continent, country.Name",
            "select country.Continent, countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9947570562362671,
            7.640949479537085e-05,
            0.0010014164727181196,
            8.469747990602627e-05,
            0.0006096180295571685,
            7.688758341828361e-05,
            0.00021628568356391042,
            7.6363816333469e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which continent has the most languages spoken on it?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, countrylanguage.Language",
            "select country.Continent, country.Name",
            "select country.Continent (country.Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9957820177078247,
            6.860031135147437e-05,
            0.0009756265208125114,
            6.424831371987239e-05,
            0.0005660677561536431,
            6.640158244408667e-05,
            0.0014704704517498612,
            6.819182453909889e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which continent is spoken the most languages?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, countrylanguage.Language",
            "select country.Continent, country.Region",
            "select country.Continent, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9939868450164795,
            6.793032662244514e-05,
            0.0007488460978493094,
            6.25500179012306e-05,
            0.0012600381160154939,
            6.234142347238958e-05,
            0.0001707459014141932,
            5.9702379076043144e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the continent with the most speaking languages?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, countrylanguage.Language",
            "select country.Continent, country.Name",
            "select country.Continent, countrylanguage.Percentage"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9617859721183777,
            7.212223863461986e-05,
            0.0011432893807068467,
            7.261158316396177e-05,
            0.0006474516121670604,
            6.986670632613823e-05,
            0.00040129447006620467,
            6.134020077297464e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which continent does the most languages spoken?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, countrylanguage.Language",
            "select country.Code, country.Continent",
            "select country.Continent, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.976825475692749,
            7.143290713429451e-05,
            0.0005723403301090002,
            6.259429937927052e-05,
            0.0005388369900174439,
            7.243632717290893e-05,
            0.0009983201744034886,
            6.398026744136587e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Of all countries speaking English, how many also speak Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select countrylanguage.CountryCode, count(*)",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9877520799636841,
            0.007019418757408857,
            0.0013755549443885684,
            0.6832314729690552,
            0.0004980898811481893,
            0.003397672902792692,
            0.0002055812074104324,
            0.00199827179312706
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which countries can you speak both English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.7607731819152832,
            0.003815176896750927,
            0.9946198463439941,
            0.0008135007228702307,
            0.0006979755708016455,
            0.0002138457348337397,
            0.9959301352500916,
            0.0005799146019853652
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all the countries which speak both English and Dutch.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select country.Name",
            "select countrylanguage.CountryCode",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9951032400131226,
            0.00094523438019678,
            0.8132407665252686,
            0.005355588626116514,
            0.0004361595492810011,
            0.00022553480812348425,
            0.000134097266709432,
            0.00010374969861004502
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "list all countries spoken by both English and Dutch.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select countrylanguage.CountryCode",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "countrylanguage country countrylanguage",
            "city countrylanguage"
        ],
        "align_scores": [
            0.9949198365211487,
            0.00030748030985705554,
            0.0005395457847043872,
            0.0001879638439277187,
            0.9878225922584534,
            0.0017329280963167548,
            0.00017102941637858748,
            9.50468675000593e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of countries which speaing English and Dutch.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*) dependant on countrylanguage.CountryCode, countrylanguage.Language",
            "select count(*), countrylanguage.CountryCode, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9616317749023438,
            0.0060050273314118385,
            0.00035402047797106206,
            0.001687222975306213,
            0.00031941122142598033,
            0.00010258568363497034,
            0.00010635014768922701,
            0.00014033606566954404
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of nations speaking English and French? List them by two languages being spoken.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9877870678901672,
            0.8527901768684387,
            0.00028442597249522805,
            0.0005034358473494649,
            0.001427551032975316,
            0.0025587184354662895,
            0.00018627778626978397,
            0.0003011272056028247
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Can you tell me the names of nations which speak both English and French?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9932416677474976,
            0.0008979338454082608,
            0.00028962496435269713,
            0.0001822002523113042,
            0.00042606910574249923,
            0.00022262426500674337,
            0.00021668532281182706,
            0.00011230850941501558
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries can talk to each other using English and French? List the name of the two native languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9810733795166016,
            0.3274446725845337,
            0.00023336312733590603,
            0.00016336153203155845,
            0.0003069004451390356,
            0.0004458346520550549,
            0.0005837935023009777,
            0.0018865193706005812
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all of the nation who speaks the same language as english and french?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.LocalName",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9310384392738342,
            0.9913340210914612,
            0.00049773626960814,
            0.0006711777532473207,
            0.00035070680314674973,
            0.0006827074103057384,
            0.00029141007689759135,
            0.00038472627056762576
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries speak both English and French? List their name.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9951481223106384,
            0.0006631857831962407,
            0.00042379015940241516,
            0.00021590021788142622,
            0.0003092247643508017,
            0.00016170360322576016,
            0.00030391421751119196,
            0.00021047907648608088
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries speak both English and French? List the names.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9947316646575928,
            0.0006555388681590557,
            0.00040025837370194495,
            0.0002086567401420325,
            0.00031177650089375675,
            0.00015835963131394237,
            0.0002896848600357771,
            0.0002007846487686038
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of countries where people speak both English and French?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9949475526809692,
            0.0006578734610229731,
            0.0002877050719689578,
            0.00015800955588929355,
            0.0005105668678879738,
            0.00024042959557846189,
            0.00025641146930865943,
            0.0001138817096943967
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the names of all the countries which speak both English and French?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9938486218452454,
            0.0012438643025234342,
            0.00027297218912281096,
            0.00022111026919446886,
            0.0004857369640376419,
            0.0002717242168728262,
            0.0003801439597737044,
            0.00016124494140967727
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the nations that speak both English and French? List them.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9922040700912476,
            0.0010697207180783153,
            0.0003229860158171505,
            0.00018857454415410757,
            0.0005691761616617441,
            0.0002898848906625062,
            0.00034774423693306744,
            0.0001505074033048004
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of countries where both English and French are official languages? List them.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9941960573196411,
            0.0009533532429486513,
            0.00029160515987314284,
            0.00014908563753124326,
            0.0005097950925119221,
            0.00023967589368112385,
            0.0003190755087416619,
            0.00013507156108971685
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have both English and French as official languages? List their names.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9941984415054321,
            0.0012875819811597466,
            0.00047801536857150495,
            0.00031895784195512533,
            0.0003322040138300508,
            0.00022293123765848577,
            0.0004289409553166479,
            0.00019386809435673058
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the names of the countries where both English and French are official languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9945104122161865,
            0.0006436975672841072,
            0.0004740332660730928,
            0.00021895905956625938,
            0.00047919192002154887,
            0.0001440778432879597,
            0.00026363893994130194,
            0.00016297929687425494
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the names of countries where both English and French are official languages?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.9950125813484192,
            0.0009675472392700613,
            0.0002728919789660722,
            0.00017679772281553596,
            0.00037260804674588144,
            0.00021979321900289506,
            0.0003214448515791446,
            0.0001639631373109296
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "In which countries are both English and French official languages? List them by name.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.IsOfficial",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9915990829467773,
            0.000713769462890923,
            0.0005695432773791254,
            0.0002460014948155731,
            0.000479186448501423,
            0.00017846330592874438,
            0.00037744612200185657,
            0.0002170076477341354
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the countries whose official language is English and French?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.IsOfficial",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9942750334739685,
            0.0004049919662065804,
            0.0002036249206867069,
            7.879760232754052e-05,
            0.00019944597443100065,
            8.704444189788774e-05,
            0.0002623903565108776,
            8.553649968234822e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have English and French as official languages? List their name and official language.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Name",
            "select country.Name, countrylanguage.Language, countrylanguage.IsOfficial",
            "select country.Name, country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.06952393800020218,
            0.0006460160366259515,
            0.00024136094725690782,
            0.00011692313273670152,
            0.00029563053976744413,
            0.0001230684865731746,
            0.00019174789485987276,
            0.0001055847096722573
        ],
        "align_select": "select country.Name, countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "In which countries can you speak to government using both French AND English to be official?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.7210813760757446,
            0.004139848053455353,
            0.9910673499107361,
            0.0009818999096751213,
            0.00051547447219491,
            0.00018926933989860117,
            0.000319683545967564,
            0.00013647237210534513
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "How many continents use Chinese as their native language?",
        "gold_select": "select count( distinct country.Continent)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct country.Continent)",
            "select count(country.Continent)",
            "select count(continents)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9313207268714905,
            0.0032587689347565174,
            0.941670835018158,
            9.68003150774166e-05,
            0.9311906099319458,
            0.0006201181677170098,
            0.6088042855262756,
            0.0002065258304355666
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the regions that speak Dutch or English.",
        "gold_select": "select distinct country.Region",
        "select_candidates": [
            "select country.Region",
            "select distinct country.Region",
            "select country.Region, countrylanguage.CountryCode",
            "select country.Region, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9933680891990662,
            0.042553793638944626,
            0.034242596477270126,
            0.00017037545330822468,
            0.00015986146172508597,
            0.00013182233669795096,
            0.0002568381605669856,
            0.00011847507994389161
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What the regions that speak either Dutch or English? List them.",
        "gold_select": "select distinct country.Region",
        "select_candidates": [
            "select country.Region",
            "select distinct country.Region",
            "select country.Region, countrylanguage.CountryCode",
            "select country.Region, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9877177476882935,
            0.024333655834197998,
            0.05011704936623573,
            0.00027662061620503664,
            0.00019090324349235743,
            0.00013758194108959287,
            0.00020748269162140787,
            0.00013910249981563538
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the regions using either Dutch or English.",
        "gold_select": "select distinct country.Region",
        "select_candidates": [
            "select country.Region",
            "select distinct country.Region",
            "select country.Region, countrylanguage.Language",
            "select country.Region, country.SurfaceArea"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.994568943977356,
            0.00237092818133533,
            0.00984757300466299,
            0.0001564014528412372,
            0.00019502594659570605,
            0.00010014056169893593,
            0.0001829620887292549,
            9.732640319271013e-05
        ],
        "align_select": "select country.Region",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of the countries which has either English or Dutch as an official language.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.IsOfficial",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9501551389694214,
            0.003580510150641203,
            0.0005167516064830124,
            0.00015382867422886193,
            0.0002903816639445722,
            0.00011062774137826636,
            0.00021418262622319162,
            9.563024650560692e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the countries where English or Dutch is the official language.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.4241006672382355,
            0.15615291893482208,
            0.0005706321098841727,
            0.00013625677092932165,
            0.0002963730366900563,
            0.000129364721942693,
            0.0002963730366900563,
            0.000129364721942693
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which are the two states/countries whose languages are both English and Dutch?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.HeadOfState",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9936038851737976,
            0.0010106099070981145,
            0.0009517836151644588,
            0.0002645232016220689,
            0.00045806047273799777,
            0.00013917242176830769,
            0.0016851994441822171,
            0.00030136818531900644
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me about the countries where either English or Dutch is the official language?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select country.Name, countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.11163846403360367,
            0.05094150826334953,
            0.0007382885669358075,
            0.0002159510477213189,
            0.0007799604791216552,
            0.00029198909760452807,
            0.00030974761466495693,
            0.00012982642510905862
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find information on all countries where English or Dutch is the official language? List them here!",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.1536748707294464,
            0.5269656181335449,
            0.0017608628841117024,
            0.0007128018187358975,
            0.0004536564229056239,
            0.0002915918012149632,
            0.0007704966701567173,
            0.00023620201682206243
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "List all the countries whose official languages are either English or Dutch.",
        "gold_select": "select *",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.12180305272340775,
            0.04451034590601921,
            0.9750269055366516,
            0.0022023741621524096,
            0.0006760329124517739,
            0.00017926453438121825,
            0.0004367089131847024,
            0.00013477822358254343
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the countries which have either English or Dutch as an official language.",
        "gold_select": "select *",
        "select_candidates": [
            "select country.Name",
            "select countrylanguage.CountryCode",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9350995421409607,
            0.02845296636223793,
            0.36912378668785095,
            0.23015913367271423,
            0.0009029274224303663,
            0.0002512519422452897,
            0.000265951210167259,
            0.0001243488659383729
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Could you please list the countries which have either Dutch or English as their official languages?",
        "gold_select": "select *",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Continent",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage",
            "countrylanguage country countrylanguage"
        ],
        "align_scores": [
            0.895137369632721,
            0.020874574780464172,
            0.0009497589780949056,
            0.0004296132829040289,
            0.0002842069952748716,
            0.00019756724941544235,
            0.0007777976570650935,
            0.0002793307357933372
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Among which language has been selected as most popular on the Asian Continent?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9752612113952637,
            0.9872774481773376,
            0.00023326993687078357,
            0.0003089442616328597,
            0.0002080623380606994,
            0.00017210158694069833,
            0.00020250851230230182,
            0.00033980223815888166
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language which is the most used on the Asian Continent?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9935941100120544,
            9.0943300165236e-05,
            0.0003558850148692727,
            8.073011122178286e-05,
            0.00019200329552404583,
            7.631337939528748e-05,
            0.000604034576099366,
            7.435096631525084e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Name the languages spoken only in a country whose government uses a republic form.",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select distinct countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9685564041137695,
            0.001446483307518065,
            0.23598462343215942,
            0.0068032704293727875,
            0.0003512793336994946,
            0.00012743954721372575,
            0.0003436728147789836,
            0.00010671310883481055
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What languages are spoken by a single country with a republic government? List them.",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select distinct countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9916988611221313,
            0.000684349681250751,
            0.5453868508338928,
            0.00033476875978522,
            0.0003796738456003368,
            0.00010448257671669126,
            0.00024254761228803545,
            9.827112080529332e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which Asian country has the largest land area? Give the name, population, expected lifespan.",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.Population, country.LifeExpectancy",
            "select country.Name, country.Code, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9469502568244934,
            0.9843347668647766,
            0.9469502568244934,
            0.9843347668647766,
            0.0002997817937284708,
            0.00021802638366352767,
            0.0005199395818635821,
            0.0012898872373625636
        ],
        "align_select": "select country.Name, country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which is the asian nation which has the largest land area? List the name, population, and also the expected lifetime.",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.Code, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9466126561164856,
            0.9820937514305115,
            0.00033965925103984773,
            0.00032691165688447654,
            0.9466126561164856,
            0.9820937514305115,
            0.0004429574473761022,
            0.0015240359352901578
        ],
        "align_select": "select country.Name, country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name, population and expected life length of the Asian country with the largest surface area?",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.Population, country.LifeExpectancy",
            "select country.Name, country.Code, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9827166795730591,
            0.9919290542602539,
            0.9827166795730591,
            0.9919290542602539,
            0.0007195518701337278,
            0.0005227203364484012,
            0.0008053474011830986,
            0.0016539114294573665
        ],
        "align_select": "select country.Name, country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the name, population and expected life length of the asian country with the largest area?",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.Code, country.Population, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.968319296836853,
            0.9914150834083557,
            0.968319296836853,
            0.9914150834083557,
            0.0005162034067325294,
            0.0016987674171105027,
            0.00040626723784953356,
            0.0005009094602428377
        ],
        "align_select": "select country.Name, country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which is the largest Asian country by land area? What is the name, population, and life expectancy of this country?",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.Population, country.LifeExpectancy",
            "select country.Name, country.Code, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9870218634605408,
            0.9904404878616333,
            0.9870218634605408,
            0.9904404878616333,
            0.002112454269081354,
            0.0011210297234356403,
            0.0008330242708325386,
            0.0022814872208982706
        ],
        "align_select": "select country.Name, country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average life expectancy among countries which the official language is not English?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.IsOfficial"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9921696782112122,
            0.00023925896675791591,
            0.0001255170354852453,
            0.0009621979552321136,
            0.00039662985363975167,
            0.0001335718552581966,
            0.00015140301547944546,
            0.0009300085948780179
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the average life expectancy of all countries where English is not an official language?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode",
            "select an avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "country",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.993341863155365,
            0.00014185432519298047,
            0.0001396465813741088,
            0.00014863425167277455,
            0.0001503344246884808,
            0.00023836869513615966,
            0.00041227464680559933,
            0.00012016339314868674
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Do you know the average life expectancy of countries in which English is not an official language?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "country",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9916551113128662,
            0.00014027932775206864,
            0.00016300662537105381,
            0.00019489099213387817,
            0.0004479283816181123,
            0.00012081598833901808,
            0.0001674056111369282,
            0.0003524579224176705
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the mean life expectancy of countries in which English is not an official language?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "country",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.994674801826477,
            0.00011927671584999189,
            0.00015326689754147083,
            0.00015560694737359881,
            0.0004333992546889931,
            0.00010731497604865581,
            0.0001609394239494577,
            0.0002501428534742445
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the average life expectancy of countries where English is not an official language.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode",
            "select an avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "country",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9954090714454651,
            9.525573113933206e-05,
            0.00014662466128356755,
            0.00015433983935508877,
            0.00013909017434343696,
            0.00017609313363209367,
            0.00038112839683890343,
            0.00010590042074909434
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the mean average life expectancy of the countries where English is not an official language.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select maavg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "country",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9937416911125183,
            0.0002964377636089921,
            0.00017624213069211692,
            0.00036571777309291065,
            0.000134410394821316,
            0.00022982379596214741,
            0.002355425851419568,
            0.0002166016784030944
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In all the nations that don't use English, how many people live in them?",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select sum(country.Population)",
            "select count(*)",
            "select country.Population",
            "select country.Code, sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.08575352281332016,
            0.0004285898176021874,
            0.9735416173934937,
            0.003636907786130905,
            0.9565263390541077,
            0.2854669988155365,
            0.00034346809843555093,
            0.0017064788844436407
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The total number of people in all countries which don't use English for their language is what?",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select sum(country.Population)",
            "select sum(country.Population), countrylanguage.Language",
            "select sum(country.Population), countrylanguage.CountryCode",
            "select sum(country.Population), countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "country",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9925388693809509,
            0.0002721146447584033,
            0.00018376074149273336,
            0.001191785093396902,
            0.00017891585594043136,
            0.0012654169695451856,
            0.00018376074149273336,
            0.001191785093396902
        ],
        "align_select": "select sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of people living in the countries that don't speak English?",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select sum(country.Population)",
            "select sum(country.Population), countrylanguage.Language",
            "select sum(country.Population), countrylanguage.CountryCode",
            "select sum(country.Population*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.990492045879364,
            0.0006135362200438976,
            0.0001600991381565109,
            0.0003744931018445641,
            0.0001407670642947778,
            0.0007369161467067897,
            0.0024613698478788137,
            0.00023463416437152773
        ],
        "align_select": "select sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in the nations that do not use English?",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select sum(country.Population)",
            "select country.Population",
            "select count(*)",
            "select country.Code, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.5934204459190369,
            0.0007121795788407326,
            0.9877523183822632,
            0.6027357578277588,
            0.988684356212616,
            0.0016525891842320561,
            0.00025494006695225835,
            0.00030233024153858423
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in countries where English is not spoken? List them.",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select count(*)",
            "select country.Population",
            "select country.Code, count(*)",
            "select country.Name, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9814054369926453,
            0.00013240888074506074,
            0.9833910465240479,
            0.00020194433454889804,
            0.011636678129434586,
            0.0002123898157151416,
            0.013053388334810734,
            0.0001503782841609791
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total sum of the populations of countries that don't speak English?",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select sum(country.Population)",
            "select sum(country.Population), countrylanguage.Language",
            "select sum(country.Population), countrylanguage.CountryCode",
            "select sum(country.Population), countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9930844306945801,
            0.000120395197882317,
            0.00013122284144628793,
            0.0005948582547716796,
            0.0001321266172453761,
            0.0006733175832778215,
            0.00013122284144628793,
            0.0005948582547716796
        ],
        "align_select": "select sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in countries where English is not spoken?",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select count(*)",
            "select sum(country.Population)",
            "select country.Population",
            "select count(country.Population)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9909971952438354,
            0.0001252608053619042,
            0.8229730725288391,
            7.395075226668268e-05,
            0.9919499158859253,
            0.00015090317174326628,
            0.979720950126648,
            8.19272972876206e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In nations where people do not speak English as their first language, how many people do they contain?",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select count(*)",
            "select country.Population",
            "select country.Code, count(*)",
            "select count(*), country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9700695872306824,
            0.002411865396425128,
            0.9467865228652954,
            0.5165610909461975,
            0.001336403307504952,
            0.08321455121040344,
            0.0005085114389657974,
            0.0043887365609407425
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of people living in countries that do not speak English.",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select count(*)",
            "select sum(country.Population)",
            "select country.Population",
            "select count(*), country.Code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.988581120967865,
            0.00028450574609450996,
            0.1187848150730133,
            0.00021298967476468533,
            0.9918975830078125,
            0.0021802233532071114,
            0.00032498626387678087,
            0.05376146361231804
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Describe the country whose head of state would be Beatrix and the official language.",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Name",
            "select country.Name, countrylanguage.Language, countrylanguage.IsOfficial",
            "select country.Code, country.Name, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.1644275188446045,
            0.00011267601075815037,
            0.0006001084111630917,
            8.02317081252113e-05,
            0.00033077210537157953,
            6.04363413003739e-05,
            0.0003967377997469157,
            6.680125807179138e-05
        ],
        "align_select": "select country.Name, countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "which is the official language of the country whose head of state is named Beatrix?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.992728590965271,
            0.00018574995920062065,
            0.0003370387712493539,
            8.433313632849604e-05,
            0.0003370387712493539,
            8.433313632849604e-05,
            0.00021056499099358916,
            7.891076529631391e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which country does the head of state use the official language called Beatrix?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.5155965685844421,
            0.00013962543744128197,
            0.0005220190505497158,
            9.747203876031563e-05,
            0.00024584814673289657,
            7.709654164500535e-05,
            0.0002635165583342314,
            7.453853322658688e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the official language of the country where the name of the head of state is Beatrix?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language (countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9934542179107666,
            0.0002127891348209232,
            0.0003390544152352959,
            8.808350685285404e-05,
            0.0003390544152352959,
            8.808350685285404e-05,
            0.006986489053815603,
            0.00011703568452503532
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the official language of the country whose head of state is Beatrix?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage",
            "select countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9944968819618225,
            0.00017866013513412327,
            0.0003421172732487321,
            8.207797509385273e-05,
            0.0002190835220972076,
            7.818906306056306e-05,
            0.0003421172732487321,
            8.207797509385273e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries are founded before 1930? Show me the number of unique official languages spoken in each country.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language), country.Name",
            "select count(distinct countrylanguage.IsOfficial)",
            "select country.Name, count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.IsOfficial), country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.986289918422699,
            0.00021190958796069026,
            0.005758392158895731,
            0.00012493478425312787,
            0.04683781787753105,
            0.0001594180503161624,
            0.03287509083747864,
            0.0001996739156311378
        ],
        "align_select": "select count(distinct countrylanguage.Language), country.Name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Which countries were founded before 1930? List their number of official languages.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select country.Name, count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select country.Name, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.00024181055778171867,
            8.104473090497777e-05,
            0.003131760051473975,
            9.368771861772984e-05,
            0.0005571621586568654,
            0.00010404015483800322,
            0.9369685053825378,
            0.00033134149271063507
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "For each country founded before 1930, list the number of distinct official languages they have.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language), country.Name",
            "select country.Name, count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.IsOfficial), country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.0023672047536820173,
            0.00010048952390206978,
            0.9893919229507446,
            0.00015834273654036224,
            0.04977509751915932,
            9.434271487407386e-05,
            0.04897964000701904,
            0.00014980268315412104
        ],
        "align_select": "select count(distinct countrylanguage.Language), country.Name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "What is the total number of distinct official languages for countries established before 1930?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(distinct t3.c6)",
            "select count(distinct countrylanguage.IsOfficial)."
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.010305823758244514,
            0.0001719369029160589,
            0.9961863160133362,
            0.0002171341038774699,
            0.000548501149751246,
            0.0001648397301323712,
            0.0004512790183071047,
            0.00010912934521911666
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the total number of official languages in countries founded before 1930?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select sum(countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.00488217081874609,
            0.0005280408076941967,
            0.03479072079062462,
            0.00013905078230891377,
            0.9862037897109985,
            0.0001954505714820698,
            0.9929834604263306,
            0.00813960935920477
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count up the number of official languages found in countries founded before 1930.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(count(distinct countrylanguage.IsOfficial)",
            "select count(*)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.05221162363886833,
            0.0001262320438399911,
            0.986840009689331,
            0.00017670367378741503,
            0.0005610574735328555,
            0.00012696189514826983,
            0.9920251369476318,
            0.012966920621693134
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the total number of distinct official languages in countries founded before 1930.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(distinct t3.c6)",
            "select count(distinct countrylanguage.IsOfficial)."
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.011149868369102478,
            0.0001495061587775126,
            0.9965225458145142,
            0.00014708480739500374,
            0.00047766781062819064,
            0.00014107451715972275,
            0.0003696884959936142,
            9.981717448681593e-05
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where are the countries having greater surface area than any country in Europe? List them.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Region",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8184638023376465,
            0.0002793291350826621,
            0.000248454773100093,
            9.895720722852275e-05,
            0.00040070005343295634,
            9.237108315574005e-05,
            0.00030889359186403453,
            0.00011783658555941656
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have a bigger surface than that of any country in Europe? List them by area.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name, country.SurfaceArea",
            "select country.Name",
            "select country.Code, country.Name, country.SurfaceArea",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0008975128876045346,
            0.0006098967278376222,
            0.9429777264595032,
            0.608649492263794,
            0.0005087259341962636,
            0.00037147890543565154,
            0.0002864572452381253,
            0.00032334894058294594
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "There are African countries with less than populations in Asia; name them.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Continent, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.5637145638465881,
            0.0002732624707277864,
            0.0002581375592853874,
            9.00740924407728e-05,
            0.00014340324560180306,
            6.392648356268182e-05,
            0.0004512605373747647,
            9.246925765182823e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me which African countries have a population less than any country in Asia.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.8025898337364197,
            0.0007049323758110404,
            0.0003223323146812618,
            0.00010471419955138117,
            0.0005030741449445486,
            8.504785364493728e-05,
            0.0034205997362732887,
            0.00015657543553970754
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the African countries whose population is less than any country in Asia.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8291932940483093,
            0.0003810266498476267,
            0.00027553722611628473,
            9.025078907143325e-05,
            0.00047457803157158196,
            7.431991980411112e-05,
            0.002150131855159998,
            0.00012454809620976448
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which African countries have a lower population than the smallest country in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.5252235531806946,
            0.0008355279569514096,
            0.00028014794224873185,
            0.00011724758223863319,
            0.0004219970724079758,
            7.95562518760562e-05,
            0.00356466555967927,
            0.00016584779950790107
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries don't speak English? Provide the countrycodes for them.",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Code",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.8442103862762451,
            0.23280338943004608,
            0.0002988668857142329,
            0.0002862675173673779,
            0.7410745620727539,
            0.005885715130716562,
            0.00037332746433094144,
            0.00024393956118728966
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all of the country codes which describe countries that do not speak English.",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.8751146197319031,
            0.0005074164364486933,
            0.1087830662727356,
            0.00019535535830073059,
            0.00028106209356337786,
            6.909216608619317e-05,
            0.000173460430232808,
            7.642807759111747e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the country codes for countries that do not speak English?",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.CountryCode (http://countrylanguage.CountryCode.c1)",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9859350919723511,
            0.0003905232879333198,
            0.0003795415977947414,
            7.576800271635875e-05,
            0.00037164962850511074,
            8.705440995981917e-05,
            0.00018550535605754703,
            8.507639722665772e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries don't speak English? List their country code.",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Code",
            "select distinct countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.8964954018592834,
            0.2730380892753601,
            0.0002523685689084232,
            0.0003622732183430344,
            0.9477388262748718,
            0.001953675178810954,
            0.05856681615114212,
            0.1183144599199295
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the countrycodes that do not speak English.",
        "gold_select": "select countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select distinct countrylanguage.CountryCode, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9182746410369873,
            0.6302703022956848,
            0.04212034493684769,
            0.04090385511517525,
            0.000280344596831128,
            0.00017805368406698108,
            0.0003257773059885949,
            0.0001719444408081472
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries use languages other than English? List their country code.",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select distinct countrylanguage.CountryCode, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9674995541572571,
            0.00022147022536955774,
            0.0748906061053276,
            0.00013268593465909362,
            0.00041891125147230923,
            7.328565698117018e-05,
            0.0004566997231449932,
            6.93915571901016e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the country codes of countries where people speak languages other than English?",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9392560124397278,
            0.022715162485837936,
            0.08293300122022629,
            0.0003433333768043667,
            0.0003777072124648839,
            0.00011802247172454372,
            0.00016717113612685353,
            8.094571967376396e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries are those which do not use English as a main language? List their country code.",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select country.Code",
            "select country.Name, countrylanguage.CountryCode",
            "select distinct country.Code",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "countrylanguage"
        ],
        "align_scores": [
            0.7415574193000793,
            0.0006954146665520966,
            0.00041033184970729053,
            0.00018529551743995398,
            0.038100168108940125,
            0.053152620792388916,
            0.0006051738164387643,
            0.00017258801381103694
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For which countries where people use a language other than English do we have country codes?",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode",
            "select distinct country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.16688868403434753,
            0.0007876483723521233,
            0.7552337050437927,
            0.40074408054351807,
            0.006329731550067663,
            0.0001951717713382095,
            0.000669095607008785,
            0.0002497087116353214
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries do not use English as their first language? List their countrycodes.",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select country.Code",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.7676443457603455,
            0.0004172241024207324,
            0.6104059219360352,
            0.00028707183082588017,
            0.00036869803443551064,
            0.00010135952470591292,
            0.0005444394191727042,
            0.0001095509942388162
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the country code for each country where people speak languages that are not English.",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select country.Name, countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.8597960472106934,
            0.3672894835472107,
            0.19490672647953033,
            0.0005326406680978835,
            0.0003431563382036984,
            0.0001518627832410857,
            0.00048463078564964235,
            0.00012884607713203877
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries do not speak English and whose government forms are not Republic? Give their code.",
        "gold_select": "select country.Code",
        "select_candidates": [
            "select country.Code",
            "select country.Name",
            "select country.Name, country.GovernmentForm",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.7953714728355408,
            0.028791865333914757,
            0.299578458070755,
            0.5967102646827698,
            0.0005579236894845963,
            0.00016215122013818473,
            0.00041961148963309824,
            0.00040914598503150046
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please return all the countries that do not speak English, do not have Republics for governments, and use code in country code.",
        "gold_select": "select country.Code",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.GovernmentForm, country.Code2",
            "select country.Name, country.Capital, country.Code2",
            "select countrylanguage.Language, country.GovernmentForm, country.Code2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.11264888197183609,
            0.09282145649194717,
            0.0002247639058623463,
            0.00012825473095290363,
            0.00021933014795649797,
            0.000145337384310551,
            0.0005068110185675323,
            0.0001706300099613145
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name the cities in European countries where English is not an official language.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select distinct city.Name",
            "select city.ID, city.Name",
            "select city.Name, country.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9335988759994507,
            0.0008935171645134687,
            0.053820982575416565,
            0.01990944892168045,
            0.00027371017495170236,
            0.0001477717887610197,
            0.00021092146926093847,
            0.0001230852649314329
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which cities in which European countries are in which languages other than English?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, country.Name",
            "select city.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9154836535453796,
            0.0008356916368938982,
            0.0002905811124946922,
            8.809021528577432e-05,
            0.0004529943980742246,
            0.00011240471940254793,
            0.0003530171525198966,
            0.0001021268471959047
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give all the European cities (names) that don't have English as an official language.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select distinct city.Name",
            "select city.ID, city.Name",
            "select city.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage",
            "city country"
        ],
        "align_scores": [
            0.9381220936775208,
            0.0069496044889092445,
            0.03201001510024071,
            0.020748009905219078,
            0.0003290215681772679,
            0.00021356598881538957,
            0.00032549447496421635,
            0.0001561308599775657
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the unique cities in Asia where Chinese is the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select unique city.Name",
            "select distinct city.Name, city.CountryCode",
            "select distinct city.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9916936755180359,
            0.0005221090978011489,
            0.009042462334036827,
            0.00020746626250911504,
            0.00018469206406734884,
            9.142169437836856e-05,
            0.0003214586467947811,
            8.89028815436177e-05
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the unique cities in Asian countries where Chinese is the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select count(distinct city.Name)",
            "select distinct city.Name, city.CountryCode",
            "select unique city.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9926482439041138,
            0.00027748968568630517,
            0.014960600063204765,
            7.544054824393243e-05,
            0.0001862996577983722,
            8.058811363298446e-05,
            0.009527469985187054,
            0.00019975750183220953
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me which of the unique cities of Asia are those in which Chinese is the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select distinct city.ID, city.Name",
            "select distinct city.Name, city.CountryCode",
            "select distinct city.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.7065790295600891,
            0.0013999870279803872,
            0.00083161611109972,
            0.0001296503614867106,
            0.00029077674844302237,
            0.00011910124885616824,
            0.00038128605228848755,
            0.00010342035966459662
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "If you can find any city names in any part of Asia whose official language is Chinese, kindly show it to me please?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, country.Name",
            "select city.Name, country.Continent",
            "select city.Name, country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9533221125602722,
            0.00021225820819381624,
            0.0003078781010117382,
            9.433245577383786e-05,
            0.00038369043613784015,
            0.00011281062324997038,
            0.0003825961612164974,
            9.995957225328311e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the different names of cities in Asia that are Chinese-speaking and for which the Chinese language is the official one.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select distinct city.Name, country.Name",
            "select distinct city.Name, country.Continent",
            "select distinct city.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9696243405342102,
            0.00021963860490359366,
            0.0002935471711680293,
            7.304103928618133e-05,
            0.0002624929475132376,
            7.369239756371826e-05,
            0.0002721675846260041,
            7.43314012652263e-05
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which city has China in its name? Show me cities that are in Asia whose language is Chinese.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, country.Continent",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage",
            "city country"
        ],
        "align_scores": [
            0.3512030243873596,
            0.0022026970982551575,
            0.0003877209092024714,
            0.00015969677770044655,
            0.000330721668433398,
            0.00016562007658649236,
            0.0003646086261142045,
            0.00013090642460156232
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me different names of cities that are in Asia in which Chinese is the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select distinct city.Name, country.Name",
            "select different city.Name",
            "select distinct city.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9945206642150879,
            0.000435826979810372,
            0.0002191591338487342,
            7.919730705907568e-05,
            0.6069397926330566,
            0.00031670459429733455,
            0.00023714592680335045,
            8.967634494183585e-05
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the city names that are in Asia and whose Chinese is the official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, country.Name",
            "select city.ID, city.Name",
            "select city.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.975158154964447,
            0.002578536281362176,
            0.00016994384350255132,
            0.00012456449621822685,
            0.00022428501688409597,
            0.00012163708015577868,
            0.00023591281205881387,
            0.0001606861042091623
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the name, year of independence, and surface area of the country with the lowest population.",
        "gold_select": "select country.Name, country.SurfaceArea, country.IndepYear",
        "select_candidates": [
            "select country.Name, country.IndepYear, country.SurfaceArea",
            "select country.Name, country.IndepYear.c5, country.SurfaceArea",
            "select country.Name, country.IndepYear, country.SurfaceArea",
            "select country.Name, country.IndepYear.c4, country.IndepYear"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9911173582077026,
            8.41575165395625e-05,
            0.0010323603637516499,
            8.378244820050895e-05,
            0.9911173582077026,
            8.41575165395625e-05,
            0.00034399222931824625,
            8.91102317837067e-05
        ],
        "align_select": "select country.Name, country.IndepYear, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name, year of independence, and surface area of the country which has the lowest population?",
        "gold_select": "select country.Name, country.SurfaceArea, country.IndepYear",
        "select_candidates": [
            "select country.Name, country.IndepYear, country.SurfaceArea",
            "select country.Name, country.IndepYear.c4, country.IndepYear",
            "select country.Name, country.IndepYear.c5, country.SurfaceArea",
            "select country.Name, country.IndepYear, country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9887940287590027,
            8.165672625182196e-05,
            0.00044473912566900253,
            8.905748109100387e-05,
            0.0013269324554130435,
            8.257633453467861e-05,
            0.9887940287590027,
            8.165672625182196e-05
        ],
        "align_select": "select country.Name, country.IndepYear, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which country has the largest area (population, name, leader)? Describe them.",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Population, country.Name, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Code, country.Name, country.HeadOfState",
            "select country.Name, country.HeadOfState, country.Capital"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9542585015296936,
            6.801861309213564e-05,
            0.984955370426178,
            6.919450970599428e-05,
            0.0012535552959889174,
            7.403358904412016e-05,
            0.00044999393867328763,
            7.254569209180772e-05
        ],
        "align_select": "select country.Population, country.Name, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the population, name, and head of state of the country with the largest surface area?",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Population, country.Name, country.HeadOfState",
            "select country.Code, country.Name, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Population), country.Name, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9922401905059814,
            8.555453678127378e-05,
            0.001009719562716782,
            0.00010617210500640795,
            0.992222011089325,
            8.424157567787915e-05,
            0.0032000199425965548,
            8.04402370704338e-05
        ],
        "align_select": "select country.Population, country.Name, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name, population, and head of state for the country that has the largest surface area?",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.IndepYear, country.Population, country.HeadOfState",
            "select country.Name, country.Code6, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.988795280456543,
            9.271400631405413e-05,
            0.0009554305579513311,
            8.491543849231675e-05,
            0.000832808786071837,
            0.0001474479358876124,
            0.988795280456543,
            9.271400631405413e-05
        ],
        "align_select": "select country.Name, country.Population, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name, population, and head of state for the country with the largest area?",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.IndepYear, country.Population, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.Code6, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9922519326210022,
            9.092534310184419e-05,
            0.0005669559468515217,
            8.02699796622619e-05,
            0.9922519326210022,
            9.092534310184419e-05,
            0.0007001727353781462,
            0.00010994658077834174
        ],
        "align_select": "select country.Name, country.Population, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name, population, and head of state of the country with the largest area?",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.IndepYear, country.Population, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.Code6, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9922261238098145,
            8.964753214968368e-05,
            0.000479412788990885,
            8.01932328613475e-05,
            0.9922261238098145,
            8.964753214968368e-05,
            0.0007089235004968941,
            0.00011010206071659923
        ],
        "align_select": "select country.Name, country.Population, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give the name, population, and head of state for the country that has the largest surface area?",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.IndepYear, country.Population, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.Code6, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9888660311698914,
            0.00010802215547300875,
            0.0011818446218967438,
            9.690006118034944e-05,
            0.9888660311698914,
            0.00010802215547300875,
            0.0007761705783195794,
            0.00013170999591238797
        ],
        "align_select": "select country.Name, country.Population, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the names, population and head of state for the countries that have the largest area respectively.",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name), country.Population, country.HeadOfState",
            "select country.Name, country.Code6, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9922688603401184,
            7.596957584610209e-05,
            0.9922688603401184,
            7.596957584610209e-05,
            0.005070863291621208,
            7.457521132891998e-05,
            0.0006614027079194784,
            9.245586261386052e-05
        ],
        "align_select": "select country.Name, country.Population, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you find the government form name and total population for each government form whose average life expectancy is greater than 72?",
        "gold_select": "select sum(country.Population), country.GovernmentForm",
        "select_candidates": [
            "select country.GovernmentForm, sum(country.Population)",
            "select country.Name, sum(country.Population)",
            "select country.Capital, sum(country.Population)",
            "select country.IndepYear, sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.08847101032733917,
            0.0002495756489224732,
            0.01111882645636797,
            0.00031770076020620763,
            0.00031697284430265427,
            9.591528214514256e-05,
            0.0002024038985837251,
            7.381800969596952e-05
        ],
        "align_select": "select country.GovernmentForm, sum(country.Population)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you tell me the government forms whose average life expectancy is more than 72? Give their names and total population.",
        "gold_select": "select sum(country.Population), country.GovernmentForm",
        "select_candidates": [
            "select country.Name, sum(country.Population)",
            "select country.GovernmentForm, sum(country.Population)",
            "select country.Capital, sum(country.Population)",
            "select country.IndepYear, sum(country.Population)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.24973729252815247,
            7.537008787039667e-05,
            0.6394086480140686,
            5.9568792494246736e-05,
            0.009874417446553707,
            6.639563071075827e-05,
            0.0002790560247376561,
            6.953968113521114e-05
        ],
        "align_select": "select country.GovernmentForm, sum(country.Population)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Describe the different types of government form and the total population for those having an average life expectancy greater than 72 years.",
        "gold_select": "select sum(country.Population), country.GovernmentForm",
        "select_candidates": [
            "select country.GovernmentForm, sum(country.Population)",
            "select country.Name, sum(country.Population)",
            "select country.Capital, sum(country.Population)",
            "select country.LocalName, sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.975828230381012,
            0.00013229757314547896,
            0.896662175655365,
            0.00010069709969684482,
            0.0009990365942940116,
            7.583552360301837e-05,
            0.0024634688161313534,
            9.06541827134788e-05
        ],
        "align_select": "select country.GovernmentForm, sum(country.Population)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For each continent where the average life expectancy is less than 72, find the average life expectancy and total population.",
        "gold_select": "select sum(country.Population), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select country.Continent, avg(country.LifeExpectancy), sum(country.Population)",
            "select country.Name, avg(country.LifeExpectancy), sum(country.Population)",
            "select avg(country.LifeExpectancy), sum(country.Population)",
            "select avg(country.LifeExpectancy), sum(country.Population), country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0031815532129257917,
            0.0003873214009217918,
            0.0008204119512811303,
            0.0002683858328964561,
            0.0017274792771786451,
            0.0004521876107901335,
            0.0049138315953314304,
            0.0007184788701124489
        ],
        "align_select": "select country.Continent, avg(country.LifeExpectancy), sum(country.Population)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which continents have average life expectancies lower than 72? Show me the average life expectancy and population for each continent.",
        "gold_select": "select sum(country.Population), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select country.Continent, avg(country.LifeExpectancy), country.Population",
            "select country.Continent, avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), avg(country.Population)",
            "select country.LifeExpectancy, country.Population"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.18589067459106445,
            0.00013728391786571592,
            0.0012081435415893793,
            9.84023863566108e-05,
            0.25014281272888184,
            0.00014439983351621777,
            0.569002091884613,
            0.00019244720169808716
        ],
        "align_select": "select country.LifeExpectancy, country.Population",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Calculate average life span and population in each of the continents where the average life expectancy is less than 72?",
        "gold_select": "select sum(country.Population), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select avg(country.LifeExpectancy), avg(country.Population)",
            "select avg(country.LifeExpectancy), avg(country.Population), country.Continent",
            "select country.LifeExpectancy, country.Population",
            "select country.Continent, avg(country.LifeExpectancy), country.Population"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0016229540342465043,
            0.0001320864394074306,
            0.00730342511087656,
            0.00015293085016310215,
            0.00273502548225224,
            0.00014649328659288585,
            0.0037549533881247044,
            0.00013661454431712627
        ],
        "align_select": "select avg(country.LifeExpectancy), avg(country.Population)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you find the average life expectancy and total population for each continent where the average life expectancy is less than 72?",
        "gold_select": "select sum(country.Population), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select country.Name, avg(country.LifeExpectancy), sum(country.Population)",
            "select avg(country.LifeExpectancy), sum(country.Population), country.Continent",
            "select country.Continent, avg(country.LifeExpectancy), sum(country.Population)",
            "select country.LifeExpectancy, sum(country.Population), country.Continent"
        ],
        "select_labels": [
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0011642837198451161,
            0.00010457069583935663,
            0.03285767138004303,
            0.00017830207070801407,
            0.00906659197062254,
            0.00015947931387927383,
            0.014865163713693619,
            0.00014257302973419428
        ],
        "align_select": "select country.Name, avg(country.LifeExpectancy), sum(country.Population)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For each continent where the average life expectancy is below 72 years, find the average life expectancy and total population.",
        "gold_select": "select sum(country.Population), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select country.Continent, avg(country.LifeExpectancy), sum(country.Population)",
            "select country.Name, avg(country.LifeExpectancy), sum(country.Population)",
            "select avg(country.LifeExpectancy), sum(country.Population)",
            "select avg(country.LifeExpectancy), sum(country.Population), country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.00780293857678771,
            0.0006271256133913994,
            0.0015060963341966271,
            0.00032046932028606534,
            0.003472658572718501,
            0.0005044825957156718,
            0.01587599702179432,
            0.0012251093285158277
        ],
        "align_select": "select country.Continent, avg(country.LifeExpectancy), sum(country.Population)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the continents and the total population and average life expectancy corresponding to each, for continents whose average life expectancy is less than 72?",
        "gold_select": "select sum(country.Population), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select country.Continent, sum(country.Population), avg(country.Population)",
            "select country.Continent, sum(country.Population), avg(country.LifeExpectancy)",
            "select country.Continent, count(*), avg(country.Population)",
            "select country.Continent, sum(country.Population), sum(country.LifeExpectancy)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.03255492448806763,
            9.896834671963006e-05,
            0.42903393507003784,
            0.00010754168033599854,
            0.004374358803033829,
            9.41297403187491e-05,
            0.07082758098840714,
            0.00010280642163706943
        ],
        "align_select": "select country.Continent, sum(country.Population), avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For the continents with an average life expectancy of less than 72, what are the different and the total populations and average life expectancies?",
        "gold_select": "select sum(country.Population), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select country.Continent, sum(country.Population), avg(country.Population)",
            "select country.Continent, sum(country.Population), avg(country.LifeExpectancy)",
            "select country.Name, sum(country.Population), avg(country.LifeExpectancy)",
            "select country.Continent, country.Population, avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0006753935012966394,
            0.0004350949893705547,
            0.0014080287655815482,
            0.0006320959073491395,
            0.00037148460978642106,
            0.00029692144016735256,
            0.0011004945263266563,
            0.0004425870720297098
        ],
        "align_select": "select country.Continent, sum(country.Population), avg(country.Population)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you tell me the names of countries with the 3 largest populations?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9889830946922302,
            6.304863200057298e-05,
            0.0006149813998490572,
            5.508312824531458e-05,
            0.002618921222165227,
            6.075641431380063e-05,
            0.0003711698518600315,
            5.6457916798535734e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who are the 3 most populated countries? List them by name.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Name, country.Capital",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9908043146133423,
            6.81772580719553e-05,
            0.002180281560868025,
            7.05350685166195e-05,
            0.000375957228243351,
            6.107865192461759e-05,
            0.00023862655507400632,
            6.112788105383515e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the names of the nations whose populations are the 3 lowest.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.LocalName",
            "select country.Name, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.988768458366394,
            5.2535164286382496e-05,
            0.0002889203024096787,
            4.870148404734209e-05,
            0.00359525578096509,
            5.039842289988883e-05,
            0.00029860029462724924,
            4.8601821617921814e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the names of the countries having the 3 lowest populations.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.987047553062439,
            5.1257407903904095e-05,
            0.0004411690460983664,
            4.9377893446944654e-05,
            0.0016285364981740713,
            5.110132769914344e-05,
            0.004505979362875223,
            5.0959330110345036e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me how many countries in Asia are?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9839569926261902,
            0.0002650735550560057,
            0.0002693620335776359,
            0.0009009204804897308,
            0.0002514858788345009,
            0.0010118159698322415,
            0.00028027454391121864,
            0.0011100375559180975
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me how many countries are in Asia?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.99482262134552,
            0.0003394150407984853,
            0.00040765394805930555,
            0.0008752533467486501,
            0.0003569688997231424,
            0.0011048460146412253,
            0.00033353272010572255,
            0.0019655239302664995
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "There are how many countries in Asia?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Name",
            "select count(*), country.Code",
            "select count(*), country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9951366782188416,
            8.340618660440668e-05,
            0.00035236013354733586,
            5.824236723128706e-05,
            0.0004553894978016615,
            6.130132533144206e-05,
            0.00019994024478364736,
            5.665180287905969e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of countries present within Asia?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*) delimited by country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9939208030700684,
            0.0002690271066967398,
            0.000323893764289096,
            0.0013480739435181022,
            0.00023425169638358057,
            0.0009921113960444927,
            0.00026384711964055896,
            8.729889668757096e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of countries on the continent of Asia.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*) dependant on country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9950472116470337,
            0.00021201952768024057,
            0.0002648790250532329,
            0.0012432786170393229,
            0.00025339180137962103,
            0.0010443320497870445,
            0.0005959239788353443,
            0.00012063077883794904
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of countries in the continent named 'Asia'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Name",
            "select count(*), country.Code",
            "select count(*), country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9948635697364807,
            7.821650069672614e-05,
            0.00023085775319486856,
            6.358637619996443e-05,
            0.0002537781838327646,
            6.402879807865247e-05,
            0.0002382968959864229,
            6.524258787976578e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the names of the countries in the continent of Europe which has a population of 80000 people?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9791146516799927,
            0.0011562475701794028,
            0.00028522193315438926,
            9.194838639814407e-05,
            0.00020248148939572275,
            8.358310878975317e-05,
            0.0002346708788536489,
            8.708312088856474e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Calculate the total populations and average surface areas (in [...]) for countries in North America that have a surface area greater than 3000 (area).",
        "gold_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.Population), avg(country.SurfaceArea)",
            "select country.Population, avg(country.SurfaceArea)",
            "select avg(country.Population), sum(country.Population)",
            "select count(*), avg(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9772591590881348,
            0.0003571350534912199,
            0.7611838579177856,
            0.000269110722001642,
            0.027294207364320755,
            0.00033904341398738325,
            0.0010701719438657165,
            0.0009309562738053501
        ],
        "align_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want to know the total population and average surface area corresponding to the countries in North America that have a surface area greater than 3000.",
        "gold_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.Population), avg(country.SurfaceArea)",
            "select avg(country.Population), sum(country.Population)",
            "select country.Population, avg(country.SurfaceArea)",
            "select sum(country.Population), avg(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9884368777275085,
            0.0029950221069157124,
            0.017385372892022133,
            0.0005420402740128338,
            0.19907420873641968,
            0.0009522443288005888,
            0.0025724973529577255,
            0.0004064837994519621
        ],
        "align_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me all the cities that lie between population 160000 and 900000.",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.ID",
            "select city.Name, city.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9541750550270081,
            0.00026317007723264396,
            0.0003691276360768825,
            0.0001040615898091346,
            0.010559720918536186,
            0.0006335874786600471,
            0.0002485993318259716,
            9.715190390124917e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For which cities' population is between 160000 and 900000 should I use < city>?",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, city.District",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.08836014568805695,
            0.00013816986756864935,
            0.0003178543702233583,
            9.640622738515958e-05,
            0.00018521725723985583,
            7.34556742827408e-05,
            0.00027741401572711766,
            8.088467438938096e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the list of cities whose population is between 160000 to 900000?",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, city.District",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9598719477653503,
            0.00021030093193985522,
            0.0001987460273085162,
            8.790109859546646e-05,
            0.00019279413390904665,
            9.221284562954679e-05,
            0.0002078886318486184,
            8.187520143110305e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which cities are in the range between 160000 and 900000 in terms of population?",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, city.District",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.6524946093559265,
            0.00019564338435884565,
            0.00029511857428587973,
            9.376368689117953e-05,
            0.00023047288414090872,
            8.235929999500513e-05,
            0.00023981487902346998,
            8.088613685686141e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the names of cities that have a population between 160000 and 900000?",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, city.District",
            "select city.ID, city.Name",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9774518609046936,
            0.0006362206186167896,
            0.00022325155441649258,
            8.921610424295068e-05,
            0.00020847578707616776,
            9.483483154326677e-05,
            0.0002188409271184355,
            8.633442485006526e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For which cities does the range have a population between 160000 and 900000? Give them to me by city name.",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, city.CountryCode",
            "select city.Name, city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9481760263442993,
            0.00027249936829321086,
            0.0003235434996895492,
            0.00011271791299805045,
            0.0002541876456234604,
            8.498914394294843e-05,
            0.00025835842825472355,
            8.6230669694487e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the language spoken in the most countries?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9957424998283386,
            7.657179958187044e-05,
            0.001364781754091382,
            6.549443060066551e-05,
            0.0006027544150128961,
            5.96521349507384e-05,
            0.0002781868970487267,
            5.584609243669547e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the most languages spoken by countries.",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select count(distinct countrylanguage.Language)",
            "select countrylanguage.CountryCode, count(distinct countrylanguage.Language)",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.996209979057312,
            0.08873194456100464,
            0.0005346800899133086,
            0.00010231098713120446,
            0.023024432361125946,
            0.00033136861748062074,
            0.0006890203221701086,
            0.0003023948520421982
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the most spoken language in various countries?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9944790601730347,
            6.722410762449726e-05,
            0.0015579928876832128,
            6.0246682551223785e-05,
            0.00030999130103737116,
            5.504080399987288e-05,
            0.002680026926100254,
            7.653368083992973e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the language spoken by the largest percentage of people in each country?",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.Percentage",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9935033917427063,
            7.785588968545198e-05,
            0.004175195936113596,
            6.754263449693099e-05,
            0.8007358312606812,
            7.717892731307074e-05,
            0.001469440758228302,
            6.931655661901459e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which country codes belong to which countries, and what languages does the largest percentage of the population speak for each country?",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select country.Code, countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.Percentage"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9917839765548706,
            9.301350655732676e-05,
            0.9891136884689331,
            9.132759441854432e-05,
            0.9900959730148315,
            0.00010144248517462984,
            0.04508553445339203,
            7.871672278270125e-05
        ],
        "align_select": "select countrylanguage.CountryCode, countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the number of countries where Spanish is spoken by the largest percentage of people.",
        "gold_select": "select count(*), max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), countrylanguage.CountryCode, countrylanguage.Language",
            "select count(*) dependant on countrylanguage.CountryCode, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9469862580299377,
            0.00843588076531887,
            0.001771247829310596,
            0.005629397928714752,
            0.00017587783804628998,
            0.00017316924640908837,
            0.00020230106019880623,
            0.00010659676627255976
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of countries in which Spanish is the primarily language.",
        "gold_select": "select count(*), max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(countrylanguage.CountryCode)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9935125708580017,
            0.001060499926097691,
            0.0005725907976739109,
            0.0017325289081782103,
            0.8590894937515259,
            0.0001743143075145781,
            0.03437862917780876,
            0.000513504259288311
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out the maximum number of countries that use primarily Spanish as a main language.",
        "gold_select": "select count(*), max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select max(countrylanguage.CountryCode)",
            "select max(countrylanguage.CountryCode-count(*)",
            "select max(countrylanguage.CountryCode-countries)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.7379111647605896,
            0.0024345023557543755,
            0.13510967791080475,
            0.0007083032396622002,
            0.0015841693384572864,
            8.796783367870376e-05,
            0.030271107330918312,
            0.0001266809704247862
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the codes of the countries in which Spanish is spoken by the largest percentage of people?",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select country.Code",
            "select country.Name, country.Continent",
            "select country.Name, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city countrylanguage"
        ],
        "align_scores": [
            0.9161502718925476,
            0.9727411866188049,
            0.9373471140861511,
            0.9770860075950623,
            0.0003497517027426511,
            0.00046600200585089624,
            0.001353926258161664,
            0.003129171207547188
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What are the codes of countries whose languages are majority are Spanish? What is the percentage of Spanish as language in those countries.",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode, countrylanguage.Percentage",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.Percentage",
            "select countrylanguage.CountryCode, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.Percentage"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.9388012886047363,
            0.27319252490997314,
            0.00044214996160008013,
            0.0008386804256588221,
            0.0007870998233556747,
            0.00023710523964837193,
            0.0025597100611776114,
            0.0003550427209120244
        ],
        "align_select": "select countrylanguage.CountryCode, countrylanguage.Percentage",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have the highest percentage of people speaking Spanish as their first language? List them by code.",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Code",
            "select country.Name, country.Code2",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.005471427924931049,
            0.002241048263385892,
            0.0022644856944680214,
            0.0013600256061181426,
            0.0012438098201528192,
            0.0006385140586644411,
            0.0006141382036730647,
            0.00033503567101433873
        ],
        "align_select": "select country.Name, countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the codes of countries where Spanish is the predominant spoken language.",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9217046499252319,
            0.00011189907672815025,
            0.00024462153669446707,
            6.444847531383857e-05,
            0.02936905063688755,
            7.469065167242661e-05,
            0.0001682640431681648,
            6.20452847215347e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the maximum number of countries for which Spanish is the predominant language.",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select max(countrylanguage.CountryCode)",
            "select max(countrylanguage.Language)",
            "select max(t3.c4)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.3207075297832489,
            0.0007591061294078827,
            0.07505691051483154,
            0.00045585984480567276,
            0.03012245148420334,
            0.00015287994756363332,
            0.000675852585118264,
            0.00010079469939228147
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of the countries coded, which has the highest percentage speaking Spanish as its first language?",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.Percentage",
            "select countrylanguage.CountryCode, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.7431909441947937,
            0.8565521240234375,
            0.9310667514801025,
            0.39367443323135376,
            0.0003740456886589527,
            0.00031691754702478647,
            0.0008244896307587624,
            0.0007384376949630678
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the names of conductors for the orchestras they had conducted.",
        "gold_select": "select conductor.Name, orchestra.Orchestra",
        "select_candidates": [
            "select conductor.Name, orchestra.Orchestra",
            "select conductor.Name",
            "select orchestra.Conductor_ID, conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.09032931178808212,
            0.15532320737838745,
            0.9214661717414856,
            0.7578018307685852,
            0.0003273267357144505,
            0.0003069218073505908,
            0.00019797985441982746,
            0.00028135618777014315
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list the names of all conductors as well as the orchestras they have conducted.",
        "gold_select": "select conductor.Name, orchestra.Orchestra",
        "select_candidates": [
            "select conductor.Name, orchestra.Orchestra",
            "select orchestra.Orchestra, conductor.Name",
            "select performance.Orchestra_ID, orchestra.Orchestra",
            "select show.Performance_ID, orchestra.Orchestra"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9923645257949829,
            0.8917032480239868,
            0.993669331073761,
            0.9729606509208679,
            0.00047686262405477464,
            0.000324423483107239,
            0.0004689068009611219,
            0.00030983914621174335
        ],
        "align_select": "select conductor.Name, orchestra.Orchestra",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "The list consists of conductor names and the orchestras they have conducted.",
        "gold_select": "select conductor.Name, orchestra.Orchestra",
        "select_candidates": [
            "select conductor.Name, orchestra.Orchestra",
            "select orchestra.Orchestra, conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select performance.Orchestra_ID, orchestra.Orchestra"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9870499968528748,
            0.9324764013290405,
            0.9867990612983704,
            0.9798344969749451,
            0.09737507998943329,
            0.21592390537261963,
            0.00032836603350006044,
            0.00025345146423205733
        ],
        "align_select": "select conductor.Name, orchestra.Orchestra",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the orchestra conductor names as well as the corresponding orchestras.",
        "gold_select": "select conductor.Name, orchestra.Orchestra",
        "select_candidates": [
            "select conductor.Name, orchestra.Orchestra",
            "select orchestra.Orchestra, orchestra.Orchestra",
            "select orchestra.Orchestra, orchestra.Conductor_ID",
            "select performance.Orchestra_ID, orchestra.Orchestra"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9937254786491394,
            0.29731878638267517,
            0.0006212297012098134,
            0.00044130024616606534,
            0.0022983031813055277,
            0.0010283205192536116,
            0.00039673439459875226,
            0.0002683932543732226
        ],
        "align_select": "select conductor.Name, orchestra.Orchestra",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of conductors.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), conductor.Conductor_ID",
            "select count(*), conductor.Name",
            "select count(*), conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor performance"
        ],
        "align_scores": [
            0.995624840259552,
            6.140833284007385e-05,
            0.00014839154027868062,
            6.32279334240593e-05,
            0.00020610525098163635,
            7.52102569094859e-05,
            0.0001977274368982762,
            6.993462739046663e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the conductors with number.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Name, conductor.Conductor_ID",
            "select conductor.Conductor_ID, conductor.Name",
            "select t0.c, conductor.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra"
        ],
        "align_scores": [
            0.007182775996625423,
            0.002410022309049964,
            0.00012870841601397842,
            0.00011988447658950463,
            0.0001395940053043887,
            0.0001248711923835799,
            0.0002005558053497225,
            0.00015074812108650804
        ],
        "align_select": "select conductor.Conductor_ID",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names of conductors in the ascending order of age?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name (ordered conductor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9953592419624329,
            0.9953592419624329,
            0.0001919630158226937,
            0.0001919630158226937,
            0.0001404635258950293,
            0.0001404635258950293,
            0.0014759590849280357,
            0.0014759590849280357
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list the names of conductors in ascending order by age?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name in conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9952142238616943,
            0.9952142238616943,
            0.0002674218558240682,
            0.0002674218558240682,
            0.00012878552661277354,
            0.00012878552661277354,
            0.0007179189706221223,
            0.0007179189706221223
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you find in descending order the names of conductors, ascending by age?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name in conductor.Age",
            "select conductor.Name (ordered by conductor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9847491383552551,
            0.9847491383552551,
            0.0004017289320472628,
            0.0004017289320472628,
            0.0007936205947771668,
            0.0007936205947771668,
            0.011134580709040165,
            0.011134580709040165
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you tell me the names of conductors whose nationalities are not 'USA'?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9939099550247192,
            0.00021239041234366596,
            0.0002264225040562451,
            6.350620242301375e-05,
            0.0001835155999287963,
            7.384532364085317e-05,
            0.00015827450260985643,
            7.294123497558758e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the the names of conductors whose nations are not 'USA'?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor performance"
        ],
        "align_scores": [
            0.9524850249290466,
            0.0002744026423897594,
            0.00021272216690704226,
            6.936787394806743e-05,
            0.00017192955419886857,
            8.12327562016435e-05,
            0.0001323475589742884,
            6.372392090270296e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the conductors' names whose nationalities are not \"USA\".",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9951028823852539,
            0.00015221362991724163,
            0.00022831762908026576,
            5.7471606851322576e-05,
            0.00017830394790507853,
            7.073722372297198e-05,
            0.00014789780834689736,
            6.593572470592335e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which conductors are not from the USA? List their names.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9936394095420837,
            0.0010521283838897943,
            0.00017753458814695477,
            0.0001466503890696913,
            0.00015398145478684455,
            8.656632417114452e-05,
            0.0001963986287591979,
            9.134118590736762e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of conductors from which countries are not \"USA\"?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9934440851211548,
            0.00011360024655004963,
            0.00022330092906486243,
            6.325211143121123e-05,
            0.00019635444914456457,
            6.848461634945124e-05,
            0.00016794793191365898,
            6.159718031994998e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you return the names of conductors whose nationality is not USA?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor performance"
        ],
        "align_scores": [
            0.9953165054321289,
            0.00011950167390750721,
            0.00018663727678358555,
            5.741742643294856e-05,
            0.00014728604583069682,
            6.766795559087768e-05,
            0.0001439528859918937,
            5.784682434750721e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you return the names of conductors who do not hold the nationality 'USA'?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor performance"
        ],
        "align_scores": [
            0.9938322305679321,
            0.0001236913085449487,
            0.0001711570075713098,
            5.87663562328089e-05,
            0.00016673399659339339,
            6.750361353624612e-05,
            0.0001269759377464652,
            5.846055501024239e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me the record companies of orchestras in descending order of years in which they were founded.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company (orchestrated orchestra.Year_of_Founded)",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company (orchestrator_orchestra.Year_of_Founded)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9947522878646851,
            0.9947522878646851,
            0.0007139334338717163,
            0.0007139334338717163,
            0.00029540175455622375,
            0.00029540175455622375,
            0.0013818837469443679,
            0.0013818837469443679
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me the record companies of the orchestras in descending order of year in which orchestras were founded.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company (orchestrated orchestra.Year_of_Founded)",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company (orchestrator_orchestra.Record_Company)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9946264624595642,
            0.00026167984469793737,
            0.0007704701274633408,
            0.00013240888074506074,
            0.00028551003197208047,
            8.367163536604494e-05,
            0.00046225404366850853,
            0.00010600417590467259
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you sort the record companies of orchestras in descending order of the year in which they were founded?",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company (ordered orchestra.Year_of_Founded)",
            "select orchestra.Record_Company de-facto-ORDER BY"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.994594156742096,
            0.0002099155099131167,
            0.0005217668367549777,
            0.00010088770068250597,
            0.006895813625305891,
            0.00021727493731305003,
            0.006605841685086489,
            0.00012996254372410476
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Return to me the record companies (of orchestras) ordered in descending year of founded.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company (ordered orchestra.Year_of_Founded)",
            "select orchestra.Record_Company de-facto-ORDER BY"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9949829578399658,
            0.0003037797869183123,
            0.00041502545354887843,
            0.00011296378215774894,
            0.002572432393208146,
            0.00027537831920199096,
            0.11913370341062546,
            0.00014062566333450377
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the record companies of orchesrtas sorted descending by year of founded?",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company (orchestrtas.c3)",
            "select orchestra.Record_Company (orchestrta.c3)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9945356845855713,
            0.00020104480790905654,
            0.0002975771785713732,
            0.00010187910811509937,
            0.0005410430021584034,
            0.0002637457801029086,
            0.0005859059165231884,
            0.00025710227782838047
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you return the record companies of all orchestras sorted in descending order of date of founding?",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company (orchestrated orchestra.Year_of_Founded)",
            "select orchestra.Record_Company (ordered orchestra.Year_of_Founded)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9958205223083496,
            0.000394919392419979,
            0.0002866479626391083,
            0.00012072685785824433,
            0.0006764428107999265,
            0.00020759348990395665,
            0.003578666364774108,
            0.0002599662693683058
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the average attendance per show.",
        "gold_select": "select avg(show.Attendance)",
        "select_candidates": [
            "select avg(show.Attendance)",
            "select an avg(show.Attendance)",
            "select  avg(show.Attendance)",
            "select avg(show.Attendance)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "show",
        "table_candidates": [
            "show"
        ],
        "align_scores": [
            0.9967564940452576,
            0.0007841233164072037,
            0.0006339233368635178,
            0.0001619867980480194,
            0.9967564940452576,
            0.0007841233164072037,
            0.9967564940452576,
            0.0007841233164072037
        ],
        "align_select": "select avg(show.Attendance)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average attendance for all shows?",
        "gold_select": "select avg(show.Attendance)",
        "select_candidates": [
            "select avg(show.Attendance)",
            "select an avg(show.Attendance)",
            "select avg(show.Attendance)",
            "select  avg(show.Attendance)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "show",
        "table_candidates": [
            "show"
        ],
        "align_scores": [
            0.9962138533592224,
            5.2267372666392475e-05,
            0.0005853697657585144,
            7.924852252472192e-05,
            0.9962138533592224,
            5.2267372666392475e-05,
            0.9962138533592224,
            5.2267372666392475e-05
        ],
        "align_select": "select avg(show.Attendance)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the average attendance across all shows?",
        "gold_select": "select avg(show.Attendance)",
        "select_candidates": [
            "select avg(show.Attendance)",
            "select an avg(show.Attendance)",
            "select the avg(show.Attendance)",
            "select  avg(show.Attendance)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "show",
        "table_candidates": [
            "show"
        ],
        "align_scores": [
            0.9961121678352356,
            5.95559504290577e-05,
            0.0005421849782578647,
            8.594728569732979e-05,
            0.00044637429527938366,
            0.00010601044778013602,
            0.9961121678352356,
            5.95559504290577e-05
        ],
        "align_select": "select avg(show.Attendance)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For which performances whose type is not \"Live Final\" can you give the maximum and minimum share percentages?",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select t2.cmax(performance.Share), min(performance.Share)",
            "select performance.Share, max(performance.Share), min(performance.Share)",
            "select t2.c max(performance.Share), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9957435727119446,
            0.000161219562869519,
            0.0002996257971972227,
            7.421226473525167e-05,
            0.00028569300775416195,
            8.026171417441219e-05,
            0.00036578450817614794,
            8.992931543616578e-05
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Could you give me the maximum and minimum shares for performances that do not have the type \"Live final\"?",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)",
            "select max(performance.Share ), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9958205223083496,
            0.00014259587624110281,
            0.00042204654891975224,
            9.240615327144042e-05,
            0.00044708503992296755,
            9.271816816180944e-05,
            0.00462576886638999,
            0.00012442131992429495
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which performances did not occur the type \"Live final\"? List the maximum and minimum shares.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select performance.Share, max(performance.Share), min(performance.Share)",
            "select t2.cmax(performance.Share), min(performance.Share)",
            "select performance.Share, max(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9876855611801147,
            0.00043401855509728193,
            0.00029441152582876384,
            0.00010347639909014106,
            0.00031947364914231,
            0.00012759931269101799,
            0.0016390676610171795,
            0.00015217879263218492
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which performances do not have the type \"Live final\"? Can you show me the maximum and minimum shares for them?",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select performance.Share, max(performance.Share), min(performance.Share)",
            "select t2.cmax(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9944847226142883,
            0.0001260319259017706,
            0.00024977538851089776,
            7.502717198804021e-05,
            0.0003024124016519636,
            7.679042755626142e-05,
            0.0004540695808827877,
            0.00010006172669818625
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Let us count all the conductor nationalities.",
        "gold_select": "select count(distinct conductor.Nationality)",
        "select_candidates": [
            "select count(distinct conductor.Nationality)",
            "select count(distinct conductor.Age)",
            "select count(distinct conductor.Name)",
            "select counts(distinct conductor.Nationality)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.982506275177002,
            0.0001144973502960056,
            0.0017372650327160954,
            0.00010706047032726929,
            0.0022265794686973095,
            9.193128062179312e-05,
            0.0031833809334784746,
            6.9886700657662e-05
        ],
        "align_select": "select count(distinct conductor.Nationality)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many types of nationalities are conductors from?",
        "gold_select": "select count(distinct conductor.Nationality)",
        "select_candidates": [
            "select count(distinct conductor.Nationality)",
            "select count(distinct conductor.Age)",
            "select count(distinct conductor.Name)",
            "select count(distinct conductor.Year_of_Work)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.992852509021759,
            0.992852509021759,
            0.0011037202784791589,
            0.0011037202784791589,
            0.011008513160049915,
            0.011008513160049915,
            0.0003782093117479235,
            0.0003782093117479235
        ],
        "align_select": "select count(distinct conductor.Nationality)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the total number of nationalities of conductors.",
        "gold_select": "select count(distinct conductor.Nationality)",
        "select_candidates": [
            "select count(distinct conductor.Nationality)",
            "select count(distinct conductor.Age)",
            "select count(distinct conductor.Name)",
            "select sum(conductor.Nationality)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9953891038894653,
            0.9953891038894653,
            0.001081053982488811,
            0.001081053982488811,
            0.00355318421497941,
            0.00355318421497941,
            0.9919318556785583,
            0.9919318556785583
        ],
        "align_select": "select count(distinct conductor.Nationality)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of nationalities of conductors?",
        "gold_select": "select count(distinct conductor.Nationality)",
        "select_candidates": [
            "select count(distinct conductor.Nationality)",
            "select count(distinct conductor.Age)",
            "select count(distinct conductor.Name)",
            "select count(distinct conductor.Year_of_Work)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9963562488555908,
            0.9963562488555908,
            0.0009521020110696554,
            0.0009521020110696554,
            0.0019381607417017221,
            0.0019381607417017221,
            0.00026424918905831873,
            0.00026424918905831873
        ],
        "align_select": "select count(distinct conductor.Nationality)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the names of conductors in descending order of years of experience?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9948833584785461,
            0.9948833584785461,
            0.00022009560780134052,
            0.00022009560780134052,
            0.00020582284196279943,
            0.00020582284196279943,
            0.000169529186678119,
            0.000169529186678119
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of conductors in descending order of years of work?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work",
            "select conductor.Name, conductor.Age, conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9945439100265503,
            0.00017687461513560265,
            0.00019884973880834877,
            9.315925126429647e-05,
            0.00014185554755385965,
            0.00010143378312932327,
            0.0001507587730884552,
            0.00013081231736578047
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you list the conductor's name in descending order of years of work?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9937452077865601,
            0.9937452077865601,
            0.00026532364427112043,
            0.00026532364427112043,
            0.00017630751244723797,
            0.00017630751244723797,
            0.00017701111210044473,
            0.00017701111210044473
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the names of conductors in descending order of length of service.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9960112571716309,
            0.00023947260342538357,
            0.00017405887774657458,
            0.00010500435746507719,
            0.00016341420996468514,
            0.00010546979319769889,
            0.0001436041056877002,
            0.00010904758528340608
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of conductors sorted by descending order of years of work?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9947988986968994,
            0.00017986878810916096,
            0.00016551019507460296,
            9.471282101003453e-05,
            0.0001407987583661452,
            0.00010251352068735287,
            0.0001393346901750192,
            0.00011895527131855488
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you give me the names of conductors, sorted in descending order of number of years they have been working?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9927861094474792,
            0.9927861094474792,
            0.00019103325030300766,
            0.00019103325030300766,
            0.00017177779227495193,
            0.00017177779227495193,
            0.00017069707973860204,
            0.00017069707973860204
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you tell me the names of conductors with descending years of work?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9933938384056091,
            0.9933938384056091,
            0.00037460128078237176,
            0.00037460128078237176,
            0.0001649128389544785,
            0.0001649128389544785,
            0.00020227655477356166,
            0.00020227655477356166
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of conductors, listed in descending order according to the number of years they have worked?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work",
            "select conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9868505001068115,
            0.00019164133118465543,
            0.00019012289703823626,
            9.784137364476919e-05,
            0.0001749690854921937,
            0.0001192057752632536,
            0.00015531419194303453,
            0.00014930014731362462
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Who has the most years of experience as a conductor? List their name.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9434645175933838,
            6.670398579444736e-05,
            0.0003323120472487062,
            6.060336090740748e-05,
            0.00025814323453232646,
            6.35795877315104e-05,
            0.0006363131105899811,
            6.474965630332008e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you list the names of the conductors with the most years of work?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9112629294395447,
            7.55472356104292e-05,
            0.00027081178268417716,
            6.126613880041987e-05,
            0.000451163126854226,
            6.673071766272187e-05,
            0.00031352287624031305,
            6.222352385520935e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which conductor worked the greatest number of years? List his name.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9717217683792114,
            7.14532143319957e-05,
            0.0003663174284156412,
            6.792255589971319e-05,
            0.000314200617140159,
            6.375091470545158e-05,
            0.0006858801352791488,
            6.451218359870836e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "In which orchestras have any conductors ever worked? Provide their orchestra/conducting name.",
        "gold_select": "select conductor.Name, orchestra.Orchestra",
        "select_candidates": [
            "select orchestra.Orchestra, orchestra.Conductor_ID",
            "select orchestra.Orchestra, conductor.Name",
            "select distinct orchestra.Orchestra, orchestra.Conductor_ID",
            "select distinct orchestra.Orchestra, conductor.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "orchestra",
            "conductor orchestra",
            "orchestra performance"
        ],
        "align_scores": [
            0.029182445257902145,
            0.00010255380038870499,
            0.9756528735160828,
            0.0003014009853359312,
            0.006693884264677763,
            0.00011718756286427379,
            0.02832586131989956,
            0.00011977547546848655
        ],
        "align_select": "select orchestra.Orchestra, conductor.Name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Where can I find conductor names and orchestra they have conducted?",
        "gold_select": "select conductor.Name, orchestra.Orchestra",
        "select_candidates": [
            "select conductor.Name, orchestra.Orchestra",
            "select orchestra.Orchestra, conductor.Name",
            "select performance.Orchestra_ID, orchestra.Orchestra",
            "select show.Performance_ID, orchestra.Orchestra"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9913219809532166,
            0.9835825562477112,
            0.9920573830604553,
            0.9892933368682861,
            0.00047228956827893853,
            0.0003678301873151213,
            0.0004307194030843675,
            0.0003694754559546709
        ],
        "align_select": "select conductor.Name, orchestra.Orchestra",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the names of the conductors and orchestras they have conducted.",
        "gold_select": "select conductor.Name, orchestra.Orchestra",
        "select_candidates": [
            "select conductor.Name, orchestra.Orchestra",
            "select orchestra.Conductor_ID, orchestra.Orchestra",
            "select orchestra.Orchestra, conductor.Name",
            "select performance.Type, orchestra.Orchestra"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9717308878898621,
            0.9521309733390808,
            0.0029942106921225786,
            0.003750924253836274,
            0.990581214427948,
            0.9907200336456299,
            0.0007706558681093156,
            0.0007021583733148873
        ],
        "align_select": "select conductor.Name, orchestra.Orchestra",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which conductors have conducted orchestras? List them by orchestra and their name.",
        "gold_select": "select conductor.Name, orchestra.Orchestra",
        "select_candidates": [
            "select conductor.Name, orchestra.Orchestra",
            "select orchestra.Orchestra, conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select performance.Orchestra_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9771192669868469,
            0.9692728519439697,
            0.9820438623428345,
            0.9805459380149841,
            0.0010787576902657747,
            0.0022547889966517687,
            0.3699638545513153,
            0.8055720925331116
        ],
        "align_select": "select conductor.Name, orchestra.Orchestra",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please give me the names of conductors who have conducted more than 2 orchestras.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select orchestra.Conductor_ID, conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9647944569587708,
            0.00010603753617033362,
            0.0005798042402602732,
            7.34974310034886e-05,
            0.0007107872515916824,
            7.850500696804374e-05,
            0.0005798042402602732,
            7.34974310034886e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you show me the names of conductors who have conducted more than one orchestra?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select orchestra.Conductor_ID, conductor.Name",
            "select conductor.Name (select conductor.Conductor_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9766581654548645,
            0.00010821370960911736,
            0.0013437215238809586,
            9.900269651552662e-05,
            0.0011791115393862128,
            8.985987369669601e-05,
            0.0056403279304504395,
            8.38763007777743e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me the names of conductors who have conducted more than one orchestra.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select orchestra.Conductor_ID, conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9883198738098145,
            9.683502867119387e-05,
            0.0016224989667534828,
            8.309340773848817e-05,
            0.0015835812082514167,
            8.135058305924758e-05,
            0.0016224989667534828,
            8.309340773848817e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "How many conductors have conducted more than one orchestra? List their names.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select count(*)",
            "select count(*), conductor.Name",
            "select conductor.Name, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9672360420227051,
            0.5590578317642212,
            0.010949626564979553,
            0.7542862296104431,
            0.6516497135162354,
            0.022863373160362244,
            0.7940647006034851,
            0.005503205582499504
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which conductors have conducted more than one orchestra? Give their names.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select orchestra.Conductor_ID, conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9838593602180481,
            9.577106538927183e-05,
            0.0029617135878652334,
            9.112959378398955e-05,
            0.0016027161618694663,
            8.727682870812714e-05,
            0.0029617135878652334,
            9.112959378398955e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which conductors have been at more than one orchestra? List their names.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, orchestra.Orchestra",
            "select conductor.Name (c0, orchestra.Orchestra)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9902383089065552,
            0.00021319488587323576,
            0.0013030227273702621,
            0.00012162710481788963,
            0.047998569905757904,
            0.00013778384891338646,
            0.00134769338183105,
            0.00012537218572106212
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For each conductor who has conducted at more than one orchestra, list their name.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, orchestra.Orchestra",
            "select conductor.Name (c0, orchestra.Orchestra)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9841892123222351,
            0.00013101230433676392,
            0.006540860515087843,
            9.850605420069769e-05,
            0.5055334568023682,
            0.00010366265632910654,
            0.001006190199404955,
            8.581543079344556e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me the name of the conductor who has conducted the most number of orchestras?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9886215329170227,
            6.152797141112387e-05,
            0.000715930771548301,
            5.808540299767628e-05,
            0.0002439344534650445,
            5.683654308086261e-05,
            0.00045818931539542973,
            7.11811808287166e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Could you please give the name of the conductor that has conducted the most number of orchestra?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, conductor.Age",
            "select conductor.Name (ORDER BY-LIMIT)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9528641104698181,
            6.767989543732256e-05,
            0.0005819216603413224,
            6.083879998186603e-05,
            0.00023450130538549274,
            5.732359932153486e-05,
            0.0003789712500292808,
            5.960362614132464e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me which conductor has conducted most orchestras. List his/her name.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (c0, orchestra.Conductor_ID)",
            "select conductor.Name (c0 - orchestra.Conductor_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9930329322814941,
            5.926938683842309e-05,
            0.0006202588556334376,
            5.63250359846279e-05,
            0.0002949903137050569,
            5.635630805045366e-05,
            0.0008814142784103751,
            5.808495552628301e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the name of the conductor who has conducted the most orchestras?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9920682907104492,
            6.768041203031316e-05,
            0.0005823724204674363,
            6.155321170808747e-05,
            0.00030714162858203053,
            5.687471275450662e-05,
            0.0007398940506391227,
            7.34313071006909e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Describe the names of the conductors who have conducted the most orchestras.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9762818217277527,
            5.382977906265296e-05,
            0.00022124586394056678,
            5.13002960360609e-05,
            0.0003921471943613142,
            5.2301624236861244e-05,
            0.00048690615221858025,
            5.8338093367638066e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who was the conductor to whom most orchestras had been performed?, what is his name?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, performance.Type",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra performance",
            "conductor orchestra"
        ],
        "align_scores": [
            0.7556821703910828,
            7.627546438015997e-05,
            0.0006015205290168524,
            6.219877832336351e-05,
            0.0003836381947621703,
            5.554335075430572e-05,
            0.0002012239274336025,
            5.511507697519846e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which conductors have founded orchestras after 2008? List their names.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (conductor_id orchestra.Conductor_ID)",
            "select conductor.Name, orchestra.Conductor_ID, orchestra.Record_Company"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9763227701187134,
            0.01839691400527954,
            0.00021988207299727947,
            0.00015445289318449795,
            0.0005829972797073424,
            0.00018381331756245345,
            0.0001319922594120726,
            9.002059960039333e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who has been conducting orchestras founded after 2008? Give his/her name.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (or conductor.Age)",
            "select conductor.Name, orchestra.Conductor_ID, orchestra.Record_Company"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9741835594177246,
            0.0001712115335976705,
            0.000337224337272346,
            9.112482075579464e-05,
            0.0011186135234311223,
            9.83511854428798e-05,
            0.000163831704412587,
            7.673354411963373e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the names of conductors who have been in charge of orchestras founded after 2008?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (select conductor.Conductor_ID)",
            "select conductor.Name (or conductor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9654872417449951,
            0.00014023840776644647,
            0.0002841311215888709,
            8.122492727125064e-05,
            0.0023752159904688597,
            9.73895366769284e-05,
            0.0011350514832884073,
            8.640722808195278e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the name of the conductor that has been conducting orchestras founded after 2008?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (or conductor.Age)",
            "select conductor.Name, orchestra.Year_of_Founded"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9722982048988342,
            0.00011436281783971936,
            0.0002317394537385553,
            7.871528941905126e-05,
            0.0006454286631196737,
            7.774875120958313e-05,
            0.0010107235284522176,
            9.036135452333838e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the name of the conductor that has founded orchestras after 2008.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (or conductor.Age)",
            "select conductor.Name (ORDER BY-LIMIT)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.5711579918861389,
            7.754615944577381e-05,
            0.00012842155410908163,
            6.211840809555724e-05,
            0.000426879822043702,
            7.348699000431225e-05,
            0.0076880985870957375,
            6.817394023528323e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me the names of all the conductors who have conducted orchestras founded after 2008.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select distinct conductor.Name",
            "select conductor.Name (or conductor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9745107293128967,
            0.0001565996208228171,
            0.00028685134020633996,
            8.011665340745822e-05,
            0.16666212677955627,
            0.0001819915632950142,
            0.0009852475486695766,
            8.701306796865538e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the names of conductors who conducted orchestras founded after year 2008.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (or conductor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9897549748420715,
            9.152444545179605e-05,
            0.00019688575412146747,
            6.605277303606272e-05,
            0.00019688575412146747,
            6.605277303606272e-05,
            0.0008458348456770182,
            8.224117482313886e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the conductor's names associated with those orchestras that were established after 2008?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (select conductor.Conductor_ID)",
            "select conductor.Name (select conductor.Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9857156872749329,
            9.588410466676578e-05,
            0.0002036105579463765,
            6.952575495233759e-05,
            0.0007442974019795656,
            8.046656148508191e-05,
            0.002545864088460803,
            7.139408990042284e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the names of conductors who have conducted orchestras founded after the year 2008?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select distinct conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9823740720748901,
            0.00013722700532525778,
            0.0002726711973082274,
            7.471343997167423e-05,
            0.08252150565385818,
            0.00013466799282468855,
            0.0002726711973082274,
            7.471343997167423e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the conductors who have been conducting orchestras founded after 2008? List them by name.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (replace conductor.Conductor_ID)",
            "select distinct conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.964839518070221,
            0.9822185635566711,
            0.00036132161039859056,
            0.0005847507854923606,
            0.3889031410217285,
            0.5130687355995178,
            0.12840814888477325,
            0.030795689672231674
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the list of record companies and the corresponding number of orchestras.",
        "gold_select": "select orchestra.Record_Company, count(*)",
        "select_candidates": [
            "select orchestra.Record_Company, count(*)",
            "select orchestra.Record_Company, count(distinct orchestra.Orchestra)",
            "select orchestra.Conductor_ID, count(*)",
            "select orchestra.Record_Company, count(orchestrations)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9964920878410339,
            0.00017311543342657387,
            0.005293196067214012,
            0.00016552282613702118,
            0.00027877630782313645,
            0.0002676052681636065,
            0.005580451805144548,
            0.0002202255418524146
        ],
        "align_select": "select orchestra.Record_Company, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show the number of orchestras for each record company.",
        "gold_select": "select orchestra.Record_Company, count(*)",
        "select_candidates": [
            "select orchestra.Record_Company, count(*)",
            "select count(*), orchestra.Record_Company",
            "select orchestra.Record_Company, count(*), orchestra.Year_of_Founded",
            "select orchestra.Record_Company.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9968432188034058,
            0.0001757087156875059,
            0.9967453479766846,
            0.00014107963943388313,
            0.00037596578476950526,
            7.500727951992303e-05,
            0.00035959758679382503,
            0.00013608511653728783
        ],
        "align_select": "select orchestra.Record_Company, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the list of record companies and the corresponding number of orchestras they have.",
        "gold_select": "select orchestra.Record_Company, count(*)",
        "select_candidates": [
            "select orchestra.Record_Company, count(*)",
            "select orchestra.Record_Company.c3, count(*)",
            "select orchestra.Record_Company, count(**)",
            "select orchestra.Conductor_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9961143732070923,
            0.00020068971207365394,
            0.00041267613414675,
            0.00018222650396637619,
            0.9926996827125549,
            0.00017851845768745989,
            0.00028557429322972894,
            0.00021500106959138066
        ],
        "align_select": "select orchestra.Record_Company, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me all record companies, and the numbers of their orchestras.",
        "gold_select": "select orchestra.Record_Company, count(*)",
        "select_candidates": [
            "select orchestra.Record_Company, count(*)",
            "select orchestra.Record_Company.c3, count(*)",
            "select orchestra.Orchestra, orchestra.Record_Company",
            "select orchestra.Conductor_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9964442849159241,
            0.00020845352264586836,
            0.00045299268094822764,
            0.00018651879508979619,
            0.002099421340972185,
            0.00022504504886455834,
            0.0004425703955348581,
            0.0003768988244701177
        ],
        "align_select": "select orchestra.Record_Company, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each record company, how many orchestras does it manage?",
        "gold_select": "select orchestra.Record_Company, count(*)",
        "select_candidates": [
            "select orchestra.Record_Company, count(*)",
            "select orchestra.Record_Company.c3, count(*)",
            "select count(*), orchestra.Record_Company",
            "select orchestra.Record_Company, count(*), orchestra.Year_of_Founded"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9948354959487915,
            0.0002558690612204373,
            0.0008559296256862581,
            0.0002009263844229281,
            0.9950716495513916,
            0.00020449579460546374,
            0.0010370637755841017,
            8.756852184887975e-05
        ],
        "align_select": "select orchestra.Record_Company, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Of each record company, how many orchestras do they manage?",
        "gold_select": "select orchestra.Record_Company, count(*)",
        "select_candidates": [
            "select orchestra.Record_Company, count(*)",
            "select count(*), orchestra.Record_Company",
            "select orchestra.Record_Company.c3, count(*)",
            "select orchestra.Orchestra, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9941291809082031,
            0.00023860562941990793,
            0.9943420886993408,
            0.00019495899323374033,
            0.0006631971918977797,
            0.00017016597848851234,
            0.005251020193099976,
            0.00017177616246044636
        ],
        "align_select": "select orchestra.Record_Company, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "In total, how many orchestra does each record company manage?",
        "gold_select": "select orchestra.Record_Company, count(*)",
        "select_candidates": [
            "select orchestra.Record_Company, count(*)",
            "select orchestra.Record_Company, sum(orchestra.Orchestra)",
            "select orchestra.Record_Company, sum(orchestra.Orchestra_ID)",
            "select orchestra.Record_Company, sum(orchestra.Conductor_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9948005676269531,
            0.00019984456594102085,
            0.994917631149292,
            0.00027382528060115874,
            0.001899578026495874,
            0.00023512012558057904,
            0.00019764527678489685,
            0.0001537864445708692
        ],
        "align_select": "select orchestra.Record_Company, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you list the record formats of orchestras in ascending order of count?",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, count(*)",
            "select count(*), orchestra.Major_Record_Format",
            "select order(*), orchestra.Major_Record_Format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.031013503670692444,
            0.0001854795409599319,
            0.0007381215109489858,
            0.00016989800496958196,
            0.0009593423455953598,
            0.00023578958644066006,
            0.0001495911565143615,
            8.930052717914805e-05
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "Can you show me the orchestra record formats ordered in ascending order of count?",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, count(*)",
            "select count(*), orchestra.Major_Record_Format",
            "select major_record_format orchestra.Major_Record_Format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.08742750436067581,
            0.0002471996413078159,
            0.0006743039702996612,
            0.00016448537644464523,
            0.0006581443012692034,
            0.00020748547103721648,
            0.0001381096662953496,
            0.00010881366324611008
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "Can you tell me what are the major record formats of orchestras, ordered by their frequency?",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, orchestra.Year_of_Founded",
            "select orchestra.Major_Record_Format, t1.c6",
            "select orchestra.Major_Record_Format, orchestra.Orchestra"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.34323838353157043,
            0.00024416716769337654,
            0.00011019470548490062,
            8.557729597669095e-05,
            0.00024608359672129154,
            0.00014977841055952013,
            0.00015664413513150066,
            9.813833457883447e-05
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "Can you tell me which major record formats are used by orchestras, order of their frequency?",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format, count(*)",
            "select orchestra.Major_Record_Format, orchestra.Year_of_Founded",
            "select orchestra.Major_Record_Format, t1.c6",
            "select orchestra.Major_Record_Format, t1.c8"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.008457821793854237,
            0.0002652864495757967,
            0.00012314679042901844,
            9.062541357707232e-05,
            0.0003816966782324016,
            0.00020663929171860218,
            0.0003463574394118041,
            0.000191750077647157
        ],
        "align_select": "select orchestra.Major_Record_Format, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "Which record company is the one used most often by the greatest number of orchestras?",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company (http://www.orchestra.Record_Company)",
            "select orchestra.Record_Company, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9929469227790833,
            8.046079892665148e-05,
            0.0004808955127373338,
            6.0485577705549076e-05,
            0.011683998629450798,
            7.601543620694429e-05,
            0.00015196534513961524,
            5.829871952300891e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give me the record company which was used by the greatest number of orchestras?",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company (orchestrator_id, orchestra.Year_of_Founded)",
            "select orchestra.Record_Company (orchestrator_id: orchestra.Conductor_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9937252402305603,
            8.594974497100338e-05,
            0.00046136940363794565,
            5.821743980050087e-05,
            0.0005719973123632371,
            6.716957432217896e-05,
            0.0003128376556560397,
            6.911154196131974e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the names of the orchestras that don't have any performances.",
        "gold_select": "select orchestra.Orchestra",
        "select_candidates": [
            "select orchestra.Orchestra",
            "select orchestra.Orchestra, orchestra.Conductor_ID",
            "select orchestra.Orchestra, orchestra.Orchestra_ID",
            "select orchestra.Orchestra, orchestra.Record_Company"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra",
            "orchestra performance"
        ],
        "align_scores": [
            0.2483281046152115,
            0.8733220100402832,
            0.00012024259194731712,
            0.0001453321019653231,
            0.00019502744544297457,
            0.00020956556545570493,
            0.00019502427312545478,
            0.0004378199519123882
        ],
        "align_select": "select orchestra.Orchestra",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which orchestras do not have any performances?",
        "gold_select": "select orchestra.Orchestra",
        "select_candidates": [
            "select orchestra.Orchestra",
            "select orchestra.Orchestra, orchestra.Conductor_ID",
            "select orchestra.Orchestra, performance.Orchestra_ID",
            "select orchestra.Orchestra, orchestra.Orchestra_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra",
            "orchestra performance"
        ],
        "align_scores": [
            0.2706846296787262,
            0.549919843673706,
            0.00015319940575864166,
            0.0001272375084226951,
            0.00029996191733516753,
            0.0004915610770694911,
            0.00031958846375346184,
            0.00028846500208601356
        ],
        "align_select": "select orchestra.Orchestra",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you tell me which orchestras do not perform any performances?",
        "gold_select": "select orchestra.Orchestra",
        "select_candidates": [
            "select orchestra.Orchestra",
            "select orchestra.Orchestra, orchestra.Conductor_ID",
            "select orchestra.Orchestra, performance.Orchestra_ID",
            "select orchestra.Orchestra, orchestra.Orchestra_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra",
            "orchestra performance"
        ],
        "align_scores": [
            0.09649191796779633,
            0.8413878083229065,
            0.0001670708879828453,
            0.00016243239224422723,
            0.00024329479492735118,
            0.0005660461029037833,
            0.00021971861133351922,
            0.0003385386080481112
        ],
        "align_select": "select orchestra.Orchestra",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show the record industries shared by orchestras from the years before to the years after 2003.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select a orchestra.Record_Company",
            "select avg(orchestra.Record_Company)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9945313334465027,
            0.5482151508331299,
            0.0001648248144192621,
            0.00014253375411499292,
            0.0008657017606310546,
            0.0009685811237432063,
            0.0002998538257088512,
            0.00022430534590967
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the record company shared by orchestras founded before (year) 2003 and after (year).",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select avg(orchestra.Record_Company)",
            "select orchestra.Record_Company (http://orchestra.Record_Company)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9783863425254822,
            0.09660592675209045,
            0.0001417484600096941,
            0.00012163082283223048,
            0.00017689081141725183,
            0.00012177401367807761,
            0.0015044501051306725,
            0.0009480629814788699
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all the record companies used by orchestras which are founded before 2003 and those founded after 2003.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company for both orchestra.Year_of_Founded, orchestra.Record_Company",
            "select orchestra.Record_Company for both orchestra.Year_of_Founded, orchestra.Major_Record_Format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.24559015035629272,
            0.98989337682724,
            0.00013867607049178332,
            0.00023455455084331334,
            8.715798321645707e-05,
            0.00015296644414775074,
            9.164356742985547e-05,
            0.0001163682245532982
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "The following are the record companies used by both orchestras founded before 2003 and those founded after 2003.: Can you show me list of record companies used by both orchestras founded both times.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company Can you show me a list of record_companies_used-by-orchestrations-founded-both-times",
            "select orchestra.Record_Company Can you show me a list of record_companies_used-by-orchestrations-founded-both-ways"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9658123850822449,
            0.07006992399692535,
            0.00030651563429273665,
            0.00020458822837099433,
            0.011172320693731308,
            0.0006209610146470368,
            0.007969074882566929,
            0.0008235693094320595
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which record companies are used by both orchestras founded before 2003 and those founded after 2003? List them.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company del.icio.us",
            "select orchestra.Record_Company, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9931782484054565,
            0.0342080295085907,
            0.00023760105250403285,
            0.0002041400584857911,
            0.015727872028946877,
            0.00244321022182703,
            0.00012524373596534133,
            9.382478310726583e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "How can I find out the number of orchestras whose record format is 'CD' or 'DVD'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.Major_Record_Format",
            "select count(*), orchestra.Orchestra_ID",
            "select count(*), orchestra.Orchestra"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9938941597938538,
            9.352463530376554e-05,
            0.0002748230763245374,
            7.120182272046804e-05,
            0.0001760023005772382,
            6.69859946356155e-05,
            0.0002749247651081532,
            7.250178168760613e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of orchestra which records in either format 'CD' or 'DVD'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.Orchestra_ID",
            "select count(*), orchestra.Major_Record_Format",
            "select count(distinct orchestra.Orchestra)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9913811087608337,
            9.062126628123224e-05,
            0.00018020352581515908,
            7.017372263362631e-05,
            0.000264951289864257,
            7.356025162152946e-05,
            0.00159693812020123,
            7.569853187305853e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the numbers of orchestras whose records are either on CD or DVD?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct orchestra.Orchestra)",
            "select count(*), orchestra.Orchestra_ID",
            "select count(*), orchestra.Orchestra"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9734603762626648,
            9.498316649114713e-05,
            0.020828044041991234,
            5.4893353080842644e-05,
            0.0002647654036991298,
            7.152793114073575e-05,
            0.00037729210453107953,
            7.055175228742883e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which orchestras have CDs or DVDs as their main recording method? List them by number.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select orchestra.Orchestra, count(*)",
            "select orchestra.Orchestra",
            "select count(*), orchestra.Orchestra"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.0018538851290941238,
            0.03274429962038994,
            0.007184309884905815,
            0.9850583076477051,
            0.022213052958250046,
            0.005023711360991001,
            0.0006081333267502487,
            0.5262961387634277
        ],
        "align_select": "select orchestra.Orchestra, count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Give the number of orchestras that use CDs or DVDs as their major record format.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.Major_Record_Format",
            "select count(*), orchestra.Major_Record_Format, t1.c6",
            "select count(*), orchestra.Record_Company, orchestra.Year_of_Founded"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9893737435340881,
            0.0001500515645602718,
            0.00026766982045955956,
            6.020004366291687e-05,
            0.00019677876844070852,
            6.976311124162748e-05,
            0.00013394340930972248,
            5.52288256585598e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me about years of founding for orchestras that have performed more than once?",
        "gold_select": "select orchestra.Year_of_Founded",
        "select_candidates": [
            "select orchestra.Year_of_Founded",
            "select orchestra.Year_of_Founded, performance.Orchestra_ID",
            "select orchestra.Year_of_Founded, orchestra.Orchestra",
            "select orchestra.Year_of_Founded, orchestra.Orchestra_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra performance",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.3205682337284088,
            0.00011074827489210293,
            0.0008065439760684967,
            7.959813228808343e-05,
            0.000405414350097999,
            6.507668149424717e-05,
            0.00027699535712599754,
            6.678584759356454e-05
        ],
        "align_select": "select orchestra.Year_of_Founded",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me information on orchestra that have performed in more than one concert. List their founding year, id.",
        "gold_select": "select orchestra.Year_of_Founded",
        "select_candidates": [
            "select orchestra.Year_of_Founded, orchestra.Orchestra_ID",
            "select orchestra.Year_of_Founded, performance.Orchestra_ID",
            "select orchestra.Year_of_Founded, orchestra.Orchestra_ID",
            "select orchestra.Conductor_ID, orchestra.Year_of_Founded"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra performance",
        "table_candidates": [
            "orchestra performance",
            "orchestra show performance"
        ],
        "align_scores": [
            0.5174740552902222,
            0.0001262401056010276,
            0.7240092754364014,
            0.00017730485706124455,
            0.5174740552902222,
            0.0001262401056010276,
            0.0008945129229687154,
            6.971795664867386e-05
        ],
        "align_select": "select orchestra.Year_of_Founded, performance.Orchestra_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For orchestras which have had more than one performance, what are the years of founding?",
        "gold_select": "select orchestra.Year_of_Founded",
        "select_candidates": [
            "select orchestra.Year_of_Founded",
            "select orchestra.Orchestra_ID, orchestra.Year_of_Founded",
            "select orchestra.Year_of_Founded, performance.Orchestra_ID",
            "select orchestra.Year_of_Founded, orchestra.Major_Record_Format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra performance",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.06852243840694427,
            0.00024374709755647928,
            0.0010218521347269416,
            8.758222247706726e-05,
            0.0005881806137040257,
            0.00010231117630610242,
            0.00018761827959679067,
            6.479282455984503e-05
        ],
        "align_select": "select orchestra.Year_of_Founded",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who is the high school student with the most friends? Give his/her name.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9601812362670898,
            8.632759272586554e-05,
            0.0025428724475204945,
            0.00010054664744529873,
            0.0014853341272100806,
            8.153144881362095e-05,
            0.0006461155135184526,
            6.396190292434767e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which are the grades of the high schoolers?",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select distinct Highschooler.grade",
            "select Highschooler.grade",
            "select distinct Highschooler.grade, t0.c3",
            "select distinct Highschooler.grade, Highschooler.name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.569778561592102,
            0.0002999127027578652,
            0.9832026362419128,
            0.34062284231185913,
            0.0005253009148873389,
            0.00019660097314044833,
            0.00013948517153039575,
            0.00011574835662031546
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the grade of the high schoolers?",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select distinct Highschooler.grade",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.ID, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9870060682296753,
            0.00012821903510484844,
            0.09400810301303864,
            8.635328413220122e-05,
            0.00021853439102414995,
            7.513542368542403e-05,
            0.0002117359108524397,
            6.908868090249598e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the grades of all the high schoolers?",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select distinct Highschooler.grade",
            "select Highschooler.ID, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9664446115493774,
            0.0002387521817581728,
            0.274904727935791,
            0.00010802030737977475,
            0.00031906182994134724,
            7.136400381568819e-05,
            0.00028502833447419107,
            7.566346175735816e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me all the grades of the high schoolers?",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select distinct Highschooler.grade",
            "select distinct Highschooler.grade, t0.c3",
            "select distinct Highschooler.grade, Highschooler.ID",
            "select distinct Highschooler.grade, Highschooler.name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9865525364875793,
            0.000220690926653333,
            0.0005537521210499108,
            9.744927228894085e-05,
            0.00011922464909730479,
            6.24790191068314e-05,
            0.00012416945537552238,
            6.360214320011437e-05
        ],
        "align_select": "select distinct Highschooler.grade",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show to me the high school student ID number of Kyle.",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select numeric Highschooler.ID",
            "select Highschooler.ID, Highschooler.name",
            "select highschooler Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.04629133641719818,
            9.067934297490865e-05,
            0.0032972735352814198,
            7.77022069087252e-05,
            0.0002332721633138135,
            6.077431680751033e-05,
            0.0006157332682050765,
            7.181170803960413e-05
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the ID of the high schooler named Kyle?",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.ID, Highschooler.name",
            "select Highschooler.ID, Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.27735328674316406,
            0.00011438211367931217,
            0.0002590155054349452,
            7.645170262549073e-05,
            0.00033306944533251226,
            7.476483733626083e-05,
            0.00014879676746204495,
            6.745071732439101e-05
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the grade with the most high schoolers?",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, t0.c3",
            "select Highschooler.grade, Highschooler.name",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9940392971038818,
            6.600183405680582e-05,
            0.0006315335631370544,
            7.111983723007143e-05,
            0.00023917095677461475,
            6.0513961216202006e-05,
            0.0001924299431266263,
            7.04898193362169e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me which grade has the most high schoolers?",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, t0.c3",
            "select Highschooler.grade, Highschooler.name",
            "select Highschooler.grade, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9931500554084778,
            9.214130113832653e-05,
            0.0008605488110333681,
            6.204693636391312e-05,
            0.0003551120753400028,
            6.294134072959423e-05,
            0.0635087639093399,
            6.384021253325045e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Provide the list of all the high schoolers' names and grades.",
        "gold_select": "select Highschooler.name, Highschooler.grade",
        "select_candidates": [
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade, Highschooler.ID",
            "select highschoolers' Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9392462968826294,
            0.00012758887896779925,
            0.020786412060260773,
            9.269066504202783e-05,
            0.000253560981946066,
            7.93935323599726e-05,
            0.000476736924611032,
            9.936863352777436e-05
        ],
        "align_select": "select Highschooler.name, Highschooler.grade",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the names and grades (for each individual) at the high school?",
        "gold_select": "select Highschooler.name, Highschooler.grade",
        "select_candidates": [
            "select distinct Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade",
            "select unique Highschooler.name, Highschooler.grade",
            "select individual Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.018826434388756752,
            9.286151180276647e-05,
            0.9904475212097168,
            0.00011928741150768474,
            0.0006658235215581954,
            9.403490548720583e-05,
            0.000817096559330821,
            7.89239420555532e-05
        ],
        "align_select": "select Highschooler.name, Highschooler.grade",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the grades and names of the students at the high school?",
        "gold_select": "select Highschooler.name, Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade, Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.grade, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9660679697990417,
            0.9872338771820068,
            0.980307400226593,
            0.9894804954528809,
            0.014783421531319618,
            0.016962483525276184,
            0.015214962884783745,
            0.01875218376517296
        ],
        "align_select": "select Highschooler.grade, Highschooler.name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the like numbers corresponding to each student id.",
        "gold_select": "select Likes.student_id, count(*)",
        "select_candidates": [
            "select Likes.student_id, Likes.liked_id",
            "select Likes.student_id, count(*)",
            "select Likes.student_id, sum(Likes.liked_id)",
            "select Likes.student_id, count(Likes.liked_id)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Likes",
        "table_candidates": [
            "Likes",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.00028667255537584424,
            0.00019736617105081677,
            0.9810360670089722,
            0.9912402033805847,
            0.0009970711544156075,
            0.0008318264735862613,
            0.0009921626187860966,
            0.0005825234693475068
        ],
        "align_select": "select Likes.student_id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the number of likes corresponding to each student id.",
        "gold_select": "select Likes.student_id, count(*)",
        "select_candidates": [
            "select Likes.student_id, count(*)",
            "select count(*), Likes.student_id",
            "select Likes.student_id, sum(Likes.liked_id)",
            "select Likes.student_id, count(*), Likes.liked_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Likes",
        "table_candidates": [
            "Likes"
        ],
        "align_scores": [
            0.9965384006500244,
            0.0001353211555397138,
            0.9960141181945801,
            0.00013251055497676134,
            0.0007529283175244927,
            9.555376163916662e-05,
            0.00011387540871510282,
            8.380538929486647e-05
        ],
        "align_select": "select Likes.student_id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the number of likes corresponding to each student id.",
        "gold_select": "select Likes.student_id, count(*)",
        "select_candidates": [
            "select Likes.student_id, count(*)",
            "select Likes.student_id, sum(Likes.liked_id)",
            "select Likes.student_id, count(*), Likes.liked_id",
            "select count(*), Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Likes",
        "table_candidates": [
            "Likes"
        ],
        "align_scores": [
            0.9964738488197327,
            0.00013825157657265663,
            0.0008747268584556878,
            9.68681852100417e-05,
            0.00011600083962548524,
            8.450676978100091e-05,
            0.9959635734558105,
            0.00012494063412304968
        ],
        "align_select": "select Likes.student_id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the lowest grade among the students without any friends?",
        "gold_select": "select min(Highschooler.grade)",
        "select_candidates": [
            "select min(Highschooler.grade)",
            "select min(Highschooler.grade), Highschooler.ID",
            "select min(Highschooler.grade), Highschooler.name",
            "select min(Highschooler.grade), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9806832671165466,
            8.509879262419418e-05,
            0.00014653800462838262,
            6.216936162672937e-05,
            0.00016241875709965825,
            7.04765843693167e-05,
            0.0003935344866476953,
            8.443211117992178e-05
        ],
        "align_select": "select min(Highschooler.grade)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the lowest grades of students who have no friends.",
        "gold_select": "select min(Highschooler.grade)",
        "select_candidates": [
            "select min(Highschooler.grade)",
            "select min(Highschooler.grade), Highschooler.ID",
            "select Highschooler.grade",
            "select min(Highschooler.grade), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes",
            "Highschooler"
        ],
        "align_scores": [
            0.9927151799201965,
            0.0001139454689109698,
            0.00015550032549072057,
            6.93303081789054e-05,
            0.027739010751247406,
            0.00030047338805161417,
            0.0001982106623472646,
            9.114088607020676e-05
        ],
        "align_select": "select min(Highschooler.grade)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the number of likes this high-school-ager named Kyle.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.name",
            "select count(*), Highschooler.ID",
            "select count(1, Highschooler.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9911954402923584,
            6.309830496320501e-05,
            0.00023203813179861754,
            5.874640555703081e-05,
            0.00027429641340859234,
            6.098028825363144e-05,
            0.0003220181097276509,
            7.27163496776484e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the number of likes belonging to the high schooler name Kyle in return.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.name",
            "select count(*), Highschooler.ID",
            "select count(*), Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.990544319152832,
            0.0003550800902303308,
            0.0002647308574523777,
            0.010484538041055202,
            0.0002592870150692761,
            0.0002015209465753287,
            0.00012665233225561678,
            0.00014490948524326086
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the number of likes the high schooler named Kyle has?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.name",
            "select count(*), Highschooler.ID",
            "select count(1, Highschooler.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9928633570671082,
            8.075973892118782e-05,
            0.00026394048472866416,
            6.115674477769062e-05,
            0.00031827131169848144,
            6.212035805219784e-05,
            0.0005178407882340252,
            7.306570478249341e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the number of likes that the high schooler named Kyle has?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.name",
            "select count(*), Highschooler.ID",
            "select count(*), Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9929397106170654,
            8.418288052780554e-05,
            0.0002549648634158075,
            6.859495624667034e-05,
            0.00029929462471045554,
            6.760269025107846e-05,
            0.00015921812155283988,
            6.324589776340872e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is Kyle's grade?",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.ID, Highschooler.name, Highschooler.grade",
            "select Highschooler.ID, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9900436401367188,
            7.817534060450271e-05,
            0.0001536958443466574,
            6.075368946767412e-05,
            0.00020986406889278442,
            6.086641951696947e-05,
            0.00020212348317727447,
            5.7423450925853103e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me which grade Kyle is in?",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select distinct Highschooler.grade",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.grade, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9914695620536804,
            0.0001231125061167404,
            0.0590229406952858,
            0.00027517625130712986,
            0.00020252549438737333,
            6.131816189736128e-05,
            0.00016529601998627186,
            5.987976328469813e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is Kyle's grade?",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.ID, Highschooler.name, Highschooler.grade",
            "select Highschooler.ID, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9900436401367188,
            7.817534060450271e-05,
            0.0001536958443466574,
            6.075368946767412e-05,
            0.00020986406889278442,
            6.086641951696947e-05,
            0.00020212348317727447,
            5.7423450925853103e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "There are how many high schoolers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.ID",
            "select count(*), Highschooler.name",
            "select count(*), Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9870806336402893,
            8.570109639549628e-05,
            0.000289093324681744,
            7.04299527569674e-05,
            0.00026288669323548675,
            7.467193063348532e-05,
            0.0003063277981709689,
            7.521929364884272e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List high-schooler numbers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select Highschooler.ID",
            "select count(*)",
            "select sum(Highschooler.ID)",
            "select list(Highschooler.ID)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.39249444007873535,
            0.00010537912021391094,
            0.9293306469917297,
            9.66247171163559e-05,
            0.003123030997812748,
            0.00010185016435571015,
            0.011236527003347874,
            8.283423085231334e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of highschoolers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.ID",
            "select count(*), Highschooler.name, Highschooler.grade",
            "select count(*), Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9916684627532959,
            0.00013022638449911028,
            0.0002423400292173028,
            8.369524584850296e-05,
            0.00011492022895254195,
            5.836184573126957e-05,
            0.00014897237997502089,
            6.75018090987578e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of high schoolers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.ID",
            "select count(*), Highschooler.name, Highschooler.grade",
            "select count(*), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9899090528488159,
            8.891060133464634e-05,
            0.00025134082534350455,
            6.997485616011545e-05,
            0.00011670826643239707,
            6.50183719699271e-05,
            0.00023951505136210471,
            7.260979327838868e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many students are in your high school class?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.ID",
            "select count(*), Highschooler.name, Highschooler.grade",
            "select count(distinct Highschooler.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9630861878395081,
            0.0014286545338109136,
            0.0004639267863240093,
            0.007226952817291021,
            0.00011526747402967885,
            0.00020594966190401465,
            0.009450439363718033,
            0.000622368126641959
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you count the total number of high schoolers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.ID",
            "select count(*), Highschooler.name",
            "select count(*), http://Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9877371788024902,
            0.0002980272111017257,
            0.00026166136376559734,
            8.275047002825886e-05,
            0.00025133436429314315,
            8.767138206167147e-05,
            0.0006633962620981038,
            7.90155099821277e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the number of high school students?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.ID",
            "select count(*), Highschooler.name, Highschooler.grade",
            "select count(*), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9905549883842468,
            0.00011891807662323117,
            0.0002767741971183568,
            6.980776379350573e-05,
            0.00012910742952954024,
            6.66955893393606e-05,
            0.00023283151676878333,
            7.475300662918016e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show the names and grades of all high schoolers? List their name and grades.",
        "gold_select": "select Highschooler.name, Highschooler.grade",
        "select_candidates": [
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.grade",
            "select Highschooler.ID, Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9704274535179138,
            0.00022201061074156314,
            0.018705660477280617,
            0.00010356109123677015,
            0.00030679014162160456,
            0.00010088567796628922,
            0.00024396166554652154,
            8.213671389967203e-05
        ],
        "align_select": "select Highschooler.name, Highschooler.grade",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the names and grades of each high schooler?",
        "gold_select": "select Highschooler.name, Highschooler.grade",
        "select_candidates": [
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.grade",
            "select Highschooler.ID, Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9718137383460999,
            0.0001272544905077666,
            0.011052243411540985,
            0.00010445250518387184,
            0.0003217053890693933,
            9.187351679429412e-05,
            0.00024038624542299658,
            8.339601481566206e-05
        ],
        "align_select": "select Highschooler.name, Highschooler.grade",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show each high schooler's name and grade.",
        "gold_select": "select Highschooler.name, Highschooler.grade",
        "select_candidates": [
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.grade",
            "select Highschooler.ID, Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.992890477180481,
            0.006901576183736324,
            0.005968588870018721,
            0.000261121109360829,
            0.00028576221666298807,
            0.00017126768943853676,
            0.00019852691912092268,
            0.00014324687072075903
        ],
        "align_select": "select Highschooler.name, Highschooler.grade",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Let me see the names and grade of each high schooler.",
        "gold_select": "select Highschooler.name, Highschooler.grade",
        "select_candidates": [
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.grade",
            "select Highschooler.ID, Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9889715313911438,
            0.002266868017613888,
            0.004141137469559908,
            0.0002982366713695228,
            0.0002743173099588603,
            0.00015670688298996538,
            0.00021122052567079663,
            0.00011639983858913183
        ],
        "align_select": "select Highschooler.name, Highschooler.grade",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the names and grades of each highschooler?",
        "gold_select": "select Highschooler.name, Highschooler.grade",
        "select_candidates": [
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.grade",
            "select Highschooler.ID, Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9897094368934631,
            0.0001089239158318378,
            0.004054180346429348,
            8.631491073174402e-05,
            0.00029905786504969,
            8.667320798849687e-05,
            0.00026804982917383313,
            7.728955097263679e-05
        ],
        "align_select": "select Highschooler.name, Highschooler.grade",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me your grades for high schoolers.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select distinct Highschooler.grade",
            "select Highschooler.ID, Highschooler.grade",
            "select sum(Highschooler.grade)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.943297803401947,
            0.9804385900497437,
            0.19630227982997894,
            0.02943202294409275,
            0.00036091776564717293,
            0.00021536626445595175,
            0.006495976820588112,
            0.002381776226684451
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "In which grade are the following high schoolers? List them.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select distinct Highschooler.grade",
            "select Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.grade, Highschooler.name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.5879175662994385,
            0.026534337550401688,
            0.8128345608711243,
            0.562891960144043,
            0.001310874242335558,
            0.00044621306005865335,
            0.00041884620441123843,
            0.00021340108651202172
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "The grade of which high schooler named Kyle?",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.grade",
            "select Highschooler.ID, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.330093115568161,
            0.00010715034295571968,
            0.0002524684532545507,
            6.561313784914091e-05,
            0.04160427674651146,
            0.00015528146468568593,
            0.00019076367607340217,
            6.531212420668453e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the high schooler named Kyle, return his grade.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.ID, Highschooler.grade",
            "select Highschooler.ID, Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9779835343360901,
            7.287559856195003e-05,
            0.00026468036230653524,
            7.534622272942215e-05,
            0.0001907220430439338,
            7.305316103156656e-05,
            0.00022973964223638177,
            6.661855150014162e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the names of all the high school students in grade 10.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name",
            "select distinct Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.986390233039856,
            0.00021086879132781178,
            0.00018354534404352307,
            6.982188642723486e-05,
            0.12683820724487305,
            9.940787276718765e-05,
            0.00014396193728316575,
            6.672581366728991e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Could you please list out the names of all high schoolers in Grade 10?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select distinct Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9798955917358398,
            0.0003455861296970397,
            0.10884787887334824,
            0.00016102507652249187,
            0.00018684417591430247,
            7.217418897198513e-05,
            0.00016439351020380855,
            7.248844485729933e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the names of all high school students in grade 10?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name",
            "select distinct Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9845169186592102,
            0.00017361067875754088,
            0.0001858931063907221,
            7.191997428890318e-05,
            0.04861372336745262,
            0.00011910737521247938,
            0.00015140431059990078,
            7.142432878026739e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all the students from grade 10 by name.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select distinct Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.977064847946167,
            0.9908016324043274,
            0.02980975992977619,
            0.0017987070605158806,
            0.00015913450624793768,
            0.00015704597171861678,
            0.00018330258899368346,
            0.00019867157971020788
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all students in Grade 10?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select distinct Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9653510451316833,
            0.0001772558462107554,
            0.09826181083917618,
            0.00018265061953570694,
            0.0001770534727256745,
            6.355164077831432e-05,
            0.00013104654499329627,
            6.311437755357474e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the high schoolers in grade 10 by name.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select distinct Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9820982813835144,
            0.9909276962280273,
            0.08774740248918533,
            0.004903413355350494,
            0.0001716044353088364,
            0.00014702659973409027,
            0.00021106349595356733,
            0.00032415296300314367
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Tell me what the names are of all grade 10 high schoolers.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select distinct Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9876559972763062,
            0.0001112885947804898,
            0.08320127427577972,
            0.00011279383033979684,
            0.0001666894822847098,
            6.311864126473665e-05,
            0.00012421328574419022,
            6.044302790542133e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list the names of all the high schoolers in grade 10.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select distinct Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9812644720077515,
            0.00015835058002267033,
            0.1313553899526596,
            9.745846909936517e-05,
            0.00017841804947238415,
            6.461610610131174e-05,
            0.0001392664125887677,
            6.223491800483316e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the names of all high schoolers in grade 10?.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select distinct Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9799343943595886,
            0.00024886615574359894,
            0.09051612764596939,
            0.0001300154544878751,
            0.0001947193668456748,
            7.076095789670944e-05,
            0.0001688780466793105,
            7.264143641805276e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give Kyle's ID.",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.ID, Highschooler.name",
            "select Kyle's Highschooler.ID",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.6030563712120056,
            8.282412454718724e-05,
            0.00017495339852757752,
            6.164302612887695e-05,
            0.0019186619902029634,
            7.670282502658665e-05,
            0.00017495339852757752,
            6.164302612887695e-05
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is Kyle's id? (What is his id?)",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.ID, Highschooler.name",
            "select t0.c, Highschooler.name",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9656903147697449,
            0.00011932108463952318,
            0.00018001924036070704,
            6.773278437322006e-05,
            0.00030814294586889446,
            7.81723647378385e-05,
            0.00018001924036070704,
            6.773278437322006e-05
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me Kyle's id?",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.ID, Highschooler.name",
            "select t0.c, Highschooler.name",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Likes",
            "Highschooler Friend Likes",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.6070530414581299,
            0.00011523273860802874,
            0.0002031650801654905,
            6.583626236533746e-05,
            0.0003026818158105016,
            6.64855251670815e-05,
            0.0002031650801654905,
            6.583626236533746e-05
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the ID of Kyle?",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.ID, Highschooler.name",
            "select t0.c, Highschooler.name",
            "select Highschooler.ID (or Highschooler.name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend Likes",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.972244381904602,
            0.00010483088408363983,
            0.00019088375847786665,
            5.92561591474805e-05,
            0.00028119527269154787,
            6.268795550568029e-05,
            0.0012639572378247976,
            7.574041956104338e-05
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me Kyle's ID?",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.ID, Highschooler.name",
            "select Highschooler.ID, Highschooler.name",
            "select Kyle's Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend",
            "Highschooler Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.6070530414581299,
            0.00011523273860802874,
            0.0002031650801654905,
            6.583626236533746e-05,
            0.0002031650801654905,
            6.583626236533746e-05,
            0.0017383876256644726,
            9.14872798603028e-05
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "There are how many high schoolers in grade 9 or 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.ID",
            "select count(*), Highschooler.grade",
            "select count(*), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9934779405593872,
            0.015422394499182701,
            0.0003252317837905139,
            0.0004723647434730083,
            0.0003042638418264687,
            0.0026390310376882553,
            0.000262047367868945,
            0.000845662725623697
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "There are how many high schoolers in grades 9 and 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), t0.c9, Highschooler.name0",
            "select count(*), Highschooler.grade",
            "select count(*), Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9931886196136475,
            0.248406782746315,
            0.00018304130935575813,
            0.00012610777048394084,
            0.0003030982334166765,
            0.0034694159403443336,
            0.0003192690492141992,
            0.00046759654651395977
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of high school students in grades 9 or 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.ID",
            "select count(*), t0.c9, Highschooler.name0",
            "select count(*), Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9926716089248657,
            0.00035169569309800863,
            0.0003356861707288772,
            0.0007599551463499665,
            0.00018109766824636608,
            0.00012355303624644876,
            0.00033586015342734754,
            0.2965751588344574
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of high schoolers in grades 9 and 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), t0.c9, Highschooler.name0",
            "select count(*), Highschooler.grade",
            "select count(*), Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9935867786407471,
            0.01802240125834942,
            0.00018049293430522084,
            0.00010685301822377369,
            0.00026019138749688864,
            0.001939085079357028,
            0.0002927879977505654,
            0.00022005575010553002
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of high schoolers in grades 9 or 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.ID",
            "select count(*), t0.c9, Highschooler.name0",
            "select count(*), Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9920473098754883,
            0.0002918232057709247,
            0.0002955053932964802,
            0.0005408298457041383,
            0.00016861480253282934,
            0.00011910896864719689,
            0.00028545124223455787,
            0.17420358955860138
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the number of high schoolers for each grade.",
        "gold_select": "select Highschooler.grade, count(*)",
        "select_candidates": [
            "select Highschooler.grade, count(*)",
            "select highschooler Highschooler.grade, count(*)",
            "select count(*), Highschooler.grade",
            "select Highschooler.grade, count(*), Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9963557720184326,
            0.00017333708819933236,
            0.0008808936690911651,
            0.0001318922295467928,
            0.9962096214294434,
            0.0002229635138064623,
            0.00015730482118669897,
            9.709585719974712e-05
        ],
        "align_select": "select Highschooler.grade, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show all the high schooler numbers for each grade.",
        "gold_select": "select Highschooler.grade, count(*)",
        "select_candidates": [
            "select Highschooler.ID, Highschooler.grade",
            "select distinct Highschooler.ID, Highschooler.grade",
            "select Highschooler.grade, count(*)",
            "select highschooler Highschooler.ID, Highschooler.grade"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.20292843878269196,
            0.00029918248765170574,
            0.00040583519148640335,
            0.00012858524860348552,
            0.996086597442627,
            0.0002176321722799912,
            0.00022468827955890447,
            0.0001222946448251605
        ],
        "align_select": "select Highschooler.grade, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you give me the number of high schoolers by grade?",
        "gold_select": "select Highschooler.grade, count(*)",
        "select_candidates": [
            "select count(*), Highschooler.grade",
            "select Highschooler.grade, count(*)",
            "select sum(Highschooler.grade), Highschooler.name",
            "select sum(Highschooler.ID), Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9962639212608337,
            0.0001811397960409522,
            0.9964675903320312,
            0.00016364592011086643,
            0.00012442369188647717,
            0.0001557641662657261,
            0.0002995212562382221,
            0.00011672908294713125
        ],
        "align_select": "select count(*), Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you tell me the number of high schoolers for each grade?",
        "gold_select": "select Highschooler.grade, count(*)",
        "select_candidates": [
            "select Highschooler.grade, count(*)",
            "select count(*), Highschooler.grade",
            "select highschooler Highschooler.grade, count(*)",
            "select Highschooler.grade, count(*), Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9958117008209229,
            0.00017210404621437192,
            0.9956444501876831,
            0.00019575850456021726,
            0.0009412801591679454,
            0.00012609284021891654,
            0.00016350834630429745,
            9.989639511331916e-05
        ],
        "align_select": "select Highschooler.grade, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "In each grade of highschool, how many people are there?",
        "gold_select": "select Highschooler.grade, count(*)",
        "select_candidates": [
            "select Highschooler.grade, count(*)",
            "select count(*), Highschooler.grade",
            "select highschooler_Highschooler.grade, count(*)",
            "select highschooler Highschooler.grade, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9956406354904175,
            0.00014035023923497647,
            0.9950813055038452,
            0.00018295511836186051,
            0.0009223146480508149,
            0.00012077591236447915,
            0.0008515473455190659,
            0.00011716410517692566
        ],
        "align_select": "select Highschooler.grade, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each grade, how many number of highschoolers attend it?",
        "gold_select": "select Highschooler.grade, count(*)",
        "select_candidates": [
            "select Highschooler.grade, count(*)",
            "select Highschooler.grade, count(*), Highschooler.ID",
            "select Highschooler.grade, count(*), t0.c3",
            "select Highschooler.grade, count(*), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9809656143188477,
            0.00018170164548791945,
            0.00021817920787725598,
            0.00010059978376375511,
            0.00028735335217788815,
            9.934107220033184e-05,
            0.00022158575302455574,
            0.00011224576155655086
        ],
        "align_select": "select Highschooler.grade, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "In each grade, how many high schoolers are there?",
        "gold_select": "select Highschooler.grade, count(*)",
        "select_candidates": [
            "select Highschooler.grade, count(*)",
            "select count(*), Highschooler.grade",
            "select highschooler, Highschooler.grade, count(*)",
            "select highschooler Highschooler.grade, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9958207607269287,
            0.00017009463044814765,
            0.9953101277351379,
            0.00020850403234362602,
            0.0011888286098837852,
            0.00011624344915617257,
            0.0010578607907518744,
            0.00012569036334753036
        ],
        "align_select": "select Highschooler.grade, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me the grades and number of high schoolers from each grade group.",
        "gold_select": "select Highschooler.grade, count(*)",
        "select_candidates": [
            "select Highschooler.grade, count(*)",
            "select Highschooler.grade, count(*), Highschooler.ID",
            "select highschooler_Highschooler.grade, count(*)",
            "select Highschooler.grade, count(*), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9959976673126221,
            0.0002782065130304545,
            0.00014071003533899784,
            0.0001137447397923097,
            0.0004698855336755514,
            0.00015831360360607505,
            0.00022499590704683214,
            0.00013050806592218578
        ],
        "align_select": "select Highschooler.grade, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are all grades with at least 4 students? Show them to me.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, t0.c3",
            "select Highschooler.grade, count(*)",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Likes",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9846737384796143,
            0.00013412695261649787,
            0.0005374161992222071,
            7.390816608676687e-05,
            0.0010503808734938502,
            8.202962635550648e-05,
            0.00020599956042133272,
            7.511135481763631e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me the grades containing at least 4 students.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.grade, count(*)",
            "select Highschooler.grade, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9926816821098328,
            8.94733821041882e-05,
            0.00017175501852761954,
            5.981504364171997e-05,
            0.001154970726929605,
            6.721071258652955e-05,
            0.0003825436579063535,
            6.1406048189383e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you show me the names of high school students and their corresponding numbers of friends?",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select Highschooler.name, count(Friend.friend_id)",
            "select Highschooler.name, count(*), Friend.student_id",
            "select Highschooler.name, count(distinct Friend.friend_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9914048910140991,
            0.9859529733657837,
            0.008577919565141201,
            0.014895850792527199,
            0.0003495770797599107,
            0.0003602176147978753,
            0.006973111070692539,
            0.006529983598738909
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please list down all the names of these high school students and their corresponding numbers of friends.",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select Highschooler.name, count(Friend.friend_id)",
            "select Highschooler.name, count(*), Friend.student_id",
            "select Highschooler.name, count(distinct Friend.friend_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9819892644882202,
            0.0023080254904925823,
            0.011485802009701729,
            0.00037807735498063266,
            0.0005323266959749162,
            0.00023330328986048698,
            0.009648107923567295,
            0.00025260422262363136
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How can I get the list of high school students' names along with their number of friends?",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select Highschooler.name, count(Friend.friend_id)",
            "select Highschooler.name, count(distinct Friend.friend_id)",
            "select count(*), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9813929200172424,
            0.000327068759361282,
            0.013877932913601398,
            0.0003669066645670682,
            0.010551155544817448,
            0.00023411127040162683,
            0.9912362098693848,
            0.00041542641702108085
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give the names of the high schoolers and how many friends they have.",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select Highschooler.name, count(Friend.friend_id)",
            "select Highschooler.name, count(t1.c2)",
            "select Highschooler.name, count(Friend.student_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9904327392578125,
            0.00041316935676150024,
            0.004904782399535179,
            0.0002528345794416964,
            0.0004309888754505664,
            0.00015665488899685442,
            0.018370967358350754,
            0.0016113619785755873
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the names of all the high school students and find out how many friends each has.",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select Highschooler.name, count(Friend.friend_id)",
            "select count(*), Highschooler.name",
            "select Highschooler.name, count(*), Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9799628257751465,
            0.003429926699027419,
            0.015264839865267277,
            0.0002729700936470181,
            0.9837703704833984,
            0.002592748263850808,
            0.0004359018348623067,
            0.00015983050980139524
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you tell me the names of the high school students and how many friends each has?",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select Highschooler.name, count(Friend.friend_id)",
            "select count(*), Highschooler.name",
            "select Highschooler.name, count(t1.c2)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9902161359786987,
            0.0008508081082254648,
            0.006053776480257511,
            0.0002519480767659843,
            0.9935051202774048,
            0.0008923183777369559,
            0.000514909450430423,
            0.00018209953850600868
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you tell me the name of all the high schoolers and how many friends they have?",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select count(*), Highschooler.name",
            "select Highschooler.name, count(Friend.friend_id)",
            "select count(Friend.friend_id), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9264519214630127,
            0.0009352744673378766,
            0.9725801944732666,
            0.00232577882707119,
            0.010034154169261456,
            0.0003491367388051003,
            0.023326164111495018,
            0.0002852839243132621
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you tell me the names of the high schoolers and how many friends they have?",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select Highschooler.name, count(Friend.friend_id)",
            "select count(*), Highschooler.name",
            "select Highschooler.name, count(t1.c2)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9855051636695862,
            0.0005307359388098121,
            0.007305032107979059,
            0.00025212878244929016,
            0.9909842014312744,
            0.0006880340515635908,
            0.0006592762074433267,
            0.00018926897610072047
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me the name of high schooler with 3 or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9846174716949463,
            0.0001094087929232046,
            0.0010244619334116578,
            7.802765321685001e-05,
            0.0003203996457159519,
            6.587098323507234e-05,
            0.00034784519812092185,
            8.1004633102566e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who are the high schoolers who have 3 or more friends? Give their names.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9136209487915039,
            0.00010007488162955269,
            0.0021953354589641094,
            0.00010873794235521927,
            0.00035563946585170925,
            7.960033690324053e-05,
            0.0005515623488463461,
            0.00010131526505574584
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "How many high schoolers have 3 or more friends? Give each name.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select count(*), Highschooler.name",
            "select Highschooler.name, count(distinct Friend.student_id)",
            "select Highschooler.name, count(distinct Friend.friend_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9541849493980408,
            0.00010083604138344526,
            0.982896625995636,
            0.00010003271017922089,
            0.3663041889667511,
            8.489665196975693e-05,
            0.00335087557323277,
            7.028248364804313e-05
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who are the names of high-school Kyle's friend? List them here.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.8916779160499573,
            0.25162217020988464,
            0.00022234658536035568,
            0.00015068892389535904,
            0.0002823817194439471,
            0.00018081918824464083,
            0.00035315717104822397,
            0.00016817901632748544
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the names of all the high schoolers Kyle's friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9323332905769348,
            0.037025388330221176,
            0.00022878528397995979,
            0.0001482960651628673,
            0.00019459036411717534,
            0.0001271172077395022,
            0.00032309192465618253,
            0.00013226956070866436
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of all high schooler Kyle's frienda.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id",
            "select distinct Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9559536576271057,
            0.0001308689679717645,
            0.00016794793191365898,
            6.893206591485068e-05,
            0.00019040476763620973,
            7.548445137217641e-05,
            0.09243429452180862,
            0.000112864188849926
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the friends of the high-school student Kyle?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Friend.friend_id",
            "select Friend.friend_id, t1.c2",
            "select Friend.friend_id, Friend.student_id",
            "select Friend.friend_id, Highschooler.name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.016336388885974884,
            0.009010311216115952,
            0.0003472896933089942,
            0.00011273877316853032,
            0.00014290308172348887,
            0.00012943333422299474,
            0.0002701554330997169,
            0.00013377083814702928
        ],
        "align_select": "select Friend.friend_id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the friends of the high school student Kyle? List their name.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Friend.friend_id",
            "select distinct Friend.friend_id",
            "select Friend.friend_id, Highschooler.name",
            "select list(Friend.friend_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.02437574230134487,
            0.00019110357970930636,
            0.023361293599009514,
            0.0003960340400226414,
            0.00035905721597373486,
            0.00010806779027916491,
            0.001209452748298645,
            7.413228013319895e-05
        ],
        "align_select": "select Friend.friend_id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of people with whom the high school student Kyle is friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select distinct Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.785194456577301,
            0.0016558392671868205,
            0.16113480925559998,
            0.00046554222353734076,
            0.00025500034098513424,
            0.0001040572315105237,
            0.008669532835483551,
            0.00353408046066761
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The number of friends that high school student Kyle has is.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(Friend.friend_id)",
            "select count(*)",
            "select count(t1.c2)",
            "select count(Friend.student_id)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.009757431223988533,
            0.00018562089826446027,
            0.9943175911903381,
            0.001583293080329895,
            0.0006500218878500164,
            0.00019740212883334607,
            0.004079240374267101,
            0.00021773698972538114
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of friends to which high school student Kyle belongs?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(Friend.friend_id)",
            "select count(distinct Friend.friend_id)",
            "select count(*), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9864930510520935,
            0.33948567509651184,
            0.09606670588254929,
            0.11407977342605591,
            0.05059649422764778,
            0.0015078872675076127,
            0.000355061813024804,
            0.004931983537971973
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The friend count of high school student Kyle.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(Friend.friend_id)",
            "select count(distinct Friend.friend_id)",
            "select count(Friend.friend_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.995719850063324,
            6.244030373636633e-05,
            0.0012937246356159449,
            6.652993033640087e-05,
            0.0027331847231835127,
            6.260026566451415e-05,
            0.0012937246356159449,
            6.652993033640087e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me how many friends high school student Kyle has?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(Friend.friend_id)",
            "select count(*)",
            "select count(t1.c2)",
            "select count(Friend.student_id)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.017829038202762604,
            0.0002752200816757977,
            0.9941579103469849,
            0.048284970223903656,
            0.0007133333128876984,
            0.00036835268838331103,
            0.0029581838753074408,
            0.0002474226930644363
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many friends does Kyle have? List them by number.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(Friend.friend_id)",
            "select Friend.friend_id, count(*)",
            "select count(*), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9452380537986755,
            0.8964591026306152,
            0.002164904959499836,
            0.0032703434117138386,
            0.0006539233727380633,
            0.001714081852696836,
            0.0019172809552401304,
            0.06506027281284332
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "How many friends does Kyle have? Give his number.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(Friend.friend_id)",
            "select count(*)",
            "select count(t1.c2)",
            "select count(Friend.student_id)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.0075659905560314655,
            8.547519246349111e-05,
            0.9877756834030151,
            0.00012823603174183518,
            0.0006309619639068842,
            9.409186895936728e-05,
            0.003719946136698127,
            9.913042595144361e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the ids of all students without any friends.",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select Friend.student_id",
            "select Highschooler.ID, Friend.student_id",
            "select Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Friend Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.8088991641998291,
            0.1265134960412979,
            0.977146565914154,
            0.022577539086341858,
            0.0006350275361910462,
            0.0003594766021706164,
            0.9703456163406372,
            0.040823791176080704
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show me the ids of all the students who do not have any friends.",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.ID, Friend.student_id",
            "select Friend.student_id",
            "select t0.c, Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes",
            "Friend Likes"
        ],
        "align_scores": [
            0.5265228152275085,
            0.12066320329904556,
            0.0007082974771037698,
            0.0003184813540428877,
            0.9566624164581299,
            0.04110093414783478,
            0.0004846866650041193,
            0.00015659871860407293
        ],
        "align_select": "select Friend.student_id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "List the id of all the students whose have no friends.",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.ID, Friend.student_id",
            "select t0.c, Friend.student_id",
            "select Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes",
            "Friend Likes"
        ],
        "align_scores": [
            0.5557056069374084,
            0.8529071807861328,
            0.0005037488299421966,
            0.0004826171789318323,
            0.0006139533361420035,
            0.0004183533601462841,
            0.9080873131752014,
            0.9334882497787476
        ],
        "align_select": "select Friend.student_id",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show all the student IDs of those who don't have any friends.",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select Friend.student_id",
            "select Highschooler.ID, Friend.student_id",
            "select t0.c, Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Friend Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.6414045691490173,
            0.18617069721221924,
            0.9655418992042542,
            0.033110734075307846,
            0.0007514614262618124,
            0.00037808495108038187,
            0.0005556617979891598,
            0.00020787159155588597
        ],
        "align_select": "select Friend.student_id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Just give me the ids of all students who don't have any friends.",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.ID, Friend.student_id",
            "select Friend.student_id",
            "select t0.c, Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Friend Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.6202019453048706,
            0.2187192291021347,
            0.000626170658506453,
            0.0003430958604440093,
            0.9608837962150574,
            0.051030728965997696,
            0.0004939170321449637,
            0.00016077345935627818
        ],
        "align_select": "select Friend.student_id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show me all high school students whose ids do not contain friends.",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select distinct Highschooler.ID",
            "select Highschooler.ID",
            "select distinct Highschooler.ID, Highschooler.name",
            "select distinct Highschooler.name, Highschooler.ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes",
            "Highschooler"
        ],
        "align_scores": [
            0.004233068320900202,
            0.014452165924012661,
            0.5250130891799927,
            0.7186785340309143,
            0.00016355013940483332,
            0.00024435276282019913,
            0.00011703914788085967,
            0.0001546571438666433
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list all the students high school ids without any friends?",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select distinct Highschooler.ID",
            "select Highschooler.ID, Friend.student_id",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.12133723497390747,
            0.6031978130340576,
            0.00903011392802,
            0.00557714281603694,
            0.0005185602349229157,
            0.0004067589470651001,
            0.0008114621741697192,
            0.0007797984289936721
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Given the student ids, list the high school students who do not have any friend.",
        "gold_select": "select Highschooler.ID",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.ID, Friend.student_id",
            "select distinct Highschooler.ID",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.7235526442527771,
            0.026922019198536873,
            0.0007739619468338788,
            0.0005757692852057517,
            0.022371741011738777,
            0.10050145536661148,
            0.002259259345009923,
            0.0029587268363684416
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you show us the names of all high school students who don't have any friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade, t0.c3",
            "select Highschooler.name (distinct Highschooler.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.7188546061515808,
            0.8689526319503784,
            0.00025811762316152453,
            0.0002750403946265578,
            0.00014684013149235398,
            0.00013008899986743927,
            0.0017933555645868182,
            0.0010250922059640288
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you list the names of all high school students who don't have any friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name",
            "select Highschooler.name, Highschooler.grade, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.6734743714332581,
            0.8397765159606934,
            0.00023853308812249452,
            0.00025842004106380045,
            0.04007380083203316,
            0.018392857164144516,
            0.0001428436953574419,
            0.00012632427387870848
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you show me the names of all high school students who don't have any friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade, t0.c3",
            "select Highschooler.name (distinct Highschooler.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.7501548528671265,
            0.876011312007904,
            0.00023586286988575011,
            0.0002555114042479545,
            0.00013994105393067002,
            0.00012583471834659576,
            0.0015041412552818656,
            0.000878108898177743
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you list the names of all high school students who do not have any friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name",
            "select Highschooler.name, Highschooler.grade, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.5118736624717712,
            0.8482058048248291,
            0.0002529674384277314,
            0.0002478264505043626,
            0.11648252606391907,
            0.01708952896296978,
            0.00021300429943948984,
            0.0001228917681146413
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which high school students do not have any friends? List them by name.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select distinct Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.47862690687179565,
            0.6856752634048462,
            0.165137380361557,
            0.04135952889919281,
            0.0003343133139424026,
            0.00025594441103748977,
            0.00026836435426957905,
            0.00016815881826914847
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "list the names of students who are alone.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9011746644973755,
            0.00010824632772710174,
            0.0001744250621413812,
            6.30752692813985e-05,
            0.00018059244030155241,
            6.438274431275204e-05,
            0.05925770476460457,
            8.963103755377233e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which students have no friends? List their name.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler",
            "Highschooler Friend Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.7757863998413086,
            0.6960316896438599,
            0.0003521395265124738,
            0.0005012208712287247,
            0.00023508025333285332,
            0.00019834944396279752,
            0.0002585139009170234,
            0.0002762974763754755
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which students have no friends? List their names.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select distinct Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes",
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.7577114701271057,
            0.6288341879844666,
            0.1442488580942154,
            0.06594610959291458,
            0.00035758031299337745,
            0.000542363035492599,
            0.0002624642220325768,
            0.00021378722158260643
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of the students who don't have any friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, t1.c2",
            "select Highschooler.name, Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes",
            "Highschooler"
        ],
        "align_scores": [
            0.18578052520751953,
            0.615390419960022,
            0.0002654056006576866,
            0.00020828106789849699,
            0.0003690380835905671,
            0.0003051530511584133,
            0.0002927263267338276,
            0.0004809281090274453
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Who are the students who do not have any friends? List their names.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.3104161024093628,
            0.5173580646514893,
            0.00044504826655611396,
            0.0005443618865683675,
            0.0003372729115653783,
            0.0002573475067038089,
            0.0004604652349371463,
            0.00048618129221722484
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which high schooler has friends and is liked by someone else? List the ids of those high schoolers.",
        "gold_select": "select Friend.student_id",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.ID, Friend.friend_id, Likes.student_id",
            "select Highschooler.ID, Friend.student_id, Likes.liked_id",
            "select Highschooler.ID, Friend.student_id, Likes.student_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Friend Likes",
        "table_candidates": [
            "Highschooler Friend Likes",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.5646709203720093,
            0.08813922107219696,
            0.0007804497145116329,
            0.00026956084184348583,
            0.0008523603319190443,
            0.0004087460692971945,
            0.0008560213609598577,
            0.00037277021328918636
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Let me see (the ids) of all high schoolers who have friends and are liked by at least one other person.",
        "gold_select": "select Friend.student_id",
        "select_candidates": [
            "select Highschooler.ID",
            "select Likes.student_id",
            "select Highschooler.ID, Friend.friend_id, Likes.student_id",
            "select Highschooler.ID, Friend.student_id, Likes.liked_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Friend Likes",
        "table_candidates": [
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.8629775047302246,
            0.6298946738243103,
            0.8872707486152649,
            0.8440921306610107,
            0.0018043958116322756,
            0.00041547633009031415,
            0.001395665225572884,
            0.0006513464613817632
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Show us the ids of high schoolers who are liked by someone else along with being friends with them.",
        "gold_select": "select Friend.student_id",
        "select_candidates": [
            "select Likes.student_id",
            "select Highschooler.ID",
            "select Friend.student_id",
            "select Likes.student_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Friend Likes",
        "table_candidates": [
            "Highschooler Friend Likes",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9221016764640808,
            0.3270452320575714,
            0.45875999331474304,
            0.05788307636976242,
            0.4826635420322418,
            0.1057584136724472,
            0.9221016764640808,
            0.3270452320575714
        ],
        "align_select": "select Likes.student_id",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Out of these student ids, which are those that have friends and are liked?",
        "gold_select": "select Friend.student_id",
        "select_candidates": [
            "select Friend.student_id",
            "select Likes.student_id",
            "select Friend.student_id, Likes.student_id",
            "select Friend.student_id, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Friend Likes",
        "table_candidates": [
            "Friend Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9885039925575256,
            0.9893478155136108,
            0.9852407574653625,
            0.9906737208366394,
            0.8490612506866455,
            0.9804409742355347,
            0.8490612506866455,
            0.9804409742355347
        ],
        "align_select": "select Friend.student_id",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Find the ids of students who both like and have friends.",
        "gold_select": "select Friend.student_id",
        "select_candidates": [
            "select Likes.student_id",
            "select Likes.student_id, Friend.student_id",
            "select Likes.student_id, Likes.liked_id",
            "select Likes.student_id, Friend.student_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Friend Likes",
        "table_candidates": [
            "Friend Likes",
            "Highschooler Friend Likes",
            "Likes Friend Likes",
            "Likes"
        ],
        "align_scores": [
            0.9904416799545288,
            0.08450291305780411,
            0.3310433328151703,
            0.0035457415506243706,
            0.0004818458401132375,
            0.00019612001779023558,
            0.3310433328151703,
            0.0035457415506243706
        ],
        "align_select": "select Likes.student_id",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Show me the ids of students who are both liked and have friends.",
        "gold_select": "select Friend.student_id",
        "select_candidates": [
            "select Likes.student_id",
            "select Likes.student_id, Friend.student_id",
            "select Likes.student_id, Likes.liked_id",
            "select Highschooler.ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Friend Likes",
        "table_candidates": [
            "Friend Likes",
            "Highschooler Friend Likes",
            "Likes Friend",
            "Likes Friend Likes",
            "Likes"
        ],
        "align_scores": [
            0.9825871586799622,
            0.6514180302619934,
            0.42602983117103577,
            0.01576315052807331,
            0.00031292892526835203,
            0.0003586526436265558,
            0.3119349181652069,
            0.12230098247528076
        ],
        "align_select": "select Likes.student_id",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Can you list the names and ids of all students who both have friends and are liked?",
        "gold_select": "select Friend.student_id",
        "select_candidates": [
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, t0.c, Highschooler.ID",
            "select Highschooler.name, Highschooler.ID, Highschooler.name",
            "select Highschooler.name, Highschooler.name, Highschooler.ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Friend Likes",
        "table_candidates": [
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9903106689453125,
            0.15705731511116028,
            0.00027985722408629954,
            0.00021752492466475815,
            0.0003667944110929966,
            0.00026244291802868247,
            0.00032097232178784907,
            0.00024356006179004908
        ],
        "align_select": "select Highschooler.name, Highschooler.ID",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "List all the student ids where the likes and friends match.",
        "gold_select": "select Friend.student_id",
        "select_candidates": [
            "select Likes.student_id",
            "select Friend.student_id",
            "select Likes.student_id, Friend.student_id",
            "select Likes.student_id, Likes.liked_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Friend Likes",
        "table_candidates": [
            "Friend Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9955969452857971,
            0.023053238168358803,
            0.9954758286476135,
            0.023172473534941673,
            0.0074311536736786366,
            8.933460776461288e-05,
            0.0001776023127604276,
            6.400040729204193e-05
        ],
        "align_select": "select Likes.student_id",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Show all the names of the students having at least one friend and also being liked by someone else.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend Likes",
        "table_candidates": [
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9017308950424194,
            0.95256507396698,
            0.0002524455776438117,
            0.00022288828040473163,
            0.0012361070839688182,
            0.0023111975751817226,
            0.00030093523673713207,
            0.0003256254713051021
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Could you tell me the names of all students who have a friend and another classmate likes them?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend Likes",
        "table_candidates": [
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.674919068813324,
            0.9241123795509338,
            0.0008053508354350924,
            0.0015866236062720418,
            0.0003603281802497804,
            0.00039355718763545156,
            0.001164463465102017,
            0.0027175028808414936
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Show the names of all students whose social circle contains at least one person who likes them.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select distinct Highschooler.name",
            "select Highschooler.name",
            "select distinct Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend Likes",
        "table_candidates": [
            "Highschooler Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.05690506473183632,
            0.22073814272880554,
            0.8745743036270142,
            0.7066056728363037,
            0.00036076572723686695,
            0.0005721601191908121,
            0.006884416099637747,
            0.0006559764151461422
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which students have some friends and also are liked by someone else? List their names.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.friend_id, Likes.student_id",
            "select Highschooler.name, Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend Likes",
        "table_candidates": [
            "Highschooler Friend Likes",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.8793344497680664,
            0.9719797372817993,
            0.0006359171820804477,
            0.0007371219107881188,
            0.0005741299828514457,
            0.000670305045787245,
            0.0010901394998654723,
            0.005410470999777317
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Can you give me the names of all the students who have some friends and are liked by someone else?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend Likes",
        "table_candidates": [
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.8994632363319397,
            0.9727506041526794,
            0.0005885128630325198,
            0.0004888343974016607,
            0.0011729990364983678,
            0.0014862190000712872,
            0.0029405357781797647,
            0.01143137738108635
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Can you say me the names of highschooler which of them both have friend and are loved?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.friend_id, Likes.liked_id",
            "select Highschooler.name, Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend Likes",
        "table_candidates": [
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9884603023529053,
            0.991027295589447,
            0.0005574139067903161,
            0.0003245060797780752,
            0.0031651186291128397,
            0.0007708739722147584,
            0.0013052982976660132,
            0.0005328712286427617
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "What are the names of highschoolers who are liked and have friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Likes.liked_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend Likes",
        "table_candidates": [
            "Highschooler Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9841712117195129,
            0.21840740740299225,
            0.00031064514769241214,
            0.00021539769659284502,
            0.000382415484637022,
            0.00027064295136369765,
            0.00028560342616401613,
            0.0002120939316228032
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Tell me the names of schoolboys (high-schoolers) who both have friends and they\u2019re liked by others.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Likes.liked_id",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend Likes",
        "table_candidates": [
            "Highschooler Friend Likes",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.8771786093711853,
            0.1124613806605339,
            0.0003943918854929507,
            0.00025599522632546723,
            0.0016200399259105325,
            0.0005975625244900584,
            0.00037636116030626,
            0.00024108287470880896
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Can you give me the names of high-schoolers who have friends as well as being liked?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Likes.liked_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend Likes",
        "table_candidates": [
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.8882132172584534,
            0.13440027832984924,
            0.0004483296943362802,
            0.00018838421965483576,
            0.0008017692598514259,
            0.0002883803390432149,
            0.0002470177714712918,
            0.00013793831749353558
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Show me the number of likes for student id.",
        "gold_select": "select Likes.student_id, count(*)",
        "select_candidates": [
            "select Likes.student_id, count(*)",
            "select count(*), Likes.student_id",
            "select sum(Likes.liked_id), Likes.student_id",
            "select counts(*), Likes.student_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Likes",
        "table_candidates": [
            "Likes",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9955601692199707,
            0.0005064734723418951,
            0.9950737357139587,
            0.0003223003586754203,
            0.00016297525144182146,
            7.866065425332636e-05,
            0.0004806961806025356,
            0.00011077373346779495
        ],
        "align_select": "select Likes.student_id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you count the number of likes on each student id?",
        "gold_select": "select Likes.student_id, count(*)",
        "select_candidates": [
            "select count(*), Likes.student_id",
            "select Likes.student_id, count(*)",
            "select counts(*), Likes.student_id",
            "select sum(Likes.liked_id), Likes.student_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Likes",
        "table_candidates": [
            "Likes",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9929908514022827,
            0.8481694459915161,
            0.9957333207130432,
            0.9902931451797485,
            0.0007696556276641786,
            0.0005829919828101993,
            0.0003284740378148854,
            0.0001884278899524361
        ],
        "align_select": "select count(*), Likes.student_id",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For every individual student (high-schooler), list the name and numbers of his/her likes (likes).",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select Highschooler.name, count(*), Likes.student_id",
            "select Highschooler.name, count(*), Highschooler.ID",
            "select distinct Highschooler.name, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9509291052818298,
            0.0004262503352947533,
            0.007557019125670195,
            0.00017797594773583114,
            0.00023185946338344365,
            0.00012620723282452673,
            0.0012016498949378729,
            0.00014083150017540902
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please list names of high schoolers and their number of likes for each one.",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select Highschooler.name, count(*), Likes.student_id",
            "select Highschooler.name, count(*), Likes.liked_id",
            "select Highschooler.name, count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9932344555854797,
            0.00026750550023280084,
            0.0006000511930324137,
            0.0001861993077909574,
            0.0004590422613546252,
            0.00017378092161379755,
            0.0011831524316221476,
            0.00011128573532914743
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find out the names of high schoolers who have likes, and their number of likes.",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select count(*), Highschooler.name",
            "select Highschooler.name, count(*)",
            "select Highschooler.name, count(*), Likes.student_id",
            "select distinct Highschooler.name, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9895172715187073,
            0.0004517647612374276,
            0.984300434589386,
            0.00034751754719763994,
            0.0006490368978120387,
            0.0001616510417079553,
            0.001559428870677948,
            0.00010850914259208366
        ],
        "align_select": "select count(*), Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you show me the names of the high schoolers with likes, and the numbers of likes for each?",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select count(*), Highschooler.name",
            "select Highschooler.name, count(*), Likes.student_id",
            "select Highschooler.name, count(*), Likes.liked_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9915456175804138,
            0.0005013909540139139,
            0.9920152425765991,
            0.0007013468421064317,
            0.0008455087663605809,
            0.00016577207134105265,
            0.0007631955668330193,
            0.0001697142142802477
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you show me the names of all the high schoolers who have likes and numbers of likes for each?",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select count(*), Highschooler.name",
            "select Highschooler.name, count(*), Likes.student_id",
            "select highschoolers Highschooler.name, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9891107678413391,
            0.0005876421346329153,
            0.9915276169776917,
            0.0011667502112686634,
            0.0020050988532602787,
            0.00023656080884393305,
            0.0011599085992202163,
            0.00017403150559403002
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the names of the high schooler with Likes and how many Likes they have.",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select count(*), Highschooler.name",
            "select Highschooler.name, count(*), Likes.student_id",
            "select highschooler Highschooler.name, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9729524254798889,
            0.6366147994995117,
            0.9847159385681152,
            0.9109362363815308,
            0.0005005366983823478,
            0.00039926389581523836,
            0.0008138426346704364,
            0.00041296458221040666
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the names of all high schoolers who have likes. How many likes does each have?",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select count(*), Highschooler.name",
            "select Highschooler.name, count(*), Likes.student_id",
            "select counts(*), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9742496609687805,
            0.9735629558563232,
            0.9745526313781738,
            0.948103666305542,
            0.000587316753808409,
            0.0004437915631569922,
            0.0010504148667678237,
            0.0008395486511290073
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the names of the high school students who have likes, and how many likes do they have?",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select count(*), Highschooler.name",
            "select Highschooler.name, count(*)",
            "select Highschooler.name, count(*), Likes.student_id",
            "select counts(*), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9885033965110779,
            0.8600479960441589,
            0.9811749458312988,
            0.7472006678581238,
            0.0005661133327521384,
            0.00043566463864408433,
            0.0012520720483735204,
            0.0007290352368727326
        ],
        "align_select": "select count(*), Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the names of the high schoolers, and how many likes does each have?",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select count(*), Highschooler.name",
            "select Highschooler.name, count(*), Likes.student_id",
            "select Highschooler.name, count(*), Likes.liked_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9941766262054443,
            0.9883047342300415,
            0.9941277503967285,
            0.9910739064216614,
            0.0006112465052865446,
            0.00034990612766705453,
            0.00035055619082413614,
            0.00017716882575768977
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you give me the name of the student with the most likes?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name (Highschooler.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9830132126808167,
            7.428244862239808e-05,
            0.000852212542667985,
            7.805131463101134e-05,
            0.0010570784797891974,
            6.778815441066399e-05,
            0.01472486462444067,
            6.866890180390328e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What shows the names of students who like at least 2 things?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.984857439994812,
            0.00011917849042220041,
            0.0003763193672057241,
            7.091397128533572e-05,
            0.0008217757567763329,
            7.798599835950881e-05,
            0.00029557026573456824,
            7.167377043515444e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For students who have 2 or more like, what is their name?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Likes.student_id, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9815767407417297,
            0.00010479830234544352,
            0.0010202680714428425,
            7.274770177900791e-05,
            0.0012039744760841131,
            0.00011619833821896464,
            0.0019539364147931337,
            0.00013496007886715233
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the number of likes that Kyle has?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.name",
            "select count(*), Highschooler.name, Likes.student_id",
            "select count(*), Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9953274726867676,
            7.964474934851751e-05,
            0.0003543069469742477,
            5.688355304300785e-05,
            0.00013892739661969244,
            5.995003812131472e-05,
            0.00013892739661969244,
            5.995003812131472e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of likes for Kyle.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.name",
            "select count(*), Highschooler.name, Likes.student_id",
            "select count(*), Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9962136149406433,
            0.00022767941118218005,
            0.0003201444342266768,
            0.0013298303820192814,
            0.00012743686966132373,
            0.0001256035902770236,
            0.00012743686966132373,
            0.0001256035902770236
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average grade of all students who have at least one friend.",
        "gold_select": "select avg(Highschooler.grade)",
        "select_candidates": [
            "select avg(Highschooler.grade)",
            "select an avg(Highschooler.grade)",
            "select avg(Highschooler.grade), Friend.student_id",
            "select avg(Highschooler.grade), Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9832148551940918,
            0.004889872390776873,
            0.0006372641655616462,
            0.00034976506140083075,
            0.0005277827149257064,
            0.0029646719340234995,
            0.00014966590970288962,
            0.00012678501661866903
        ],
        "align_select": "select avg(Highschooler.grade)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the average grade of students who have friends?",
        "gold_select": "select avg(Highschooler.grade)",
        "select_candidates": [
            "select avg(Highschooler.grade)",
            "select avg(Highschooler.grade), Highschooler.ID",
            "select an avg(Highschooler.grade)",
            "select avg(Highschooler.grade), Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9793412089347839,
            0.010627223178744316,
            0.0003510529932100326,
            0.01164135243743658,
            0.0005255302530713379,
            0.0006072164396755397,
            0.0003144781512673944,
            0.0010059380438178778
        ],
        "align_select": "select avg(Highschooler.grade)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the average of my students having friend grades?",
        "gold_select": "select avg(Highschooler.grade)",
        "select_candidates": [
            "select avg(Highschooler.grade)",
            "select an avg(Highschooler.grade)",
            "select avg(Highschooler.grade), Highschooler.ID",
            "select avg(Highschooler.grade), Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.025560712441802025,
            0.0031534922309219837,
            0.00043508276576176286,
            0.00040592075674794614,
            0.0001141197863034904,
            0.0003935137065127492,
            0.00018979831656906754,
            0.0023614417295902967
        ],
        "align_select": "select avg(Highschooler.grade)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can anyone give me the average grade of students who have friends?",
        "gold_select": "select avg(Highschooler.grade)",
        "select_candidates": [
            "select avg(Highschooler.grade)",
            "select an avg(Highschooler.grade)",
            "select avg(Highschooler.grade), Friend.student_id",
            "select avg(Highschooler.grade), Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9268180727958679,
            0.00829050038009882,
            0.0005422772374004126,
            0.0005610293592326343,
            0.0003316654183436185,
            0.0006884604808874428,
            0.00023529012105427682,
            0.0035192056093364954
        ],
        "align_select": "select avg(Highschooler.grade)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the average grade of students according to their number of friends?",
        "gold_select": "select avg(Highschooler.grade)",
        "select_candidates": [
            "select avg(Highschooler.grade), Friend.friend_id",
            "select avg(Highschooler.grade), Friend.student_id",
            "select Highschooler.ID, avg(Highschooler.grade)",
            "select Highschooler.name, avg(Highschooler.grade)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.0003862835292238742,
            0.00012873100058641285,
            0.00048078186227940023,
            0.00022295161033980548,
            0.002256111241877079,
            0.000824970134999603,
            0.0018035483080893755,
            0.0006547856028191745
        ],
        "align_select": "select avg(Highschooler.grade), Friend.friend_id",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you find out the minimum grade of students who have no friends?",
        "gold_select": "select min(Highschooler.grade)",
        "select_candidates": [
            "select min(Highschooler.grade)",
            "select min(Highschooler.grade), Highschooler.ID",
            "select min(Highschooler.grade), Highschooler.name",
            "select min(Highschooler.grade), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9928376078605652,
            0.1275949329137802,
            0.0002169950312236324,
            0.0003314928326290101,
            0.00044717470882460475,
            0.0005317018949426711,
            0.00031883135670796037,
            0.00012681017688009888
        ],
        "align_select": "select min(Highschooler.grade)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the minimum grade of students who do not have friends?",
        "gold_select": "select min(Highschooler.grade)",
        "select_candidates": [
            "select min(Highschooler.grade)",
            "select min(Highschooler.grade), Highschooler.ID",
            "select min(Highschooler.grade), Highschooler.name",
            "select min(Highschooler.grade), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9918427467346191,
            0.01039942353963852,
            0.00016399471496697515,
            0.0002214835403719917,
            0.0001970619341591373,
            0.0007318028947338462,
            0.00034707304439507425,
            0.00012797987437807024
        ],
        "align_select": "select min(Highschooler.grade)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the minimum grade (i.e., the lowest grade) of students who have no friends.",
        "gold_select": "select min(Highschooler.grade)",
        "select_candidates": [
            "select min(Highschooler.grade)",
            "select min(Highschooler.grade), Highschooler.ID",
            "select min(Highschooler.grade), Highschooler.name",
            "select min(Highschooler.grade), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes",
            "Highschooler"
        ],
        "align_scores": [
            0.9921268224716187,
            0.020395657047629356,
            0.0003772502241190523,
            0.0005758334882557392,
            0.0005193239194341004,
            0.0009318339871242642,
            0.00030963661265559494,
            0.00014128345355857164
        ],
        "align_select": "select min(Highschooler.grade)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Is it possible to give me the number of professional who has ever treated dogs?",
        "gold_select": "select count(distinct Treatments.professional_id)",
        "select_candidates": [
            "select count(distinct Treatments.professional_id)",
            "select count (distinct Treatments.professional_id)",
            "select count(*)",
            "select count(distinct Treatments.dog_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Professionals Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Charges Treatments",
            "Breeds Treatments",
            "Treatment_Types Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.9441224336624146,
            0.9441224336624146,
            0.08982295542955399,
            0.08982295542955399,
            0.9726511240005493,
            0.9726511240005493,
            0.009016372263431549,
            0.009016372263431549
        ],
        "align_select": "select count(distinct Treatments.professional_id)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the total number of professionals who have ever treated dogs?",
        "gold_select": "select count(distinct Treatments.professional_id)",
        "select_candidates": [
            "select count(distinct Treatments.professional_id)",
            "select count (distinct Treatments.professional_id)",
            "select count(distinct Treatments.dog_id)",
            "select count(distinct Treatments.treatment_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Professionals Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Charges Treatments",
            "Breeds Treatments",
            "Treatment_Types Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.9767934083938599,
            0.9767934083938599,
            0.10460682958364487,
            0.10460682958364487,
            0.011628789827227592,
            0.011628789827227592,
            0.009199846535921097,
            0.009199846535921097
        ],
        "align_select": "select count(distinct Treatments.professional_id)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the number of professionals who ever treated dogs?",
        "gold_select": "select count(distinct Treatments.professional_id)",
        "select_candidates": [
            "select count(distinct Treatments.professional_id)",
            "select count (distinct Treatments.professional_id)",
            "select count(distinct Treatments.dog_id)",
            "select count(distinct Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Professionals Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Charges Treatments",
            "Breeds Treatments",
            "Sizes Treatments",
            "Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9662452340126038,
            0.9662452340126038,
            0.05365660414099693,
            0.05365660414099693,
            0.030555570498108864,
            0.030555570498108864,
            0.5066232085227966,
            0.5066232085227966
        ],
        "align_select": "select count(distinct Treatments.professional_id)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Who paid for the most treatments on his/her dogs? Show me the owner id and last name.",
        "gold_select": "select Owners.owner_id, Owners.last_name",
        "select_candidates": [
            "select Treatments.dog_id, Owners.last_name",
            "select Owners.owner_id, Owners.last_name",
            "select Treatments.professional_id, Owners.last_name",
            "select Dogs.owner_id, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Sizes Dogs Treatments",
            "Sizes Treatments",
            "Owners Treatments"
        ],
        "align_scores": [
            0.00044040600187145174,
            8.04988740128465e-05,
            0.9885293841362,
            9.407984180143103e-05,
            0.0011517428793013096,
            8.620567678008229e-05,
            0.9821762442588806,
            9.256206976715475e-05
        ],
        "align_select": "select Owners.owner_id, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which owners have paid for the most treatments on their dogs? List the owner id and last name.",
        "gold_select": "select Owners.owner_id, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.last_name",
            "select Treatments.professional_id, Owners.last_name",
            "select Treatments.dog_id, Owners.last_name",
            "select Dogs.owner_id, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Owners Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Sizes Owners Treatments",
            "Treatment_Types Owners Treatments",
            "Owners Professionals Treatments"
        ],
        "align_scores": [
            0.9840006828308105,
            0.00018767264555208385,
            0.001558637828566134,
            9.060466982191429e-05,
            0.0004905206151306629,
            8.358000195585191e-05,
            0.8938400149345398,
            0.0001576694194227457
        ],
        "align_select": "select Owners.owner_id, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who paid for the most treatments on the owned dog? List owner id and last name.",
        "gold_select": "select Owners.owner_id, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.last_name",
            "select Treatments.dog_id, Owners.last_name",
            "select Treatments.professional_id, Owners.last_name",
            "select Dogs.owner_id, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Charges Owners Dogs Treatments",
            "Breeds Owners Dogs Treatments",
            "Owners Treatments"
        ],
        "align_scores": [
            0.9781280159950256,
            0.00010299235873389989,
            0.0012824353761970997,
            8.857413922669366e-05,
            0.000740456220228225,
            8.522369898855686e-05,
            0.9820548892021179,
            0.00010412432311568409
        ],
        "align_select": "select Owners.owner_id, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who has spent the most amount of money on dog treatments? List the owner id.",
        "gold_select": "select Owners.owner_id, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id",
            "select Owners.owner_id, Owners.first_name, Owners.last_name",
            "select Owners.owner_id, Owners.first_name, Owners.last_name",
            "select Owners.owner_id, Dogs.owner_id, Dogs.abandoned_yn"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Charges Owners Dogs Treatments",
            "Owners Dogs Treatments",
            "Charges Owners Treatments",
            "Charges Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Sizes Dogs Treatments",
            "Charges Owners Professionals Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9883986115455627,
            0.00012661321670748293,
            0.0110813332721591,
            0.00011319993063807487,
            0.0110813332721591,
            0.00011319993063807487,
            0.00010916515020653605,
            5.73570687265601e-05
        ],
        "align_select": "select Owners.owner_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the unique breed type and size type combinations for dogs?",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select distinct Dogs.breed_code, Dogs.size_code",
            "select unique Dogs.breed_code, Dogs.size_code",
            "select count(distinct Dogs.breed_code), count(distinct Dogs.size_code)",
            "select count(distinct Dogs.breed_code), Dogs.size_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9625768661499023,
            0.0001371130783809349,
            0.0005914118373766541,
            0.00010661363194230944,
            0.9371362924575806,
            0.00018717354396358132,
            0.004815843887627125,
            9.799170220503584e-05
        ],
        "align_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What owners live in the state whose name contains the substring 'North'? List their first name, last name and email address.",
        "gold_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name and Owners.email_address",
            "select Owners.first_name., Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name, t4.c-7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.9913483262062073,
            0.0001054670792655088,
            0.9891939163208008,
            0.00011111459753010422,
            0.02432316169142723,
            0.00012208911357447505,
            0.0006604678928852081,
            0.00011469295714050531
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list any owners in the states which contain substring 'north'. Give first name, last name and email.",
        "gold_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name, t4.c 7",
            "select Owners.first_name., Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name and Owners.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.9937384128570557,
            0.00010463673243066296,
            0.0003512560506351292,
            9.576723095960915e-05,
            0.01979648880660534,
            0.0001280816795770079,
            0.9924922585487366,
            0.00010629266034811735
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the professionals who have done at least two treatments? List all the professionals' IDs, roles, first names.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
            "select Treatments.professional_id, Professionals.role_code, Professionals.first_name",
            "select Professionals.professional_id, Professionals.first_name, Professionals.role_code",
            "select t8.c2, Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.7999662756919861,
            0.00016121096268761903,
            0.19181036949157715,
            0.00013357707939576358,
            0.7912542223930359,
            0.0001753555698087439,
            0.0005163606256246567,
            7.989166624611244e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all professionals who have performed at least two treatments. List their id, role, and first name.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
            "select Treatments.professional_id, Professionals.role_code, Professionals.first_name",
            "select Professionals.professional_id, Professionals.first_name, Professionals.role_code",
            "select t8.c2, Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Sizes Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.7943897247314453,
            8.918793901102617e-05,
            0.025752058252692223,
            9.633418085286394e-05,
            0.7960044145584106,
            9.086667705560103e-05,
            0.0004215270164422691,
            6.722045509377494e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which professionals have done at least two treatments? Show the professional's id, role, and first name.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
            "select Treatments.professional_id, Professionals.role_code, Professionals.first_name",
            "select Professionals.professional_id, Professionals.first_name, Professionals.role_code",
            "select t8.c2, Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.9415081739425659,
            8.853022154653445e-05,
            0.05686027184128761,
            9.05759006855078e-05,
            0.9314498901367188,
            9.005013998830691e-05,
            0.0005231522372923791,
            6.924811168573797e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all professionals who have performed at least two treatment. Give their id, role, and first name.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
            "select Treatments.professional_id, Professionals.role_code, Professionals.first_name",
            "select Professionals.professional_id, Professionals.first_name, Professionals.role_code",
            "select t8.c2, Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.7601437568664551,
            0.00010353136894991621,
            0.06195458769798279,
            0.00011252236436121166,
            0.7997614145278931,
            0.00010818647569976747,
            0.00041090790182352066,
            7.021790224825963e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who did not perform treatments for dogs? Give me their professional id, role code and email address.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.role_code, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.street, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.852238118648529,
            0.9620636105537415,
            0.0002486784942448139,
            0.00031038609449751675,
            0.0002429797314107418,
            0.00029480474768206477,
            0.00027024533483199775,
            0.0002753959270194173
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Name the professionals who did not perform any treatment on dogs and give me their id, role, and email.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.role_code, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.role_code",
            "select Professionals.professional_id, Professionals.first_name, Professionals.street, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.5936444997787476,
            0.09834065288305283,
            0.000785040610935539,
            0.0006455618422478437,
            0.0004025850212201476,
            0.00041133916238322854,
            0.00037607544800266623,
            0.0004972713068127632
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you give me the professional ids, role codes, and emails of those who did not treat dogs?",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.email_address",
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
            "select Professionals.role_code, Professionals.first_name, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.7904114723205566,
            0.8655452728271484,
            0.00033787410939112306,
            0.00040806454489938915,
            0.7904114723205566,
            0.8655452728271484,
            0.000248319556703791,
            0.00022959339548833668
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show me the id, role and email of all the professionals who did not treat the dog.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.email_address",
            "select Professionals.role_code, Professionals.first_name, Professionals.email_address",
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.705051839351654,
            0.009400779381394386,
            0.00031628762371838093,
            0.00011407864803913981,
            0.000400487391743809,
            0.00012292788596823812,
            0.705051839351654,
            0.009400779381394386
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you give me the id, role, and email of the professionals who did not treat any dog?",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.email_address",
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
            "select Professionals.role_code, Professionals.first_name, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.7615491151809692,
            0.0776553526520729,
            0.00030970628722570837,
            0.00017339758051093668,
            0.7615491151809692,
            0.0776553526520729,
            0.0004136976785957813,
            0.0002283393987454474
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show me the number of owners who temporarily do not have any dogs.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Owners.first_name, Owners.last_name",
            "select count(*), Owners.street, Owners.last_name",
            "select count(*), Owners.owner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Charges Owners Dogs",
            "Owners",
            "Treatment_Types Owners"
        ],
        "align_scores": [
            0.9836558103561401,
            0.0018258570926263928,
            0.00027697900077328086,
            0.0032969943713396788,
            0.00016125339607242495,
            0.00015764505951665342,
            0.00036756900954060256,
            0.017462696880102158
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many times does an owner temporarily not own any dog?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Owners.owner_id)",
            "select count(*), Owners.first_name, Owners.last_name",
            "select count(*), Owners.street, Owners.city"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Charges Owners Dogs",
            "Sizes Dogs"
        ],
        "align_scores": [
            0.986656665802002,
            0.8961094617843628,
            0.08401434123516083,
            0.23665031790733337,
            0.00029636765248142183,
            0.0007277514669112861,
            0.00014629174256697297,
            0.00019801271264441311
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the dog ownership ids where at least one owner has no dog.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select Dogs.owner_id",
            "select Dogs.owner_id, Dogs.abandoned_yn",
            "select Dogs.owner_id, Dogs.breed_code",
            "select Dogs.dog_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Dogs",
            "Owners Dogs",
            "Charges Dogs",
            "Sizes Dogs",
            "Treatment_Types Dogs",
            "Professionals Dogs",
            "Dogs Owners"
        ],
        "align_scores": [
            0.8545284271240234,
            0.9651387929916382,
            0.00036932036164216697,
            0.0006932433461770415,
            0.0002544111921451986,
            0.00016702807624824345,
            0.05595037341117859,
            0.023209603503346443
        ],
        "align_select": "select Dogs.owner_id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "For how long does an owner not have any dog (temporary)?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select Owners.street, Owners.city",
            "select Owners.street, Owners.last_name",
            "select Owners.owner_id, Owners.street"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Charges Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.8171510696411133,
            0.00012270911247469485,
            0.0002368675486650318,
            7.465106318704784e-05,
            0.0001877507020253688,
            8.322409848915413e-05,
            0.00020750721159856766,
            7.709418423473835e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the states where owners live and professionals work.",
        "gold_select": "select Owners.state",
        "select_candidates": [
            "select Owners.state, Professionals.state",
            "select Owners.state, Owners.zip_code",
            "select Owners.state, Dogs.age",
            "select distinct Owners.state, Professionals.state"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-UNION-SELECT-FROM",
            "SELECT-FROM-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Breeds Owners Professionals"
        ],
        "align_scores": [
            0.00017215577827300876,
            0.2978343963623047,
            0.00012936300481669605,
            0.0001499498903285712,
            0.00016603339463472366,
            0.0004305187030695379,
            8.842299575917423e-05,
            0.00019090360729023814
        ],
        "align_select": "select Owners.state, Professionals.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Which states contain people from both the owner and professional group?",
        "gold_select": "select Owners.state",
        "select_candidates": [
            "select Owners.state",
            "select Owners.state, Professionals.state",
            "select Owners.state, Owners.zip_code",
            "select Owners.state, Owners.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.5812245011329651,
            0.0006492887623608112,
            0.013905954547226429,
            0.0003621537471190095,
            0.00012773273920174688,
            0.00014256910071708262,
            0.00010736901458585635,
            9.62856865953654e-05
        ],
        "align_select": "select Owners.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What states have both the owners and professional class?",
        "gold_select": "select Owners.state",
        "select_candidates": [
            "select Owners.state",
            "select Owners.state, Professionals.state",
            "select Owners.state, Owners.zip_code",
            "select Owners.state, Dogs.age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Breeds Owners Professionals"
        ],
        "align_scores": [
            0.9945512413978577,
            0.9852294325828552,
            0.962130069732666,
            0.0005252247210592031,
            0.00012624889495782554,
            0.00010524072422413155,
            0.00025974056916311383,
            0.0001336822024313733
        ],
        "align_select": "select Owners.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Show me the states where both owners and professionals live.",
        "gold_select": "select Owners.state",
        "select_candidates": [
            "select Owners.state",
            "select Owners.state, Professionals.state",
            "select Owners.state, Owners.zip_code",
            "select Owners.state, Dogs.age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Breeds Owners Professionals"
        ],
        "align_scores": [
            0.9938367009162903,
            0.42863544821739197,
            0.9281473755836487,
            0.0001185845976579003,
            0.00012816660455428064,
            7.521886436734349e-05,
            0.0003590322157833725,
            0.0001272055960725993
        ],
        "align_select": "select Owners.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Among which states can professional owners and owners live there?",
        "gold_select": "select Owners.state",
        "select_candidates": [
            "select Professionals.state",
            "select Owners.state",
            "select Professionals.state, Owners.city",
            "select Professionals.state, Owners.street"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Breeds Owners Professionals",
            "Charges Professionals"
        ],
        "align_scores": [
            0.09594404697418213,
            0.002202159259468317,
            0.21092085540294647,
            0.003560505574569106,
            0.0003141039051115513,
            0.00012020248686894774,
            0.0002854245831258595,
            0.00012064308975823224
        ],
        "align_select": "select Professionals.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Can you find out the list of states where both owners and professionals live?",
        "gold_select": "select Owners.state",
        "select_candidates": [
            "select Owners.state",
            "select Owners.state, Professionals.state",
            "select Owners.state, Owners.zip_code",
            "select Owners.state, Dogs.age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Breeds Owners Professionals"
        ],
        "align_scores": [
            0.9829962849617004,
            0.05383825674653053,
            0.6682189106941223,
            0.0001775308628566563,
            0.00014784156519453973,
            9.65355648077093e-05,
            0.0002860375097952783,
            0.0001204360814881511
        ],
        "align_select": "select Owners.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Can you find the state where both owners and professionals live?",
        "gold_select": "select Owners.state",
        "select_candidates": [
            "select Owners.state",
            "select Owners.state, Professionals.state",
            "select Owners.state, Owners.zip_code",
            "select Owners.state, Dogs.age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Breeds Owners Professionals"
        ],
        "align_scores": [
            0.992361307144165,
            0.020542362704873085,
            0.9432330131530762,
            0.0001563313853694126,
            0.00014368165284395218,
            7.84159783506766e-05,
            0.0004085625405423343,
            9.642811346566305e-05
        ],
        "align_select": "select Owners.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Can you give me the state names for which both owners and professionals live?",
        "gold_select": "select Owners.state",
        "select_candidates": [
            "select Owners.state",
            "select Owners.state, Professionals.state",
            "select Owners.state, Owners.zip_code",
            "select Owners.state ou Professionals.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Breeds Owners Professionals"
        ],
        "align_scores": [
            0.9894318580627441,
            0.03060859628021717,
            0.9577882289886475,
            0.00011446864664321765,
            0.00014491916226688772,
            7.9066761827562e-05,
            0.04691844433546066,
            0.00013246596790850163
        ],
        "align_select": "select Owners.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Which states contain both owners and professionals?",
        "gold_select": "select Owners.state",
        "select_candidates": [
            "select Owners.state",
            "select Owners.state, Professionals.state",
            "select Owners.state, Owners.zip_code",
            "select Owners.state, Dogs.age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.9916189908981323,
            0.026611506938934326,
            0.4782293140888214,
            0.00013663290883414447,
            0.00011592740338528529,
            7.455076411133632e-05,
            0.00020369015692267567,
            7.92968348832801e-05
        ],
        "align_select": "select Owners.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "Which states have both homeowners and professionals living in them? List them.",
        "gold_select": "select Owners.state",
        "select_candidates": [
            "select Owners.state",
            "select Owners.state, Professionals.state",
            "select Owners.state, Owners.zip_code",
            "select Owners.state, Professionals.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-INTERSECT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Professionals",
        "table_candidates": [
            "Owners Professionals",
            "Treatment_Types Owners Professionals",
            "Sizes Owners Professionals",
            "Charges Owners Professionals",
            "Breeds Owners Professionals"
        ],
        "align_scores": [
            0.9888651371002197,
            0.00026844776584766805,
            0.9501650333404541,
            0.00019181519746780396,
            0.00014549806655850261,
            8.44407913973555e-05,
            0.0001774526754161343,
            8.273145067505538e-05
        ],
        "align_select": "select Owners.state",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM"
    },
    {
        "question": "What is the average age of the dogs that have undergone any treatment?",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select Treatments.dog_id, avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age), Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9902961850166321,
            0.9732613563537598,
            0.000399281969293952,
            0.0009821988642215729,
            0.0005911971093155444,
            0.0011092900531366467,
            0.000156431007781066,
            0.00021006245515309274
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the average age of the dogs after they have been given any treatment?",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select avg(Dogs.age), Treatments.dog_id",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age), Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments",
            "Dogs"
        ],
        "align_scores": [
            0.9930534958839417,
            0.0012925323098897934,
            0.00018347080913372338,
            0.0008552827057428658,
            0.0005525947781279683,
            0.00024483713787049055,
            0.00012662071094382554,
            0.0004137603973504156
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the average age of the treated dogs?",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age), Treatments.dog_id",
            "select avg(Dogs.age), t7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments"
        ],
        "align_scores": [
            0.9947280287742615,
            7.489949348382652e-05,
            0.000752892519813031,
            0.00010417686280561611,
            0.00011617717245826498,
            6.189731357153505e-05,
            0.0004321467422414571,
            7.25737918401137e-05
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the average age of all dogs who have been treated.",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select the avg(Dogs.age)",
            "select avg(Dogs.age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments"
        ],
        "align_scores": [
            0.9782781600952148,
            7.432013808283955e-05,
            0.001208480796776712,
            9.784416761249304e-05,
            0.0006600752240046859,
            0.00012057372805429623,
            0.9782781600952148,
            7.432013808283955e-05
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find out the average age of the dogs who underwent treatments.",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age)",
            "select the avg(Dogs.age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9541465044021606,
            7.805540371919051e-05,
            0.0009347483864985406,
            9.789102477952838e-05,
            0.9541465044021606,
            7.805540371919051e-05,
            0.0006112304981797934,
            0.00011819726205430925
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you find the average age of the dogs which went through treatments?",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select the avg(Dogs.age)",
            "select avg(Dogs.age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments"
        ],
        "align_scores": [
            0.9714508056640625,
            0.00202252552844584,
            0.0011506961891427636,
            0.0006558182067237794,
            0.0006447499617934227,
            0.0003150173870380968,
            0.9714508056640625,
            0.00202252552844584
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the average age of the dogs who underwent treatments.",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select Treatments.date_of_treatment, avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age), Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments"
        ],
        "align_scores": [
            0.9724492430686951,
            7.248912879731506e-05,
            0.0002137420087819919,
            7.758758147247136e-05,
            0.000786914664786309,
            8.972518116934225e-05,
            0.00017284261411987245,
            5.7074161304626614e-05
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Who have done treatments on more than 2 patients in the state of Indiana? List his or her id, last name, and cell phone.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select t8.c2, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Owners Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Owners Dogs Professionals Treatments",
            "Charges Professionals Treatments",
            "Treatment_Types Owners Professionals Treatments"
        ],
        "align_scores": [
            0.0984954908490181,
            0.00013981420488562435,
            0.05261536315083504,
            0.00011733281280612573,
            0.0007086522527970374,
            0.00010586528514977545,
            0.0004665082087740302,
            9.219895582646132e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Find the id, last name, cell phone of professionals who live in the state of Indiana or have performed more than 2 treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select Professionals.role_code, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.8206019401550293,
            0.020572926849126816,
            0.5292180776596069,
            0.01760762184858322,
            0.0003077967558056116,
            0.00019577864441089332,
            0.023990605026483536,
            0.0016118898056447506
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the professional ids, last names, and cell numbers of those who live in the state of Indiana and have performed more than two treatments?",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select Professionals.role_code, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.7492988109588623,
            0.00011805602116510272,
            0.014861520379781723,
            9.586389205651358e-05,
            0.0005163257010281086,
            7.66925877542235e-05,
            0.003558503231033683,
            9.681379742687568e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "For professionals living in the state of Indiana who have performed more than 2 treatments, can you give the last name, number and cell phone of these professionals?",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.last_name, Professionals.cell_number, Professionals.home_phone",
            "select Professionals.last_name, Professionals.cell_number, Professionals.email_address",
            "select Professionals.last_name, Professionals.cell_number, Professionals.role_code1",
            "select Professionals.last_name, Professionals.cell_number, Professionals.first_name3"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.0029614767991006374,
            0.0001545700361020863,
            0.00032978341914713383,
            0.00014655587438028306,
            0.0007033508736640215,
            0.0001983441470656544,
            0.0004993243492208421,
            0.00017239658336620778
        ],
        "align_select": "select Professionals.last_name, Professionals.cell_number, Professionals.home_phone",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Can you give me the names of dogs which haven't cost their owners more than 1000 to treat? List them by dog id.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.dog_id, Dogs.name",
            "select Dogs.dog_id",
            "select Dogs.dog_id, Dogs.breed_code",
            "select Dogs.dog_id, Dogs.owner_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Owners Dogs Treatments"
        ],
        "align_scores": [
            0.0005331945139914751,
            0.0037867671344429255,
            0.08163058012723923,
            0.09980256110429764,
            0.0002741160278674215,
            0.0005145049653947353,
            0.00021067867055535316,
            0.0005126725882291794
        ],
        "align_select": "select Dogs.dog_id, Dogs.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all the dog names, which dogs have not cost their owners more than 1000 for treatments?",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Treatments.cost_of_treatment",
            "select Dogs.name, Treatments.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Owners Dogs Treatments"
        ],
        "align_scores": [
            0.3241044580936432,
            0.011075862683355808,
            0.0008426159038208425,
            0.0012293444015085697,
            0.0005109439371153712,
            0.0012279523070901632,
            0.0003749735769815743,
            0.0007672577048651874
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the first names used by professionals or owners which are not used as dog names? List them.",
        "gold_select": "select Owners.first_name",
        "select_candidates": [
            "select Professionals.first_name",
            "select Owners.first_name",
            "select Professionals.role_code",
            "select Owners.first_name, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-UNION-SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs Professionals",
        "table_candidates": [
            "Owners Dogs Professionals",
            "Treatment_Types Owners Dogs Professionals",
            "Sizes Owners Dogs Professionals",
            "Owners Professionals",
            "Charges Owners Dogs Professionals",
            "Breeds Owners Dogs Professionals",
            "Charges Owners Professionals"
        ],
        "align_scores": [
            0.8041353225708008,
            0.9274259209632874,
            0.9261306524276733,
            0.9612274765968323,
            0.0012492986861616373,
            0.0021002835128456354,
            0.0002378578792558983,
            0.00022278714459389448
        ],
        "align_select": "select Professionals.first_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What are the professional or owner first names which are not used as dog names?",
        "gold_select": "select Owners.first_name",
        "select_candidates": [
            "select Professionals.first_name",
            "select Dogs.name, Professionals.role_code",
            "select Professionals.city, Professionals.role_code",
            "select Dogs.name, Professionals.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-UNION-SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs Professionals",
        "table_candidates": [
            "Owners Dogs Professionals",
            "Treatment_Types Owners Dogs Professionals",
            "Sizes Owners Dogs Professionals",
            "Charges Owners Dogs Professionals",
            "Sizes Dogs Professionals",
            "Owners Professionals",
            "Owners Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9646357893943787,
            0.9841570258140564,
            0.0002208814403275028,
            0.00019277447427157313,
            0.00031780192512087524,
            0.00022290676133707166,
            0.0009459159919060767,
            0.0009848943445831537
        ],
        "align_select": "select Professionals.first_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What first names are professional or owner names but are not used to name a dog? Exmplify.",
        "gold_select": "select Owners.first_name",
        "select_candidates": [
            "select Professionals.first_name",
            "select Professionals.role_code",
            "select Owners.first_name",
            "select Professionals.role_code, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-UNION-SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs Professionals",
        "table_candidates": [
            "Owners Dogs Professionals",
            "Treatment_Types Owners Dogs Professionals",
            "Sizes Owners Dogs Professionals",
            "Charges Owners Dogs Professionals",
            "Breeds Owners Dogs Professionals",
            "Owners Dogs Professionals Treatments",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.9427291750907898,
            0.9595432281494141,
            0.006816900335252285,
            0.015749160200357437,
            0.9580162763595581,
            0.9712058305740356,
            0.00042547695920802653,
            0.0003939701127819717
        ],
        "align_select": "select Professionals.first_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Is there any first name that is used professionally (owners) but not used as dogs' name? List them.",
        "gold_select": "select Owners.first_name",
        "select_candidates": [
            "select Professionals.first_name",
            "select Owners.first_name",
            "select Professionals.role_code",
            "select Owners.first_name, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-UNION-SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs Professionals",
        "table_candidates": [
            "Owners Dogs Professionals",
            "Treatment_Types Owners Dogs Professionals",
            "Breeds Owners Dogs Professionals",
            "Sizes Dogs Professionals",
            "Charges Dogs Professionals",
            "Dogs Professionals",
            "Treatment_Types Dogs Professionals"
        ],
        "align_scores": [
            0.979304313659668,
            0.1617804318666458,
            0.9850689768791199,
            0.11698682606220245,
            0.025449128821492195,
            0.007841666229069233,
            0.0002861575339920819,
            0.00017563065921422094
        ],
        "align_select": "select Professionals.first_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Are there any first names which are used by professional people or owners but are not used as dog names?",
        "gold_select": "select Owners.first_name",
        "select_candidates": [
            "select Professionals.first_name",
            "select Professionals.role_code",
            "select Professionals.first_name, Owners.first_name",
            "select Professionals.professional_id, Professionals.role_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-UNION-SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs Professionals",
        "table_candidates": [
            "Owners Dogs Professionals",
            "Dogs Professionals",
            "Treatment_Types Owners Dogs Professionals",
            "Charges Owners Dogs Professionals",
            "Sizes Owners Dogs Professionals",
            "Charges Dogs Professionals",
            "Sizes Dogs Professionals",
            "Sizes Dogs Owners Professionals"
        ],
        "align_scores": [
            0.9348417520523071,
            0.9592674970626831,
            0.0028344669844955206,
            0.006679372861981392,
            0.9793947339057922,
            0.9804474115371704,
            0.0011651581153273582,
            0.0015031046932563186
        ],
        "align_select": "select Professionals.first_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Give me the list of the first names that are used for professions or owners but are not used as dog names.",
        "gold_select": "select Owners.first_name",
        "select_candidates": [
            "select Professionals.first_name",
            "select Professionals.role_code",
            "select Professionals.first_name, Owners.first_name",
            "select Owners.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-UNION-SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs Professionals",
        "table_candidates": [
            "Owners Dogs Professionals",
            "Treatment_Types Owners Dogs Professionals",
            "Charges Owners Dogs Professionals",
            "Dogs Professionals",
            "Sizes Owners Dogs Professionals",
            "Breeds Owners Dogs Professionals",
            "Charges Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.947672963142395,
            0.960453987121582,
            0.04685167595744133,
            0.22364600002765656,
            0.9778818488121033,
            0.9744917154312134,
            0.9037102460861206,
            0.9183253049850464
        ],
        "align_select": "select Professionals.first_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show me the professional or owner's first names that are not dogs' names.",
        "gold_select": "select Owners.first_name",
        "select_candidates": [
            "select Professionals.first_name",
            "select distinct Professionals.first_name",
            "select Professionals.first_name, Owners.first_name",
            "select Dogs.name, Professionals.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-UNION-SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs Professionals",
        "table_candidates": [
            "Owners Dogs Professionals",
            "Treatment_Types Owners Dogs Professionals",
            "Dogs Professionals",
            "Breeds Owners Dogs Professionals",
            "Treatment_Types Dogs Professionals",
            "Sizes Dogs Professionals",
            "Charges Dogs Professionals",
            "Dogs Owners Professionals"
        ],
        "align_scores": [
            0.007040699012577534,
            0.0833163782954216,
            0.022333549335598946,
            0.09003160148859024,
            0.03522764891386032,
            0.00769852427765727,
            0.0008839159272611141,
            0.0011480881366878748
        ],
        "align_select": "select Professionals.first_name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which of these professionals didn't work with dogs? Can you show us the professional's id, role and email?",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.email_address",
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
            "select Professionals.role_code, Professionals.first_name, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Professionals",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9032514095306396,
            0.8882690668106079,
            0.0003174089069943875,
            0.00032244264730252326,
            0.9032514095306396,
            0.8882690668106079,
            0.0006590330158360302,
            0.00044588162563741207
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Who were the professionals who operated no treatment on dogs? List the professional's id, role and email.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.email_address",
            "select Professionals.professional_id, Professionals.street, Professionals.email_address",
            "select Professionals.professional_id, Professionals.city, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.18836869299411774,
            0.006894480437040329,
            0.0003112083941232413,
            0.00015125352365430444,
            0.00044319231528788805,
            0.00019271748897153884,
            0.0004004178917966783,
            0.0001635570079088211
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What professional did not operate any treatments to dogs? Show me their ids, roles and emails.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.role_code, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.street, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9185233116149902,
            0.9622565507888794,
            0.0005564032471738756,
            0.0006957349251024425,
            0.000429975101724267,
            0.0004434517177287489,
            0.00038166847662068903,
            0.0004511665611062199
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Which dog owners are the most numerous? List their owner ids, first names and last names.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.first_name, Owners.last_name",
            "select Dogs.owner_id, Owners.first_name, Owners.last_name",
            "select Dogs.owner_id, Dogs.owner_id, Owners.last_name",
            "select Dogs.dog_id, Owners.first_name, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.9908607006072998,
            0.00011437250941526145,
            0.2134416103363037,
            0.00010236776870442554,
            0.00042796620982699096,
            9.893655078485608e-05,
            0.00046427990309894085,
            9.372543718200177e-05
        ],
        "align_select": "select Owners.owner_id, Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Could you tell me which owner has the most dogs? List the owner ids, first name and last name.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.first_name, Owners.last_name",
            "select Dogs.owner_id, Owners.first_name, Owners.last_name",
            "select Owners.owner_id-, Owners.first_name, Owners.last_name",
            "select Sizes.size_code, Owners.first_name, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs",
            "Breeds Owners Dogs",
            "Charges Sizes Dogs"
        ],
        "align_scores": [
            0.9892702102661133,
            9.90843036561273e-05,
            0.8788114190101624,
            9.289437002735212e-05,
            0.002676371717825532,
            7.55128130549565e-05,
            0.00023883664107415825,
            7.694135274505243e-05
        ],
        "align_select": "select Owners.owner_id, Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who has the most dogs? List the owner ids, first names and last names.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.first_name, Owners.last_name",
            "select Dogs.owner_id, Owners.first_name, Owners.last_name",
            "select Sizes.size_code, Owners.first_name, Owners.last_name",
            "select Owners.owner_id-, Owners.first_name, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.9940052628517151,
            9.771139593794942e-05,
            0.8442449569702148,
            8.986407920019701e-05,
            0.0002853962650988251,
            7.517053018091246e-05,
            0.003020790172740817,
            7.72099883761257e-05
        ],
        "align_select": "select Owners.owner_id, Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who has the most dogs? Show me the owner id, first name and last name.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.first_name, Owners.last_name",
            "select Dogs.owner_id, Owners.first_name, Owners.last_name",
            "select Sizes.size_code, Owners.first_name, Owners.last_name",
            "select Sizes.size_description, Owners.first_name, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.9941962957382202,
            8.821228402666748e-05,
            0.5529800653457642,
            8.321885979967192e-05,
            0.0002867058792617172,
            7.119829388102517e-05,
            0.0001628216268727556,
            6.27201225142926e-05
        ],
        "align_select": "select Owners.owner_id, Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who has the most dogs at home? Return the names of the owner followed by first name, last name, owner id, first name.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.last_name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Owners.owner_id",
            "select Owners.first_name, Owners.last_name, Owners.owner_id, Owners.first_name",
            "select Owners.first_name, Owners.last_name, Owners.owner_id, Owners.first_name",
            "select Owners.first_name, Owners.last_name, Owners.owner_id.c1"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Charges Owners Dogs",
            "Charges Sizes Dogs"
        ],
        "align_scores": [
            0.002192422281950712,
            9.389485785504803e-05,
            0.06279514729976654,
            9.54537681536749e-05,
            0.06279514729976654,
            9.54537681536749e-05,
            0.0003659132053144276,
            6.280835077632219e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.owner_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who owns the most dogs? List the owner ids, first names, and last names of the owners.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.first_name, Owners.last_name",
            "select Dogs.owner_id, Owners.first_name, Owners.last_name",
            "select Sizes.size_code, Owners.first_name, Owners.last_name",
            "select Dogs.dog_id, Owners.first_name, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.9871680736541748,
            0.00012394197983667254,
            0.9147919416427612,
            0.00010823456250363961,
            0.0003059696464333683,
            7.79576730565168e-05,
            0.0005020318203605711,
            8.480149699607864e-05
        ],
        "align_select": "select Owners.owner_id, Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "The owner names have been sorted according to the number of dogs they have. Show me first name, last name and owner ID of the owner with the most dogs.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.last_name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Owners.owner_id",
            "select Owners.first_name, Owners.last_name, and Owners.owner_id",
            "select Owners.first_name, Owners.last_name, owner_Owners.owner_id",
            "select Owners.first_name, Owners.last_name, Owners.owner_id."
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs"
        ],
        "align_scores": [
            0.981386125087738,
            9.684058022685349e-05,
            0.9818080067634583,
            9.388859325554222e-05,
            0.0007838730816729367,
            9.073506225831807e-05,
            0.004738250747323036,
            8.524743316229433e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.owner_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which professionals did two or more treatments? List their ids, roles, and first names.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "select_candidates": [
            "select Treatments.professional_id, Professionals.role_code, Professionals.first_name",
            "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
            "select t8.c2, Professionals.role_code, Professionals.first_name",
            "select Professionals.professional_id, Professionals.first_name, Professionals.role_code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.35746926069259644,
            9.76392111624591e-05,
            0.9596844911575317,
            9.835456148721278e-05,
            0.0006642203079536557,
            6.388589827110991e-05,
            0.953835666179657,
            0.0001008712497423403
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me which breeds have the most dogs? List the breed names.",
        "gold_select": "select Breeds.breed_name",
        "select_candidates": [
            "select Breeds.breed_name",
            "select Breeds.breed_name, Dogs.breed_code",
            "select Breeds.breed_code, Breeds.breed_name",
            "select Breeds.breed_name (Dogs.breed_code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs"
        ],
        "align_scores": [
            0.9936916828155518,
            0.00011110993364127353,
            0.006229749880731106,
            8.212135435314849e-05,
            0.010120833292603493,
            8.588043419877067e-05,
            0.02364232763648033,
            8.52136145113036e-05
        ],
        "align_select": "select Breeds.breed_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the dog breed name, give me a list of breeds with the most dogs.",
        "gold_select": "select Breeds.breed_name",
        "select_candidates": [
            "select Breeds.breed_name",
            "select Breeds.breed_name, Dogs.breed_code",
            "select Breeds.breed_name, top-ten-dog-breeds",
            "select Breeds.breed_name, list(Dogs.breed_code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs"
        ],
        "align_scores": [
            0.9874569773674011,
            0.00017360702622681856,
            0.010643649846315384,
            9.800909174373373e-05,
            0.0018030753126367927,
            6.998432945692912e-05,
            0.01081815268844366,
            8.27562325866893e-05
        ],
        "align_select": "select Breeds.breed_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who owns the dog who has had the most expensive treatments? List their owner id and last name.",
        "gold_select": "select Owners.owner_id, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.last_name",
            "select Treatments.professional_id, Owners.last_name",
            "select Treatments.dog_id, Owners.last_name",
            "select Dogs.owner_id, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Sizes Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Dogs Treatments"
        ],
        "align_scores": [
            0.9582865834236145,
            0.9817865490913391,
            0.0005315387970767915,
            0.0005969924386590719,
            0.0004713756497949362,
            0.0006037522107362747,
            0.2924334704875946,
            0.9290332198143005
        ],
        "align_select": "select Owners.owner_id, Owners.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How about giving me the owner id and last name of the owner who spend the most on treatments to his dogs?",
        "gold_select": "select Owners.owner_id, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.last_name",
            "select Treatments.dog_id, Owners.last_name",
            "select Treatments.professional_id, Owners.last_name",
            "select Dogs.owner_id, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Owners Treatments",
            "Owners Professionals Treatments"
        ],
        "align_scores": [
            0.9811213612556458,
            8.476382936351001e-05,
            0.0007846083608455956,
            7.822799670975655e-05,
            0.00062199478270486,
            7.747875497443601e-05,
            0.9008533954620361,
            8.456990326521918e-05
        ],
        "align_select": "select Owners.owner_id, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who spends the most on his or her dog's treatments? Show me the owner id, owner id, last name of the owner spending the most on treatment of his or her dog.",
        "gold_select": "select Owners.owner_id, Owners.last_name",
        "select_candidates": [
            "select Treatments.dog_id, Owners.owner_id, Owners.last_name",
            "select Owners.owner_id, Owners.first_name, Owners.last_name",
            "select Treatments.professional_id, Owners.owner_id, Owners.last_name",
            "select t8.c1, Owners.owner_id, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Treatments",
            "Owners Dogs Treatments",
            "Sizes Owners Treatments",
            "Treatment_Types Owners Treatments",
            "Owners Professionals Treatments",
            "Charges Owners Treatments",
            "Sizes Owners Dogs Treatments",
            "Owners Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.0006814567605033517,
            9.285133273806423e-05,
            0.0009129359386861324,
            9.199046326102689e-05,
            0.0007332789245992899,
            9.063024481292814e-05,
            0.0004176580114290118,
            8.119580161292106e-05
        ],
        "align_select": "select Treatments.dog_id, Owners.owner_id, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the description of Treatment Type that costs least money in total.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_description, t7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9945148229598999,
            5.640415838570334e-05,
            0.00048690431867726147,
            5.637425783788785e-05,
            0.00011803552479250357,
            5.2610219427151605e-05,
            0.00053138576913625,
            7.434600411215797e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the description of the treatment type that costs the least amount of money?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_description, t7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9911763668060303,
            0.9944751858711243,
            0.00040484723285771906,
            0.0004937539342790842,
            0.00014746298256795853,
            0.00012051465455442667,
            0.0007818781887181103,
            0.0005536224925890565
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Describe the treatment type that costs the least amount in total.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Sizes Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9943007230758667,
            6.539419700857252e-05,
            0.0006582073401659727,
            5.399151996243745e-05,
            0.0005333813023753464,
            6.167954416014254e-05,
            0.0002108325861627236,
            5.378960122470744e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Describe the treatment type whose total cost is the lowest.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_description, t7"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.0004724953614640981,
            5.4319036280503497e-05,
            0.9955839514732361,
            5.674496424035169e-05,
            9.97989991446957e-05,
            5.204648186918348e-05,
            0.00044412139686755836,
            5.830505324411206e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give me the details of the treatment type whose total cost is the lowest?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, t7"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Charges Treatments",
            "Owners Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.0013921738136559725,
            7.863388600526378e-05,
            0.00021278386702761054,
            6.274729094002396e-05,
            0.9941598176956177,
            7.235252269310877e-05,
            0.000716707028914243,
            6.627941911574453e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please give me the description which shows the treatment type with the lowest cost.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9930850267410278,
            0.9949994087219238,
            0.00041699723806232214,
            0.0004342664615251124,
            0.0007585949497297406,
            0.0006079217419028282,
            0.00015766250726301223,
            0.0001170424948213622
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What dog owners have paid the largest total to treat their dog? List the owner id and zip code.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code",
            "select Treatments.dog_id, Owners.zip_code",
            "select Dogs.dog_id, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Charges Owners Dogs Treatments",
            "Sizes Dogs Treatments",
            "Owners Treatments",
            "Sizes Owners Treatments"
        ],
        "align_scores": [
            0.9813570976257324,
            0.00014606815238948911,
            0.6404609680175781,
            0.00015148792590480298,
            0.05446530133485794,
            0.00017485718126408756,
            0.0006578488973900676,
            9.97140450635925e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the owner id and zip code of the owner who spent the most money on their dog.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code",
            "select Treatments.dog_id, Owners.zip_code",
            "select Sizes.size_code, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Charges Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Breeds Owners Dogs Treatments",
            "Breeds Dogs Treatments"
        ],
        "align_scores": [
            0.9907053112983704,
            9.400128328707069e-05,
            0.8957074284553528,
            9.412093641003594e-05,
            0.0006677757482975721,
            6.700912490487099e-05,
            0.0004986751591786742,
            7.176335930125788e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the owner id of the owner who has paid most money on their dog in total. List the zip code of the owner and his/her total expenditure on treating the dogs.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Owners.owner_id, Owners.zip_code, sum(Treatments.professional_id)",
            "select Dogs.owner_id, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code, sum(Treatments.professional_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Sizes Dogs Treatments",
            "Charges Dogs Treatments",
            "Owners Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9802371859550476,
            9.46104628383182e-05,
            0.0003032941895071417,
            7.816789002390578e-05,
            0.9647350907325745,
            9.93658832157962e-05,
            0.0003024945908691734,
            7.594001363031566e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the owner id and zip code of the owner who spends the most on her/his dogs?",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Sizes.size_code, Owners.zip_code",
            "select Owners.owner_id-, Owners.zip_code",
            "select Owners.owner_id, t4c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs",
            "Breeds Owners Dogs",
            "Owners Dogs Treatments"
        ],
        "align_scores": [
            0.9918351173400879,
            8.283423085231334e-05,
            0.0005879048258066177,
            8.046955190366134e-05,
            0.003224479267373681,
            7.987215940374881e-05,
            0.002314712153747678,
            8.534861262887716e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the owner id and zip code of the person who spent the most money on their dog's treatments?",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Treatments.dog_id, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code",
            "select t8.c1, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Owners Treatments",
            "Sizes Owners Dogs Treatments",
            "Sizes Owners Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Owners Treatments"
        ],
        "align_scores": [
            0.987211287021637,
            0.00012941297609359026,
            0.0028313903603702784,
            0.00010506105900276452,
            0.9466035962104797,
            0.0001330709783360362,
            0.0005344416131265461,
            7.386103243334219e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the owner id and zip code of the person spending the most money on the treatment of his/her dogs?",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Treatments.dog_id, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code",
            "select t8.c1, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Charges Owners Dogs Treatments",
            "Owners Treatments",
            "Owners Professionals Treatments"
        ],
        "align_scores": [
            0.9879230856895447,
            0.00011260296741966158,
            0.0008732574060559273,
            8.592483209213242e-05,
            0.9230530261993408,
            0.00011585922766244039,
            0.000567992334254086,
            7.399144669761881e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the professional ids and cell phones of those professionals who have done at least two types of treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Treatments.professional_id, Professionals.cell_number",
            "select Professionals.professional_id, Professionals.cell_number",
            "select Professionals.first_name, Professionals.cell_number",
            "select t8.c2, Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.53561931848526,
            0.00017155715613625944,
            0.969538152217865,
            0.0003423578746151179,
            0.00032424164237454534,
            8.991816866910085e-05,
            0.0006128352251835167,
            8.536514360457659e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "In which profession the professionals can operate only two or more types of treatments? Please provide their id and cellphone number(s).",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.cell_number",
            "select Professionals.first_name, Professionals.cell_number",
            "select Professionals.role_code, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.6467975378036499,
            0.0008084829896688461,
            0.00036210421239957213,
            0.000119153039122466,
            0.34550631046295166,
            0.0005506310262717307,
            0.020710580050945282,
            0.0005020715179853141
        ],
        "align_select": "select Professionals.professional_id, Professionals.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the number and cell phone of the professionals who operate two or more types of treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.home_phone, Professionals.cell_number",
            "select Professionals.cell_number, Professionals.home_phone",
            "select Professionals.role_code, Professionals.cell_number",
            "select Professionals.cell_number, Professionals.role_code3"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.020219653844833374,
            0.00011615436233114451,
            0.0019309446215629578,
            9.823045547818765e-05,
            0.0013526554685086012,
            7.940367504488677e-05,
            0.0007337640854530036,
            8.211845124606043e-05
        ],
        "align_select": "select Professionals.home_phone, Professionals.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you find the number and cell of the professionals who operate two or more types of treatments?",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select count(*), Professionals.cell_number",
            "select Professionals.cell_number, count(*)",
            "select Professionals.cell_number, count(distinct Professionals.first_name)",
            "select Professionals.state, Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Sizes Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.8912119269371033,
            0.00038606670568697155,
            0.15047447383403778,
            0.00024828361347317696,
            0.00026417613844387233,
            7.8049604780972e-05,
            0.0005607620696537197,
            0.00010971093433909118
        ],
        "align_select": "select count(*), Professionals.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you find the number and cell number of the professionals who operate two or more different treatments?",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select count(*), Professionals.cell_number",
            "select Professionals.first_name, Professionals.cell_number",
            "select count(distinct Professionals.first_name), Professionals.cell_number",
            "select count(Professionals.first_name), Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.9623905420303345,
            0.0017235670238733292,
            0.0005198816652409732,
            0.00011380136857042089,
            0.0003184801316820085,
            0.00010658700193744153,
            0.00028705925797112286,
            0.00011896458454430103
        ],
        "align_select": "select count(*), Professionals.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the number, id, and cell number of all the professionals who operate two or more types of treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.cell_number",
            "select Professionals.professional_id, Professionals.first_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.professional_id, Professionals.cell_number",
            "select count(*), Professionals.professional_id, Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments"
        ],
        "align_scores": [
            0.0002458373783156276,
            8.302845526486635e-05,
            0.0003556711308192462,
            8.780592179391533e-05,
            0.00043123276554979384,
            8.152973896358162e-05,
            0.7686415314674377,
            0.00025960587663576007
        ],
        "align_select": "select count(*), Professionals.professional_id, Professionals.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the first name and last name of the professionals who did treatment at cost below average?",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select t6).c2, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9804813265800476,
            0.0005888082669116557,
            0.04134077578783035,
            0.00011827969137812033,
            0.00047445454401895404,
            9.752522601047531e-05,
            0.0007948368438519537,
            0.00011274350981693715
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are professionals who've operated treatments that cost less than the average? Give me their first names and last names.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select Dogs.abandoned_yn, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.8982973694801331,
            0.00013501374633051455,
            0.09199512749910355,
            8.131156937452033e-05,
            0.0004329450021032244,
            9.763168054632843e-05,
            0.0006718726945109665,
            0.00011435899796197191
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the date of each treatment, along with the first name of the professional who operated it.",
        "gold_select": "select Treatments.date_of_treatment, Professionals.first_name",
        "select_candidates": [
            "select Treatments.date_of_treatment, Professionals.first_name",
            "select Treatments.date_of_treatment, Professionals.role_code",
            "select Treatments.cost_of_treatment, Professionals.first_name",
            "select Treatments.date_of_treatment, Professionals.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.9590480327606201,
            0.06522731482982635,
            0.0003839888668153435,
            0.00014219085278455168,
            0.000903199368622154,
            0.0005656454595737159,
            0.00043119408655911684,
            0.0001833130809245631
        ],
        "align_select": "select Treatments.date_of_treatment, Professionals.first_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the date of each treatment, together with the first name of the professional who operated it?",
        "gold_select": "select Treatments.date_of_treatment, Professionals.first_name",
        "select_candidates": [
            "select Treatments.date_of_treatment, Professionals.first_name",
            "select Treatments.date_of_treatment, Professionals.role_code",
            "select Treatments.dog_id, Professionals.first_name",
            "select Treatments.date_of_treatment, Professionals.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.9726698398590088,
            0.07998016476631165,
            0.0004856046289205551,
            0.00016461404447909445,
            0.0005510248010978103,
            0.00019803838222287595,
            0.0005685585783794522,
            0.00020616105757653713
        ],
        "align_select": "select Treatments.date_of_treatment, Professionals.first_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the cost of each treatment and the corresponding treatment type description? List them.",
        "gold_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_code_description",
            "select Treatments.dog_id, Treatment_Types.treatment_type_description",
            "select Treatments.treatment_type_code, Treatment_Types.treatment_type_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9951155185699463,
            0.994530975818634,
            0.9916855096817017,
            0.9921903014183044,
            0.0005506690358743072,
            0.0004109323490411043,
            0.00042625764035619795,
            0.00018536516290623695
        ],
        "align_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the cost and treatment type descriptions of each treatment?",
        "gold_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_code_description",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9930691719055176,
            0.00010290076897945255,
            0.9909321069717407,
            9.501723252469674e-05,
            0.0002792588493321091,
            6.531841063406318e-05,
            0.02053622156381607,
            0.00011714007268892601
        ],
        "align_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the cost and treatment type description of each treatment?",
        "gold_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_code_description",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9932867884635925,
            0.00010150934394914657,
            0.9920587539672852,
            9.241267252946272e-05,
            0.00031498284079134464,
            6.35338801657781e-05,
            0.00036833094782195985,
            8.073396020336077e-05
        ],
        "align_select": "select Treatments.cost_of_treatment, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list each owner's first name, last name, and the size of his/her dog?",
        "gold_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Dogs.size_code",
            "select Owners.first_name, Owners.last_name, Owners.city",
            "select Owners.first_name, Owners.last_name, Dogs.size_code, Owners.owner_id",
            "select Owners.first_name, Owners.last_name, Dogs.size_code, Owners.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Owners Dogs",
            "Dogs Owners Dogs"
        ],
        "align_scores": [
            0.9918054342269897,
            0.9927143454551697,
            0.0005288386018946767,
            0.00024082878371700644,
            0.00020513399795163423,
            0.00029938964871689677,
            0.0005477441591210663,
            0.0009696290362626314
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all owners' first names, last names, and the size of their dogs.",
        "gold_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Dogs.size_code",
            "select Owners.first_name, Owners.last_name, Owners.city",
            "select Owners.first_name, Owners.last_name, Dogs.size_code",
            "select Owners.first_name, Owners.last_name, Dogs.size_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.9923648834228516,
            0.00019389306544326246,
            0.0005040480755269527,
            0.00015132939734030515,
            0.9923648834228516,
            0.00019389306544326246,
            0.9923648834228516,
            0.00019389306544326246
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me each owner's first name, last name, and the size of his/her dog.",
        "gold_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Dogs.size_code",
            "select Owners.first_name, Owners.last_name, Owners.city",
            "select Owners.first_name, Owners.last_name, Dogs.size_code, Owners.owner_id",
            "select Owners.first_name, Owners.last_name, Dogs.size_code, Owners.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Owners Dogs",
            "Dogs Owners Dogs"
        ],
        "align_scores": [
            0.9920030832290649,
            0.9931221604347229,
            0.00046519734314642847,
            0.0002495816152077168,
            0.00022806916967965662,
            0.00029200303833931684,
            0.0005280045443214476,
            0.0008222938631661236
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the owners' first names, last names, and the sizes of their dogs?",
        "gold_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Dogs.size_code",
            "select Owners.first_name, Owners.last_name, Owners.city",
            "select Owners.first_name, Owners.last_name, Dogs.size_code, Owners.owner_id",
            "select Owners.first_name, Owners.last_name, Dogs.size_code, Owners.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Owners Dogs",
            "Charges Owners Dogs"
        ],
        "align_scores": [
            0.9916679859161377,
            0.00021010031923651695,
            0.0005609032232314348,
            0.00013785848568659276,
            0.0002223533665528521,
            9.90282860584557e-05,
            0.0007287036278285086,
            0.00012923835311084986
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list for each person, his/her first name, last name, and the size of their dog.",
        "gold_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Dogs.size_code",
            "select Owners.first_name, Owners.last_name, Owners.city",
            "select distinct Owners.first_name, Owners.last_name, Dogs.size_code",
            "select Owners.first_name, Owners.last_name, Dogs.size_code, Owners.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Charges Owners Dogs",
            "Breeds Owners Dogs",
            "Charges Sizes Dogs"
        ],
        "align_scores": [
            0.9885413646697998,
            0.9869571924209595,
            0.00044883022201247513,
            0.0003509360831230879,
            0.011003918945789337,
            0.0003634743334259838,
            0.0006886211922392249,
            0.0009378443355672061
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the first names, last names, and sizes of all owners' dogs.",
        "gold_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Dogs.size_code",
            "select Owners.first_name, Owners.last_name, Owners.city",
            "select distinct Owners.first_name, Owners.last_name, Dogs.size_code",
            "select Owners.first_name, Owners.last_name, Dogs.size_code, Dogs.owner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.9871150255203247,
            9.01786916074343e-05,
            0.0006492101238109171,
            0.00013020329060964286,
            0.009532323107123375,
            8.108439214993268e-05,
            0.00015680701471865177,
            6.826045137131587e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are first name, last name, and size of each dog owned by each owner?",
        "gold_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Dogs.size_code",
            "select Owners.first_name, Owners.last_name, Dogs.size_code, Owners.first_name",
            "select Owners.first_name, Owners.last_name, Dogs.size_code, Dogs.owner_id",
            "select Owners.first_name, Owners.last_name, Dogs.size_code, Owners.first_name, Dogs.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs"
        ],
        "align_scores": [
            0.9892207980155945,
            0.9932572841644287,
            0.0007067527039907873,
            0.0008524712757207453,
            0.0003871951485052705,
            0.006702641025185585,
            0.00019247474847361445,
            0.000158613984240219
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the owner's first names, last names, and sizes of their dogs?",
        "gold_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Dogs.size_code",
            "select Owners.first_name, Owners.last_name, Owners.city",
            "select Owners.first_name, Owners.last_name, Dogs.size_code, Owners.first_name",
            "select Owners.first_name, Owners.last_name, Dogs.size_code, Owners.owner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Owners Dogs",
            "Charges Owners Dogs"
        ],
        "align_scores": [
            0.9924248456954956,
            0.00011410040315240622,
            0.0005232768598943949,
            0.00011387650010874495,
            0.0006112710107117891,
            0.0001080005313269794,
            0.00021022155124228448,
            8.605980110587552e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list pairs of the owner's first name and the dog's names?",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Dogs.name",
            "select Owners.first_name, Owners.last_name",
            "select Owners.first_name, Dogs.name, Owners.last_name",
            "select Owners.first_name, Owners.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Owners Dogs",
            "Charges Dogs"
        ],
        "align_scores": [
            0.989388108253479,
            0.00010186880535911769,
            0.0006734658381901681,
            0.00010060631029773504,
            0.00017727393424138427,
            6.644795212196186e-05,
            0.0003484377812128514,
            0.00010641659173415974
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list some pairs of the owner's first name and his dog's name?",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Dogs.name",
            "select Owners.first_name, Owners.last_name",
            "select Owners.first_name, Dogs.name, Owners.last_name",
            "select some Owners.first_name, Dogs.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Owners Dogs",
            "Charges Dogs"
        ],
        "align_scores": [
            0.9671037793159485,
            0.00011583027662709355,
            0.0004277900734450668,
            0.00011029352026525885,
            0.00019219708337914199,
            7.275811367435381e-05,
            0.004618682898581028,
            9.663835953688249e-05
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list only pairs (owner's first name, dog's name)?",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Dogs.name",
            "select Owners.first_name, Owners.last_name",
            "select Dogs.owner_id, Dogs.name",
            "select Sizes.size_description, Dogs.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Owners Dogs",
            "Dogs Owners Dogs",
            "Charges Dogs",
            "Dogs",
            "Sizes Dogs"
        ],
        "align_scores": [
            0.9626477956771851,
            8.807300037005916e-05,
            0.00021721032680943608,
            7.85329393693246e-05,
            0.00021429928892757744,
            0.00010995056800311431,
            0.00016201104153878987,
            9.742382098920643e-05
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you list the pairs of the owner's first name and the dog's name?",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Dogs.name",
            "select Owners.first_name, Owners.last_name",
            "select Owners.first_name, Dogs.name, Owners.last_name",
            "select Dogs.owner_id, Dogs.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Owners Dogs",
            "Charges Dogs"
        ],
        "align_scores": [
            0.9708750247955322,
            0.00010676674719434232,
            0.0004165647260379046,
            9.789840260054916e-05,
            0.00022969674319028854,
            6.878688145661727e-05,
            0.0002884083951357752,
            8.955149678513408e-05
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all pairs of the owner's first name and his/her dog's name.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Dogs.name",
            "select Owners.first_name, Owners.last_name",
            "select Dogs.owner_id, Dogs.name",
            "select Dogs.owner_id, Dogs.abandoned_yn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Owners Dogs",
            "Dogs Owners Dogs",
            "Charges Dogs"
        ],
        "align_scores": [
            0.9884331822395325,
            9.34503841563128e-05,
            0.00032945690327323973,
            0.00010524534445721656,
            0.0003896209236700088,
            8.675175195094198e-05,
            0.0005093225045129657,
            0.00010980889783240855
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Who has which dogs' name and what is each owner's first name?",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Dogs.owner_id, Owners.first_name",
            "select distinct Dogs.owner_id, Owners.first_name",
            "select Dogs.name, Owners.first_name",
            "select Owners.first_name, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs",
            "Breeds Owners Dogs",
            "Dogs Owners Dogs"
        ],
        "align_scores": [
            0.09028644859790802,
            0.03663278743624687,
            0.07326506823301315,
            0.002455472480505705,
            0.020047711208462715,
            0.03511471673846245,
            0.001802006270736456,
            0.001242895028553903
        ],
        "align_select": "select Dogs.owner_id, Owners.first_name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are each owner's first names and the names of their dogs?",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Dogs.name",
            "select Owners.first_name, Owners.last_name",
            "select Owners.first_name, Owners.last_name, Dogs.name",
            "select Owners.first_name, Dogs.name, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Owners Dogs",
            "Dogs Owners Dogs",
            "Charges Dogs"
        ],
        "align_scores": [
            0.9801912307739258,
            0.00014112457574810833,
            0.0014560762792825699,
            0.00011991010251222178,
            0.0003921705938410014,
            7.43964992580004e-05,
            0.000293296470772475,
            6.982700870139524e-05
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the first names of each owner and his dog's name.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Dogs.name",
            "select Owners.first_name, Dogs.name, Owners.last_name",
            "select Owners.first_name, Owners.state",
            "select Owners.first_name, Dogs.name, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Owners Dogs",
            "Dogs Owners Dogs",
            "Charges Dogs"
        ],
        "align_scores": [
            0.8927692174911499,
            0.5205478072166443,
            0.00018634175648912787,
            0.0001443217770429328,
            0.0003507748479023576,
            0.00025024445494636893,
            0.00021914535318501294,
            0.0001567408035043627
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the names of the dog breeds belonging to the rarest group and their respective treatment dates.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Breeds.breed_name, Treatments.date_of_treatment",
            "select Breeds.breed_name, Treatments.treatment_type_code",
            "select Dogs.owner_id, Treatments.date_of_treatment",
            "select Breeds.breed_name, Treatments.professional_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Breeds Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Breeds Sizes Dogs Treatments",
            "Breeds Charges Treatments"
        ],
        "align_scores": [
            0.9541178345680237,
            6.265926640480757e-05,
            0.0085725924000144,
            5.9655718359863386e-05,
            0.00020457166829146445,
            7.112309685908258e-05,
            0.0016634714556857944,
            6.123138155089691e-05
        ],
        "align_select": "select Breeds.breed_name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the names of the dogs of the rarest breeds and the date of treatment.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Dogs.name, Treatments.date_of_treatment",
            "select Dogs.name, Treatments.treatment_type_code",
            "select Dogs.name, t07.c4",
            "select Dogs.name, t7.5.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Breeds Dogs Treatments",
            "Charges Dogs Treatments",
            "Sizes Dogs Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.9906518459320068,
            5.914314169785939e-05,
            0.000725044752471149,
            5.921831325395033e-05,
            0.00039603965706191957,
            5.6946017139125615e-05,
            0.00033917921246029437,
            6.346207374008372e-05
        ],
        "align_select": "select Dogs.name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which breeds of dog are of the rarest breed? Give me their name and treatment dates.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Breeds.breed_name, Treatments.date_of_treatment",
            "select Breeds.breed_name, Treatments.treatment_type_code, Treatments.date_of_treatment",
            "select Dogs.owner_id, Treatments.date_of_treatment",
            "select Breeds.breed_name, Treatments.treatment_type_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Breeds Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Breeds Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.9801843762397766,
            0.9681552052497864,
            0.0008351627038791776,
            0.0004984966362826526,
            0.000864253262989223,
            0.0008007746655493975,
            0.0006022162851877511,
            0.0007225058507174253
        ],
        "align_select": "select Breeds.breed_name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me which dogs are of the rarest breed. List their names and treatment dates.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Dogs.name, Treatments.date_of_treatment",
            "select Dogs.name, Treatments.treatment_type_code",
            "select Dogs.name, Dogs.size_code",
            "select Dogs.name, t07.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Breeds Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Sizes Dogs Treatments",
            "Breeds Charges Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.987448513507843,
            0.9676706194877625,
            0.000887997739482671,
            0.0010467296233400702,
            0.00024343283439520746,
            0.0003934587293770164,
            0.0003889362560585141,
            0.0005345596000552177
        ],
        "align_select": "select Dogs.name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the dog breeds of the rarest breed. List their names and treatment dates.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Breeds.breed_name, Treatments.date_of_treatment",
            "select Breeds.breed_name, Treatments.treatment_type_code, Treatments.date_of_treatment",
            "select Dogs.owner_id, Treatments.date_of_treatment",
            "select Breeds.breed_name, Treatments.date_of_treatment"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Breeds Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Breeds Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.961839497089386,
            0.9813298583030701,
            0.0009079761221073568,
            0.0009542315965518355,
            0.0005766403046436608,
            0.0008142576552927494,
            0.961839497089386,
            0.9813298583030701
        ],
        "align_select": "select Breeds.breed_name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you list the most and least rare dog breeds? Mention their names and dates of treatment.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Breeds.breed_name, Treatments.date_of_treatment",
            "select Dogs.owner_id, Dogs.breed_code, Treatments.date_of_treatment",
            "select Breeds.breed_name, Treatments.treatment_type_code, Treatments.date_of_treatment",
            "select Treatment_Types.treatment_type_description, Treatments.date_of_treatment"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Breeds Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Breeds Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.9546158909797668,
            0.0001409465039614588,
            0.000508463999722153,
            8.588500350015238e-05,
            0.0005449705640785396,
            8.751419227337465e-05,
            0.000996942981146276,
            8.431720198132098e-05
        ],
        "align_select": "select Breeds.breed_name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the names and treatment dates of the most rare dog breeds.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Breeds.breed_name, Treatments.date_of_treatment",
            "select Dogs.owner_id, Treatments.date_of_treatment",
            "select Breeds.breed_name, Treatments.treatment_type_code",
            "select Breeds.breed_name, Treatments.date_of_treatment"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Breeds Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Breeds Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.994856595993042,
            7.065961108310148e-05,
            0.0007641908014193177,
            6.298445077845827e-05,
            0.0013306469190865755,
            6.206244870554656e-05,
            0.994856595993042,
            7.065961108310148e-05
        ],
        "align_select": "select Breeds.breed_name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me all the dogs owned by someone living in Virginia. List the person's first name and the dog's name.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Dogs.name",
            "select Dogs.owner_id, Dogs.name",
            "select Owners.first_name, Owners.state",
            "select Owners.first_name, Dogs.name, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.979666531085968,
            0.00020310796389821917,
            0.0003756787918973714,
            7.601884135510772e-05,
            0.0006742820842191577,
            9.352561755804345e-05,
            0.0001793279661796987,
            8.389725553570315e-05
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What dogs are owned by someone living in Virginia? List owner's first name and dog's names.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Dogs.name",
            "select Owners.first_name, Owners.last_name",
            "select owner's Owners.first_name, Dogs.name",
            "select Owners.first_name, Dogs.name, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.9418817758560181,
            0.0010026016971096396,
            0.0005429226439446211,
            0.00023641312145628035,
            0.0005757171893492341,
            0.00018435498350299895,
            0.00026191797223873436,
            0.0001508726563770324
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find out the first name of owners living in Virginia and the names of their dog?",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name",
            "select Owners.first_name, Owners.last_name, Dogs.name",
            "select Owners.first_name, Owners.last_name, Owners.state",
            "select Owners.first_name, Owners.last_name, Dogs.name, Owners.owner_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.0014914498897269368,
            0.00016704875451978296,
            0.00017998252587858588,
            7.033102156128734e-05,
            0.00014317315071821213,
            8.984779560705647e-05,
            0.00012580906332004815,
            8.238993177656084e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the first names of owner in Virginia and the names of their dog.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name",
            "select Owners.first_name, Owners.last_name, Dogs.name",
            "select Owners.first_name, Owners.last_name, Owners.state",
            "select Owners.first_name, Owners.last_name, Dogs.name, Owners.owner_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.0011292567942291498,
            0.00018092265236191452,
            0.0001878404145827517,
            6.846288306405768e-05,
            0.00014748421381227672,
            8.853992767399177e-05,
            0.000133226509205997,
            7.993075269041583e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the first names of owners living in Virginia along with the names of their dogs.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name",
            "select Owners.first_name, Owners.last_name, Dogs.name",
            "select Owners.first_name, Owners.last_name, Owners.state",
            "select Owners.first_name, Owners.last_name, Dogs.name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.0006060315063223243,
            0.00019459964823909104,
            0.0001896109024528414,
            0.00013339558790903538,
            0.00018050205835606903,
            9.143198258243501e-05,
            0.0001896109024528414,
            0.00013339558790903538
        ],
        "align_select": "select Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the first names, living in Virginia, and dog names owned by them.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name",
            "select Owners.first_name, Owners.last_name, Dogs.name",
            "select Owners.first_name, Owners.last_name, Owners.state",
            "select Owners.first_name, Owners.last_name, Dogs.name, Owners.owner_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.0005740492488257587,
            0.00018329946033190936,
            0.00019097462063655257,
            0.0001329358055954799,
            0.0001600591349415481,
            0.0001010474152280949,
            0.00012302074173931032,
            9.773721103556454e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give the first names of all owners living in Virginia and the names of all the dogs they own?",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name",
            "select Owners.first_name, Owners.last_name, Dogs.name",
            "select Owners.first_name, Owners.last_name, Owners.state",
            "select Owners.first_name, Owners.state"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.0008212567190639675,
            0.00014870597806293517,
            0.00019340375729370862,
            7.546012056991458e-05,
            0.00015996025467757136,
            8.867715951055288e-05,
            0.00046520799514837563,
            0.00010581794049357995
        ],
        "align_select": "select Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the date when the dogs receiving a treatment arrived and when they departed?",
        "gold_select": "select distinct Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Treatments.date_of_treatment, Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9732215404510498,
            0.00017669038788881153,
            0.0007615595241077244,
            9.99953190330416e-05,
            0.0005018878146074712,
            6.973066047066823e-05,
            0.000806594209279865,
            9.00046361493878e-05
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "The dogs when receiving a treatment had their arrival date then their departure date, so find out them.",
        "gold_select": "select distinct Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Treatments.dog_id",
            "select Treatments.dog_id, Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.04582097381353378,
            0.00041339866584166884,
            0.01833663322031498,
            0.00012492990936152637,
            0.9797140955924988,
            0.0004371929098851979,
            0.006414768286049366,
            0.0004964195541106164
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you find the departure date and arrival date of each dog that received a treatment?",
        "gold_select": "select distinct Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_departed, Dogs.date_arrived",
            "select Treatments.date_of_treatment, Dogs.date_arrived",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Treatments.dog_id, Dogs.date_arrived"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments",
            "Owners Dogs Treatments"
        ],
        "align_scores": [
            0.9639702439308167,
            0.00020579085685312748,
            0.0005044217105023563,
            7.811424438841641e-05,
            0.0005406757118180394,
            0.000399888027459383,
            0.0004530656442511827,
            0.00011039590026484802
        ],
        "align_select": "select Dogs.date_departed, Dogs.date_arrived",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me when the dogs arrived to the clinic and left the clinic.",
        "gold_select": "select distinct Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.weight, Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.9929792284965515,
            8.416224591201171e-05,
            0.0005174771067686379,
            7.286386244231835e-05,
            0.00021167837257962674,
            6.635403406107798e-05,
            0.0006225354154594243,
            7.208448369055986e-05
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the dates (arriving and departing) of the dogs who underwent a treatment?",
        "gold_select": "select distinct Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Treatments.date_of_treatment, Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.8597604632377625,
            0.00015792551857884973,
            0.0005233713891357183,
            9.721324022393674e-05,
            0.003002746496349573,
            7.532969175372273e-05,
            0.0005195326521061361,
            9.570058318786323e-05
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which of the dogs has been owned by the youngest person so far? List the last name of this owner.",
        "gold_select": "select Owners.last_name",
        "select_candidates": [
            "select Owners.last_name",
            "select Owners.first_name, Owners.last_name",
            "select Dogs.name, Owners.last_name",
            "select Owners.last_name, Dogs.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs",
            "Breeds Owners Dogs",
            "Dogs Owners Dogs"
        ],
        "align_scores": [
            0.960561215877533,
            0.0001435520825907588,
            0.00035104548442177474,
            0.00010323453898308799,
            0.0025391995441168547,
            0.00012050833174725994,
            0.0025299459230154753,
            0.00011890559835592285
        ],
        "align_select": "select Owners.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who owns the dog that has the smallest age among all dogs? Give me his or her last name.",
        "gold_select": "select Owners.last_name",
        "select_candidates": [
            "select Owners.last_name",
            "select Owners.first_name, Owners.last_name",
            "select Dogs.owner_id, Owners.last_name",
            "select Owners.last_name, Owners.first_name, Owners.street"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs",
            "Breeds Owners Dogs",
            "Sizes Dogs"
        ],
        "align_scores": [
            0.9700130820274353,
            0.00011063924466725439,
            0.000695298018399626,
            0.00010132357419934124,
            0.0003540579346008599,
            7.649150211364031e-05,
            0.0003933535481337458,
            7.427117816405371e-05
        ],
        "align_select": "select Owners.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which person has the smallest dog? Give their last name.",
        "gold_select": "select Owners.last_name",
        "select_candidates": [
            "select Owners.last_name",
            "select Owners.first_name, Owners.last_name",
            "select Owners.last_name, Dogs.owner_id",
            "select Owners.last_name, Owners.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs",
            "Breeds Owners Dogs",
            "Dogs"
        ],
        "align_scores": [
            0.9909700155258179,
            0.00010474454757058993,
            0.00022764140157960355,
            8.449523738818243e-05,
            0.0004526473057921976,
            7.447358075296506e-05,
            0.0004839682951569557,
            8.585504838265479e-05
        ],
        "align_select": "select Owners.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the owner's first and last names of the person owning the youngest dog.",
        "gold_select": "select Owners.last_name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name",
            "select Owners.first_name, Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name, Owners.street",
            "select Owners.first_name.c1, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Owners Dogs",
            "Charges Owners Dogs"
        ],
        "align_scores": [
            0.9885269403457642,
            7.876484596636146e-05,
            0.0002768071135506034,
            6.976105214562267e-05,
            0.0002601455198600888,
            6.84847473166883e-05,
            0.0004993005422875285,
            6.864409078843892e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the email addresses of the professionals living in the state of Hawaii or state of Wisconsin?",
        "gold_select": "select Professionals.email_address",
        "select_candidates": [
            "select Professionals.email_address",
            "select Professionals.email_address, Professionals.home_phone",
            "select Professionals.email_address, Professionals.last_name",
            "select Professionals.email_address (or Professionals.home_phone)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.981240451335907,
            0.8123093247413635,
            0.00019417873409111053,
            8.72742457431741e-05,
            0.00014782013022340834,
            8.518371760146692e-05,
            0.0023339639883488417,
            0.00018061792070511729
        ],
        "align_select": "select Professionals.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the email addresses of all professionals living in the state of Hawaii or the state of Wisconsin?",
        "gold_select": "select Professionals.email_address",
        "select_candidates": [
            "select Professionals.email_address",
            "select Professionals.email_address, Professionals.home_phone",
            "select Professionals.email_address (or Professionals.home_phone)",
            "select Professionals.email_address, Professionals.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.9735409617424011,
            0.950070858001709,
            0.00019997436902485788,
            0.00010284779273206368,
            0.0021933121606707573,
            0.000328425521729514,
            0.00013624846178572625,
            0.00010019518958870322
        ],
        "align_select": "select Professionals.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you give me the names and emails of the professionals living in the states of Hawaii and Wisconsin?",
        "gold_select": "select Professionals.email_address",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select Professionals.first_name, Professionals.last_name, Professionals.email_address",
            "select Professionals.first_name, Professionals.email_address",
            "select Professionals.first_name, Professionals.last_name, Professionals.email_address"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals",
            "Sizes Professionals",
            "Treatment_Types Professionals",
            "Charges Professionals",
            "Professionals Treatments"
        ],
        "align_scores": [
            0.00036433798959478736,
            0.001988862408325076,
            0.9851428866386414,
            0.9509769678115845,
            0.0017965304432436824,
            0.0006588886026293039,
            0.9851428866386414,
            0.9509769678115845
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name, Professionals.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the email addresses of professionals living in the states of Hawaii and Wisconsin.",
        "gold_select": "select Professionals.email_address",
        "select_candidates": [
            "select Professionals.email_address",
            "select Professionals.email_address, Professionals.home_phone",
            "select Professionals.email_address, Professionals.last_name",
            "select Professionals.email_address (https://Professionals.email_address)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.9944919347763062,
            0.9888337254524231,
            0.00011105378507636487,
            0.00020626762125175446,
            0.00012946210335940123,
            0.000140748277772218,
            0.08261997252702713,
            0.1488960236310959
        ],
        "align_select": "select Professionals.email_address",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the professional emails from people who live in either the state of Hawaii or the state of Wisconsin.",
        "gold_select": "select Professionals.email_address",
        "select_candidates": [
            "select Professionals.email_address",
            "select Professionals.email_address, Professionals.home_phone",
            "select Professionals.email_address, Professionals.last_name",
            "select Professionals.email_address (or Professionals.home_phone)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Owners Professionals",
            "Dogs Professionals",
            "Treatment_Types Professionals",
            "Breeds Owners Professionals",
            "Sizes Professionals",
            "Breeds Professionals"
        ],
        "align_scores": [
            0.9251794815063477,
            0.17015671730041504,
            0.0003248846624046564,
            8.006059215404093e-05,
            0.00018682617519516498,
            9.323835547547787e-05,
            0.000955333118326962,
            0.0001813762355595827
        ],
        "align_select": "select Professionals.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the email of those professionals residing in either the state of Hawaii or the state of Wisconsin?",
        "gold_select": "select Professionals.email_address",
        "select_candidates": [
            "select Professionals.email_address",
            "select Professionals.email_address, Professionals.home_phone",
            "select Professionals.email_address (or Professionals.home_phone)",
            "select Professionals.email_address, Professionals.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.9831995964050293,
            0.013908370397984982,
            0.00019483783398754895,
            8.441640238743275e-05,
            0.004358397331088781,
            0.00014514887880068272,
            0.00014414711040444672,
            7.883096986915916e-05
        ],
        "align_select": "select Professionals.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you retrieve the emails of the professionals living in either state Hawaii of the state if Wisconsin?",
        "gold_select": "select Professionals.email_address",
        "select_candidates": [
            "select Professionals.email_address",
            "select Professionals.email_address, Professionals.home_phone",
            "select Professionals.email_address, Professionals.last_name",
            "select Professionals.email_address (or Professionals.home_phone)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals",
            "Owners Professionals"
        ],
        "align_scores": [
            0.9559014439582825,
            0.0669112354516983,
            0.00013286784815136343,
            9.59751196205616e-05,
            0.00014551830827258527,
            9.299630619352683e-05,
            0.001605036435648799,
            0.000276857812423259
        ],
        "align_select": "select Professionals.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In what dates did the dogs arrive and depart?",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed",
            "select Dogs.weight, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9645638465881348,
            8.062901179073378e-05,
            0.0005691216210834682,
            9.886336192721501e-05,
            0.0006159648182801902,
            9.089231753023341e-05,
            0.0004690891655627638,
            0.0001415694714523852
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the date when each dog arrived and left.",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_adopted, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9921858310699463,
            0.0007507367408834398,
            0.0004190145409666002,
            0.00042423687409609556,
            0.002739890245720744,
            0.0003940416791010648,
            0.003795021679252386,
            0.0008842110401019454
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "When did all the dogs arrive? When did they depart?",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed",
            "select Dogs.weight, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9902746677398682,
            0.004039324354380369,
            0.00042806664714589715,
            0.00010676858073566109,
            0.00036993352114222944,
            0.00010528299026191235,
            0.0006329953903332353,
            0.00014298854512162507
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List down the arriving and departing dates of all the dogs.",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed",
            "select Dogs.weight, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9797938466072083,
            8.603058813605458e-05,
            0.00039239044417627156,
            9.71207773545757e-05,
            0.0004993205657228827,
            8.006890129763633e-05,
            0.0004378428857307881,
            0.00013161961396690458
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "On these dates, when did dogs arrive and depart?",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed",
            "select Dogs.weight, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9923517107963562,
            8.86954294401221e-05,
            0.0005030501633882523,
            9.017429692903534e-05,
            0.0005170476506464183,
            9.63589918683283e-05,
            0.000619968690443784,
            0.00011120500130346045
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the dog's dates of departure and arrival.",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_departed, Dogs.date_arrived",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_arrived",
            "select Dogs.owner_id3, Dogs.date_arrived"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9837837815284729,
            9.386846068082377e-05,
            0.0004322948516346514,
            0.00025706892483867705,
            0.00047846187953837216,
            8.041293767746538e-05,
            0.00039322307566180825,
            9.027108899317682e-05
        ],
        "align_select": "select Dogs.date_departed, Dogs.date_arrived",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you provide me with all the dates when each dog left and arrived?",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_departed, Dogs.date_arrived",
            "select Dogs.owner_id, Dogs.date_arrived",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.date_adopted, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9275197386741638,
            0.00015954228001646698,
            0.00038640748243778944,
            0.00012719284859485924,
            0.0010523605160415173,
            0.011976628564298153,
            0.9376327991485596,
            0.0002986985491588712
        ],
        "align_select": "select Dogs.date_departed, Dogs.date_arrived",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "I\u2019m interested to see the dog\u2019s arrivals date and departures dates?",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_adopted, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_arrived, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9875805377960205,
            0.0002549356722738594,
            0.0004220384871587157,
            0.00020741031039506197,
            0.00023682304890826344,
            0.00020025430421810597,
            0.0006767874583601952,
            0.0002879704406950623
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show all dogs whose dates of departure and arrival are listed.",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.dog_id",
            "select Dogs.dog_id, Dogs.owner_id, Dogs.date_arrived",
            "select Dogs.date_departed, Dogs.date_arrived"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.0006720087840221822,
            0.08568522334098816,
            0.03819029778242111,
            0.2779117524623871,
            0.00010545329132582992,
            7.866260420996696e-05,
            0.9876061081886292,
            9.333335765404627e-05
        ],
        "align_select": "select Dogs.date_departed, Dogs.date_arrived",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the dates when all the dogs left and arrived?",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_departed, Dogs.date_arrived",
            "select Dogs.owner_id, Dogs.date_arrived",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.date_adopted, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9860512018203735,
            0.00014207254571374506,
            0.0004643599968403578,
            8.633055404061452e-05,
            0.00041910860454663634,
            0.00016484208754263818,
            0.9834701418876648,
            0.00023684404732193798
        ],
        "align_select": "select Dogs.date_departed, Dogs.date_arrived",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of dogs that had treatment.",
        "gold_select": "select count(distinct Treatments.dog_id)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Treatments.dog_id)",
            "select count(Treatments.dog_id)",
            "select count(*), Treatments.dog_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Breeds Dogs Treatments",
            "Breeds Treatments",
            "Treatments Dogs Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9887803792953491,
            0.9887803792953491,
            0.9851272702217102,
            0.9851272702217102,
            0.34395694732666016,
            0.34395694732666016,
            0.0014571498613804579,
            0.0014571498613804579
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many dogs have been treated?",
        "gold_select": "select count(distinct Treatments.dog_id)",
        "select_candidates": [
            "select count(*)",
            "select count(Treatments.dog_id)",
            "select count(distinct Treatments.dog_id)",
            "select count(doctor_Treatments.dog_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Breeds Treatments",
            "Charges Treatments",
            "Breeds Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9798527956008911,
            0.9798527956008911,
            0.4456796646118164,
            0.4456796646118164,
            0.9521880149841309,
            0.9521880149841309,
            0.44053205847740173,
            0.44053205847740173
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many dogs received any treatments?",
        "gold_select": "select count(distinct Treatments.dog_id)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct Treatments.dog_id)",
            "select count(Treatments.dog_id)",
            "select count(doctor_Treatments.dog_id)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Breeds Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Breeds Treatments",
            "Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9859222173690796,
            0.9859222173690796,
            0.9911778569221497,
            0.9911778569221497,
            0.949926495552063,
            0.949926495552063,
            0.9222995638847351,
            0.9222995638847351
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please count the number of dogs that underwent a treatment?",
        "gold_select": "select count(distinct Treatments.dog_id)",
        "select_candidates": [
            "select count(*)",
            "select count(Treatments.dog_id)",
            "select count(distinct Treatments.dog_id)",
            "select count(*), Treatments.dog_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Breeds Dogs Treatments",
            "Breeds Treatments",
            "Charges Treatments",
            "Treatments Dogs Treatments",
            "Breeds Charges Treatments"
        ],
        "align_scores": [
            0.9678077101707458,
            0.9678077101707458,
            0.10735289007425308,
            0.10735289007425308,
            0.9608774185180664,
            0.9608774185180664,
            0.0005883919075131416,
            0.0005883919075131416
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Write down the number of dogs that went through the treatment.",
        "gold_select": "select count(distinct Treatments.dog_id)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Treatments.treatment_type_code",
            "select count(*), Treatments.dog_id",
            "select count(Treatments.dog_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Breeds Treatments",
            "Charges Treatments",
            "Breeds Dogs Treatments"
        ],
        "align_scores": [
            0.006227173842489719,
            0.0001087338023353368,
            0.9912703037261963,
            0.00011027932487195358,
            0.010832279920578003,
            0.00012877999688498676,
            0.003188575152307749,
            9.537207370158285e-05
        ],
        "align_select": "select count(*), Treatments.treatment_type_code",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the numbers of professionals which have performed treatment to dog pets.",
        "gold_select": "select count(distinct Treatments.professional_id)",
        "select_candidates": [
            "select count(distinct Treatments.professional_id)",
            "select count (distinct Treatments.professional_id)",
            "select count distinct Treatments.professional_id",
            "select counts(distinct Treatments.professional_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Professionals Treatments",
            "Dogs Treatments",
            "Charges Treatments",
            "Professionals Treatments",
            "Sizes Treatments",
            "Breeds Treatments",
            "Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9872837066650391,
            8.707748202141374e-05,
            0.042749762535095215,
            8.36451436043717e-05,
            0.005160318687558174,
            0.00010614032362354919,
            0.004861711524426937,
            7.866035593906417e-05
        ],
        "align_select": "select count(distinct Treatments.professional_id)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many professionals have treated dogs in any way ever?",
        "gold_select": "select count(distinct Treatments.professional_id)",
        "select_candidates": [
            "select count(distinct Treatments.professional_id)",
            "select count(*)",
            "select count (distinct Treatments.professional_id)",
            "select count(distinct Treatments.treatment_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Professionals Treatments",
            "Dogs Treatments",
            "Charges Treatments",
            "Professionals Treatments",
            "Breeds Treatments",
            "Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9898603558540344,
            0.0001577995135448873,
            0.9799401164054871,
            0.0003733228368218988,
            0.07717101275920868,
            0.00011275650467723608,
            0.007023683749139309,
            7.043538789730519e-05
        ],
        "align_select": "select count(distinct Treatments.professional_id)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the role, street, city and state of the specialists living in a city that contains the substring 'West'?",
        "gold_select": "select Professionals.role_code, Professionals.street, Professionals.city, Professionals.state",
        "select_candidates": [
            "select Professionals.role_code, Professionals.street, Professionals.city, Professionals.state",
            "select Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state",
            "select Professionals.role_code, Professionals.street, Professionals.city, Professionals.state",
            "select Professionals.role_code, Professionals.street., Professionals.city, Professionals.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9942545294761658,
            0.00010492699220776558,
            0.00044005553354509175,
            0.00011570023343665525,
            0.9942545294761658,
            0.00010492699220776558,
            0.01234415639191866,
            0.00011010877642547712
        ],
        "align_select": "select Professionals.role_code, Professionals.street, Professionals.city, Professionals.state",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Let us find the professionals living in a city that contains the substring 'West'. What is the role, street, city, and state of these professionals?",
        "gold_select": "select Professionals.role_code, Professionals.street, Professionals.city, Professionals.state",
        "select_candidates": [
            "select Professionals.role_code, Professionals.street, Professionals.city, Professionals.state",
            "select Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state",
            "select Professionals.role_code, Professionals.street, Professionals.city, Professionals.state",
            "select Professionals.role_code, Professionals.street, Professionals.city, Professionals.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9928237199783325,
            0.00011932609777431935,
            0.00046080182073637843,
            0.00012963231711182743,
            0.9928237199783325,
            0.00011932609777431935,
            0.9928237199783325,
            0.00011932609777431935
        ],
        "align_select": "select Professionals.role_code, Professionals.street, Professionals.city, Professionals.state",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find the role, street, city, and state of the professionals living in a city containing the substring 'West'?",
        "gold_select": "select Professionals.role_code, Professionals.street, Professionals.city, Professionals.state",
        "select_candidates": [
            "select Professionals.role_code, Professionals.street, Professionals.city, Professionals.state",
            "select Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state",
            "select Professionals.role_code, Professionals.street, Professionals.city, Professionals.state",
            "select Professionals.role_code, Professionals.street., Professionals.city, Professionals.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9940609335899353,
            0.0001180484687210992,
            0.00039771798765286803,
            0.0001065949400071986,
            0.9940609335899353,
            0.0001180484687210992,
            0.007541806902736425,
            0.000113252732262481
        ],
        "align_select": "select Professionals.role_code, Professionals.street, Professionals.city, Professionals.state",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the first name, last name, and email of the owners living in a state whose name contains the substring 'North'?",
        "gold_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name, and Owners.email_address",
            "select Owners.first_name., Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name, Owners.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.9865582585334778,
            9.933993715094402e-05,
            0.9862384796142578,
            9.570934344083071e-05,
            0.026487307623028755,
            0.0001033091830322519,
            0.9865582585334778,
            9.933993715094402e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please return the first name, last name and email of the owners living in states whose names contain the substring 'North'.",
        "gold_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name & Owners.email_address",
            "select Owners.first_name, Owners.last_name and Owners.email_address",
            "select Owners.first_name., Owners.last_name, Owners.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners",
            "Sizes Charges Sizes Treatments"
        ],
        "align_scores": [
            0.992720365524292,
            9.817670070333406e-05,
            0.8958066701889038,
            8.857624925440177e-05,
            0.9900364875793457,
            0.00010439135803608224,
            0.022203046828508377,
            0.00010989532165694982
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which owners live in a state whose name contains the substring 'North'? List their first name, last name and email address.",
        "gold_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name and Owners.email_address",
            "select Owners.first_name., Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name, t4.c-7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.9908108711242676,
            0.00011475300561869517,
            0.9880406260490417,
            0.00011766086390707642,
            0.02284829318523407,
            0.00012369590695016086,
            0.000736721558496356,
            0.0001166412839666009
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the first name, last name, email of all the people who live in a state whose name contains the substring 'North'?",
        "gold_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name, Owners.email_address, Owners.home_phone",
            "select Owners.first_name, Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name, Owners.owner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.9747273921966553,
            0.00011879816156579182,
            0.0004968853900209069,
            7.189056486822665e-05,
            0.9747273921966553,
            0.00011879816156579182,
            0.000378358643501997,
            8.314018486998975e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For dogs, how many have age less than the average?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code",
            "select count(*), Dogs.age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9912577867507935,
            0.0027038250118494034,
            0.00020826519175898284,
            0.0007879565237089992,
            0.00026425119722262025,
            0.7739606499671936,
            0.00021147080406080931,
            0.012779663316905499
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of dogs whose age is below the average?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.age",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9871487021446228,
            0.0016637808876112103,
            0.00022483934299089015,
            0.009285569190979004,
            0.00019266532035544515,
            0.00037460055318661034,
            0.0001886936224764213,
            0.14283177256584167
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the amount of the most recent treatment costs?",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select max(Treatments.cost_of_treatment)",
            "select sum(Treatments.cost_of_treatment)",
            "select maximum(Treatments.cost_of_treatment)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Charges Treatments",
            "Dogs Treatments",
            "Breeds Charges Treatments",
            "Breeds Treatments",
            "Professionals Treatments",
            "Treatment_Types Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.340904176235199,
            5.777250407845713e-05,
            7.566685235360637e-05,
            5.816022530780174e-05,
            0.002429580083116889,
            5.4936244850978255e-05,
            8.158807759173214e-05,
            6.415195093723014e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the cost of the most recent treatment performed.",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select Treatments.cost_of_treatment, Treatments.date_of_treatment",
            "select max(Treatments.cost_of_treatment)",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Breeds Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9587582349777222,
            6.001925066811964e-05,
            0.0002694072318263352,
            5.56228042114526e-05,
            0.00017236106214113533,
            5.720477201975882e-05,
            0.00024740496883168817,
            5.455097561934963e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What was the most recent cost of treatment?",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select max(Treatments.cost_of_treatment)",
            "select Treatments.cost_of_treatment",
            "select min(Treatments.cost_of_treatment)",
            "select max(Treatments.cost_of_treatment), Treatments.treatment_type_code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Charges Treatments",
            "Breeds Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            6.11902360105887e-05,
            0.20427517592906952,
            0.5187895894050598,
            0.9794440269470215,
            7.764428301015869e-05,
            0.0006190024432726204,
            5.80688938498497e-05,
            0.00011667876970022917
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you show me the cost of the most recent treatment?",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select Treatments.cost_of_treatment, Treatments.date_of_treatment",
            "select max(Treatments.cost_of_treatment)",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Breeds Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.43581730127334595,
            6.546320219058543e-05,
            0.00033410332980565727,
            5.896844595554285e-05,
            9.519634477328509e-05,
            6.181395292514935e-05,
            0.0002979343116749078,
            5.798644997412339e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the number of dogs that did not get treatment.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Treatments.dog_id",
            "select count(*), Treatments.professional_id",
            "select count(*), Dogs.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9818968772888184,
            0.005023790989071131,
            0.0002580059226602316,
            0.0006542154005728662,
            0.00013467455573845655,
            0.00021291720622684807,
            0.00019719854753930122,
            0.00045206068898551166
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs have not been treated?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Treatments.dog_id",
            "select count(*), Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments",
            "Dogs"
        ],
        "align_scores": [
            0.9886350631713867,
            0.003649116726592183,
            0.00022811679809819907,
            0.000607602356467396,
            0.0002903490385506302,
            0.0010415149154141545,
            0.00016373550170101225,
            0.00028737803222611547
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of dogs that has never had any treatment, please!",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code",
            "select count(*), Dogs.abandoned_yn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs",
            "Dogs Professionals Treatments",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.9757601618766785,
            0.003993964288383722,
            0.00024825872969813645,
            0.0006525120697915554,
            0.0002615908160805702,
            0.0033409500028938055,
            0.0003136684827040881,
            0.0007823231280781329
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of dogs that have not been treated yet?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Treatments.professional_id",
            "select count(*), Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments",
            "Dogs"
        ],
        "align_scores": [
            0.984121561050415,
            0.00404849648475647,
            0.0001901149080367759,
            0.0006371882045641541,
            0.00016879690519999713,
            0.0004674269584938884,
            0.0003266966959927231,
            0.0017074196366593242
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The number of dogs that hasn't been treated by %date%, what is it?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Treatments.date_of_treatment",
            "select count(*), Treatments.professional_id",
            "select count(*), Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Dogs Treatments",
            "Owners Dogs Treatments"
        ],
        "align_scores": [
            0.9877290725708008,
            8.33519734442234e-05,
            0.0002679570752661675,
            7.439536420861259e-05,
            0.00020570277411025017,
            7.685621676500887e-05,
            0.0002356093464186415,
            7.023102807579562e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of dogs without any treatments.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Treatments.dog_id",
            "select count(*), Treatments.professional_id",
            "select count(*), Dogs.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.9931530952453613,
            0.004595481790602207,
            0.0002337878104299307,
            0.0008790314896032214,
            0.00015617643657606095,
            0.00021376275981310755,
            0.00019439749303273857,
            0.00030904647428542376
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Could you give me the number of dogs which haven't been treated yet?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code",
            "select count(*), Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9869565963745117,
            0.004428598564118147,
            0.00018139196617994457,
            0.0006320920074358582,
            0.0001674685045145452,
            0.001295982045121491,
            0.0001700345892459154,
            0.0004244038718752563
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of dogs which haven't been treated?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code",
            "select count(*), Dogs.abandoned_yn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs",
            "Dogs Professionals Treatments",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.9858355522155762,
            0.0023611336946487427,
            0.000171211693668738,
            0.0003328212187625468,
            0.00016518226766493171,
            0.001263449084945023,
            0.00021278587519191206,
            0.0005485527217388153
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of owners who don't have any dogs at this moment?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Owners.street, Owners.last_name",
            "select count(*), Owners.first_name, Owners.last_name",
            "select count(*), Owners.street"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Owners",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Charges Owners Dogs"
        ],
        "align_scores": [
            0.9646737575531006,
            0.0345674529671669,
            0.00016800910816527903,
            0.000220497211557813,
            0.00033429358154535294,
            0.001599640236236155,
            0.000391051871702075,
            0.0005458025843836367
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please find out the number of owners who don't own any dogs now.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Owners.first_name, Owners.last_name",
            "select count(*), Owners.street, Owners.last_name",
            "select count(*), Owners.owner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Owners",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Charges Owners Dogs"
        ],
        "align_scores": [
            0.9800271391868591,
            0.010552162304520607,
            0.00022955398890189826,
            0.0007179688545875251,
            0.00013021111954003572,
            0.0001296762056881562,
            0.0003034694818779826,
            0.001215052790939808
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the numbers of people who do not own any dogs right now.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Owners.street, Owners.city",
            "select count(*), Owners.street",
            "select count(*), Owners.street, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Owners",
            "Treatment_Types Owners Dogs",
            "Treatment_Types Owners",
            "Charges Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Dogs"
        ],
        "align_scores": [
            0.9581564664840698,
            0.0060285343788564205,
            0.00015870113566052169,
            0.0001287155319005251,
            0.0003897403657902032,
            0.0006199219496920705,
            0.00024749108706600964,
            0.0003265163686592132
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of dog owners who do not have any at this moment?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Owners.first_name, Owners.last_name",
            "select count(distinct Dogs.owner_id)",
            "select count(distinct Owners.owner_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Sizes Dogs",
            "Treatment_Types Dogs",
            "Charges Dogs",
            "Dogs"
        ],
        "align_scores": [
            0.9800434112548828,
            0.0646316334605217,
            0.00038459611823782325,
            0.003070247359573841,
            0.11663218587636948,
            0.0012539027957245708,
            0.02024679072201252,
            0.0011519569670781493
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of owners who do not have any dogs now?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Owners.first_name, Owners.last_name",
            "select count(*), Owners.street, Owners.last_name",
            "select count(*), Owners.owner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Owners",
            "Treatment_Types Owners Dogs",
            "Sizes Owners Dogs",
            "Charges Owners Dogs",
            "Sizes Owners"
        ],
        "align_scores": [
            0.9820191860198975,
            0.02509620413184166,
            0.0002737796166911721,
            0.0011127005564048886,
            0.00015431863721460104,
            0.0001770138187566772,
            0.0003272387257311493,
            0.0013213325291872025
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of professionals who did not perform any treatment on dogs.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Professionals.role_code, Professionals.last_name",
            "select count(*), Professionals.role_code, Professionals.first_name",
            "select count(*), Professionals.street, Professionals.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Professionals"
        ],
        "align_scores": [
            0.9731065034866333,
            0.017879024147987366,
            0.0001301871525356546,
            0.00012560695176944137,
            0.0001534394541522488,
            0.0001315589906880632,
            0.0001768847432686016,
            0.00014005879347678274
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of professionals without operating any treatment to dogs.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Professionals.role_code, Professionals.last_name",
            "select count(*), Professionals.role_code, Professionals.first_name",
            "select count(*), Professionals.street, Professionals.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.9866632223129272,
            0.023934155702590942,
            0.00011779389024013653,
            9.843655425356701e-05,
            0.0001242810394614935,
            9.796031372388825e-05,
            0.00012636379688046873,
            9.315064380643889e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The number of professionals failed to operate any treatment on dogs was...",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Professionals.professional_id",
            "select count(*), Professionals.role_code, Professionals.first_name",
            "select count(*), Professionals.role_code, Professionals.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Charges Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments"
        ],
        "align_scores": [
            0.98365718126297,
            0.9667537212371826,
            0.00040942674968391657,
            0.0006222513038665056,
            0.00013660751574207097,
            0.0001466487010475248,
            0.0001238848053617403,
            0.00013909334666095674
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me the number of professionals who did not operated any treatment on dogs?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Professionals.role_code, Professionals.last_name",
            "select count(*), Professionals.professional_id",
            "select count(*), Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.984585702419281,
            0.010117651894688606,
            0.00012912858801428229,
            0.0001177852536784485,
            0.00033469792106188834,
            0.0003389335470274091,
            0.00015194012667052448,
            0.0001222490391228348
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of professionals who have no treated any dogs so far?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Professionals.professional_id",
            "select count(*), Professionals.role_code, Professionals.last_name",
            "select count(*), Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Professionals"
        ],
        "align_scores": [
            0.9639149904251099,
            0.03825777769088745,
            0.000758033711463213,
            0.002501204377040267,
            0.00015338414232246578,
            0.00014839493087492883,
            0.00017522904090583324,
            0.00016574423352722079
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of professionals who have never treated dogs.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Professionals.role_code, Professionals.last_name",
            "select count(*), Professionals.role_code, Professionals.first_name",
            "select count(*), Professionals.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Owners Professionals Treatments",
            "Sizes Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.979904055595398,
            0.01448991522192955,
            0.00012211588909849524,
            9.385099838254973e-05,
            0.0001420474873157218,
            9.582998609403148e-05,
            0.00028738350374624133,
            0.00025838648434728384
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you find the number of professionals who have never treated a dog?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Professionals.professional_id",
            "select count(*), Professionals.role_code, Professionals.first_name",
            "select count(*), Professionals.role_code, Professionals.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Professionals"
        ],
        "align_scores": [
            0.9641024470329285,
            0.013527948409318924,
            0.0002942801802419126,
            0.0016595156630501151,
            0.00013777149433735758,
            0.00011255831486778334,
            0.00012423993030097336,
            0.00010814553388627246
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of professionals who have never treated any dog.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Professionals.role_code, Professionals.last_name",
            "select count(*), Professionals.professional_id",
            "select count(*), Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Professionals"
        ],
        "align_scores": [
            0.9671584367752075,
            0.010704063810408115,
            0.00012901080481242388,
            0.00010377916623838246,
            0.0003345741133671254,
            0.0013309986097738147,
            0.00014987013128120452,
            0.00011413238826207817
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the dog names, ages, and weights of all dogs who were abandoned. The value 1 means they were abandoned, and 0 means they weren't.",
        "gold_select": "select Dogs.name, Dogs.age, Dogs.weight",
        "select_candidates": [
            "select Dogs.name, Dogs.age, Dogs.weight",
            "select distinct Dogs.name, Dogs.age, Dogs.weight",
            "select Dogs.name, Dogs.age, Dogs.weight, Dogs.abandoned_yn",
            "select Dogs.name, Dogs.age, Dogs.weight, Dogs.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9253395199775696,
            0.0004365665663499385,
            0.011977564543485641,
            8.660198363941163e-05,
            0.0002639485173858702,
            9.217065235134214e-05,
            0.00016144171240739524,
            9.193312143906951e-05
        ],
        "align_select": "select Dogs.name, Dogs.age, Dogs.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out the average age of all dogs.",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age).",
            "select avg(Dogs.age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.996360719203949,
            6.498453149106354e-05,
            0.0005178407882340252,
            9.584688814356923e-05,
            0.0008788731647655368,
            8.013476326595992e-05,
            0.996360719203949,
            6.498453149106354e-05
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the average of all your dog's ages.",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select Avg(Dogs.age)",
            "select avg(Dogs.age)."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9503512382507324,
            6.649941497016698e-05,
            0.00045771850273013115,
            8.209284715121612e-05,
            0.9503512382507324,
            6.649941497016698e-05,
            0.000703164201695472,
            7.070963329169899e-05
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For every dog, find out its average age.",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select Dogs.dog_id, avg(Dogs.age)",
            "select Dogs.name, avg(Dogs.age)",
            "select Dogs.owner_id, avg(Dogs.age)",
            "select Dogs.breed_code, avg(Dogs.age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.8530023694038391,
            0.00010617990483297035,
            0.9441598057746887,
            9.81807243078947e-05,
            0.00024817782104946673,
            0.00013129820581525564,
            0.20081272721290588,
            0.0001262160367332399
        ],
        "align_select": "select Dogs.dog_id, avg(Dogs.age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you tell me the average age of all the dogs?",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age),",
            "select avg(Dogs.age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9949264526367188,
            6.173719884827733e-05,
            0.0006331042968668044,
            8.082084241323173e-05,
            0.0003153884899802506,
            7.384448690572754e-05,
            0.9949264526367188,
            6.173719884827733e-05
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you compute the average age of the dogs please?",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age),",
            "select avg(Dogs.age)."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9963065385818481,
            6.632001168327406e-05,
            0.0005634731496684253,
            9.781431435840204e-05,
            0.00032561770058237016,
            8.667817019158974e-05,
            0.0011661306489259005,
            7.969108992256224e-05
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the oldest dog's age?",
        "gold_select": "select max(Dogs.age)",
        "select_candidates": [
            "select max(Dogs.age)",
            "select max(Dogs.age), Dogs.breed_code",
            "select max(Dogs.age), Dogs.date_of_birth",
            "select Dogs.dog_id, Dogs.age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.0001735500991344452,
            9.389808110427111e-05,
            8.139395504258573e-05,
            6.433598173316568e-05,
            9.378890536027029e-05,
            7.477161125279963e-05,
            0.00019806915952358395,
            0.00027319553191773593
        ],
        "align_select": "select max(Dogs.age)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "The maximum age of all the dogs was?.",
        "gold_select": "select max(Dogs.age)",
        "select_candidates": [
            "select max(Dogs.age)",
            "select max(Dogs.age), Dogs.date_of_birth",
            "select max(Dogs.age), Dogs.breed_code",
            "select max(Dogs.age), Dogs.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9950469732284546,
            5.2739163947990164e-05,
            0.00013307237531989813,
            4.960135993314907e-05,
            0.0001429867697879672,
            6.274681072682142e-05,
            0.00012245347897987813,
            5.194711047806777e-05
        ],
        "align_select": "select max(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What was the oldest dog's age?",
        "gold_select": "select max(Dogs.age)",
        "select_candidates": [
            "select max(Dogs.age)",
            "select Dogs.age",
            "select Dogs.dog_id, Dogs.age",
            "select Dogs.dog_id, max(Dogs.age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.00021841398847755045,
            6.177135946927592e-05,
            0.9874255061149597,
            5.549273555516265e-05,
            0.000181157753104344,
            5.69291332794819e-05,
            0.00011356905451975763,
            5.6907916587078944e-05
        ],
        "align_select": "select Dogs.age",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can we get the age of the oldest dog? Show us.",
        "gold_select": "select max(Dogs.age)",
        "select_candidates": [
            "select Dogs.age",
            "select max(Dogs.age)",
            "select Dogs.dog_id, Dogs.age",
            "select Dogs.dog_id, max(Dogs.age)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.6364405155181885,
            6.710734305670485e-05,
            0.00026726664509624243,
            7.927542901597917e-05,
            0.00030908003100194037,
            6.34545722277835e-05,
            0.00012282829266041517,
            6.414840754587203e-05
        ],
        "align_select": "select Dogs.age",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How old is the oldest dog? Give its age.",
        "gold_select": "select max(Dogs.age)",
        "select_candidates": [
            "select Dogs.age",
            "select Dogs.dog_id, Dogs.age",
            "select max(Dogs.age)",
            "select Dogs.age, Dogs.date_of_birth"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9648476243019104,
            6.239810318220407e-05,
            0.0001920640788739547,
            6.692840543109924e-05,
            0.0002070775517495349,
            7.062574150040746e-05,
            0.0008302115020342171,
            6.061428211978637e-05
        ],
        "align_select": "select Dogs.age",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me how much charge A = cost B, and display the results according to each charge type.",
        "gold_select": "select Charges.charge_type, Charges.charge_amount",
        "select_candidates": [
            "select Charges.charge_type, sum(Charges.charge_amount)",
            "select Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_type, net(Charges.charge_amount)",
            "select Charges.charge_type, calculate(Charges.charge_amount)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.0050796321593225,
            0.0001657459797570482,
            0.017980264499783516,
            0.00015906682529021055,
            0.0029980966355651617,
            0.00014550112246070057,
            0.0017846989212557673,
            0.00017049472080543637
        ],
        "align_select": "select Charges.charge_type, sum(Charges.charge_amount)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List all the charge types and their amounts.",
        "gold_select": "select Charges.charge_type, Charges.charge_amount",
        "select_candidates": [
            "select Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_type, Charges.charge_amount, t1.c3",
            "select Charges.charge_type, Charges.charge_amount, Charges.charge_id",
            "select Charges.charge_type, Charges.charge_amount."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.9952152967453003,
            0.38576385378837585,
            0.00017584212764631957,
            0.00012893960229121149,
            0.00013571319868788123,
            0.00013450220285449177,
            0.0019565215334296227,
            0.0007993264589458704
        ],
        "align_select": "select Charges.charge_type, Charges.charge_amount",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the amounts charged by each charge type? List them.",
        "gold_select": "select Charges.charge_type, Charges.charge_amount",
        "select_candidates": [
            "select Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_type, sum(Charges.charge_amount)",
            "select Charges.charge_type, max(Charges.charge_amount)",
            "select Charges.charge_type, amount(Charges.charge_amount)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.995530903339386,
            0.00020421718363650143,
            0.9952049255371094,
            0.00016580306692048907,
            0.3469325006008148,
            0.00011659492156468332,
            0.0004938096972182393,
            0.000221525551751256
        ],
        "align_select": "select Charges.charge_type, Charges.charge_amount",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How much do each kind of charges cost? List both charge type and amount.",
        "gold_select": "select Charges.charge_type, Charges.charge_amount",
        "select_candidates": [
            "select Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_id, Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_type, sum(Charges.charge_amount)",
            "select Charges.charge_type.c2, Charges.charge_type"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.9939829707145691,
            0.004142181947827339,
            0.00029692877433262765,
            0.00013503989612217993,
            0.9947125911712646,
            0.0001970562880160287,
            0.00018970856035593897,
            0.00013255681551527232
        ],
        "align_select": "select Charges.charge_type, Charges.charge_amount",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which charges cost how much? List both charge type and amount.",
        "gold_select": "select Charges.charge_type, Charges.charge_amount",
        "select_candidates": [
            "select Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_id, Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_type.c2, Charges.charge_type",
            "select Charges.charge_type, Charges.charge_amount, Charges.charge_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.9935331344604492,
            0.3213239908218384,
            0.004412062466144562,
            0.005978655070066452,
            0.0003077991132158786,
            0.00019832125690300018,
            0.0004631540214177221,
            0.0011957284295931458
        ],
        "align_select": "select Charges.charge_type, Charges.charge_amount",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the charge types and their amounts.",
        "gold_select": "select Charges.charge_type, Charges.charge_amount",
        "select_candidates": [
            "select Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_type, Charges.charge_amount, t1.c3",
            "select Charges.charge_type, Charges.charge_amount, Charges.charge_id",
            "select Charges.charge_type, Charges.charge_amount."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.9952152967453003,
            0.38576385378837585,
            0.00017584212764631957,
            0.00012893960229121149,
            0.00013571319868788123,
            0.00013450220285449177,
            0.0019565215334296227,
            0.0007993264589458704
        ],
        "align_select": "select Charges.charge_type, Charges.charge_amount",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list the charge types and their amounts.",
        "gold_select": "select Charges.charge_type, Charges.charge_amount",
        "select_candidates": [
            "select Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_type, Charges.charge_amount.",
            "select Charges.charge_type, Charges.charge_amount,",
            "select Charges.charge_type., Charges.charge_amount"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.9961647987365723,
            0.1109464094042778,
            0.0022073949221521616,
            0.0007152263424359262,
            0.0017579802079126239,
            0.00032113667111843824,
            0.004702090751379728,
            0.0007562952232547104
        ],
        "align_select": "select Charges.charge_type, Charges.charge_amount",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "list all charge types and their charge amounts, amount.",
        "gold_select": "select Charges.charge_type, Charges.charge_amount",
        "select_candidates": [
            "select Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_type, Charges.charge_amount,",
            "select Charges.charge_type, Charges.charge_amount.",
            "select Charges.charge_type, sum(Charges.charge_amount)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.0020621721632778645,
            0.34511035680770874,
            0.0007175024366006255,
            0.0030062871519476175,
            0.0005007524159736931,
            0.001703307731077075,
            0.0521012507379055,
            0.0011353142326697707
        ],
        "align_select": "select Charges.charge_type, Charges.charge_amount",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list all the charge types and their amounts?",
        "gold_select": "select Charges.charge_type, Charges.charge_amount",
        "select_candidates": [
            "select Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_type, Charges.charge_amount, Charges.charge_id",
            "select Charges.charge_type, Charges.charge_amount, t1.c3",
            "select Charges.charge_type, Charges.charge_amount."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.9939817786216736,
            0.3305399715900421,
            0.00015491453814320266,
            0.00014828884741291404,
            0.00020991692144889385,
            0.00014167683548294008,
            0.002452622866258025,
            0.0007018660544417799
        ],
        "align_select": "select Charges.charge_type, Charges.charge_amount",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "This is the charge type. What amount they cost?.",
        "gold_select": "select Charges.charge_type, Charges.charge_amount",
        "select_candidates": [
            "select Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_id, Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_amount, Charges.charge_type",
            "select Charges.charge_type, Charges.charge_amount, t1.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.9937560558319092,
            0.17008833587169647,
            0.000161657968419604,
            0.00017757792375050485,
            0.0015058467397466302,
            0.00044703512685373425,
            0.0002424074918963015,
            0.00010373524128226563
        ],
        "align_select": "select Charges.charge_type, Charges.charge_amount",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the price of the most expensive charge type?",
        "gold_select": "select max(Charges.charge_amount)",
        "select_candidates": [
            "select Charges.charge_amount",
            "select Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_id, Charges.charge_amount",
            "select Charges.charge_amount, Charges.charge_type"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.17338968813419342,
            0.14158868789672852,
            0.0003175142337568104,
            0.00040953682037070394,
            0.00018789719615597278,
            0.00026646998594515026,
            0.00016431450785603374,
            0.0002212709659943357
        ],
        "align_select": "select Charges.charge_amount",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the maximum price for the most expensive charge type?",
        "gold_select": "select max(Charges.charge_amount)",
        "select_candidates": [
            "select max(Charges.charge_amount)",
            "select max(Charges.charge_amount), Charges.charge_type",
            "select max(Charges.charge_amount) dependant on Charges.charge_type",
            "select max(Charges.charge_amount), Charges.charge_type, Charges.charge_amount"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.00014161808940116316,
            0.0002367501292610541,
            0.00011046054714825004,
            0.00010292393562849611,
            9.124384814640507e-05,
            0.00010968217975459993,
            7.322977035073563e-05,
            7.764991460135207e-05
        ],
        "align_select": "select max(Charges.charge_amount)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the cost of the most expensive charge type?",
        "gold_select": "select max(Charges.charge_amount)",
        "select_candidates": [
            "select Charges.charge_amount",
            "select Charges.charge_type, Charges.charge_amount",
            "select Charges.charge_id, Charges.charge_amount",
            "select Charges.charge_amount, Charges.charge_type"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.4117000699043274,
            0.4372386336326599,
            0.0003364331496413797,
            0.0004020355991087854,
            0.00017736539302859455,
            0.00024050683714449406,
            0.00017781718634068966,
            0.00022831240494269878
        ],
        "align_select": "select Charges.charge_amount",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the maximum price of the most expensive charge type.",
        "gold_select": "select max(Charges.charge_amount)",
        "select_candidates": [
            "select max(Charges.charge_amount)",
            "select max(Charges.charge_amount), Charges.charge_type",
            "select max(Charges.charge_amount) dependant on Charges.charge_type",
            "select max(Charges.charge_amount), Charges.charge_type, Charges.charge_amount"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.00019529314886312932,
            0.00022356891713570803,
            0.00011959083349211141,
            0.00010127073619514704,
            9.844763553701341e-05,
            0.0001172089105239138,
            8.492239430779591e-05,
            7.921391807030886e-05
        ],
        "align_select": "select max(Charges.charge_amount)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the price of the charge type having most money in it?",
        "gold_select": "select max(Charges.charge_amount)",
        "select_candidates": [
            "select Charges.charge_amount",
            "select Charges.charge_id, Charges.charge_amount",
            "select Charges.charge_type",
            "select Charges.charge_id, Charges.charge_type"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.7221106886863708,
            0.8435332775115967,
            0.00013879606558475643,
            0.00015842170978430659,
            0.039577074348926544,
            0.939747154712677,
            0.00016472017159685493,
            0.00015264035027939826
        ],
        "align_select": "select Charges.charge_type",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please give me the email,cell phone and home phone of all the professionals.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, t6.cten, Professionals.home_phone",
            "select Professionals.email_address, Professionals.professional_id9, Professionals.home_phone"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9840032458305359,
            0.000151500353240408,
            0.9881495237350464,
            0.00011959265248151496,
            0.0002893119817599654,
            9.620062337489799e-05,
            0.00029946924769319594,
            0.00011847236601170152
        ],
        "align_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the professionals' home phone, cell numbers, and email addresses.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.home_phone, Professionals.cell_number, Professionals.email_address",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.home_phone, Professionals.cell_number., Professionals.email_address",
            "select Professionals.home_phone, Professionals.role_code1, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9825083613395691,
            9.587450040271506e-05,
            0.9860731363296509,
            9.765524009708315e-05,
            0.016685018315911293,
            8.47729534143582e-05,
            0.0007002358324825764,
            0.00012161087943241
        ],
        "align_select": "select Professionals.home_phone, Professionals.cell_number, Professionals.email_address",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the professionals' cell numbers, emails and home phone.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.cell_number, Professionals.email_address, Professionals.home_phone",
            "select Professionals.professional_id, Professionals.email_address, Professionals.home_phone",
            "select Professionals.home_phone, Professionals.email_address, Professionals.home_phone",
            "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9896854162216187,
            9.320119715994224e-05,
            0.00044199745752848685,
            8.359124331036583e-05,
            0.0004782491596415639,
            0.00011159039422636852,
            0.9906749129295349,
            9.48301239986904e-05
        ],
        "align_select": "select Professionals.cell_number, Professionals.email_address, Professionals.home_phone",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the professional email addresses, cell numbers, and home phone numbers?",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, t6.cten, Professionals.home_phone",
            "select Professionals.email_address, Professionals.professional_id9, Professionals.home_phone"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9945068955421448,
            0.00010394892888143659,
            0.9945684671401978,
            0.00010406110231997445,
            0.0006294928025454283,
            0.00011124012235086411,
            0.0005894314963370562,
            0.00016323789895977825
        ],
        "align_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the contact information of each professional: email, cell phone, home phone.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, Professionals.professional_id9, Professionals.home_phone"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9877288341522217,
            9.549556853016838e-05,
            0.9905754327774048,
            9.344218415208161e-05,
            0.9905754327774048,
            9.344218415208161e-05,
            0.0004583817208185792,
            0.00016041177150327712
        ],
        "align_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the home phone, cell phone and email of each professional?",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.home_phone, Professionals.cell_number, Professionals.email_address",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.home_phone, Professionals.cell_number., Professionals.email_address",
            "select Professionals.home_phone, Professionals.role_code1, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9886599779129028,
            0.0001110073208110407,
            0.9892327785491943,
            0.0001187134621432051,
            0.0172121562063694,
            0.00017675440176390111,
            0.0008632096578367054,
            0.00026485201669856906
        ],
        "align_select": "select Professionals.home_phone, Professionals.cell_number, Professionals.email_address",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please provide the email, home phone, and cell number of each professional.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number.",
            "select Professionals.email_address, t66.c9, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.9931821227073669,
            0.00013013750140089542,
            0.9931821227073669,
            0.00013013750140089542,
            0.00613867724314332,
            9.572742419550195e-05,
            0.0007354389526881278,
            8.799854549579322e-05
        ],
        "align_select": "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all professionals whose home phone is < number>?",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.professional_id",
            "select Professionals.home_phone",
            "select Professionals.zip_code",
            "select Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.04708109796047211,
            0.0001132113829953596,
            0.9939024448394775,
            8.212441025534645e-05,
            0.000768399506341666,
            8.583752060076222e-05,
            0.000325535744195804,
            5.951803541393019e-05
        ],
        "align_select": "select Professionals.home_phone",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the home phone, cell phone, and email of each professional.",
        "gold_select": "select Professionals.email_address, Professionals.cell_number, Professionals.home_phone",
        "select_candidates": [
            "select Professionals.home_phone, Professionals.cell_number, Professionals.email_address",
            "select Professionals.email_address, Professionals.home_phone, Professionals.cell_number",
            "select Professionals.home_phone, Professionals.cell_number., Professionals.email_address",
            "select Professionals.home_phone, Professionals.cell_number, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals",
        "table_candidates": [
            "Professionals"
        ],
        "align_scores": [
            0.989138662815094,
            0.00011683888442348689,
            0.9911250472068787,
            0.00011310337140457705,
            0.01369578205049038,
            0.0001657730172155425,
            0.989138662815094,
            0.00011683888442348689
        ],
        "align_select": "select Professionals.home_phone, Professionals.cell_number, Professionals.email_address",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all the possible combination of breed type and size type.",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select Dogs.breed_code, Dogs.size_code",
            "select distinct Dogs.breed_code, Dogs.size_code",
            "select possible Dogs.breed_code, Dogs.size_code",
            "select every possible Dogs.breed_code, Dogs.size_code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Sizes Dogs",
            "Treatment_Types Dogs",
            "Sizes Treatment_Types Dogs",
            "Owners Dogs",
            "Breeds Sizes Dogs",
            "Charges Dogs"
        ],
        "align_scores": [
            0.9436783790588379,
            0.00012229313142597675,
            0.056125741451978683,
            0.0001107478528865613,
            0.001870029722340405,
            0.00010521986405365169,
            0.9662107825279236,
            0.00010710068454500288
        ],
        "align_select": "select Dogs.breed_code, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are all the breed/size combinations possible?",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select possible Dogs.breed_code, Dogs.size_code",
            "select distinct Dogs.breed_code, Dogs.size_code",
            "select Dogs.breed_code, Dogs.size_code",
            "select all possible Dogs.breed_code, Dogs.size_code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Sizes Dogs",
            "Breeds Sizes Dogs",
            "Treatment_Types Dogs",
            "Owners Dogs",
            "Charges Sizes Dogs",
            "Sizes Treatment_Types Dogs",
            "Charges Dogs"
        ],
        "align_scores": [
            0.0021625750232487917,
            9.908071660902351e-05,
            0.1715904027223587,
            9.414157830178738e-05,
            0.977605402469635,
            0.0001117740903282538,
            0.053360823541879654,
            9.968505764845759e-05
        ],
        "align_select": "select Dogs.breed_code, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me a list of the possible size and breed types combinations?",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select Dogs.size_code, Dogs.breed_code",
            "select possible Dogs.size_code, Dogs.breed_code",
            "select distinct Dogs.size_code, Dogs.breed_code",
            "select list(Dogs.size_code), Dogs.breed_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Sizes Dogs",
            "Treatment_Types Owners Dogs",
            "Owners Dogs",
            "Treatment_Types Dogs",
            "Treatment_Types Owners",
            "Treatment_Types Sizes Dogs"
        ],
        "align_scores": [
            0.5386958718299866,
            0.00011845745757455006,
            0.0009684058604761958,
            0.0001012065404211171,
            0.4062551259994507,
            9.744082490215078e-05,
            0.0005943139549344778,
            9.36768192332238e-05
        ],
        "align_select": "select Dogs.size_code, Dogs.breed_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are all the possible breed type and size combinations? Provide all the combinations of breed and size types.",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select possible Dogs.breed_code, Dogs.size_code",
            "select Dogs.breed_code, Dogs.size_code",
            "select distinct Dogs.breed_code, Dogs.size_code",
            "select all possible Dogs.breed_code, Dogs.size_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Sizes Dogs",
            "Breeds Sizes Dogs",
            "Charges Sizes Dogs",
            "Treatment_Types Dogs",
            "Charges Dogs",
            "Sizes Treatment_Types Dogs",
            "Owners Dogs"
        ],
        "align_scores": [
            0.0020683452021330595,
            0.00014718032616656274,
            0.14928193390369415,
            0.0002551907964516431,
            0.140971839427948,
            0.00013875687727704644,
            0.03903435543179512,
            0.00016067340038716793
        ],
        "align_select": "select possible Dogs.breed_code, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are all the possible combinations of breed type and size code?",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select Dogs.breed_code, Dogs.size_code",
            "select possible Dogs.breed_code, Dogs.size_code",
            "select distinct Dogs.breed_code, Dogs.size_code",
            "select combinat-id(Dogs.breed_code), Dogs.size_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Sizes Dogs",
            "Treatment_Types Dogs",
            "Owners Dogs",
            "Sizes Treatment_Types Dogs",
            "Charges Dogs",
            "Breeds Dogs",
            "Sizes Treatment_Types Owners"
        ],
        "align_scores": [
            0.012952780351042747,
            9.131784463534132e-05,
            0.0010011899285018444,
            9.629726264392957e-05,
            0.019804004579782486,
            8.5860287072137e-05,
            0.0004925301182083786,
            0.00011923987767659128
        ],
        "align_select": "select Dogs.breed_code, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the first name of all professionals along with the description of the treatment they've provided?",
        "gold_select": "select distinct Professionals.first_name, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Professionals.first_name, Treatment_Types.treatment_type_description",
            "select Professionals.first_name, Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Professionals.first_name, Treatment_Types.treatment_type_code_description",
            "select Professionals.first_name, t3_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Sizes Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9788018465042114,
            0.00013564190885517746,
            0.00017476899665780365,
            7.853040006011724e-05,
            0.8855186700820923,
            0.00013934717571828514,
            0.00275025493465364,
            0.0001396449952153489
        ],
        "align_select": "select Professionals.first_name, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the list of the first names of professional doctors/healthcare providers along with the descriptions of their treatments?",
        "gold_select": "select distinct Professionals.first_name, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Professionals.first_name, Treatment_Types.treatment_type_description",
            "select Professionals.first_name, Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Professionals.first_name, t3_description",
            "select Professionals.first_name, Professionals.role_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Sizes Treatment_Types Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.94395512342453,
            0.0001696690742392093,
            0.00018476889817975461,
            6.49844077997841e-05,
            0.00523799704387784,
            0.00012746642460115254,
            0.002870418829843402,
            0.00015892130613792688
        ],
        "align_select": "select Professionals.first_name, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the first names of all the professionals along with their descriptions of treatments they did.",
        "gold_select": "select distinct Professionals.first_name, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Professionals.first_name, Treatments.treatment_type_code",
            "select Professionals.first_name, Treatments.cost_of_treatment",
            "select Professionals.first_name, Treatments.dog_id",
            "select Professionals.first_name, Treatments.date_of_treatment"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Sizes Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.03403263911604881,
            9.521904576104134e-05,
            0.0008220642921514809,
            0.00014809130516368896,
            0.0006449008942581713,
            0.00012284114200156182,
            0.001149661373347044,
            0.00017423121607862413
        ],
        "align_select": "select Professionals.first_name, Treatments.treatment_type_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list all the first names with the description of the treatments done by the professionals?",
        "gold_select": "select distinct Professionals.first_name, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Professionals.first_name, Treatment_Types.treatment_type_description",
            "select Professionals.first_name, Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Professionals.first_name, Treatment_Types.treatment_type_code_description",
            "select Professionals.first_name, t3_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Sizes Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9917247295379639,
            0.00025402536266483366,
            0.00016327902267221361,
            6.966392538743094e-05,
            0.9669185280799866,
            0.00023008906282484531,
            0.004838457331061363,
            0.00017441507952753454
        ],
        "align_select": "select Professionals.first_name, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me each professional's first name and their descriptions of the treatments they perform.",
        "gold_select": "select distinct Professionals.first_name, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Professionals.first_name, Treatment_Types.treatment_type_description",
            "select Professionals.first_name, Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Professionals.first_name, Treatment_Types.treatment_type_code_description",
            "select Professionals.first_name, Treatment_Types.treatment_type_description - Treatments.professional_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Sizes Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9906319379806519,
            0.9728845953941345,
            0.00016959839558694512,
            0.0002653820556588471,
            0.9411192536354065,
            0.8592058420181274,
            0.0025234902277588844,
            0.00481384014710784
        ],
        "align_select": "select Professionals.first_name, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list the treatments each professional has performed as a first name and treatment description.",
        "gold_select": "select distinct Professionals.first_name, Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Professionals.first_name, Treatment_Types.treatment_type_description",
            "select Professionals.first_name, Treatment_Types.treatment_type_code_description",
            "select Professionals.first_name, Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Professionals.first_name, Treatment_Types.treatment_type_description - Treatments.professional_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Professionals Treatments",
        "table_candidates": [
            "Treatment_Types Professionals Treatments",
            "Sizes Treatment_Types Professionals Treatments",
            "Charges Treatment_Types Professionals Treatments",
            "Breeds Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9842205047607422,
            0.9449912309646606,
            0.7469104528427124,
            0.6293380260467529,
            0.00024300221411976963,
            0.0007198152015917003,
            0.003371162572875619,
            0.004874101839959621
        ],
        "align_select": "select Professionals.first_name, Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me how many singers are from each country.",
        "gold_select": "select singer.Citizenship, count(*)",
        "select_candidates": [
            "select singer.Citizenship, count(*)",
            "select count(*), singer.Citizenship",
            "select singer.Citizenship.c4, count(*)",
            "select singer.Citizenship, count(*), singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.996005117893219,
            0.00023895714548416436,
            0.9959667921066284,
            0.0002125040628015995,
            0.002227092394605279,
            0.00020752463024109602,
            0.00015051256923470646,
            8.8004584540613e-05
        ],
        "align_select": "select singer.Citizenship, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "list the song title and singer's name.",
        "gold_select": "select song.Title, singer.Name",
        "select_candidates": [
            "select song.Title, singer.Name",
            "select singer.Name, song.Title",
            "select song.Title, t 0.c1",
            "select song.Title, t.0.c1"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9951537847518921,
            0.00010759623546618968,
            0.9949429631233215,
            0.00010350739466957748,
            0.0008020909153856337,
            0.00013969653809908777,
            0.0004667453176807612,
            6.86329003656283e-05
        ],
        "align_select": "select song.Title, singer.Name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the name of the singer who is worth the most?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9241071939468384,
            7.269153866218403e-05,
            0.000566238712053746,
            6.60792356939055e-05,
            0.0004947389825247228,
            6.736278010066599e-05,
            0.00046977741294540465,
            6.934194971108809e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who are the singers whose citizenship is not France? Give their names.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9738130569458008,
            0.00018960257875733078,
            0.00027920823777094483,
            6.787328311474994e-05,
            0.0002737253380473703,
            8.11083591543138e-05,
            0.0002847103460226208,
            6.727797881467268e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the name of singers whose citizenship is not France?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9910054206848145,
            0.00020597832917701453,
            0.0002498039393685758,
            6.927982030902058e-05,
            0.00017925770953297615,
            8.429952140431851e-05,
            0.0001705955364741385,
            6.538470915984362e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of singers whose citizenship is not \"France\"?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9931839108467102,
            0.00015884281310718507,
            0.00016817775031086057,
            6.567861419171095e-05,
            0.00017551078053656965,
            5.9261023125145584e-05,
            0.00016079063061624765,
            6.18133635725826e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the birth years and citizenship of these singers?",
        "gold_select": "select singer.Birth_Year, singer.Citizenship",
        "select_candidates": [
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Singer_ID, singer.Birth_Year, singer.Citizenship",
            "select singer.Name, singer.Birth_Year, singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9879987239837646,
            0.2606382668018341,
            0.00020776815654244274,
            0.00012847225298173726,
            0.0002734071167651564,
            0.00019324652384966612,
            0.9914748668670654,
            0.28221800923347473
        ],
        "align_select": "select singer.Birth_Year, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the birth year and citizenship of these singers?",
        "gold_select": "select singer.Birth_Year, singer.Citizenship",
        "select_candidates": [
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Singer_ID, singer.Birth_Year, singer.Citizenship",
            "select singer.Name, singer.Birth_Year, singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.990886926651001,
            0.12552419304847717,
            0.0002027028240263462,
            0.0001414214784745127,
            0.0002548977790866047,
            0.00022047282254789025,
            0.9929113984107971,
            0.08120772242546082
        ],
        "align_select": "select singer.Birth_Year, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell the birth year and citizenship of all the singers?",
        "gold_select": "select singer.Birth_Year, singer.Citizenship",
        "select_candidates": [
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Singer_ID, singer.Birth_Year, singer.Citizenship",
            "select singer.Name, singer.Birth_Year, singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8988901376724243,
            0.00010528650454944,
            0.0002044735592789948,
            7.820687460480258e-05,
            0.00025275841471739113,
            8.199740841519088e-05,
            0.9173771739006042,
            0.0001251798530574888
        ],
        "align_select": "select singer.Birth_Year, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me how many singers there are?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), singer.Singer_ID",
            "select count(*), singer.Name",
            "select count(*), singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.9924920201301575,
            0.9924920201301575,
            0.0001594066561665386,
            0.0001594066561665386,
            0.0002921572595369071,
            0.0002921572595369071,
            0.00018953245307784528,
            0.00018953245307784528
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which singers are there? List them by number.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select singer.Name, count(*)",
            "select singer.Singer_ID, count(*)",
            "select count(*), singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.5803438425064087,
            0.00026223508757539093,
            0.0009491786477155983,
            0.0005545290769077837,
            0.0006989644607529044,
            0.0006994038703851402,
            0.0002582044980954379,
            0.00023901955864857882
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the count of the singers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), singer.Singer_ID",
            "select count(*), singer.Name",
            "select count(*), singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.9945670366287231,
            6.053646939108148e-05,
            0.00014089840988162905,
            6.433499947888777e-05,
            0.00020291746477596462,
            7.832592382328585e-05,
            0.00015314477786887437,
            5.988992779748514e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you count all singers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), singer.Singer_ID",
            "select count(*), singer.Name",
            "select count(*, singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.9935861229896545,
            0.009400144219398499,
            0.00017682131147012115,
            0.00017466371355112642,
            0.0002130558859789744,
            0.0002305084781255573,
            0.00020064497948624194,
            0.00015984836500138044
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the list of singer names in ascending order of their net worth?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name in singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9935990571975708,
            0.00023500403040088713,
            0.00034355276147834957,
            0.00011588110646698624,
            0.00018486121552996337,
            0.00013477590982802212,
            0.0008985962485894561,
            0.00019165540288668126
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show me in ascending order of singers' fortune their names by net worth.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name in singer.Net_Worth_Millions",
            "select singer.Name par singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9956223368644714,
            0.0004251793725416064,
            0.0003665570402517915,
            0.0002999350253958255,
            0.0007897214964032173,
            0.00038447516271844506,
            0.0049729133024811745,
            0.0003299488453194499
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the list of the singers with the highest net worth? Give their names in ascending order.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name-ORDER BY-LIMIT"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.21305692195892334,
            8.420680387644097e-05,
            0.0003838276315946132,
            7.018744508968666e-05,
            0.00037412589881569147,
            6.72208407195285e-05,
            0.0003375012893229723,
            8.198957948479801e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give me the names of singers in ascending order of their net worth?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9943293929100037,
            0.00021689780987799168,
            0.0004041219362989068,
            0.0001278877753065899,
            0.00020687446522060782,
            0.00011020225792890415,
            0.0001815063296817243,
            0.00014249271771404892
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the citizenship and birth year of the singer?",
        "gold_select": "select singer.Birth_Year, singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship, singer.Birth_Year",
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Citizenship., singer.Birth_Year",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9945361614227295,
            0.0009663283708505332,
            0.9945067763328552,
            0.003173029748722911,
            0.005916249472647905,
            0.0003091676044277847,
            0.0008407063432969153,
            0.00048148262430913746
        ],
        "align_select": "select singer.Citizenship, singer.Birth_Year",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you tell me the citizenship and birth year of each singer?",
        "gold_select": "select singer.Birth_Year, singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship, singer.Birth_Year",
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Citizenship., singer.Birth_Year",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9947104454040527,
            0.0017383578233420849,
            0.9944280385971069,
            0.002659008838236332,
            0.006839147303253412,
            0.00035285280318930745,
            0.0008041299879550934,
            0.00048061093548312783
        ],
        "align_select": "select singer.Citizenship, singer.Birth_Year",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the birth years and citizenships of the singers?",
        "gold_select": "select singer.Birth_Year, singer.Citizenship",
        "select_candidates": [
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Singer_ID, singer.Birth_Year, singer.Citizenship",
            "select singer.Name, singer.Birth_Year, singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9929347634315491,
            0.003259297227486968,
            0.00019149026775266975,
            0.00013998965732753277,
            0.00031646585557609797,
            0.0001541359961265698,
            0.9933255910873413,
            0.004979408346116543
        ],
        "align_select": "select singer.Birth_Year, singer.Citizenship",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which singers are not French citizens? List their names.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select distinct singer.Name",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.8834689259529114,
            0.022313173860311508,
            0.00019635146600194275,
            0.00019951557624153793,
            0.09644195437431335,
            0.09016964584589005,
            0.0002749727573245764,
            0.00015473976964130998
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers are not French citizens? List their name.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select distinct singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.9047788977622986,
            0.010455422103404999,
            0.0776938945055008,
            0.08018915355205536,
            0.00019177733338437974,
            0.00019533728482201695,
            0.00026209134375676513,
            0.0001502092054579407
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the names of the singers whose birth years are either 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9905804991722107,
            0.0004942994564771652,
            0.0001935339969350025,
            7.245678716572002e-05,
            0.00022390852973330766,
            0.00010381925676483661,
            0.0001915258908411488,
            8.7436601461377e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers have birth years in either 1948 or 1949? List their names.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9693477153778076,
            0.0006894377875141799,
            0.00024492538068443537,
            8.956131932791322e-05,
            0.0004468421684578061,
            0.00020072418556082994,
            0.00032922488753683865,
            0.0001523094397271052
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the name of singers whose birth year is either 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name (or singer.Birth_Year)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9926780462265015,
            0.0007713707163929939,
            0.00019379622244741768,
            7.99047775217332e-05,
            0.0002359029313083738,
            0.0001193956341012381,
            0.0004454355512280017,
            8.91315721673891e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singer has the birth year either 1948 or 1949? List their names.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9781620502471924,
            0.00040338485268875957,
            0.00018860638374462724,
            8.447784057352692e-05,
            0.00029029586585238576,
            0.00017736658628564328,
            0.00024201857740990818,
            0.00013417605077847838
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers' birth years are either 1948 or 1949? List their names.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9833784699440002,
            0.26677441596984863,
            0.0002491113555151969,
            0.00028585430118255317,
            0.00039555749390274286,
            0.0002313738368684426,
            0.0003115875006187707,
            0.00028792789089493454
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who is the singer with the largest net worth? List his/her name.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Birth_Year, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9491366147994995,
            7.766545604681596e-05,
            0.0007360787712968886,
            7.190770702436566e-05,
            0.0005800502258352935,
            6.853257218608633e-05,
            0.0002923110732808709,
            7.039166666800156e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the name of the singer with the largest net worth?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.976398766040802,
            7.132706377888098e-05,
            0.0006049391231499612,
            6.795112130930647e-05,
            0.00084558135131374,
            6.536264845635742e-05,
            0.0006466425256803632,
            6.920764280948788e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the citizenship of singers and the total number of each citizenship.",
        "gold_select": "select singer.Citizenship, count(*)",
        "select_candidates": [
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship, count(*), singer.Citizenship",
            "select singer.Citizenship, count(*), singer.Net_Worth_Millions",
            "select singer.Citizenship, count(*), t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9967706203460693,
            0.0002737023460213095,
            0.00031034709536470473,
            0.00011776122119044885,
            0.0018699959618970752,
            9.80464683379978e-05,
            0.0002211891405750066,
            0.00012502573372330517
        ],
        "align_select": "select singer.Citizenship, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you show me the citizenship of different singers and the number of singers of each citizenship?",
        "gold_select": "select singer.Citizenship, count(*)",
        "select_candidates": [
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship, count(*), singer.Net_Worth_Millions",
            "select singer.Citizenship, count(*), singer.Citizenship",
            "select singer.Citizenship, count(*), t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9961572289466858,
            0.000316183315590024,
            0.002343724248930812,
            0.00013238488463684916,
            0.0004097381024621427,
            0.00015113096742425114,
            0.00024615423171781003,
            0.0001410839322488755
        ],
        "align_select": "select singer.Citizenship, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show the lists of singers by their most commonly held citizenships.",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Name, singer.Citizenship",
            "select singer.Citizenship, singer.Name",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.987092912197113,
            6.984625360928476e-05,
            0.0010402234038338065,
            6.070134259061888e-05,
            0.0008999368292279541,
            5.736877938034013e-05,
            0.00016979304200503975,
            5.502437852555886e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you give me the list of the most common citizenship of singers?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship--GROUP BY-ORDER BY-LIMIT",
            "select top-ten-dominant-gROUP BY-ORDER BY-LIMIT",
            "select singer.Citizenship, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9889798164367676,
            8.355345926247537e-05,
            0.001215792610310018,
            0.00010628495510900393,
            0.00022702755813952535,
            9.736521315062419e-05,
            0.000375550240278244,
            6.885932816658169e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What's the most common citizenship among the singers?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship--GROUP BY-ORDER BY-LIMIT",
            "select singer.Citizenship, singer.Net_Worth_Millions",
            "select singer.Citizenship, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9920910596847534,
            6.496463902294636e-05,
            0.0005995133542455733,
            8.077553502516821e-05,
            0.0004732562229037285,
            5.636436617351137e-05,
            0.0003997744352091104,
            5.885333666810766e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which countries is the most common nationality of singers?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, t0.c5",
            "select singer.Citizenship, singer.Net_Worth_Millions",
            "select singer.Citizenship (GROUP BY-ORDER BY-LIMIT)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9886111617088318,
            6.392563227564096e-05,
            0.00040490954415872693,
            6.643483357038349e-05,
            0.00031162076629698277,
            5.934239743510261e-05,
            0.004468121100217104,
            6.937065336387604e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Can you tell me the most common singer citizenship?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship--GROUP BY-ORDER BY-LIMIT",
            "select singer.Citizenship, t0.c5",
            "select singer.Citizenship, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9959492683410645,
            6.990169640630484e-05,
            0.0007867099484428763,
            9.296544158132747e-05,
            0.00038531754398718476,
            6.313803169177845e-05,
            0.00032722530886530876,
            6.046193448128179e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For each citizenship, what is the maximum net worth? Maximum means for each citizen, maximum net worth.",
        "gold_select": "select singer.Citizenship, max(singer.Net_Worth_Millions)",
        "select_candidates": [
            "select singer.Citizenship, max(singer.Net_Worth_Millions)",
            "select max(singer.Net_Worth_Millions), singer.Citizenship",
            "select maximum means(singer.Net_Worth_Millions), singer.Citizenship",
            "select maximum singer.Citizenship, max(singer.Net_Worth_Millions)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9861615896224976,
            0.00035946289426647127,
            0.9763171672821045,
            0.00036572004319168627,
            0.00037327592144720256,
            0.00016107084229588509,
            0.0005394996842369437,
            0.0002174054825445637
        ],
        "align_select": "select singer.Citizenship, max(singer.Net_Worth_Millions)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the maximum net worth of citizenships?",
        "gold_select": "select singer.Citizenship, max(singer.Net_Worth_Millions)",
        "select_candidates": [
            "select max(singer.Net_Worth_Millions)",
            "select max(singer.Net_Worth_Millions), singer.Citizenship",
            "select max(singer.Net_Worth_Millions) dependant on singer.Citizenship",
            "select Max(singer.Net_Worth_Millions), singer.Citizenship"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.2665676474571228,
            9.428011253476143e-05,
            0.9939783811569214,
            8.186177001334727e-05,
            0.010661651380360126,
            8.913335477700457e-05,
            0.9939783811569214,
            8.186177001334727e-05
        ],
        "align_select": "select max(singer.Net_Worth_Millions), singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the maximum net worth amount for each citizen under citizenship?",
        "gold_select": "select singer.Citizenship, max(singer.Net_Worth_Millions)",
        "select_candidates": [
            "select max(singer.Net_Worth_Millions), singer.Citizenship",
            "select singer.Citizenship, max(singer.Net_Worth_Millions)",
            "select maximum(singer.Net_Worth_Millions), singer.Citizenship",
            "select min(singer.Net_Worth_Millions), singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9917572140693665,
            0.0001434944715583697,
            0.9945394396781921,
            0.00016406869690399617,
            0.0012054156977683306,
            0.00010256750101689249,
            0.00032826082315295935,
            0.0001047118057613261
        ],
        "align_select": "select max(singer.Net_Worth_Millions), singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Let us see the song titles and names of the singers.",
        "gold_select": "select song.Title, singer.Name",
        "select_candidates": [
            "select song.Title, singer.Name",
            "select song.Title, singer.Name, song.Singer_ID",
            "select song.Title, singer.Name, singer.Birth_Year",
            "select song.Title, t.0.c1"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song",
            "singer song singer",
            "song singer song"
        ],
        "align_scores": [
            0.9913330674171448,
            0.00010926845425274223,
            0.00020825328829232603,
            6.63643513689749e-05,
            0.0002295894519193098,
            7.56504014134407e-05,
            0.0005653678672388196,
            8.698718738742173e-05
        ],
        "align_select": "select song.Title, singer.Name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "I want to see the titles of songs and names of singers.",
        "gold_select": "select song.Title, singer.Name",
        "select_candidates": [
            "select song.Title, singer.Name",
            "select song.Title, singer.Name",
            "select song.Title, t 0.c1",
            "select song.Title, song.Title"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song",
            "singer song singer"
        ],
        "align_scores": [
            0.993251383304596,
            0.0001009782645269297,
            0.993251383304596,
            0.0001009782645269297,
            0.0007082934025675058,
            0.00013143585238140076,
            0.0004854393773712218,
            8.486783190164715e-05
        ],
        "align_select": "select song.Title, singer.Name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Are you able to tell me the titles of songs by their names and singers?",
        "gold_select": "select song.Title, singer.Name",
        "select_candidates": [
            "select song.Title, song.Singer_ID",
            "select song.Title, singer.Name",
            "select song.Title, t01.c2",
            "select song.Title, t2.c2"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "song",
            "singer song"
        ],
        "align_scores": [
            0.005291705019772053,
            0.002518044551834464,
            0.030894579365849495,
            0.020538078621029854,
            0.0006327872979454696,
            0.000498937617521733,
            0.0006987805827520788,
            0.0005773387383669615
        ],
        "align_select": "select song.Title, song.Singer_ID",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you give me the names of all singers that have sales more than 300000?",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9426318407058716,
            0.8995799422264099,
            0.00019250741752330214,
            0.0003699093358591199,
            0.00028147263219580054,
            0.0006205012905411422,
            0.00018242937221657485,
            0.00037290388718247414
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the singers who have more than one song. List their names.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID, singer.Name",
            "select singer.Name, song.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9914802312850952,
            9.29245725274086e-05,
            0.0007104072719812393,
            8.085229637799785e-05,
            0.0009221419459208846,
            8.311354758916423e-05,
            0.3669683635234833,
            8.091438212431967e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me which singers have more than one song. List their names.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, count(distinct song.Singer_ID)",
            "select song.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9926659464836121,
            9.770831820787862e-05,
            0.0006314351339824498,
            8.123105362756178e-05,
            0.0002580696309451014,
            5.577620686381124e-05,
            0.0008432093891315162,
            8.567830809624866e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names of the singers who have more than one songs.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, song.Title",
            "select singer.Name, singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9859175086021423,
            9.149756806436926e-05,
            0.0005807090783491731,
            6.753760681021959e-05,
            0.6300060153007507,
            7.694494706811383e-05,
            0.0004427693784236908,
            6.866137846373022e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me the names of the singers with more than one songs.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID, singer.Name",
            "select singer.Name, song.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9904935956001282,
            9.42146943998523e-05,
            0.0003593850997276604,
            6.377669342327863e-05,
            0.0007128164288587868,
            6.932647374924272e-05,
            0.5424240231513977,
            6.551241676788777e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Can you give me the names of all the singers and the total sales of their songs?",
        "gold_select": "select singer.Name, sum(song.Sales)",
        "select_candidates": [
            "select singer.Name, sum(song.Sales)",
            "select song.Singer_ID, sum(song.Sales)",
            "select t2.c2, sum(song.Sales)",
            "select t3.c2, sum(song.Sales)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9672950506210327,
            0.00021746270067524165,
            0.0012509503867477179,
            0.00017461874813307077,
            0.00043523788917809725,
            0.00016691726341377944,
            0.0003217882476747036,
            0.00018923738389275968
        ],
        "align_select": "select singer.Name, sum(song.Sales)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Can you show me the names of singers and their total sales of their songs?",
        "gold_select": "select singer.Name, sum(song.Sales)",
        "select_candidates": [
            "select singer.Name, sum(song.Sales)",
            "select song.Singer_ID, sum(song.Sales)",
            "select t2.c2, sum(song.Sales)",
            "select t3.c2, sum(song.Sales)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9901934266090393,
            0.0001475931057939306,
            0.0013868713285773993,
            0.00016027783567551523,
            0.0005560168065130711,
            0.0001653095823712647,
            0.00036329866270534694,
            0.00016844832862261683
        ],
        "align_select": "select singer.Name, sum(song.Sales)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the list of singers whose names do not appear on any song.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Singer_ID",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.18693144619464874,
            0.7385678887367249,
            0.00024700359790585935,
            0.00019921619968954474,
            0.00018033880041912198,
            0.00021007326722610742,
            0.0005039519746787846,
            0.0002759923227131367
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Give me the names of singers who does not have any songs.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Singer_ID",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.31773465871810913,
            0.5785812139511108,
            0.00016802994650788605,
            0.0002330214047105983,
            0.000182780742761679,
            0.00015602371422573924,
            0.00019703974248841405,
            0.00021005926828365773
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
    },
    {
        "question": "List the names of singers who do not have any song list their names.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Title",
            "select singer.Name, singer.Singer_ID",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.9643889665603638,
            0.3435303568840027,
            0.0019103139638900757,
            0.0004352366377133876,
            0.00021771893079858273,
            0.0001840560435084626,
            0.00022759083367418498,
            0.00034537649480625987
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers have no songs? List their name.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Singer_ID",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, song.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.9484779238700867,
            0.5663729906082153,
            0.00022827238717582077,
            0.00018055936379823834,
            0.00018043424643110484,
            0.00019535126921255141,
            0.0004597702354658395,
            0.0009034192771650851
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers don't have songs? List them by name.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Singer_ID",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.3731878101825714,
            0.9539613127708435,
            0.000247279298491776,
            0.00020406866678968072,
            0.0002672110858839005,
            0.0003087976074311882,
            0.00016211364709306508,
            0.00019391154637560248
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Show me the name of every singer without a song.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Singer_ID",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, song.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.8812678456306458,
            0.2866717278957367,
            0.0001664420560700819,
            0.00011716823792085052,
            0.00016311375657096505,
            0.0001833344140322879,
            0.0004435031150933355,
            0.000289420917397365
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me a list of the citizenships shared by singers with birth years before 1945 and after 1955.",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Net_Worth_Millions, singer.Citizenship",
            "select singer.Birth_Year, singer.Citizenship",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9636238813400269,
            0.9636238813400269,
            0.0001990198652492836,
            0.0001990198652492836,
            0.00017107640451285988,
            0.00017107640451285988,
            0.00011160125723108649,
            0.00011160125723108649
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give the citizenships that are shared by singers who have birth year before 1945 and after 1955.",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Net_Worth_Millions, singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year",
            "select singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9913990497589111,
            0.373218834400177,
            0.0002008313749684021,
            0.00019720231648534536,
            0.0001573462359374389,
            0.00013672231580130756,
            0.00012956175487488508,
            0.00012290185259189457
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "How many features are currently available?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Other_Available_Features.feature_type_code",
            "select count(*), Other_Available_Features.feature_id",
            "select count(*), Other_Available_Features.feature_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Other_Available_Features",
        "table_candidates": [
            "Other_Available_Features",
            "Ref_Feature_Types Other_Available_Features",
            "Ref_Feature_Types",
            "Ref_Property_Types Other_Available_Features",
            "Properties Other_Property_Features",
            "Ref_Property_Types"
        ],
        "align_scores": [
            0.9917609691619873,
            0.9917609691619873,
            0.00022550727589987218,
            0.00022550727589987218,
            0.00019230597536079586,
            0.00019230597536079586,
            0.0002687996602617204,
            0.0002687996602617204
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me how many of your features are available?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Other_Available_Features.feature_type_code",
            "select count(*), Other_Available_Features.feature_id",
            "select count(*), Other_Available_Features.feature_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Other_Available_Features",
        "table_candidates": [
            "Other_Available_Features",
            "Ref_Feature_Types Other_Available_Features",
            "Ref_Property_Types Other_Available_Features",
            "Ref_Feature_Types Ref_Property_Types Other_Available_Features",
            "Ref_Feature_Types Ref_Property_Types",
            "Other_Available_Features Other_Property_Features",
            "Other_Available_Features Properties"
        ],
        "align_scores": [
            0.9783039093017578,
            0.00015419302508234978,
            0.000284251436823979,
            0.0002493946230970323,
            0.00023267818323802203,
            0.00019536897889338434,
            0.00042181488242931664,
            0.0003054342814721167
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of total available features?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Other_Available_Features.feature_type_code",
            "select count(*), Other_Available_Features.feature_id",
            "select count(*), Other_Available_Features.feature_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Other_Available_Features",
        "table_candidates": [
            "Other_Available_Features",
            "Ref_Feature_Types Other_Available_Features",
            "Ref_Property_Types Other_Available_Features",
            "Properties Other_Property_Features",
            "Other_Available_Features Properties"
        ],
        "align_scores": [
            0.9948912858963013,
            8.984788291854784e-05,
            0.00017843014211393893,
            6.569214747287333e-05,
            0.00018099081353284419,
            7.223966531455517e-05,
            0.0002132839144906029,
            7.077492773532867e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "There are how many available features?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Other_Available_Features.feature_type_code",
            "select count(*), Other_Available_Features.feature_id",
            "select count(*), Other_Available_Features.feature_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Other_Available_Features",
        "table_candidates": [
            "Other_Available_Features",
            "Ref_Feature_Types Other_Available_Features",
            "Ref_Property_Types Other_Available_Features",
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Properties Other_Property_Features",
            "Properties Other_Available_Features"
        ],
        "align_scores": [
            0.9904256463050842,
            0.9904256463050842,
            0.0002498649409972131,
            0.0002498649409972131,
            0.00020039029186591506,
            0.00020039029186591506,
            0.00028261603438295424,
            0.00028261603438295424
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "There are how many available features in total?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Other_Available_Features.feature_type_code",
            "select count(*), Other_Available_Features.feature_id",
            "select count(*), Other_Available_Features.feature_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Other_Available_Features",
        "table_candidates": [
            "Other_Available_Features",
            "Ref_Feature_Types Other_Available_Features",
            "Ref_Feature_Types",
            "Ref_Property_Types Other_Available_Features",
            "Properties Other_Property_Features",
            "Properties Other_Available_Features",
            "Ref_Property_Types"
        ],
        "align_scores": [
            0.9911770820617676,
            0.9911770820617676,
            0.00028409482911229134,
            0.00028409482911229134,
            0.0002395205374341458,
            0.0002395205374341458,
            0.0002885613648686558,
            0.0002885613648686558
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please tell me the feature type name of feature AirCon.",
        "gold_select": "select Ref_Feature_Types.feature_type_name",
        "select_candidates": [
            "select Ref_Feature_Types.feature_type_name",
            "select Ref_Feature_Types.feature_type_code, Ref_Feature_Types.feature_type_name",
            "select Ref_Feature_Types.feature_type_name, Other_Available_Features.feature_type_code",
            "select Ref_Feature_Types.feature_type_name, Other_Available_Features.feature_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Feature_Types Other_Available_Features",
        "table_candidates": [
            "Ref_Feature_Types Other_Available_Features",
            "Ref_Feature_Types Ref_Property_Types Other_Available_Features"
        ],
        "align_scores": [
            0.9930739402770996,
            8.11181016615592e-05,
            0.00015378293755929917,
            7.11458851583302e-05,
            0.00015803848509676754,
            6.014099926687777e-05,
            0.00020857002527918667,
            6.064047192921862e-05
        ],
        "align_select": "select Ref_Feature_Types.feature_type_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the property type descriptions of properties that belong to that code?",
        "gold_select": "select Ref_Property_Types.property_type_description",
        "select_candidates": [
            "select Ref_Property_Types.property_type_description",
            "select Ref_Property_Types.property_type_description, Properties.property_type_code",
            "select Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description",
            "select Ref_Property_Types.property_type_description, Properties.property_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Ref_Property_Types Properties",
        "table_candidates": [
            "Ref_Property_Types Properties"
        ],
        "align_scores": [
            0.9216716885566711,
            0.9825209975242615,
            0.00046044879127293825,
            0.00019027576490771025,
            0.002126174746081233,
            0.0002635004639159888,
            0.0001900105271488428,
            0.00012706435518339276
        ],
        "align_select": "select Ref_Property_Types.property_type_description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which properties are either houses or apartments with more than 1 room? List the names.",
        "gold_select": "select Properties.property_name",
        "select_candidates": [
            "select Properties.property_name",
            "select Properties.property_name, Properties.room_count",
            "select Properties.property_name, Properties.property_address",
            "select Properties.property_name, Properties.property_address, Properties.room_count"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties",
            "Other_Available_Features Properties",
            "Ref_Property_Types Properties",
            "Properties Other_Property_Features"
        ],
        "align_scores": [
            0.9807724952697754,
            0.8387897610664368,
            0.00031632892205379903,
            0.00014998135156929493,
            0.0003060612652916461,
            0.00016506071551702917,
            0.0002735142770688981,
            0.00016132122254930437
        ],
        "align_select": "select Properties.property_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you show me the list of properties with more than 1 room, and also identified as houses or apartments?",
        "gold_select": "select Properties.property_name",
        "select_candidates": [
            "select Properties.property_name",
            "select Properties.property_name, Properties.room_count",
            "select Properties.property_name, Properties.property_address",
            "select Properties.property_name, Properties.property_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties"
        ],
        "align_scores": [
            0.008466909639537334,
            0.761664628982544,
            0.00010665043373592198,
            0.0002530446508899331,
            0.00018302594253327698,
            0.0007528939167968929,
            0.00022514097508974373,
            0.0004540639347396791
        ],
        "align_select": "select Properties.property_name",
        "align_structure": "SELECT-FROM-WHERE"
    }
]