[
    {
        "question": "Give me the name of every singer, country and age starting from the oldest.",
        "gold_select": "select singer.Name, singer.Country, singer.Age",
        "select_candidates": [
            "select singer.Name, singer.Country, singer.Age",
            "select singer.Name, singer.Country & singer.Age",
            "select singer.Name, singer.Country., singer.Age",
            "select singer.Name, singer.Country, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9928874373435974,
            0.9928874373435974,
            0.9843971133232117,
            0.9843971133232117,
            0.15360917150974274,
            0.15360917150974274,
            0.9928874373435974,
            0.9928874373435974
        ],
        "align_select": "select singer.Name, singer.Country, singer.Age",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show singers; show where they come from; and show their ages in descending order.",
        "gold_select": "select singer.Name, singer.Country, singer.Age",
        "select_candidates": [
            "select singer.Name, singer.Country, singer.Age",
            "select singer.Singer_ID, singer.Country, singer.Age",
            "select singer.Name, singer.Country, singer.Age",
            "select singer.Name, singer.Country & singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9897211194038391,
            0.9897211194038391,
            0.001134467893280089,
            0.001134467893280089,
            0.9897211194038391,
            0.9897211194038391,
            0.989788293838501,
            0.989788293838501
        ],
        "align_select": "select singer.Name, singer.Country, singer.Age",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "list all the songs by those singers who are above average age.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Is_male",
            "select singer.Song_Name, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9668731689453125,
            0.0001249110937351361,
            0.00017449058941565454,
            6.611731078010052e-05,
            0.00017538400425110012,
            5.9888960095122457e-05,
            0.00021099911828059703,
            6.542220216942951e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the songs by singer who have been around longer than the average age.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Age",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8791131973266602,
            0.0001894654124043882,
            0.00028234050842002034,
            7.750195800326765e-05,
            0.00021469706553034484,
            7.000195910222828e-05,
            0.00021515446132980287,
            7.16442518751137e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the stadium name and capacity with the most concerts since 2014?",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, stadium.Average",
            "select stadium.Name.c2, stadium.Capacity",
            "select stadium.Name.c3, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9882075190544128,
            0.00022243142302613705,
            0.00022976922628004104,
            7.502058724639937e-05,
            0.0005438046646304429,
            8.738142787478864e-05,
            0.014405743218958378,
            0.00011188072676304728
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name and capacity of the stadium that has hosted the most concerts in 2014 or after?",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Location, stadium.Capacity",
            "select stadium.Name., stadium.Capacity",
            "select stadium.Capacity, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9816017746925354,
            0.0005636729765683413,
            0.0011343741789460182,
            0.000122990008094348,
            0.007503957953304052,
            0.0003898020659107715,
            0.9848729372024536,
            0.0007061599171720445
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the stadium name and capacity with the highest number of concerts since 2014.",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, stadium.Highest",
            "select stadium.Location, stadium.Capacity",
            "select stadium.Name.c3, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9864382743835449,
            0.9857082366943359,
            0.0002732184366323054,
            0.00023452455934602767,
            0.0011124670272693038,
            0.001211963128298521,
            0.007287269923835993,
            0.0070132967084646225
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name and capacity of the stadium with most 'concerts' events in 2014 or later?",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Stadium_ID, stadium.Name, stadium.Capacity",
            "select stadium.Location, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, avg(concert.Year)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9906264543533325,
            0.2706945538520813,
            0.0013009816175326705,
            0.0008048936142586172,
            0.0013468381948769093,
            0.00045926851453259587,
            0.00023149960907176137,
            0.00014780816854909062
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show stadiums and capacities with most concerts in Year 2014 or later.",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Location, stadium.Capacity",
            "select stadium.Stadium_ID, stadium.Name, stadium.Capacity",
            "select stadium.Name.c2, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.991901695728302,
            0.00011184511095052585,
            0.0007174614001996815,
            8.13861915958114e-05,
            0.0441182442009449,
            0.00013658199168276042,
            0.0002687886590138078,
            5.911331390962005e-05
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name and capacity of the stadium which held the most concerts in 2014 or later?",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Location, stadium.Capacity",
            "select stadium.Name., stadium.Capacity",
            "select stadium.Capacity, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9861705303192139,
            0.0003385799063835293,
            0.0011268649250268936,
            0.00011122081195935607,
            0.007470833603292704,
            0.00035059195943176746,
            0.98826664686203,
            0.0004089951398782432
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For stadiums that held most concerts in 2014 or after, show their names and capacities.",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Stadium_ID, stadium.Name, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, avg(concert.Year)",
            "select stadium.Location, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9827899932861328,
            0.00010814573761308566,
            0.0012719944352284074,
            0.00013052861322648823,
            0.00019402398902457207,
            6.283554102992639e-05,
            0.0007008290267549455,
            7.987536082509905e-05
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the stadium name and capacity with the largest number of concerts in 2014 or later.",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, stadium.Highest",
            "select stadium.Name.c2, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, stadium.Average"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9891276955604553,
            0.00019611907191574574,
            0.00024880276760086417,
            6.762642442481592e-05,
            0.0005141019937582314,
            7.697180262766778e-05,
            0.0002596761623863131,
            7.206956797745079e-05
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which countries have singers who are over 40 years old, and have singers who are under 30 years old?",
        "gold_select": "select singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select singer.Country, singer.Song_Name",
            "select singer.Country, singer.Age",
            "select singer.Country (singer.Age), singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9300857782363892,
            0.9929446578025818,
            0.0001136970313382335,
            0.00020085208234377205,
            0.00018959860608447343,
            0.00024579447926953435,
            0.00014454888878390193,
            0.00017029648006428033
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the countries where singers over age 40 and under 30 are from.",
        "gold_select": "select singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select singer.Country, singer.Age",
            "select singer.Country for both (singer.Age), (singer.Is_male)",
            "select singer.Country for both singer.Age, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9948352575302124,
            0.9558867812156677,
            0.00021996554278302938,
            0.0001461667998228222,
            0.00016002097981981933,
            0.00015284119581338018,
            0.0001577798102516681,
            0.00017508691234979779
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the countries where a singer who is over 40 and another who is under 30 are from.",
        "gold_select": "select singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select singer.Country, singer.Age",
            "select singer.Country, singer.Song_Name",
            "select singer.Country, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9937923550605774,
            0.9937923550605774,
            0.0002983089361805469,
            0.0002983089361805469,
            0.00015521958994213492,
            0.00015521958994213492,
            0.00021542827016673982,
            0.00021542827016673982
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the number of concerts that took place in the biggest stadium?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select concert.Stadium_ID, count(*)",
            "select count(*), stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.22951538860797882,
            0.8518980145454407,
            0.013585108332335949,
            0.0014988540206104517,
            0.9141479134559631,
            0.01000334694981575,
            0.0012950783129781485,
            0.0002670147514436394
        ],
        "align_select": "select concert.Stadium_ID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the number of concerts that have occurred in the biggest stadium.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select concert.Stadium_ID, count(*)",
            "select count(*), stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.29799968004226685,
            0.9710704684257507,
            0.01851544715464115,
            0.0020821066573262215,
            0.9392626285552979,
            0.018648315221071243,
            0.0012469568755477667,
            0.00029482608078978956
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which are number of bands performed in the large stadium?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct concert.concert_Name)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.9933805465698242,
            0.0012625308008864522,
            0.006423922721296549,
            0.0002301274798810482,
            0.0002735723974183202,
            0.011690894141793251,
            0.00016121126827783883,
            0.0006992665585130453
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many concerts have taken place in the largest stadium?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select concert.Stadium_ID, count(*)",
            "select count(*), stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.8774960041046143,
            0.12844318151474,
            0.0017004229594022036,
            0.016919497400522232,
            0.013315020129084587,
            0.7363497614860535,
            0.000314094009809196,
            0.001312156324274838
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many concerts occurred in the stadium with the highest capacity?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select count(*), stadium.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.9649505019187927,
            0.8723227381706238,
            0.001409111195243895,
            0.0171648059040308,
            0.0003338375245220959,
            0.0016276186797767878,
            0.0003894970868714154,
            0.002886115340515971
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many concerts were performed in the largest stadium?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select avg(concert.concert_Name)",
            "select concert.Stadium_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.8985434174537659,
            0.12093780189752579,
            0.0018258829368278384,
            0.017574453726410866,
            0.0004795709974132478,
            0.00035100500099360943,
            0.012656612321734428,
            0.7772303819656372
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "list all song names by singers older than the average.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Is_male",
            "select singer.Song_Name, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9912721514701843,
            0.00011045391147490591,
            0.00014870399900246412,
            5.470747055369429e-05,
            0.00015448295744135976,
            5.5288997828029096e-05,
            0.00019452450214885175,
            6.146380474092439e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all songs sung by a singer older than the average age.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Is_male",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9589861631393433,
            0.00014140245912130922,
            0.00021833238133694977,
            6.406079774023965e-05,
            0.000174831657204777,
            6.751855107722804e-05,
            0.0002063364809146151,
            6.452621164498851e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all song titles by singers older than the average.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Is_male",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9884262084960938,
            0.00012610763951670378,
            0.0001714085228741169,
            5.623272227239795e-05,
            0.00015760901442263275,
            5.549236448132433e-05,
            0.0002212591643910855,
            6.263925752136856e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list all songs names by singers older than average.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Is_male",
            "select singer.Song_Name, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9918084740638733,
            0.00011604386236285791,
            0.000148696344695054,
            5.688653982360847e-05,
            0.00015183512005023658,
            5.662814510287717e-05,
            0.00019223851268179715,
            6.281147216213867e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the song by singers that are older than the average?",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Age",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9734013080596924,
            8.991919457912445e-05,
            0.00017895986093208194,
            6.40378930256702e-05,
            0.00013823706831317395,
            5.7612745877122506e-05,
            0.00017597766418475658,
            5.616321868728846e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all song names by singers older than average.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Is_male",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9925566911697388,
            0.00012069669901393354,
            0.00014824754907749593,
            5.7217650464735925e-05,
            0.00014692415425088257,
            5.678518209606409e-05,
            0.00019892575801350176,
            6.4663021476008e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list all songs by singers older than average.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Is_male",
            "select singer.Song_Name, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9852801561355591,
            8.634669211460277e-05,
            0.0001618958340259269,
            5.8834313676925376e-05,
            0.00014740209735464305,
            5.7630160881672055e-05,
            0.00018859362171497196,
            6.109681271482259e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Display all songs by singers over the average age.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Age",
            "select singer.Song_Name, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9827699661254883,
            9.487264469498768e-05,
            0.00013739602582063526,
            5.888314626645297e-05,
            0.0002610215451568365,
            6.481976743089035e-05,
            0.0001808529777918011,
            5.9831243561347947e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the counties with singers older than twenty.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select distinct singer.Country",
            "select count(distinct singer.Country)",
            "select distinct singer.Country, singer.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9529294967651367,
            0.9798378348350525,
            0.05581354349851608,
            0.0001726380578475073,
            0.004429048392921686,
            0.00011682707554427907,
            0.00013732477964367718,
            0.00010131295130122453
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the list of countries with singers older than twenty?",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select distinct singer.Country",
            "select list(singer.Country)",
            "select the singer.Country"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8754620552062988,
            0.9903054237365723,
            0.15470245480537415,
            0.00040568551048636436,
            0.003983720671385527,
            0.000829256430733949,
            0.0012914201943203807,
            0.0014525590231642127
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out what the different countries have singers older than twenty years old.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select distinct singer.Country",
            "select count(distinct singer.Country)",
            "select singer.Country",
            "select distinct singer.Country, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9610679745674133,
            0.003014638554304838,
            0.00841742567718029,
            0.00016940510249696672,
            0.6513855457305908,
            0.9507554173469543,
            0.000151707194163464,
            0.00011224447371205315
        ],
        "align_select": "select distinct singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The different countries with singers that exceed twenty years old.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select distinct singer.Country",
            "select count(distinct singer.Country)",
            "select distinct singer.Country, singer.Song_Name",
            "select distinct singer.Country, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9883848428726196,
            0.0007340312586165965,
            0.003170147305354476,
            9.44718049140647e-05,
            0.00010984282562276348,
            8.413768955506384e-05,
            0.00014128304610494524,
            8.641704334877431e-05
        ],
        "align_select": "select distinct singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all the countries with singers above twenty years old.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select distinct singer.Country",
            "select singer.Country, singer.Age",
            "select singer.Country, singer.Is_male"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.881000816822052,
            0.9840011596679688,
            0.38356339931488037,
            0.0001833272399380803,
            0.000168482685694471,
            0.00011962742428295314,
            0.00015846792666707188,
            0.00030777943902648985
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the countries with singers older than 20.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select distinct singer.Country",
            "select singer.Country, singer.Age",
            "select singer.Country, singer.Is_male"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9455218315124512,
            0.9849389791488647,
            0.0650288313627243,
            0.0002104742598021403,
            0.00015554093988612294,
            0.00010891310375882313,
            0.00013841369946021587,
            0.0002530024212319404
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the countries that have singers older than twenty years old.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select distinct singer.Country",
            "select count(distinct singer.Country)",
            "select singer.Country, singer.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8141002655029297,
            0.980930745601654,
            0.17216643691062927,
            0.0006058929138816893,
            0.007867508567869663,
            0.00010885860683629289,
            0.00021452599321492016,
            0.00012706338020507246
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the different countries with singers over 20 years old.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select distinct singer.Country",
            "select count(distinct singer.Country)",
            "select distinct singer.Country, singer.Age",
            "select distinct singer.Country, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9764639139175415,
            0.001834418741054833,
            0.0017614647513255477,
            9.227627015206963e-05,
            0.00014189181092660874,
            7.542731327703223e-05,
            0.00021591089898720384,
            8.786673424765468e-05
        ],
        "align_select": "select distinct singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all the countries in which singers over 20 years old are from?.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select distinct singer.Country",
            "select singer.Country",
            "select count(distinct singer.Country)",
            "select distinct singer.Country, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8579990863800049,
            0.00031136092729866505,
            0.6553952097892761,
            0.00021339685190469027,
            0.022626079618930817,
            7.334935071412474e-05,
            0.00014391638978850096,
            6.372173083946109e-05
        ],
        "align_select": "select distinct singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all distinct countries where singers are over 20 years old?",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select distinct singer.Country",
            "select distinct singer.Country, singer.Age",
            "select count(distinct singer.Country)",
            "select distinct singer.Country, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9913342595100403,
            0.0005813747411593795,
            0.00015734368935227394,
            9.423831215826795e-05,
            0.002574317157268524,
            0.00012638885527849197,
            0.00023927493020892143,
            9.717765351524577e-05
        ],
        "align_select": "select distinct singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all distinct countries where singer is over 20 years old?",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select distinct singer.Country",
            "select distinct singer.Country, singer.Age",
            "select count(distinct singer.Country)",
            "select distinct singer.Country, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9944137334823608,
            0.00034947972744703293,
            0.00016185909043997526,
            9.87807143246755e-05,
            0.0013169045560061932,
            0.00014194213144946843,
            0.00023597893596161157,
            0.00010522246884647757
        ],
        "align_select": "select distinct singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the countries where singers are over 20 years old.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select distinct singer.Country",
            "select count(distinct singer.Country)",
            "select singer.Country, singer.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.7984845638275146,
            0.8627076148986816,
            0.7232193350791931,
            0.00022775061370339245,
            0.009985596872866154,
            0.0001223818981088698,
            0.00015893705131020397,
            0.00011607242049649358
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of concerts have been held in the largest stadium.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select concert.Stadium_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.6166883707046509,
            0.977961003780365,
            0.025153938680887222,
            0.002237434731796384,
            0.0013625932624563575,
            0.000287972652586177,
            0.8864850997924805,
            0.012898745015263557
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the number of concerts in the largest stadium.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select avg(concert.concert_Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.1792721152305603,
            0.9908322691917419,
            0.008219188079237938,
            0.00024720976944081485,
            0.0005773569573648274,
            0.0001809852838050574,
            0.00029477692442014813,
            0.00049069884698838
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many concerts have happened at the stadium with the largest capacity?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select count(*), stadium.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.890320897102356,
            0.9197100400924683,
            0.018816765397787094,
            0.0016408961964771152,
            0.0014519237447530031,
            0.000350548536516726,
            0.009626449085772038,
            0.0005749122356064618
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the number of concerts held in the largest stadium.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select avg(concert.concert_Name)",
            "select count(*), stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.5210747122764587,
            0.9868513941764832,
            0.012176524847745895,
            0.0014171305811032653,
            0.00032213967642746866,
            0.0005473368219099939,
            0.0008834266918711364,
            0.00022812616953160614
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the number of concerts that happened in the largest stadium.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select concert.Stadium_ID, count(*)",
            "select count(*), stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.407230019569397,
            0.985765278339386,
            0.012874542735517025,
            0.001989176496863365,
            0.767755389213562,
            0.011672011576592922,
            0.001150529133155942,
            0.000299969338811934
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many concerts have happened in the stadium with the largest capacity?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select count(*), stadium.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.9055773019790649,
            0.9438993334770203,
            0.021042846143245697,
            0.001942224451340735,
            0.0017658401047810912,
            0.00039472029311582446,
            0.00390406115911901,
            0.0005108838086016476
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the number of concerts that have had in the largest stadium?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select concert.Stadium_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.6390151977539062,
            0.964369535446167,
            0.07139261811971664,
            0.00423072325065732,
            0.0025233353953808546,
            0.00046001069131307304,
            0.8686434626579285,
            0.017409728839993477
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the total of concerts performed in the biggest stadium.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select sum(concert.concert_Name)",
            "select count(*), stadium.Name",
            "select avg(concert.concert_Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.9490395188331604,
            0.3933842182159424,
            0.0007747325580567122,
            0.0004609085444826633,
            0.0012302938848733902,
            0.010896913707256317,
            0.0005390974693000317,
            0.0003574552247300744
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which singer performed how many concerts?",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select count(*), singer.Name",
            "select singer.Name, count(*), concert.Stadium_ID",
            "select singer.Name, count(*), concert.concert_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer singer_in_concert",
            "singer concert singer_in_concert"
        ],
        "align_scores": [
            8.401703234994784e-05,
            0.992466390132904,
            9.716080239741132e-05,
            0.9914672374725342,
            7.37002701498568e-05,
            0.001769951661117375,
            6.335823854897171e-05,
            0.0003014475223608315
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What singers are on the list of concerts? How many concerts for each singer?",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select singer_in_concert.Singer_ID, count(*)",
            "select concert.concert_Name, count(*)",
            "select concert_singer, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer concert singer_in_concert",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9879042506217957,
            0.0002880478568840772,
            0.9120485782623291,
            0.000570360803976655,
            0.0023517399094998837,
            0.00027444970328360796,
            0.23538118600845337,
            0.0003328253224026412
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which singers performed how many concerts?",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select singer.Name, count(*), concert.Stadium_ID",
            "select count(*), singer.Name",
            "select singer.Name, count(*), concert.concert_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer singer_in_concert",
            "singer concert singer_in_concert"
        ],
        "align_scores": [
            0.9904583692550659,
            9.411348582943901e-05,
            0.001713356701657176,
            7.333109533647075e-05,
            0.9873934984207153,
            0.00010049795673694462,
            0.000415690999943763,
            5.83568362344522e-05
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What singers have had how many concerts?",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select count(*), singer.Name",
            "select concert_singer_singer.Name, count(*)",
            "select singer.Name, count(*), concert.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer singer_in_concert",
            "singer concert singer_in_concert"
        ],
        "align_scores": [
            0.00038417577161453664,
            0.0002472114283591509,
            0.00016291480278596282,
            0.0002162044693250209,
            0.00012365772272460163,
            0.00012810257612727582,
            8.403112587984651e-05,
            9.710558515507728e-05
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List singers and their concert count for each.",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select singer_in_concert.Singer_ID, count(*)",
            "select concert.concert_Name, count(*)",
            "select singer.Singer_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer singer_in_concert",
            "singer concert singer_in_concert",
            "concert singer_in_concert"
        ],
        "align_scores": [
            0.9952512979507446,
            0.0001503338571637869,
            0.7332478761672974,
            0.00018616292800288647,
            0.0007319796131923795,
            0.00020394552848301828,
            0.019118651747703552,
            0.00024013014626689255
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the youngest, the oldest, and the middle age of a group of French singers?",
        "gold_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "select_candidates": [
            "select min(singer.Age), max(singer.Age), min(singer.Age)",
            "select singer.Singer_ID, singer.Country, singer.Age",
            "select singer.Singer_ID, singer.Age, singer.Is_male",
            "select singer.Singer_ID, singer.Name, singer.Age"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.00021880523127038032,
            0.0009653547895140946,
            0.0005575192044489086,
            0.00020858514471910894,
            0.0002649838861543685,
            0.00011751274723792449,
            0.0003323440032545477,
            0.00018204451771453023
        ],
        "align_select": "select min(singer.Age), max(singer.Age), min(singer.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the locations and names of stations with capacity of 5000 to 10,000.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0.c 1, stadium.Name",
            "select stadium.Location, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9880727529525757,
            0.0003318627714179456,
            0.012689420022070408,
            0.00011330653069308028,
            0.00040085980435833335,
            7.380281022051349e-05,
            0.9880727529525757,
            0.0003318627714179456
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all stations between 5,000 and 10,000 in size and show me their locations and names.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select concert.concert_Name, stadium.Name",
            "select stadium.Name, stadium.Location",
            "select stadium.Location., stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium",
            "stadium concert"
        ],
        "align_scores": [
            0.99297696352005,
            0.00020976386440452188,
            0.0002621325838845223,
            8.261563925771043e-05,
            0.9929555654525757,
            0.0001756119163474068,
            0.018721316009759903,
            9.686605335446075e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the location and name of all stations with capacity between 5,000 and 10,000.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0.c 1, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9750531911849976,
            0.00024630094412714243,
            0.0001885432720882818,
            9.262423554901034e-05,
            0.015152822248637676,
            0.00011414174514357,
            0.0004726692277472466,
            8.174911636160687e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What stations have capacity between 5000 and 10000? And Where are they?",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location",
            "select stadium.Name, stadium.Location",
            "select stadium.Location.c2, stadium.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.990698516368866,
            0.0003629943821579218,
            0.03949074447154999,
            0.0007914976449683309,
            0.9537932872772217,
            0.0005762666696682572,
            0.00035953419865109026,
            8.225380588555709e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the locations and names of all stations in range from 5000-10,000 capacity.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select stadium.Location, stadium.Name",
            "select t0.c 1, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9912312626838684,
            0.00017790943093132228,
            0.010725894011557102,
            0.00010774850670713931,
            0.9912312626838684,
            0.00017790943093132228,
            0.00041367931407876313,
            8.475954382447526e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all stations that can fit 5-10k passengers and their locations and names.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location, stadium.Name",
            "select stadium.Location, stadium.Name, stadium.Capacity",
            "select stadium.Capacity, stadium.Location, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.652880072593689,
            0.0006495090783573687,
            0.0024281113874167204,
            0.0002226457290817052,
            0.00400110287591815,
            0.00012042206071782857,
            0.028826501220464706,
            0.00014045668649487197
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What stadium had concerts that took place in 2014 and 2015? And where are they?",
        "gold_select": "select stadium.Name, stadium.Location",
        "select_candidates": [
            "select stadium.Name, stadium.Location",
            "select stadium.Location, stadium.Name",
            "select stadium.Name.c1, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.0005824484978802502,
            0.0018523435574024916,
            0.0003510287497192621,
            0.0007582891848869622,
            0.00016554018657188863,
            9.737357322592288e-05,
            0.0006127309752628207,
            0.0068851434625685215
        ],
        "align_select": "select stadium.Name, stadium.Location",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What stadiums hosted concerts which took place in both 2014 and 2015? And where are those places?",
        "gold_select": "select stadium.Name, stadium.Location",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Name, stadium.Location",
            "select stadium.Stadium_ID, stadium.Location",
            "select stadium.Name.c1, stadium.Name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.3095819354057312,
            0.3095819354057312,
            0.6832011342048645,
            0.6832011342048645,
            0.40056347846984863,
            0.40056347846984863,
            0.0006576013984158635,
            0.0006576013984158635
        ],
        "align_select": "select stadium.Name, stadium.Location",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What stadiums were used for concerts in 2014 and 2015? And where are they?",
        "gold_select": "select stadium.Name, stadium.Location",
        "select_candidates": [
            "select stadium.Name, stadium.Location",
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location",
            "select stadium.Name.c1, stadium.Name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.002362682018429041,
            0.0056531233713030815,
            0.0010311704827472568,
            0.0013114112662151456,
            0.002100239507853985,
            0.0018338968511670828,
            0.00010113062307937071,
            0.0001947643031599
        ],
        "align_select": "select stadium.Name, stadium.Location",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What's the name/nation of a singer that has a song that haves with \"hey\"?",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select singer.Name, singer.Country, singer.Song_Name",
            "select singer.Name, singer.Country, singer.Singer_ID",
            "select singer.Name, singer.Country - singer.Song_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9042126536369324,
            0.0001702742447378114,
            0.00026156636886298656,
            8.140823774738237e-05,
            0.00018039278802461922,
            8.565076859667897e-05,
            0.0007590418681502342,
            7.150460442062467e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who was singing in concerts in 2014?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, concert.concert_ID",
            "select singer.Name, concert.concert_Name",
            "select singer.Name, concert.Theme"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "singer concert singer_in_concert",
            "concert singer_in_concert",
            "stadium singer concert singer_in_concert",
            "stadium concert singer_in_concert"
        ],
        "align_scores": [
            0.9594220519065857,
            0.00014415218902286142,
            0.0001497181656304747,
            7.03455152688548e-05,
            0.00018011625797953457,
            6.437992851715535e-05,
            0.00020781926286872476,
            6.874890823382884e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all singers at concerts in 2014.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer_in_concert.Singer_ID",
            "select singer_in_concert.Singer_ID, concert.concert_Name",
            "select singer_in_concert.Singer_ID, concert.Theme",
            "select singer_in_concert.Singer_ID, concert.Stadium_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert",
            "singer concert singer_in_concert",
            "stadium concert singer_in_concert"
        ],
        "align_scores": [
            0.007669865619391203,
            0.0005113736260682344,
            0.00014127699250821024,
            8.557190449209884e-05,
            0.0002662952756509185,
            8.951453492045403e-05,
            0.00015502152382396162,
            8.60849249875173e-05
        ],
        "align_select": "select singer_in_concert.Singer_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show list singers in concerts in 2014.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer_in_concert.Singer_ID",
            "select singer_in_concert.Singer_ID, concert.concert_Name",
            "select singer_in_concert.Singer_ID, concert.Theme",
            "select concert.concert_Name, singer_in_concert.Singer_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert",
            "singer concert singer_in_concert",
            "stadium concert singer_in_concert"
        ],
        "align_scores": [
            0.0017303142230957747,
            0.0001272637164220214,
            0.0001466665999032557,
            6.609952833969146e-05,
            0.0002132365625584498,
            6.99813972460106e-05,
            0.00017022441898006946,
            6.615085294470191e-05
        ],
        "align_select": "select singer_in_concert.Singer_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What singer was performing in 2014 concerts?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer_in_concert.Singer_ID",
            "select singer.Name, concert.concert_Name",
            "select singer.Name, concert.concert_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "singer concert singer_in_concert",
            "concert singer_in_concert",
            "stadium singer concert singer_in_concert",
            "stadium concert singer_in_concert"
        ],
        "align_scores": [
            0.887474536895752,
            0.00010705598106142133,
            0.04512317106127739,
            0.00016590284940320998,
            0.0001693198282737285,
            5.878171214135364e-05,
            0.00013543656677938998,
            6.460439908551052e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list all singers performing in the concert in 2014.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer_in_concert.Singer_ID",
            "select singer_in_concert.Singer_ID, concert.Theme",
            "select singer_in_concert.Singer_ID, singer.Name",
            "select singer_in_concert.Singer_ID, concert.Stadium_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert",
            "singer concert singer_in_concert",
            "stadium concert singer_in_concert"
        ],
        "align_scores": [
            0.014189138077199459,
            0.0003140907210763544,
            0.0002678056189324707,
            9.012418740894645e-05,
            0.00024690848658792675,
            8.65253823576495e-05,
            0.0001808634988265112,
            8.260106551460922e-05
        ],
        "align_select": "select singer_in_concert.Singer_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all singers who have performed in concert during 2014.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer_in_concert.Singer_ID",
            "select singer_in_concert.Singer_ID, concert.Theme",
            "select distinct singer_in_concert.Singer_ID",
            "select singer_in_concert.Singer_ID, concert.Stadium_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert",
            "singer concert singer_in_concert",
            "stadium concert singer_in_concert"
        ],
        "align_scores": [
            0.006548123899847269,
            0.00018264941172674298,
            0.00032923807157203555,
            8.804151002550498e-05,
            0.1336347460746765,
            0.0001342608011327684,
            0.00024337644572369754,
            7.884841761551797e-05
        ],
        "align_select": "select singer_in_concert.Singer_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers appeared in concert in 2014?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer_in_concert.Singer_ID",
            "select singer.Name",
            "select singer.Name, singer_in_concert.Singer_ID",
            "select singer_in_concert.Singer_ID, singer.Country"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert",
            "singer concert singer_in_concert",
            "stadium concert singer_in_concert"
        ],
        "align_scores": [
            0.045390110462903976,
            0.00023735131253488362,
            0.6973857879638672,
            0.0002090295311063528,
            0.0002807755081448704,
            7.672483479836956e-05,
            0.0003795361262746155,
            6.951295654289424e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the list of singers that played in concerts in 2014.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer_in_concert.Singer_ID",
            "select singer_in_concert.Singer_ID, concert.Theme",
            "select concert.concert_ID, singer.Name",
            "select singer.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert",
            "singer concert singer_in_concert",
            "stadium concert singer_in_concert"
        ],
        "align_scores": [
            0.008712215349078178,
            0.00017445032426621765,
            0.00022629558225162327,
            7.451906276401132e-05,
            0.0002062464045593515,
            6.72423848300241e-05,
            0.9086109399795532,
            0.00012261739175301045
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list all singers in concerts in 2014.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer_in_concert.Singer_ID",
            "select singer_in_concert.Singer_ID, concert.concert_Name",
            "select singer_in_concert.Singer_ID, concert.Theme",
            "select singer_in_concert.Singer_ID, concert.concert_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert",
            "singer concert singer_in_concert",
            "stadium concert singer_in_concert"
        ],
        "align_scores": [
            0.009901871904730797,
            0.0002101466088788584,
            0.00014303233183454722,
            6.670309812761843e-05,
            0.00021704718528781086,
            6.782818672945723e-05,
            0.00013762747403234243,
            6.381831190083176e-05
        ],
        "align_select": "select singer_in_concert.Singer_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of the singers who have performed in concerts in 2014, list them.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer_in_concert.Singer_ID",
            "select singer_in_concert.Singer_ID, concert.Theme",
            "select singer.Name",
            "select singer_in_concert.Singer_ID, concert.Stadium_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert",
            "singer concert singer_in_concert",
            "stadium concert singer_in_concert"
        ],
        "align_scores": [
            0.01904667168855667,
            0.12220121175050735,
            0.0003402681031730026,
            0.00027142028557136655,
            0.7556402087211609,
            0.7153636813163757,
            0.00021674606250599027,
            0.0002448880404699594
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers were appearing in concerts in 2014?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer_in_concert.Singer_ID",
            "select singer.Name",
            "select singer_in_concert.Singer_ID, concert.Theme",
            "select singer.Name, concert.concert_ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer concert singer_in_concert",
        "table_candidates": [
            "concert singer_in_concert",
            "singer concert singer_in_concert",
            "stadium concert singer_in_concert",
            "stadium singer concert singer_in_concert"
        ],
        "align_scores": [
            0.043803729116916656,
            0.00023142059217207134,
            0.5359532833099365,
            0.00017862945969682187,
            0.0002470024337526411,
            7.471722346963361e-05,
            0.00014854216715320945,
            6.778912211302668e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What singers have songs with Hey in their titles? And where are they from?",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select distinct singer.Name, singer.Country",
            "select concert_singer singer.Name, singer.Country",
            "select concert_singer_singer.Name, singer.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.595658540725708,
            0.00013436503650154918,
            0.06272625923156738,
            9.302095713792369e-05,
            0.0005058993119746447,
            8.421001984970644e-05,
            0.0004789585655089468,
            7.473454024875537e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who has songs with Hey in their titles? And where are they from?",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select distinct singer.Name, singer.Country",
            "select singer.Name, singer.Country,",
            "select the singer.Name, singer.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer concert"
        ],
        "align_scores": [
            0.549290120601654,
            0.00010913371806964278,
            0.04496420547366142,
            8.284624345833436e-05,
            0.00045901621342636645,
            7.340651791309938e-05,
            0.000978493713773787,
            8.356318721780553e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who have songs with Hey in their titles, and from which countries are they?",
        "gold_select": "select singer.Name, singer.Country",
        "select_candidates": [
            "select singer.Name, singer.Country",
            "select distinct singer.Name, singer.Country",
            "select singer.Name.c2, singer.Song_Name",
            "select the singer.Name, singer.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.98454350233078,
            0.00011325651576044038,
            0.0588311031460762,
            8.31007055239752e-05,
            0.00045223982306197286,
            8.206515485653654e-05,
            0.0010366050992161036,
            9.067199425771832e-05
        ],
        "align_select": "select singer.Name, singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which stadiums had concerts in 2014 and 2015? And Where were they?",
        "gold_select": "select stadium.Name, stadium.Location",
        "select_candidates": [
            "select stadium.Name, stadium.Location",
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location",
            "select stadium.Stadium_ID, stadium.Name, stadium.Location"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.002692209556698799,
            0.0021001447457820177,
            0.0010405454086139798,
            0.0006116503500379622,
            0.0021407492458820343,
            0.002610595664009452,
            0.001148372539319098,
            0.00022216139768715948
        ],
        "align_select": "select stadium.Name, stadium.Location",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which song were the youngest singer released, and when was it released?",
        "gold_select": "select singer.Song_Name, singer.Song_release_year",
        "select_candidates": [
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Country, singer.Song_release_year",
            "select singer.Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Song_release_year."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9905813932418823,
            8.588648051954806e-05,
            0.0009536879952065647,
            7.462651410605758e-05,
            0.0022012365516275167,
            8.97037098184228e-05,
            0.005777169484645128,
            7.36535366741009e-05
        ],
        "align_select": "select singer.Song_Name, singer.Song_release_year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the largest attended stadium on average? And how much is the capacity?",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Capacity, avg(concert.Year)",
            "select stadium.Capacity, stadium.Highest",
            "select stadium.Location, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9938327074050903,
            6.729728920618072e-05,
            0.00030190369579941034,
            6.0562571889022365e-05,
            0.0009248314308933914,
            6.31197908660397e-05,
            0.0005092069623060524,
            6.177978502819315e-05
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which songs did the youngest singer sing, and when were they released?",
        "gold_select": "select singer.Song_Name, singer.Song_release_year",
        "select_candidates": [
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Country, singer.Song_release_year",
            "select singer.Song_Name, singer.Song_release_year.",
            "select singer.Name, singer.Song_release_year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9892523884773254,
            8.300147601403296e-05,
            0.0010604362469166517,
            7.645745790796354e-05,
            0.004468727856874466,
            7.294373790500686e-05,
            0.001756605808623135,
            8.233157132053748e-05
        ],
        "align_select": "select singer.Song_Name, singer.Song_release_year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the locations and names of all arenas whose size is from 5k to 10k",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0, stadium.Location, stadium.Name",
            "select stadium.Location, stadium.Name, stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9952344298362732,
            0.00023944930580910295,
            0.026994718238711357,
            0.00012103474728064612,
            0.00039739167550578713,
            7.145089330151677e-05,
            0.00021044616005383432,
            7.487335824407637e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the location and names of all stadiums between 5,000 and 10,000 seats.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0, stadium.Location, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9942008256912231,
            0.0002527001197449863,
            0.00018997826555278152,
            8.872715261531994e-05,
            0.030778322368860245,
            0.00011406863632146269,
            0.0003800577251240611,
            7.129448931664228e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are locations and names for stadiums that hold 5000 to 10,000 people?",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select stadium.Location, stadium.Name, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9938406944274902,
            0.00031827797647565603,
            0.00018370959151070565,
            7.532617746619508e-05,
            0.02722734957933426,
            0.000129708118038252,
            0.0001623525022296235,
            7.692741201026365e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of concerts in 2014 or 2015.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), concert.concert_ID",
            "select count(*), concert.Year",
            "select count(*), concert.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert",
            "stadium concert",
            "stadium singer concert",
            "singer concert"
        ],
        "align_scores": [
            0.9946073889732361,
            0.00021973034017719328,
            0.0001710640062810853,
            0.0001172214251710102,
            0.00024260496138595045,
            0.0010400846367701888,
            0.0001631930936127901,
            0.00021909020142629743
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many animals weigh more than 10 kgs?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*) the SELECT-FROM-WHERE"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9924184083938599,
            0.00033542842720635235,
            0.00028716985252685845,
            0.022581279277801514,
            0.00028716985252685845,
            0.022581279277801514,
            0.00045934884110465646,
            0.00010014858708018437
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets weigh more than ten kilograms (kg)?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9923925399780273,
            0.00028033845592290163,
            0.0003113914863206446,
            0.0065468489192426205,
            0.0003113914863206446,
            0.0065468489192426205,
            0.0002718030009418726,
            0.014075706712901592
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets are larger than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9937242865562439,
            0.00033379803062416613,
            0.00023877335479483008,
            0.00014644076873082668,
            0.00023877335479483008,
            0.00014644076873082668,
            0.00020751592819578946,
            0.0006639478378929198
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of pets, how much more heavier than 10 is?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select sum(Pets.weight)",
            "select Pets.weight",
            "select Pets.weight, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets",
            "Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.15905185043811798,
            6.703290273435414e-05,
            0.10881397873163223,
            6.471020606113598e-05,
            0.9912986159324646,
            8.673703268868849e-05,
            0.0005518326070159674,
            7.142786489566788e-05
        ],
        "align_select": "select Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets weigh more than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9937345385551453,
            0.0007522592204622924,
            0.00032509624725207686,
            0.012522849254310131,
            0.00032509624725207686,
            0.012522849254310131,
            0.00022847486252430826,
            0.16462647914886475
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Determine the number of pets in which weighs over 10Kg.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*) dependant on Pets.PetID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets",
            "Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.9918010830879211,
            0.0003799127880483866,
            0.00029729929519817233,
            0.004708187188953161,
            0.00029729929519817233,
            0.004708187188953161,
            0.0007566686836071312,
            0.0004902560031041503
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of the pets, how many weigh more than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*) of the Pets.PetID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9916332960128784,
            0.0012264128308743238,
            0.00030977476853877306,
            0.007598022930324078,
            0.00030977476853877306,
            0.007598022930324078,
            0.0005825012922286987,
            0.00021112026297487319
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many animals weigh more than ten pounds?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*) the SELECT-FROM-WHERE",
            "select count(*), Pets.PetID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9914018511772156,
            0.00045708342804573476,
            0.000340101687470451,
            0.02175866812467575,
            0.0005518821417354047,
            0.00010505755199119449,
            0.000340101687470451,
            0.02175866812467575
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of pet animals above 10 pounds.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType",
            "select count(*) denoted by Pets.PetID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9905885457992554,
            0.0002969460329040885,
            0.0002945991000160575,
            0.0013918590266257524,
            0.00028462702175602317,
            0.07732287794351578,
            0.0009166555246338248,
            0.00018079037545248866
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the name and gender of every student who has two or more pets.",
        "gold_select": "select Student.Fname, Student.Sex",
        "select_candidates": [
            "select Student.Fname, Student.Sex",
            "select Student.LName, Student.Fname, Student.Sex",
            "select Student.Fname, Student.Age, Student.Sex",
            "select Student.StuID, Student.Fname, Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Student Has_Pet",
            "Student Pets"
        ],
        "align_scores": [
            0.9246309399604797,
            9.767665324034169e-05,
            0.9681697487831116,
            8.222156611736864e-05,
            0.0001478949998272583,
            5.384666656027548e-05,
            0.0002643384214024991,
            6.571150879608467e-05
        ],
        "align_select": "select Student.Fname, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the number of pets owned by students who are at least 21 years old.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(distinct Has_Pet.PetID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9674347043037415,
            0.0005073968204669654,
            0.00030532825621776283,
            0.00041313961264677346,
            0.00011580476711969823,
            0.00021758423827122897,
            0.2408013641834259,
            0.0016345327021554112
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the total number of pets owned by students who are at least 21 years old.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9678970575332642,
            0.0023861692752689123,
            0.00033897426328621805,
            0.000547310512047261,
            0.00012081242311978713,
            0.00018707200069911778,
            0.0003126378869637847,
            0.005397425033152103
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of pets owned by students who are over twenty years old.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9639849066734314,
            0.0022270288318395615,
            0.0003062220639549196,
            0.0004017293395008892,
            0.00010667729657143354,
            0.0001347944198641926,
            0.0005442273104563355,
            0.04793596640229225
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find how many pets are owned by students over 20 years old?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(distinct Has_Pet.PetID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9828246831893921,
            0.0011449395678937435,
            0.00031018437584862113,
            0.0003647182893473655,
            0.00011976131645496935,
            0.00017666291387286037,
            0.0822807028889656,
            0.0016373799880966544
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which pets are older than one year? Show id and how much do they weigh?",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetID, Pets.weight,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.8000573515892029,
            0.0004937226185575128,
            0.002824137918651104,
            0.00017021677922457457,
            0.00159804942086339,
            0.00019780852016992867,
            0.002353604417294264,
            9.217153274221346e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the id and weight of all pets that have an age greater than one.",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetType, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.8668131232261658,
            0.0001754199474817142,
            0.0036487735342234373,
            9.553464042255655e-05,
            0.0014148455811664462,
            9.495119593339041e-05,
            0.0007934747263789177,
            8.546801109332591e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the identification and the weight of all pets whose age is more than one.",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.pet_age",
            "select Pets.PetType, Pets.weight",
            "select Pets.PetID-, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9815835356712341,
            0.0002112567744916305,
            0.0011346234241500497,
            8.401110244449228e-05,
            0.010037034749984741,
            0.00025463858037255704,
            0.004232214763760567,
            0.00013071169087197632
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id and weight of all pets whose age is greater than or equal to 2?",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetID, Pets.weight,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9569954872131348,
            0.0002914428187068552,
            0.0031366110779345036,
            0.00012331917241681367,
            0.0011341284262016416,
            0.00014288973761722445,
            0.0025735129602253437,
            8.322107896674424e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "find the number of pets that weighs more than 10.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9907613396644592,
            0.00025305693270638585,
            0.0002560159773565829,
            0.001093603321351111,
            0.0002560159773565829,
            0.001093603321351111,
            0.00022140327200759202,
            0.010331062600016594
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets whose weight is greater than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.991154670715332,
            0.0008416288765147328,
            0.00026924136909656227,
            0.0002161492157028988,
            0.00026924136909656227,
            0.0002161492157028988,
            0.00023114672512747347,
            0.0022236460354179144
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets heavier than 10 have you found?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*) the SELECT-FROM-WHERE",
            "select count(*), Pets.PetID, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9809079170227051,
            0.0003299406380392611,
            0.000441686570411548,
            0.0018921250011771917,
            0.0008932281052693725,
            0.00013770505029242486,
            0.00014401550288312137,
            0.0001924688694998622
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "If a pet weighs more than 10, find its number.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select Pets.PetID",
            "select count(*)",
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.PetType"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.6464913487434387,
            0.0002123924350598827,
            0.8659642934799194,
            7.8940051025711e-05,
            0.00024354891502298415,
            6.199117342475802e-05,
            0.00016965047689154744,
            6.353981734719127e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of pets whose weight is more than ten?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9898154735565186,
            0.0004129134176764637,
            0.0002096550742862746,
            0.00013878308527637273,
            0.0002096550742862746,
            0.00013878308527637273,
            0.0002044213324552402,
            0.0007529070717282593
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of pets that weigh more than 10.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9901679754257202,
            0.00019511058053467423,
            0.00023244803014677018,
            0.001184307038784027,
            0.00023244803014677018,
            0.001184307038784027,
            0.00022968665871303529,
            0.021680917590856552
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets weigh more than 10 kgs?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*) the SELECT-FROM-WHERE"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9931644797325134,
            0.0004378950397949666,
            0.00030552130192518234,
            0.013549957424402237,
            0.00030552130192518234,
            0.013549957424402237,
            0.0004795088607352227,
            0.00010909127740887925
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets have a weight greater than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9897740483283997,
            0.0009561445913277566,
            0.00032377277966588736,
            0.0004058716003783047,
            0.00032377277966588736,
            0.0004058716003783047,
            0.00024589666281826794,
            0.0029481512028723955
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets that weight more than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9941337704658508,
            0.0017065199790522456,
            0.00027206589584238827,
            0.0002585597394499928,
            0.00027206589584238827,
            0.0002585597394499928,
            0.0002485595177859068,
            0.0015391126507893205
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the numbers of pets that weigh more than 10.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9839954972267151,
            0.00047395910951308906,
            0.00021273252787068486,
            0.0007734612445347011,
            0.00021273252787068486,
            0.0007734612445347011,
            0.00019422055629547685,
            0.0062255566008389
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets are heavier than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.993556797504425,
            0.0004953069146722555,
            0.0003580426855478436,
            0.007444940507411957,
            0.0003580426855478436,
            0.007444940507411957,
            0.00026451738085597754,
            0.06230362132191658
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find how many pets heavier than 10kgs.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*) the SELECT-FROM-WHERE",
            "select count(*), Pets.PetID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.990766167640686,
            0.0003180626081302762,
            0.0003456055710557848,
            0.007158903870731592,
            0.0005951891653239727,
            0.00010322183516109362,
            0.0003456055710557848,
            0.007158903870731592
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many pets are owned by students that are over twenty years old.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.StuID, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9583025574684143,
            0.009484325535595417,
            0.0003241205122321844,
            0.0005426660645753145,
            0.00010998515790561214,
            0.00014900775568094105,
            0.000132323955767788,
            0.0001461568899685517
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets are owned by older than twenty years old students.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(distinct Has_Pet.PetID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9906745553016663,
            0.000701068842317909,
            0.00027285609394311905,
            0.0005616088164970279,
            0.00011346460087224841,
            0.00015021963918115944,
            0.09436170756816864,
            0.001143571105785668
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of pets owned by students that are older than 20.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9798080325126648,
            0.0012280867667868733,
            0.0002567265182733536,
            0.00029483874095603824,
            0.00010054895392386243,
            0.0001862817007349804,
            0.0005884632701054215,
            0.04330725595355034
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets are owned by students over the age of twenty?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9824580550193787,
            0.004332674201577902,
            0.0002819445508066565,
            0.00017072474292945117,
            0.00011604763130890206,
            9.554811549605802e-05,
            0.00029563024872913957,
            0.0006752106128260493
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The number of pets that are owned by students older than 20.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9847138524055481,
            0.00025934315635822713,
            0.00022070627892389894,
            0.0005950448103249073,
            0.00011147776967845857,
            0.00014239124720916152,
            0.00024531898088753223,
            0.011992686428129673
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets are owned by students that have at least 21 years?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(distinct Has_Pet.PetID)",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9783922433853149,
            0.0602322593331337,
            0.0003348951577208936,
            0.0005711790290661156,
            0.15674670040607452,
            0.001902909716591239,
            0.0003900570736732334,
            0.004633569624274969
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of students with pets that have an age of 21 or greater?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.StuID",
            "select count(distinct Has_Pet.StuID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9721716046333313,
            0.3413164019584656,
            0.00014322831702884287,
            0.00014174790703691542,
            0.0002535854000598192,
            0.0005848245928063989,
            0.5607230067253113,
            0.00013453015708364546
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the numbers of pets owned by students that have an age greater than twenty.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9747406244277954,
            0.021640991792082787,
            0.0002597556740511209,
            0.002364897634834051,
            0.00011614417599048465,
            0.0003716633073054254,
            0.0003083345654886216,
            0.027902986854314804
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of pets owned by students who are over 20 years old?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9665800333023071,
            0.0007201802218332887,
            0.0004112783935852349,
            0.00035040287184529006,
            0.00011609123612288386,
            0.00019480609626043588,
            0.0004810468526557088,
            0.11852765828371048
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of student dogs owned by females.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(*), Student.StuID",
            "select count(distinct Has_Pet.StuID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.992367684841156,
            0.013278135098516941,
            0.00026330663240514696,
            0.004209313075989485,
            0.000259368127444759,
            0.00018094750703312457,
            0.0031254072673618793,
            0.00025318434927612543
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs do female students raise?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(distinct Pets.PetType)",
            "select count(*), Student.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9868345856666565,
            0.0563090518116951,
            0.0003268873260822147,
            0.00040713741327635944,
            0.0037480529863387346,
            0.00020460305677261204,
            0.0002926641027443111,
            0.00014592170191463083
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For female students, how many dogs are raised?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(distinct Pets.PetType)",
            "select count(*), Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9902145862579346,
            0.3151013255119324,
            0.00041129192686639726,
            0.5350944995880127,
            0.005983300972729921,
            0.0026471258606761694,
            0.00030131477979011834,
            0.1866227239370346
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of female dogs raised by students.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(*), Student.StuID",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9847597479820251,
            0.02105485275387764,
            0.00032376719173043966,
            0.1434086263179779,
            0.00039537445991300046,
            0.00022378089488483965,
            0.00035771142574958503,
            0.001299052033573389
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs do female students own?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(*), Student.StuID",
            "select count(*), Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9901431798934937,
            0.07519770413637161,
            0.00025163215468637645,
            0.5940174460411072,
            0.0002882220142055303,
            0.00044006938696838915,
            0.00025163215468637645,
            0.5940174460411072
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "show me the number of dogs being owned by females student.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(*), Student.StuID",
            "select count(distinct Pets.PetType)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9901150465011597,
            0.017501849681138992,
            0.0004400131874717772,
            0.05578075721859932,
            0.0002058911632047966,
            0.0006781061529181898,
            0.007330709602683783,
            0.0005565002793446183
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want you to find the maximum weight for each kind of pet. List them.",
        "gold_select": "select max(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, max(Pets.weight)",
            "select max(Pets.weight), Pets.PetType",
            "select maximum(Pets.weight), Pets.PetType",
            "select Pets.PetType.c1, max(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9935818910598755,
            0.0003351318300701678,
            0.9922888875007629,
            0.0001857237657532096,
            0.001177423051558435,
            0.00018829156761057675,
            0.0017082480480894446,
            0.00017563969595357776
        ],
        "align_select": "select Pets.PetType, max(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How much heavy is each type of pet?",
        "gold_select": "select avg(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, sum(Pets.weight)",
            "select Pets.PetType, Pets.weight",
            "select Pets.PetType, max(Pets.weight)",
            "select Pets.PetType, avg(Pets.weight)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9838512539863586,
            0.00015206621901597828,
            0.9830713868141174,
            0.00017441774252802134,
            0.7358188033103943,
            0.00012202463403809816,
            0.9821768999099731,
            0.00013880424376111478
        ],
        "align_select": "select Pets.PetType, sum(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How much does each type of pet weigh",
        "gold_select": "select avg(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, sum(Pets.weight)",
            "select Pets.PetType, Pets.weight",
            "select Pets.PetType, max(Pets.weight)",
            "select Pets.PetType, average(Pets.weight)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9939203262329102,
            0.0001271627697860822,
            0.9943034648895264,
            0.00018908624770119786,
            0.9140321016311646,
            0.00012226501712575555,
            0.8831632733345032,
            0.00012444696039892733
        ],
        "align_select": "select Pets.PetType, sum(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each category of pets, what is the average weight?",
        "gold_select": "select avg(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, avg(Pets.weight)",
            "select avg(Pets.weight), Pets.PetType",
            "select Pets.PetType, avg(Pets.weight)",
            "select Pets.PetType.c1, avg(Pets.weight)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9822558164596558,
            0.00030647762469016016,
            0.9917859435081482,
            0.00018057279521599412,
            0.9822558164596558,
            0.00030647762469016016,
            0.010553644970059395,
            0.00021788528829347342
        ],
        "align_select": "select Pets.PetType, avg(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Enter the names and sexes of students who have more than one pet below.",
        "gold_select": "select Student.Fname, Student.Sex",
        "select_candidates": [
            "select Student.Fname, Student.Sex",
            "select Student.Fname, Student.LName, Student.Sex",
            "select Student.Fname, Student.Age, Student.Sex",
            "select Student.LName, Student.Fname, Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Student Has_Pet",
            "Student Pets"
        ],
        "align_scores": [
            0.9730615615844727,
            0.00012005402095383033,
            0.9750714302062988,
            0.00012752512702718377,
            0.00015063460159581155,
            6.303900590864941e-05,
            0.9748083353042603,
            0.00013608667359221727
        ],
        "align_select": "select Student.Fname, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "How much are animals of each type weighting",
        "gold_select": "select avg(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, sum(Pets.weight)",
            "select Pets.PetType, max(Pets.weight)",
            "select Pets.PetType, Pets.weight",
            "select distinct Pets.PetType, sum(Pets.weight)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.992801308631897,
            0.00014400656800717115,
            0.7510721683502197,
            0.0001304627803619951,
            0.990602970123291,
            0.0011510924668982625,
            0.00024097600544337183,
            9.519761078990996e-05
        ],
        "align_select": "select Pets.PetType, sum(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Return all the IDs and weights of pets who are over one years old.",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetID, Pets.weight,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.5331424474716187,
            9.60708930506371e-05,
            0.002578996354714036,
            7.544716936536133e-05,
            0.0016281629214063287,
            7.026506500551477e-05,
            0.0015382715500891209,
            6.548849341925234e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the years when there were cars produced that weighed less than 4,000 and also cars that weighed more than 3,000.",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select cars_data.Year, cars_data.Accelerate",
            "select cars_data.Year, t5.c8",
            "select cars_data.Year, cars_data.MPG"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9871521592140198,
            0.9607840180397034,
            0.0001295166730415076,
            0.00011378791532479227,
            0.00025208070292137563,
            0.00018496011034585536,
            0.00011232382530579343,
            9.184373629977927e-05
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the years when there was production of cars that weighed less than 4,000 and also cars that weight more than 3,000.",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select cars_data.Year, cars_data.Accelerate",
            "select cars_data.Year, t5.c8",
            "select cars_data.Year, cars_data.MPG"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "cars_data car_names",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9842841625213623,
            0.9842841625213623,
            0.00015791466285008937,
            0.00015791466285008937,
            0.00024869179469533265,
            0.00024869179469533265,
            0.00012149821122875437,
            0.00012149821122875437
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the year ranges in which there were cars manufactured lighter than 4,000 lbs. and vehicles heavier than 3,000 lbs?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select cars_data.Year, t5.c8",
            "select cars_data.Year, cars_data.Accelerate",
            "select cars_data.Year-, t5.c8"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.7006925940513611,
            0.7006925940513611,
            0.00024292716989293694,
            0.00024292716989293694,
            0.00013886913075111806,
            0.00013886913075111806,
            0.0002957435790449381,
            0.0002957435790449381
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "List the make ids and names of all cars that does not have the minimum horsepower, and show me the ones with fewer than four cylinders.",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.MakeId, car_names.Make",
            "select car_names.Make, car_names.MakeId",
            "select car_names.MakeId, car_names.Make, t4.c3",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.5712882280349731,
            0.27927377820014954,
            0.1635153591632843,
            0.2156718373298645,
            0.000361337122740224,
            0.00018676510080695152,
            0.5237342715263367,
            0.7699983716011047
        ],
        "align_select": "select car_names.MakeId, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Among the cars that do not have the minimum horsepower, show me the maker IDs and car names with fewer than 4 cylinders.",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.MakeId, car_names.Model",
            "select car_names.MakeId, car_names.Make",
            "select car_names.Model, car_names.Make",
            "select car_names.Make, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.4291831851005554,
            0.0006591244600713253,
            0.6965494751930237,
            0.0003285256971139461,
            0.640521228313446,
            0.00016234414943028241,
            0.5336753726005554,
            0.0009435361134819686
        ],
        "align_select": "select car_names.MakeId, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Among the cars that do not have the minimum power, what are the make IDs and names of all those with less than four cylinders?",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.MakeId, car_names.Make",
            "select car_names.Make, car_names.Make",
            "select car_names.Make, car_names.Model",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9090090990066528,
            0.09356076270341873,
            0.001698993262834847,
            0.00046339223627001047,
            0.9079256057739258,
            0.16379696130752563,
            0.30538132786750793,
            0.018288543447852135
        ],
        "align_select": "select car_names.MakeId, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model of the car lighter than average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model",
            "select car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list car_names",
            "model_list cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9940040707588196,
            0.00010625517461448908,
            0.0002304807712789625,
            6.980237230891362e-05,
            0.0002885503345169127,
            6.510964158223942e-05,
            0.9942649006843567,
            0.00011356852337485179
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model for the car that is lighter than usual?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model",
            "select model_list.Model (refers to car_names.Model)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "model_list cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list cars_data"
        ],
        "align_scores": [
            0.9923658967018127,
            9.757350198924541e-05,
            0.00018652965081855655,
            7.74032887420617e-05,
            0.0002280826447531581,
            7.306689076358452e-05,
            0.055731382220983505,
            0.00011365832324372604
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the model of the car that weighs less than the average one?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.978801965713501,
            0.9117785692214966,
            0.9855241179466248,
            0.9307317733764648,
            0.0002632438263390213,
            0.000554037222173065,
            0.00022228385205380619,
            0.0002904326538555324
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model of the car lighter than average.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list car_names",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "model_list cars_data",
            "countries car_names cars_data",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9941199421882629,
            0.0001024068333208561,
            0.9945289492607117,
            0.00010595576895866543,
            0.00021858753461856395,
            6.964154454180971e-05,
            0.0002661926846485585,
            6.295766797848046e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model for the car that weighs less than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9853830337524414,
            7.252646901179105e-05,
            0.9891576766967773,
            6.835243402747437e-05,
            0.00018859037663787603,
            6.024587491992861e-05,
            0.0001930426515173167,
            6.021015360602178e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the car model which has lighter than average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select distinct car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents model_list car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9657054543495178,
            8.895793143892661e-05,
            0.9739536046981812,
            9.76091469055973e-05,
            0.00023291258548852056,
            7.571774040115997e-05,
            0.03371939808130264,
            7.74273430579342e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the car model that weighs less than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9826605916023254,
            0.05938456952571869,
            0.9784812927246094,
            0.12036047875881195,
            0.0002281178894918412,
            0.00019587371207308024,
            0.0002817078202497214,
            0.0003238443750888109
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model of the lighter car than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "car_makers model_list cars_data",
            "countries car_names cars_data",
            "car_names cars_data",
            "model_list car_names"
        ],
        "align_scores": [
            0.9928603768348694,
            0.00014520756667479873,
            0.9932710528373718,
            0.00016703028813935816,
            0.00020671241509262472,
            6.967043736949563e-05,
            0.0002558687992859632,
            6.726431456627324e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of cars with more than 6 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9927167296409607,
            0.0008737872121855617,
            0.00022985709074418992,
            0.0003507514775265008,
            0.00021231509163044393,
            0.0042469012551009655,
            0.00022940147027838975,
            0.00018329909653402865
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many vehicles have more than six cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.993314802646637,
            0.00021148471569176763,
            0.0002837661886587739,
            0.003942411858588457,
            0.0003330872568767518,
            0.00015279091894626617,
            0.00023348131799139082,
            0.0005346046527847648
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Identify the number of car models that have over six cylinder engines.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct car_names.Model)",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.97682124376297,
            0.001788683352060616,
            0.7242116928100586,
            0.0001854443398769945,
            0.0002849297598004341,
            0.004125688690692186,
            0.0003260908415541053,
            0.07042303681373596
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of cars with 7 or more cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.MPG, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.993064820766449,
            0.00011697376612573862,
            0.00022834245464764535,
            0.00042970135109499097,
            0.0002489503822289407,
            0.003982407972216606,
            0.0001101744273910299,
            7.279766577994451e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many cars have more than six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9926948547363281,
            0.00020198475976940244,
            0.000252088881097734,
            0.0033920039422810078,
            0.0003004221071023494,
            0.017095467075705528,
            0.0003099324821960181,
            0.00013573726755566895
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out how many vehicles have more than six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.MPG, cars_data.Cylinders",
            "select count(*), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9922116994857788,
            0.00018941682355944067,
            0.00027842517010867596,
            0.0022202644031494856,
            0.00011469218588899821,
            8.126202737912536e-05,
            0.00030689575942233205,
            0.016360007226467133
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "show the number of cars that have over six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.Id",
            "select count(*) dependant on cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9933074116706848,
            0.00016700751439202577,
            0.00027442508144304156,
            0.004711880348622799,
            0.00026998011162504554,
            0.0009693159954622388,
            0.0011284053325653076,
            0.0001362237671855837
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names and ids of all countries that either have four or more car makers or produce Fiat model.",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_makers.Id",
            "select countries.CountryName, model_list.ModelId",
            "select countries.CountryName, car_names.MakeId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.9719973206520081,
            0.9833943843841553,
            0.06328828632831573,
            0.09564004093408585,
            0.0008337366161867976,
            0.0010471382411196828,
            0.0037623043172061443,
            0.002809389028698206
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "List the ids and names of all countries that have four or more carmakers or make fiat models.",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryId, countries.CountryName",
            "select car_makers.Id, countries.CountryName",
            "select car_names.Model, countries.CountryId, countries.CountryName",
            "select countries.CountryId, countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers car_names",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.969881534576416,
            0.15954354405403137,
            0.17684270441532135,
            0.010892705991864204,
            0.0002418299118289724,
            0.0001531462330603972,
            0.00043988105608150363,
            0.0002216147113358602
        ],
        "align_select": "select countries.CountryId, countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What was the maker of the first car ever made and when was it manufactured?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_makers.Maker, t4.c7",
            "select car_makers.Maker, cars_data.Year",
            "select car_makers.Maker, t2.c7",
            "select car_names.Model, t4.c7"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "countries car_makers car_names",
            "car_makers car_names cars_data",
            "continents car_makers car_names",
            "model_list car_makers car_names",
            "countries car_names",
            "car_names cars_data",
            "model_list car_names"
        ],
        "align_scores": [
            0.0006232727901078761,
            8.881145913619548e-05,
            0.9929977655410767,
            8.390589209739119e-05,
            0.0006095553399063647,
            8.73730969033204e-05,
            0.0006028282805345953,
            9.394268272444606e-05
        ],
        "align_select": "select car_makers.Maker, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "The first car that was manufactured by which company and when was it made?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_makers.Maker, cars_data.Year",
            "select car_makers.Maker, t4.c7",
            "select car_makers.FullName, t4.c7",
            "select car_makers.FullName, cars_data.Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_names cars_data",
            "countries car_makers car_names",
            "countries car_makers car_names cars_data",
            "car_names cars_data",
            "continents car_makers car_names cars_data",
            "model_list car_makers car_names cars_data",
            "model_list car_makers car_names"
        ],
        "align_scores": [
            0.9932689070701599,
            7.887675747042522e-05,
            0.0006426592590287328,
            9.400559065397829e-05,
            0.0007634843932464719,
            9.23880870686844e-05,
            0.9775153994560242,
            7.863013888709247e-05
        ],
        "align_select": "select car_makers.Maker, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me all European countries with 3 or more car manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9687409400939941,
            0.00012413998774718493,
            0.00040482249460183084,
            5.721001070924103e-05,
            0.0019061393104493618,
            6.933387339813635e-05,
            0.00020132084318902344,
            6.107515946496278e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the countries in Europe that have three or more car manufacturers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9378911256790161,
            0.0003440548898652196,
            0.00052623450756073,
            9.576603770256042e-05,
            0.001955886837095022,
            0.00012385538138914853,
            0.00028200342785567045,
            8.499093382852152e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the European countries that have 3 or more car manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2",
            "select countries.CountryName, continents.ContId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9667044878005981,
            0.0001184487555292435,
            0.0003308165760245174,
            6.144553481135517e-05,
            0.00019999478536192328,
            7.085380639182404e-05,
            0.0013736396795138717,
            7.307295163627714e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me the European countries that have at least three car manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2",
            "select countries.CountryName, continents.ContId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9491698145866394,
            0.00011926920706173405,
            0.0003841717552859336,
            5.9278259868733585e-05,
            0.00021372568153310567,
            6.764499994460493e-05,
            0.0019327005138620734,
            7.271336653502658e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Are there any European countries that have 3 or more vehicle manufacturers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers"
        ],
        "align_scores": [
            0.9217424988746643,
            0.00011705410724971443,
            0.0016815916169434786,
            7.17363363946788e-05,
            0.0005809908616356552,
            6.596471212105826e-05,
            0.00021706830011680722,
            6.555028085131198e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the countries in Europe with more than 2 car manufacturers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers"
        ],
        "align_scores": [
            0.9658008217811584,
            0.00019702810095623136,
            0.0016083568334579468,
            0.00011690161773003638,
            0.00042528516496531665,
            8.737542520975694e-05,
            0.0002837407519109547,
            8.981789142126217e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Which countries in Europe have three or more car manufacturers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9700953960418701,
            0.00021220116468612105,
            0.0003890734806191176,
            9.05445558601059e-05,
            0.002206766977906227,
            0.00011694365093717352,
            0.00023527666053269058,
            7.407793600577861e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me which of these European countries have three or more car manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.888839602470398,
            0.00010479010234121233,
            0.00037776140379719436,
            5.489278555614874e-05,
            0.0021613158751279116,
            6.646055408054963e-05,
            0.00023410681751556695,
            5.751174467150122e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "How many countries have over 2 car makers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct car_makers.Country)",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "car_makers",
            "countries car_makers",
            "continents countries car_makers",
            "model_list car_makers"
        ],
        "align_scores": [
            0.927769124507904,
            0.018514014780521393,
            0.3963361978530884,
            0.0005377259803935885,
            0.000955510709900409,
            0.018202614039182663,
            0.002612636424601078,
            0.0949956476688385
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many countries have more than 2 car makers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryName",
            "select count(distinct car_makers.Country)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.8672067523002625,
            0.011633645743131638,
            0.0009304060367867351,
            0.019529862329363823,
            0.0021389643661677837,
            0.04571681469678879,
            0.15170466899871826,
            0.0005843900726176798
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many countries have more than two car manufacturers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), car_makers.Country",
            "select count(distinct countries.CountryName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.8767827153205872,
            0.013441527262330055,
            0.0024274762254208326,
            0.0555279403924942,
            0.001235053758136928,
            0.027685370296239853,
            0.15029411017894745,
            0.002134379232302308
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many countries have 3 or more car manufacturers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct car_makers.Country)",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "car_makers",
            "countries car_makers",
            "model_list car_makers",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9055834412574768,
            0.01432577520608902,
            0.9549113512039185,
            0.0009567368542775512,
            0.0008887656731531024,
            0.027929745614528656,
            0.0018419165862724185,
            0.056146904826164246
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the number of countries that have 3 or more car manufacturers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryName",
            "select count(distinct car_makers.Country)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "car_makers"
        ],
        "align_scores": [
            0.6323767304420471,
            0.01177392527461052,
            0.0010948267299681902,
            0.3055255115032196,
            0.0019647213630378246,
            0.3762975335121155,
            0.9227577447891235,
            0.0009653326706029475
        ],
        "align_select": "select count(distinct car_makers.Country)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many countries have more than two car makers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryName",
            "select count(distinct car_makers.Country)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list",
            "car_makers"
        ],
        "align_scores": [
            0.8574744462966919,
            0.01587815023958683,
            0.0010533068561926484,
            0.028298394754529,
            0.0024844976142048836,
            0.07218530029058456,
            0.18882882595062256,
            0.0007673311047255993
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of countries with three or more car makers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryName",
            "select count(distinct car_makers.Country)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "car_makers"
        ],
        "align_scores": [
            0.8889110088348389,
            0.013233862817287445,
            0.000765077187679708,
            0.3091530501842499,
            0.00184067920781672,
            0.5122528076171875,
            0.9764235615730286,
            0.0003338279784657061
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For cars with 4 cylinders, what model has the greatest power output?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "countries cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.987266480922699,
            0.0001244260638486594,
            0.00044005265226587653,
            7.044633821351454e-05,
            0.0004496031906455755,
            7.571932655991986e-05,
            0.0007925211102701724,
            9.605431841919199e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Select for me models having the largest horse power among those that belong to four-cylinder engines.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Make",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "cars_data car_names"
        ],
        "align_scores": [
            0.9464598298072815,
            0.5965129733085632,
            0.8982630968093872,
            0.10718829929828644,
            0.0005627709906548262,
            0.00021599617321044207,
            0.0005250186077319086,
            0.0001999086089199409
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For the four-cylinder cars, which model has the most horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9030898213386536,
            0.00010471638233866543,
            0.0008032259647734463,
            6.951925752218813e-05,
            0.00045692792627960443,
            6.701615347992629e-05,
            0.00044934454490430653,
            8.293745486298576e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which car model with four cylinder engines has the largest power.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model",
            "select car_names.Model, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents model_list car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9901993870735168,
            0.00016416824655607343,
            0.0005738416803069413,
            8.513093780493364e-05,
            0.0003720424138009548,
            8.77850761753507e-05,
            0.0006380486884154379,
            8.284877549158409e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For the cars with 4 cylinders, which model is strongest?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "model_list cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9777135252952576,
            0.9923987984657288,
            0.0002472821215633303,
            0.00043311878107488155,
            0.00042829170706681907,
            0.00043533294228836894,
            0.0005404603434726596,
            0.0007897730683907866
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which car model with four cylinders has the greatest power output?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9873226284980774,
            0.00022031542903278023,
            0.0007321338634938002,
            9.088962542591617e-05,
            0.0005740861524827778,
            8.882255497155711e-05,
            0.0008139105630107224,
            0.0001158088562078774
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For cars with four cylinders, show me the car models that have the most horsepower.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.8886111974716187,
            0.00024120588204823434,
            0.0006866807234473526,
            8.831462037051097e-05,
            0.0006039292202331126,
            8.107371832011268e-05,
            0.00039656198350712657,
            9.09710579435341e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which model is most powerful for 4-cylinder cars",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, cars_data.Edispl",
            "select model_list.Model, cars_data.MPG"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers model_list cars_data",
            "countries car_names cars_data",
            "car_names cars_data",
            "continents model_list cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9928868412971497,
            0.00011220895976293832,
            0.00030961475567892194,
            8.12215221230872e-05,
            0.0008203572360798717,
            9.909943037200719e-05,
            0.00018733243632595986,
            6.53541719657369e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "How many four-cylinder engines are there on the roads?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.986422061920166,
            0.00035062109236605465,
            0.00037100998451933265,
            0.04610054939985275,
            0.00030136300483718514,
            0.0018564385827630758,
            0.00037951424019411206,
            0.0001714711106615141
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of cars that have more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9891863465309143,
            0.00014554483641404659,
            0.0002464056888129562,
            0.0009812681237235665,
            0.0002959099947474897,
            0.005569676402956247,
            0.00031191090238280594,
            0.00013780014705844223
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many vehicles have 5 or more cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(distinct cars_data.Id)",
            "select count(*), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9938190579414368,
            0.00044692924711853266,
            0.0002750107378233224,
            0.00030955186230130494,
            0.002058952348306775,
            0.0001189579998026602,
            0.0002621683233883232,
            0.00024983874754980206
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of cars with more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.MPG, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9926112294197083,
            0.00012207584222778678,
            0.0002447225560899824,
            0.0004312891105655581,
            0.00026501217507757246,
            0.005984923802316189,
            0.00010719469719333574,
            7.258839468704537e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of cars that have more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9902247786521912,
            0.00013234477955847979,
            0.0002472585765644908,
            0.0007878164760768414,
            0.0002844832488335669,
            0.005734635982662439,
            0.0002992989029735327,
            0.00013561670493800193
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which GM models weigh over 3500 pounds?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_makers.Maker, model_list.Model",
            "select car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9786239862442017,
            0.02926880680024624,
            0.9870988726615906,
            0.013928145170211792,
            0.0021952602546662092,
            0.00013565523840952665,
            0.00028007797664031386,
            0.00012479990255087614
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which General Motors cars weigh more than 3500?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select cars_data.Id",
            "select car_names.MakeId",
            "select cars_data.Weight",
            "select car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers model_list cars_data"
        ],
        "align_scores": [
            0.002513688988983631,
            0.007151491940021515,
            0.008960563689470291,
            0.04672982171177864,
            0.2160337269306183,
            0.0007133291801437736,
            0.9824062585830688,
            0.024789998307824135
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Identify the distinctive models manufactured by the manufacturer named General Motors or over 3500 pounds.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct model_list.Model, model_list.Maker",
            "select distinctive model_list.Model",
            "select distinct model_list.Model, car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "car_makers model_list car_makers model_list car_names",
            "car_makers model_list car_makers car_names",
            "car_makers model_list car_makers model_list cars_data",
            "countries car_makers model_list car_names",
            "car_makers model_list car_makers cars_data",
            "countries car_makers model_list cars_data"
        ],
        "align_scores": [
            0.19249950349330902,
            0.00017829169519245625,
            0.0001383589260512963,
            6.500833842437714e-05,
            0.01612008549273014,
            0.0002154999820049852,
            0.00019993548630736768,
            7.226302841445431e-05
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which distinctive models are made by the manufacturer General Motors or weigh more than 3,500?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct model_list.Model, car_makers.Maker",
            "select distinct car_names.Model",
            "select distinct car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers model_list car_makers car_names",
            "countries car_makers model_list cars_data"
        ],
        "align_scores": [
            0.7620340585708618,
            0.030829893425107002,
            0.0003901068994309753,
            0.0002692957641556859,
            0.8262431025505066,
            0.21050713956356049,
            0.00018413572979625314,
            0.0001484308741055429
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which types of car are made by General Motors and weigh over 3,500 pounds?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select distinct car_names.Model, car_names.Make",
            "select car_names.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "countries car_makers car_names cars_data"
        ],
        "align_scores": [
            0.7803770303726196,
            0.14916658401489258,
            0.0002487311721779406,
            0.00015202997019514441,
            0.0002667091612238437,
            9.068566578207538e-05,
            0.0002907135640271008,
            0.00013234958169050515
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which of the models made by GM weighs more than 3500 kg?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_makers.Maker, model_list.Model",
            "select car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "car_makers model_list"
        ],
        "align_scores": [
            0.813412606716156,
            0.0003450396761763841,
            0.9681053757667542,
            0.0003493964613880962,
            0.0023714606650173664,
            7.646322046639398e-05,
            0.7976284623146057,
            0.0002960367128252983
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the cars made by the company General Motors and weighing over 3,500 lbs.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.MakeId",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "countries car_makers car_names cars_data"
        ],
        "align_scores": [
            0.48944732546806335,
            0.007666890975087881,
            0.002878804923966527,
            0.009263784624636173,
            0.00023867751588113606,
            0.00010856833978323266,
            0.0002414046466583386,
            0.0001179237078758888
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the distinct models that can be manufactured by General Motors company and weigh more than 3,500 kg.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct model_list.Model, car_makers.Maker",
            "select distinct model_list.Model, car_makers.FullName",
            "select model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.9810983538627625,
            0.21781891584396362,
            0.0001977625215658918,
            0.00021517270943149924,
            0.0003038782742805779,
            0.00021970899251755327,
            0.846011221408844,
            0.0334978885948658
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Among the cars made by company called General Motors, what are the ones whose weight is over 3500 Kg/lbs?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.MakeId",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, car_names.MakeId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "countries car_makers car_names cars_data"
        ],
        "align_scores": [
            0.08489734679460526,
            0.007839099504053593,
            0.001075676060281694,
            0.003719902131706476,
            0.00024107276112772524,
            0.00011692469706758857,
            0.00028729363111779094,
            0.00012314187188167125
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which distinctive models are produced by GM, which weighs more than 3500?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct model_list.Model, car_makers.Maker",
            "select distinctive model_list.Model",
            "select distinct model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "car_makers model_list car_names",
            "model_list car_makers cars_data"
        ],
        "align_scores": [
            0.7709442973136902,
            0.0001621133415028453,
            0.001701189554296434,
            0.00011064282443840057,
            0.007495411206036806,
            0.0001235006347997114,
            0.7709442973136902,
            0.0001621133415028453
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Identify all car models made by the company General Motors according to their weight exceeding 1,500 kilograms.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_makers.FullName",
            "select distinct car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_makers model_list cars_data",
            "car_makers model_list car_makers car_names",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.9620763063430786,
            0.00018908661149907857,
            0.9294463396072388,
            0.00020160416897851974,
            0.0002691253612283617,
            8.950189658207819e-05,
            0.03305651992559433,
            9.055923146661371e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which model has the highest mpg?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "car_makers model_list cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents model_list cars_data"
        ],
        "align_scores": [
            0.9918639659881592,
            6.904521433170885e-05,
            0.9913662075996399,
            5.998972847010009e-05,
            0.00048007568693719804,
            5.800380677101202e-05,
            0.00029846769757568836,
            6.0727339587174356e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which car has the highest fuel economy?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model-, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9770744442939758,
            6.774047506041825e-05,
            0.0017380326753482223,
            5.785929170087911e-05,
            0.006409118417650461,
            6.151465640868992e-05,
            0.00046893313992768526,
            5.2587492973543704e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What model offers the highest mileage?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "countries car_names cars_data",
            "continents model_list cars_data",
            "countries model_list cars_data",
            "car_names cars_data",
            "countries model_list car_names cars_data"
        ],
        "align_scores": [
            0.990796685218811,
            6.710920570185408e-05,
            0.9913267493247986,
            7.36324000172317e-05,
            0.000508759927470237,
            6.0489095631055534e-05,
            0.0003116201551165432,
            6.334531644824892e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which car has the best gas mileage?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model-, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9477643370628357,
            7.20586467650719e-05,
            0.0019197086803615093,
            6.14386226516217e-05,
            0.0077127693220973015,
            6.51958107482642e-05,
            0.00043220483348704875,
            5.3395822760649025e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the models which can give the highest mileage for a gallon of gas consumed?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "countries model_list cars_data",
            "countries car_names cars_data",
            "continents model_list cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9438947439193726,
            6.522902549477294e-05,
            0.879989504814148,
            7.893342262832448e-05,
            0.0014128003967925906,
            6.726251740474254e-05,
            0.0005400991067290306,
            6.270326412050053e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which car has the most fuel efficiency?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model-, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9707410335540771,
            7.347879000008106e-05,
            0.0013965154066681862,
            5.98665137658827e-05,
            0.0041521345265209675,
            6.53793613309972e-05,
            0.00039290718268603086,
            5.1658222218975425e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which vehicle gets the best gas mileage?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model-, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.970409631729126,
            7.147487485781312e-05,
            0.0023237387649714947,
            5.990934369037859e-05,
            0.008765840902924538,
            6.328191375359893e-05,
            0.0005240889731794596,
            5.315085218171589e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which model has the highest mpg rating?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "continents model_list cars_data"
        ],
        "align_scores": [
            0.9869404435157776,
            7.135883060982451e-05,
            0.9845467209815979,
            6.319580279523507e-05,
            0.000538522785063833,
            5.935258377576247e-05,
            0.00030886795138940215,
            6.209595449035987e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show all of Europe's nations with no less than three makers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.9704915881156921,
            0.00015953529509715736,
            0.001953544095158577,
            0.0001448136317776516,
            0.0003118175081908703,
            9.590850822860375e-05,
            0.0002466741425450891,
            0.00012996142322663218
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "List every european country, which has at least three manufacturars.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.8963407874107361,
            0.7261181473731995,
            0.0010958375642076135,
            0.0010957646882161498,
            0.0003212055889889598,
            0.0003234124160371721,
            0.00023223932657856494,
            0.00030548288486897945
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "List the name of all European countries with three or more manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.9519170522689819,
            9.558238525642082e-05,
            0.00037231703754514456,
            5.5856897233752534e-05,
            0.0008880019886419177,
            6.0129073972348124e-05,
            0.00026984064606949687,
            6.116048461990431e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "List all European countries where there are at least three manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.922935426235199,
            0.00014578289119526744,
            0.00039239382022060454,
            6.32708179182373e-05,
            0.0014222913887351751,
            7.604900747537613e-05,
            0.0015538380248472095,
            7.060829375404865e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of all European countries with three or more manufacturers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.958929717540741,
            0.00015998132585082203,
            0.0005352234002202749,
            9.814713121159002e-05,
            0.0014590590726584196,
            0.00012125192006351426,
            0.00027261374634690583,
            9.476504783378914e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me the list of all European countries where there is at least three manufactures.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9061464071273804,
            0.7917190194129944,
            0.00031583386589773,
            0.0003502286854200065,
            0.0008404339896515012,
            0.001037299050949514,
            0.00023746542865410447,
            0.000287048052996397
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show all the names of all European countries with three or more manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers",
            "continents countries",
            "continents countries car_makers model_list"
        ],
        "align_scores": [
            0.960748016834259,
            8.894613711163402e-05,
            0.0003370964259374887,
            5.328106999513693e-05,
            0.0007765534683130682,
            5.768558185081929e-05,
            0.0002728134277276695,
            6.073445183574222e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "List the names of all European countries with three or more manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.9476281404495239,
            0.0001033792577800341,
            0.00039563197060488164,
            5.541346763493493e-05,
            0.000996086630038917,
            6.0080987168475986e-05,
            0.00026173677179031074,
            6.155485607450828e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of all European countries that have three or more manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.9393143653869629,
            9.893503738567233e-05,
            0.0004337845020927489,
            5.7095450756605715e-05,
            0.0011140757706016302,
            6.138514436315745e-05,
            0.00028577883495017886,
            6.533896521432325e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me all country names in Europe with three or more manufacturer.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents countries",
            "countries car_makers",
            "continents countries car_makers model_list"
        ],
        "align_scores": [
            0.9902817010879517,
            0.0002201883908128366,
            0.0002780500508379191,
            0.00010933516750810668,
            0.0007418568129651248,
            0.00014117600221652538,
            0.00028234400087967515,
            8.650376548757777e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the list of all European countries with three or more manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.9684208631515503,
            9.141420014202595e-05,
            0.0003928743826691061,
            5.611814049188979e-05,
            0.0011005621636286378,
            6.002898226142861e-05,
            0.00025410333182662725,
            5.9870337281608954e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Enter below the ids and names of all the companies which have at least two different models of cars produced in their factories as well as making more than three vehicles.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.FullName",
            "select car_makers.Id, car_makers.FullName, car_makers.Country",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Id, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.8580940961837769,
            0.8718348741531372,
            0.00014367219409905374,
            0.00017285811190959066,
            0.21270537376403809,
            0.03823550045490265,
            0.8598512411117554,
            0.8151135444641113
        ],
        "align_select": "select car_makers.Id, car_makers.FullName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the ids and makers of the car manufacturers that have produced two or more models and manufactured more than three cars.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.Maker",
            "select model_list.ModelId, car_makers.Maker",
            "select car_names.Model, car_makers.Maker",
            "select car_names.Model, car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "model_list car_names",
            "continents car_makers model_list car_names",
            "countries model_list car_names",
            "continents model_list car_names"
        ],
        "align_scores": [
            0.9237993359565735,
            0.28579092025756836,
            0.00035149388713762164,
            0.00042326695984229445,
            0.0003476414713077247,
            0.0002322136570001021,
            0.00022921980416867882,
            0.00020345782104413956
        ],
        "align_select": "select car_makers.Id, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the ids and makers of all car manufacturers that produce at least two models and make more than three cars.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.Maker",
            "select car_names.Model, car_makers.Maker",
            "select model_list.Maker, car_makers.Maker",
            "select car_names.Make, car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "countries model_list car_names",
            "model_list car_names"
        ],
        "align_scores": [
            0.9131066799163818,
            0.05713476240634918,
            0.00017754678265191615,
            0.00015155092114582658,
            0.00021281547378748655,
            0.00012535783753264695,
            0.0003869965730700642,
            0.00016153010074049234
        ],
        "align_select": "select car_makers.Id, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the id's and manufactures of all car makers that have two or more models and makes three or more cars?",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.Maker",
            "select car_names.Model, car_makers.Maker",
            "select model_list.ModelId, car_makers.Maker",
            "select car_names.Model, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "model_list car_names",
            "countries car_makers model_list car_names",
            "countries model_list car_names",
            "continents car_makers model_list car_names",
            "car_makers car_names",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.9575721621513367,
            0.0721622034907341,
            0.0005626691272482276,
            0.00021715399634558707,
            0.0006045842892490327,
            0.0003975921426899731,
            0.0003175699384883046,
            0.000175730514456518
        ],
        "align_select": "select car_makers.Id, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For what manufacturer makes at least two models and produces more than three cars please give me their model IDs and manufacturer name.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select model_list.ModelId, car_makers.FullName",
            "select model_list.ModelId, car_makers.Maker",
            "select model_list.Model, car_makers.Maker",
            "select car_makers.Id, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "car_makers model_list car_makers car_names"
        ],
        "align_scores": [
            0.18614132702350616,
            0.015158850699663162,
            0.234197735786438,
            0.011217787861824036,
            0.49993258714675903,
            0.01962011121213436,
            0.0004023908404633403,
            0.00021246839605737478
        ],
        "align_select": "select model_list.Model, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the makers and their ids of car brands that produce two or more models and produce four or more car models.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_names.Make, car_names.MakeId",
            "select car_makers.Maker, car_names.MakeId",
            "select car_makers.Maker, car_makers.Id",
            "select car_names.Model, car_names.MakeId"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "model_list car_names",
            "car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "countries model_list car_names",
            "car_makers car_names",
            "countries car_names",
            "car_names"
        ],
        "align_scores": [
            0.2763783633708954,
            0.978576123714447,
            0.057498782873153687,
            0.9140533804893494,
            0.10592225939035416,
            0.956976056098938,
            0.0003124632639810443,
            0.0005038734525442123
        ],
        "align_select": "select car_names.Make, car_names.MakeId",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "How much horse power does the car have that can accelerate the fastest?",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select cars_data.Horsepower, t5.diff(cars_data.Accelerate)",
            "select max(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.978131890296936,
            0.00010140553786186501,
            0.0013806603383272886,
            6.644985114689916e-05,
            0.00020388173288665712,
            0.00010277740511810407,
            0.0005221767933107913,
            7.313952664844692e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How much power does the car with the fastest acceleration have?",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select sum(cars_data.Horsepower)",
            "select cars_data.Horsepower, t5.diff(cars_data.Accelerate)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9913409352302551,
            8.182431338354945e-05,
            0.0008493694476783276,
            6.297844083746895e-05,
            0.4038878381252289,
            6.431795191019773e-05,
            0.0001741629675962031,
            8.868535951478407e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show model cars that weigh less than 3500 and are NOT manufactured by Ford.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model",
            "select cars_data.Weight, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "model_list car_names",
            "car_makers model_list car_names",
            "countries model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9884556531906128,
            0.9392108917236328,
            0.0006933431141078472,
            0.0014518267707899213,
            0.00019953117589466274,
            0.00021295736951287836,
            0.000379013130441308,
            0.0009690384613350034
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What were all the cars weighing less than 3500, but built outside of the Ford company?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Make",
            "select car_names.Model, car_names.Make",
            "select car_makers.Maker, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "model_list car_names cars_data",
            "car_names cars_data",
            "continents car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9628016948699951,
            0.4135785400867462,
            0.8722623586654663,
            0.08373488485813141,
            0.000615501485299319,
            0.0014341992791742086,
            0.00021107013162691146,
            0.00022097391774877906
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which model of the car weighs less than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9900306463241577,
            7.029367407085374e-05,
            0.9897210001945496,
            6.654211028944701e-05,
            0.00025387280038557947,
            6.090381430112757e-05,
            0.00023336247249972075,
            5.97470898355823e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please find the model or make of the car that weighs below the average model.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model, car_names.Make",
            "select car_names.Model ou car_names.Make",
            "select distinct car_names.Model, car_names.Make",
            "select car_names.Make, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.8431099057197571,
            0.00010334070975659415,
            0.9784591197967529,
            0.0001304055767832324,
            0.021004844456911087,
            8.651606185594574e-05,
            0.8281275033950806,
            0.00011843418178614229
        ],
        "align_select": "select car_names.Model, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the models of cars that weigh less than the average one.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.Model, car_names.Model",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "countries car_names cars_data",
            "car_names cars_data",
            "continents model_list cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9799363613128662,
            0.00015926564810797572,
            0.9816946387290955,
            0.0001704670867184177,
            0.0003087495861109346,
            6.419111014110968e-05,
            0.0002543760638218373,
            6.949750968487933e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which is the car model that is lighter than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9511924386024475,
            7.040053606033325e-05,
            0.9706563353538513,
            7.688230834901333e-05,
            0.0002074518270092085,
            6.444098107749596e-05,
            0.00019866893126163632,
            6.158126780064777e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the model of the car that is lighter than the average.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9722381830215454,
            7.139803346944973e-05,
            0.9443551898002625,
            7.636862574145198e-05,
            0.00017611445218790323,
            6.55351541354321e-05,
            0.00018723885295912623,
            6.423587183235213e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show me the model of the car that weighs less than the average.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Model, model_list.Model",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9721124172210693,
            0.8280491828918457,
            0.9827532768249512,
            0.887213945388794,
            0.00022277502284850925,
            0.0002849354350473732,
            0.0002149113133782521,
            0.0005071270861662924
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the car model that gets the best fuel economy?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model (cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9877923130989075,
            7.728174387011677e-05,
            0.0005849080625921488,
            6.0690865211654454e-05,
            0.0007470278651453555,
            6.716823554597795e-05,
            0.020843643695116043,
            7.191463373601437e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the car model that is most fuel-efficient?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model (cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9898620843887329,
            7.64869837439619e-05,
            0.000647239328827709,
            5.943000360275619e-05,
            0.0007410940597765148,
            6.585427763639018e-05,
            0.010113751515746117,
            7.011767593212426e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the car model with the best gas mileage?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model (cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9873625040054321,
            8.129397610900924e-05,
            0.000766970741096884,
            6.276918429648504e-05,
            0.0008230083622038364,
            6.900380685692653e-05,
            0.010809787549078465,
            7.069965795380995e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the car model with the best fuel efficiency.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model (car_names.Make)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9752992391586304,
            7.519885548390448e-05,
            0.0005458463565446436,
            6.143158680060878e-05,
            0.000613060430623591,
            6.681011291220784e-05,
            0.0028880948666483164,
            6.39105201116763e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "what is the car model that is most gas efficient?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model (cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9909560084342957,
            0.994216799736023,
            0.00047973787877708673,
            0.0005514351068995893,
            0.0005963810835964978,
            0.0008070674375630915,
            0.007843028753995895,
            0.011306166648864746
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the car model that is most gas efficient?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model (cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9909560084342957,
            0.994216799736023,
            0.00047973787877708673,
            0.0005514351068995893,
            0.0005963810835964978,
            0.0008070674375630915,
            0.007843028753995895,
            0.011306166648864746
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the car model that has the best fuel economy.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model (car_names.Make)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9779896140098572,
            7.565855048596859e-05,
            0.00040062866173684597,
            6.0812351875938475e-05,
            0.0005560828140005469,
            6.556428706971928e-05,
            0.0020996069069951773,
            6.382860010489821e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the car model with the best fuel efficiency?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model (cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9855844378471375,
            7.956715853651986e-05,
            0.0007311660447157919,
            6.118370220065117e-05,
            0.0007984464755281806,
            6.826710159657523e-05,
            0.012412510812282562,
            7.204477151390165e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the names and ids of the countries that have 4 or more car makers or produce the Fiat model.",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_makers.Id",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_names.MakeId"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.9637100100517273,
            0.028190456330776215,
            0.03222271427512169,
            0.0029303226619958878,
            0.9637100100517273,
            0.028190456330776215,
            0.004521903581917286,
            0.001241017016582191
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the country with over three car manufacturers or where 'Fiat'-based cars are produced?",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, car_makers.Country",
            "select countries.CountryName, countries.Continent",
            "select countries.CountryName, countries.CountryId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers car_names",
            "countries car_makers",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.2435903698205948,
            0.9759116768836975,
            0.0007285702740773559,
            0.0021623210050165653,
            0.0010327701456844807,
            0.004199576564133167,
            0.0005289405235089362,
            0.0015298867365345359
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the ids and names of the countries that make more than three cars or produce Fiat vehicles.",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryId, countries.CountryName",
            "select car_makers.Id, countries.CountryName",
            "select countries.CountryName, countries.CountryId",
            "select car_makers.Maker, countries.CountryName"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.971424400806427,
            0.8439183831214905,
            0.23318612575531006,
            0.07056555151939392,
            0.9774280190467834,
            0.8725003004074097,
            0.0003588640538509935,
            0.0005129312048666179
        ],
        "align_select": "select countries.CountryId, countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the id and name of the countries that have at least three car manufacturers or produce cars under the model 'Fiat'.",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryId, countries.CountryName",
            "select car_makers.Id, countries.CountryName",
            "select countries.CountryId, countries.CountryName, car_makers.Country",
            "select countries.CountryName, countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries car_makers"
        ],
        "align_scores": [
            0.9844584465026855,
            0.3348519802093506,
            0.24431923031806946,
            0.023118870332837105,
            0.0005669661913998425,
            0.0007158711086958647,
            0.9863055944442749,
            0.34910646080970764
        ],
        "align_select": "select countries.CountryId, countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Of the four-cylinder cars, which model has the highest power output?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9864686727523804,
            0.00011804363020928577,
            0.0007329114014282823,
            7.213606295408681e-05,
            0.00045057563693262637,
            6.718392251059413e-05,
            0.0007258744444698095,
            8.539527334505692e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For the four-cylinder cars show which models have the greatest horsepower.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries cars_data",
            "model_list cars_data",
            "continents cars_data"
        ],
        "align_scores": [
            0.6345304250717163,
            0.9926608800888062,
            0.0006227828562259674,
            0.0009700717637315392,
            0.0006152396090328693,
            0.0022200404200702906,
            0.0004987454740330577,
            0.000734526664018631
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the models of four-cylinder cars with the most power.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, model_list.Model",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "countries car_names cars_data",
            "car_names cars_data",
            "car_makers car_names cars_data",
            "continents model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9857725501060486,
            0.0004065413086209446,
            0.9869791269302368,
            0.000398931180825457,
            0.0003718295192811638,
            8.822237577987835e-05,
            0.000711635104380548,
            9.773358033271506e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For all models that are four-cylinder engines, which model gives the most power?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, cars_data.Horsepower"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "countries model_list cars_data",
            "car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9242647886276245,
            0.00018136654398404062,
            0.9243990778923035,
            0.0001659001427469775,
            0.0005063590360805392,
            9.103439515456557e-05,
            0.0029609263874590397,
            9.264614345738664e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "The model with the highest amount of power from the four cylindrical engines is.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, cars_data.Horsepower"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "continents model_list cars_data",
            "countries model_list cars_data",
            "car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9920146465301514,
            0.00011336564784869552,
            0.9908260703086853,
            0.00014681169704999775,
            0.00024041516007855535,
            7.321279554162174e-05,
            0.004353820811957121,
            7.577638461953029e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which of the 4-cylinder models has the greatest power output?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.MakeId, car_names.Model",
            "select car_names.MakeId, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9726118445396423,
            0.00017922199913300574,
            0.0015837528044357896,
            9.385654993820935e-05,
            0.0009729670127853751,
            9.571445843903348e-05,
            0.0005347264814190567,
            8.299490582430735e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For all cars of the four-cylinder engine, show me the car model that has the greatest power.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.881556510925293,
            0.0002361968217883259,
            0.0004935400211252272,
            9.666444384492934e-05,
            0.0006732924957759678,
            9.997578308684751e-05,
            0.0013070276472717524,
            0.00013725146709475666
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "All four-cylinder cars, Which car is most powerful?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Cylinders",
            "select cars_data.MPG"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "countries cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9840137362480164,
            9.676800982560962e-05,
            0.0005911077023483813,
            7.102074596332386e-05,
            0.0008237682632170618,
            7.274160452652723e-05,
            0.008308726362884045,
            6.799150287406519e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show the models of four cylinder cars that have the highest horsepower.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list cars_data",
            "continents model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9875673055648804,
            0.0005933223874308169,
            0.9876888394355774,
            0.0006808553589507937,
            0.0006738205556757748,
            9.905596380122006e-05,
            0.00037435637204907835,
            9.372508066007867e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which car has the largest horsepower among the four-cylinder model.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "car_makers car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.979469895362854,
            0.0004027179966215044,
            0.0005203912733122706,
            9.351937478641048e-05,
            0.0012476881965994835,
            0.00011131216160720214,
            0.0009155221632681787,
            0.00011910033208550885
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Determine the mpg of the cars that had eight cylinders or were produced before 1980.",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select cars_data.MPG",
            "select cars_data.MPG, cars_data.Cylinders, cars_data.Year",
            "select cars_data.MPG, cars_data.Cylinders",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.736847996711731,
            0.707892656326294,
            0.00010365474736317992,
            0.00011503929272294044,
            0.00017326700617559254,
            9.78408133960329e-05,
            0.9068506360054016,
            0.11837032437324524
        ],
        "align_select": "select cars_data.MPG",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know the highest fuel economy for cars which were built before 1980 or had eight cylinders.",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Cylinders",
            "select cars_data.MPG",
            "select min(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "car_makers cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9932518601417542,
            0.00033155319397337735,
            0.000211319827940315,
            0.00012047672498738393,
            0.021228907629847527,
            0.8120357394218445,
            0.021726183593273163,
            0.000567702460102737
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the best mpg value of all vehicles with eight cylinders that were made ahead of 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select cars_data.MPG",
            "select min(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9917661547660828,
            0.00048597416025586426,
            0.004901678301393986,
            0.36342787742614746,
            0.1582551896572113,
            0.00035418636980466545,
            0.00017948911408893764,
            9.03024265426211e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the mileage of the cars that had eight cylinders or were produced before 1980.",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select cars_data.MPG",
            "select cars_data.MPG, cars_data.Cylinders, cars_data.Year",
            "select cars_data.MPG, cars_data.Cylinders",
            "select cars_data.MPG, cars_data.Cylinders ou cars_data.Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.8390540480613708,
            0.9719569683074951,
            0.00010302821465302259,
            0.0001220785197801888,
            0.00012607734242919832,
            0.00010052690777229145,
            0.000144445410114713,
            9.973363194148988e-05
        ],
        "align_select": "select cars_data.MPG",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of the cars with eight cylinders or manufactured before 1980, what was the maximum mileage per gallon?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Cylinders",
            "select max(avg(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9922147393226624,
            0.0007493222365155816,
            0.00024440939887426794,
            9.908997890306637e-05,
            0.0017759520560503006,
            0.00010879644105443731,
            0.0001880841446109116,
            9.175566810881719e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the manufacturers that have created more than three car model.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Maker, car_makers.FullName, car_makers.Country",
            "select car_makers.FullName, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list",
            "countries car_makers model_list car_names",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.9832770824432373,
            8.940072439145297e-05,
            0.000412620633142069,
            6.409097841242328e-05,
            0.000214941639569588,
            6.319495150819421e-05,
            0.0005474028876051307,
            6.710631714668125e-05
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all the manufacturers with at least four car models and list their name and id.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, car_makers.Id",
            "select car_makers.FullName, model_list.Maker, model_list.ModelId",
            "select car_makers.FullName, model_list.Maker, car_names.MakeId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9485978484153748,
            9.56550647970289e-05,
            0.979176938533783,
            9.223042434314266e-05,
            0.00022341271687764674,
            5.888438317924738e-05,
            0.0004999113152734935,
            6.843330629635602e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the biggest amount of power for the three cylinder models, and what brand is it?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select car_names.Model, car_names.Make",
            "select max(cars_data.Horsepower), car_names.Make",
            "select cars_data.MPG, car_names.Make",
            "select car_makers.Maker, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "model_list cars_data",
            "continents car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9830341339111328,
            0.5807724595069885,
            0.0006348665338009596,
            0.00013109979045111686,
            0.0009400666458532214,
            0.021162768825888634,
            0.16692392528057098,
            0.02307090535759926
        ],
        "align_select": "select car_names.Model, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the most horsepower for the models with three cylinders and what make is it?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select car_names.Model, car_names.Make",
            "select max(cars_data.Horsepower), car_names.Make",
            "select car_names.Make, max(cars_data.Horsepower)",
            "select car_names.Make, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9658342003822327,
            0.00034368495107628405,
            0.0016472089337185025,
            8.30992721603252e-05,
            0.0042245052754879,
            9.431401849724352e-05,
            0.9897576570510864,
            0.0003737952501978725
        ],
        "align_select": "select car_names.Model, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the most amount of horsepower for the models with three cylinders made by what manufacturer?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select car_names.Model, max(cars_data.Horsepower)",
            "select car_names.Make, max(cars_data.Horsepower)",
            "select cars_data.MPG, max(cars_data.Horsepower)",
            "select max(cars_data.Horsepower), car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers model_list cars_data",
            "car_makers cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data"
        ],
        "align_scores": [
            0.00015904713654890656,
            0.0001055498723872006,
            0.0001226418389705941,
            0.00011032233305741102,
            0.00010705005115596578,
            7.169578748289496e-05,
            0.00012096411956008524,
            0.00013785454211756587
        ],
        "align_select": "select car_names.Model, max(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show the maximum horsepower for cars with three cylinders and what makes they are.",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), cars_data.Cylinders",
            "select Max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Accelerate), car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9936491847038269,
            0.00012261948722880334,
            0.0003190931456629187,
            8.549671474611387e-05,
            0.9936491847038269,
            0.00012261948722880334,
            0.9749762415885925,
            0.00013819280138704926
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "which model of the cars is lowest in terms of power?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents model_list car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9673718810081482,
            6.056719212210737e-05,
            0.950114905834198,
            5.8320456446381286e-05,
            0.00029015031759627163,
            5.005252023693174e-05,
            0.0002595900441519916,
            5.7270714023616165e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which car model has the least powerful engine?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model",
            "select car_names.Model (car_names.Make)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9920487999916077,
            6.751147157046944e-05,
            0.00043580587953329086,
            5.641771713271737e-05,
            0.0002955792297143489,
            5.889550084248185e-05,
            0.0017192732775583863,
            5.6752702221274376e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which car model offers the weakest engine?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model",
            "select car_names.Model (car_names.Make)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9888035655021667,
            7.330452353926376e-05,
            0.0005370044964365661,
            6.015781036694534e-05,
            0.00031220659730024636,
            6.139832112239674e-05,
            0.0022993541788309813,
            6.16000615991652e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What kind of car has the least horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Make",
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9775224328041077,
            6.975406722631305e-05,
            0.9182996153831482,
            7.177732913987711e-05,
            0.0036838725209236145,
            5.530756607186049e-05,
            0.01686040498316288,
            5.753345976700075e-05
        ],
        "align_select": "select car_names.Make",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "show me the models that are lighter than 3.5K but not made by the 'Ford Corporation'.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Make",
            "select car_names.Model, model_list.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names",
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "continents car_makers model_list car_names",
            "countries model_list car_names",
            "continents car_makers model_list cars_data",
            "countries model_list cars_data"
        ],
        "align_scores": [
            0.9433879256248474,
            0.845954954624176,
            0.965251088142395,
            0.4073045551776886,
            0.9714300036430359,
            0.8773753643035889,
            0.000336645869538188,
            0.0003990905825048685
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which cars are lighter than 3500 pounds but not made by Ford?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.MakeId",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_makers car_names cars_data",
            "model_list car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9242458939552307,
            0.9242458939552307,
            0.7066323757171631,
            0.7066323757171631,
            0.00035352568374946713,
            0.00035352568374946713,
            0.0005507376044988632,
            0.0005507376044988632
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the models that weighs less than 3500 kg but isn't a Ford?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "model_list car_names",
            "car_makers model_list car_names",
            "model_list cars_data",
            "countries model_list car_names",
            "continents model_list car_names",
            "car_names cars_data",
            "car_makers model_list cars_data"
        ],
        "align_scores": [
            0.9750806093215942,
            0.3412954807281494,
            0.946124255657196,
            0.5193307399749756,
            0.00036340916994959116,
            0.0004913660231977701,
            0.00020716898143291473,
            0.00023502262774854898
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "List all models that weighs less than 3,500 kg but were not produced by Ford Motors.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, model_list.Model",
            "select model_list.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "model_list car_names",
            "model_list cars_data",
            "car_makers model_list car_names",
            "countries model_list car_names",
            "car_makers model_list cars_data",
            "continents model_list car_names",
            "countries model_list cars_data",
            "continents model_list cars_data"
        ],
        "align_scores": [
            0.965481162071228,
            0.6933983564376831,
            0.7286073565483093,
            0.5608522891998291,
            0.00030456564854830503,
            0.0002722108911257237,
            0.23904620110988617,
            0.7054814696311951
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest horsepower and the make of the cars with three cylinders?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select cars_data.Horsepower, car_names.Make",
            "select max(cars_data.Horsepower), max(car_names.Make)",
            "select max(cars_data.Accelerate), car_names.Make"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9943444728851318,
            0.00012057580170221627,
            0.8080648183822632,
            0.9911364316940308,
            0.03022903949022293,
            0.0002665436768438667,
            0.965821385383606,
            0.0001873344008345157
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the max power output and the make of the cars which are three cylinder engines?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select avg(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Accelerate), car_names.Make",
            "select cars_data.Horsepower, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9935944676399231,
            0.00011815896141342819,
            0.00042299306369386613,
            8.09433258837089e-05,
            0.9741809368133545,
            0.00010861949704121798,
            0.9891259670257568,
            0.000166837839060463
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the largest horsepower and the manufacturer of the car models with 3 cylinders.",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), car_names.Model",
            "select max(cars_data.Horsepower), cars_data.Cylinders",
            "select max(cars_data.Horsepower), model_list.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "cars_data",
            "car_makers cars_data",
            "cars_data car_names",
            "cars_data car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9924142956733704,
            0.00018562072364147753,
            0.9891418218612671,
            0.00016627248260192573,
            0.0004094359464943409,
            0.0001052148436428979,
            0.9939162135124207,
            0.00038526725256815553
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest horsepower and the make of cars with three cylinders?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select cars_data.Horsepower, car_names.Make",
            "select max(cars_data.Accelerate), car_names.Make",
            "select max(cars_data.Horsepower), car_names.Make)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9942481517791748,
            0.00011638530850177631,
            0.8817226886749268,
            0.9880293011665344,
            0.9359923005104065,
            0.00016080412024166435,
            0.0009372361237183213,
            0.00010368579387431964
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "what is the make of the most powerful cars that have three cylinders and what is the power?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select car_names.Make, cars_data.Horsepower",
            "select car_names.Make, t4.c4",
            "select car_names.Model, car_names.Make, cars_data.Horsepower",
            "select car_names.Model, cars_data.Horsepower"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9905481934547424,
            0.9825958013534546,
            0.002774028107523918,
            0.008564713411033154,
            0.0005583151942119002,
            0.0004142375255469233,
            0.9922080636024475,
            0.9872679114341736
        ],
        "align_select": "select car_names.Make, cars_data.Horsepower",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What are the highest power output and the brand for the three cylinder vehicles?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), car_names.Model",
            "select cars_data.Horsepower, car_names.Make",
            "select max(cars_data.Accelerate), car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9949374198913574,
            0.00013402134936768562,
            0.9959188103675842,
            0.00013984461838845164,
            0.49999019503593445,
            0.9943055510520935,
            0.990623414516449,
            0.00020272526307962835
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest horsepower and the make of the car models with three cylinders?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), max(car_names.Make)",
            "select cars_data.Horsepower, car_names.Make",
            "select max(cars_data.Accelerate), car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.991780698299408,
            0.00013093810412101448,
            0.04635879024863243,
            0.00038968579610809684,
            0.8140355348587036,
            0.9876063466072083,
            0.9633485674858093,
            0.0002954028605017811
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the maximum horse power and the make of cars with three cylinders.",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), cars_data.Cylinders",
            "select max(cars_data.Accelerate), car_names.Make",
            "select max(cars_data.Horsepower), car_names.Make)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9952437281608582,
            0.00010847986413864419,
            0.00039767439011484385,
            8.003502443898469e-05,
            0.014234491623938084,
            9.885393228614703e-05,
            0.0008178868447430432,
            8.952596544986591e-05
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For each model that has three cylinders, list the maximum power output and the make of the car.",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select car_names.Model, max(cars_data.Horsepower), car_names.Make",
            "select car_names.Model, max(cars_data.Horsepower)",
            "select max(cars_data.Accelerate), car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9910298585891724,
            0.9739121198654175,
            0.06590180099010468,
            0.0016239593969658017,
            0.9953216910362244,
            0.9949724674224854,
            0.08417325466871262,
            0.04381923750042915
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "What is the lightest car with 8 cylinders that was produced in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select cars_data.Weight",
            "select cars_data.Id",
            "select max(cars_data.Weight)",
            "select car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "cars_data car_names cars_data",
            "car_names cars_data",
            "cars_data car_names",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9620876908302307,
            0.9881667494773865,
            0.0015320559032261372,
            0.003077039960771799,
            0.4387147128582001,
            0.0006256080814637244,
            0.11375696212053299,
            0.9833717942237854
        ],
        "align_select": "select cars_data.Weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the lowest weight of the car with eight cylinders produced in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9905975461006165,
            0.00010769795335363597,
            0.00015705391706433147,
            6.306244904408231e-05,
            0.00015083498146850616,
            5.933815555181354e-05,
            0.00019716905080713332,
            6.506755744339898e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars have an accelerate greater than the car with the biggest horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Accelerate",
            "select count(*), cars_data.Horsepower"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9631927013397217,
            0.0006842590519227087,
            0.0003759876708500087,
            0.00016514273011125624,
            0.0003461395390331745,
            0.00021555155399255455,
            0.00029195845127105713,
            0.0002366955013712868
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of the cars that have a larger accelerate than the most powerful car?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Horsepower",
            "select count(*), cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9764589071273804,
            0.008675986900925636,
            0.0003079402958974242,
            0.01113210804760456,
            0.0003266726853325963,
            0.010181049816310406,
            0.0004511528240982443,
            0.23601122200489044
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like you to tell me about the cars with higher accelerations than the one that has the highest horsepower.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select cars_data.Id",
            "select cars_data.MPG",
            "select car_names.Model, car_names.Make",
            "select car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.0011868128785863519,
            0.0020703873597085476,
            0.0017515434883534908,
            0.0015558410668745637,
            0.00035718304570764303,
            0.0011358768679201603,
            0.009818644262850285,
            0.21396511793136597
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many cars have a higher acceleration than the car with the highest horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Horsepower",
            "select count(*), cars_data.Id",
            "select count(distinct cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9371839761734009,
            0.0005597173585556448,
            0.0003370885387994349,
            0.00017492302868049592,
            0.0003674758190754801,
            0.0001437619503121823,
            0.0007180407410487533,
            7.854964496800676e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the cars that have a higher accelerate than the car with the largest horsepower.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select cars_data.Id",
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select cars_data.MPG"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.0017748635727912188,
            0.00040698086377233267,
            0.05748491361737251,
            0.0013970833970233798,
            0.0003022648161277175,
            0.00012363579298835248,
            0.0016646215226501226,
            0.0002932828210759908
        ],
        "align_select": "select cars_data.Id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which car has a greater acceleration than the car that had the greatest horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select cars_data.MPG",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "cars_data car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.4585907757282257,
            8.759750926401466e-05,
            0.0007476067985408008,
            6.677227793261409e-05,
            0.0013728877529501915,
            7.555501360911876e-05,
            0.002965878462418914,
            7.248712063301355e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many cars have accelerate faster than the most powerful car?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(distinct cars_data.Id)",
            "select count(*), cars_data.Horsepower"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9609772562980652,
            0.00024073464737739414,
            0.0003281000244896859,
            0.0001619328832020983,
            0.00901434849947691,
            9.08976944629103e-05,
            0.00034813268575817347,
            0.00022756026010029018
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars have a larger accelerate than the most powerful car?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Accelerate",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Horsepower"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9806491136550903,
            0.0002623453619889915,
            0.0003629910643212497,
            0.0001489931164542213,
            0.00035020028008148074,
            0.00015672585868742317,
            0.0003290322201792151,
            0.00020381917420309037
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the best mileage per gallon in a car with eight cylinders or made before 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select cars_data.MPG",
            "select max(cars_data.MPG)",
            "select cars_data.MPG, car_names.Model, car_names.Make",
            "select cars_data.MPG, car_names.Make"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "cars_data car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.1643330603837967,
            0.7652671933174133,
            0.9940915703773499,
            0.0011218724539503455,
            0.0001176506484625861,
            0.00022936997993383557,
            0.00019283367146272212,
            0.000735857873223722
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the mileage per gallon of eight-cylinder cars or produced before 1980.",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select cars_data.MPG",
            "select cars_data.MPG, cars_data.Cylinders",
            "select avg(cars_data.MPG)",
            "select cars_data.MPG, t5.c8"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9641175270080566,
            0.00018820611876435578,
            0.0001926328259287402,
            5.5764077842468396e-05,
            0.8484156727790833,
            7.231265772134066e-05,
            0.00033736505429260433,
            6.52672242722474e-05
        ],
        "align_select": "select cars_data.MPG",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the mileage per gallon of the car produced in 1980 or earlier that have eight cylinders.",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select cars_data.MPG",
            "select cars_data.MPG, cars_data.Cylinders",
            "select avg(cars_data.MPG)",
            "select mpg(cars_data.MPG)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "cars_data car_names cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "cars_data car_names",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.8627159595489502,
            0.00014860760711599141,
            0.0002116458781529218,
            5.869713277206756e-05,
            0.4488510489463806,
            7.822023326298222e-05,
            0.0006818874971941113,
            8.981259452411905e-05
        ],
        "align_select": "select cars_data.MPG",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many vehicles have a horsepower greater than 150?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), t5.dcars_data.Id",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9931074976921082,
            8.965651068137959e-05,
            0.00027633801801130176,
            7.99434055807069e-05,
            0.00024365926219616085,
            7.248567271744832e-05,
            0.0003727067669387907,
            8.534975495422259e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Provide me the number of the cars that were made with engines over 150 HP's.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) dependant on cars_data.Id",
            "select count(*) depreciated car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "cars_data car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9809019565582275,
            0.0002988369669765234,
            0.00027507319464348257,
            0.007272355258464813,
            0.0006141446647234261,
            0.0004369226808194071,
            0.00031456415308639407,
            0.00018524941697251052
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars has over 150 horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), t5.dcars_data.Id",
            "select count(*), cars_data.MPG, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9916483163833618,
            0.00010195569484494627,
            0.0002717719180509448,
            0.00010316044790670276,
            0.0002522023569326848,
            8.731378329684958e-05,
            0.00010999418736901134,
            5.1244944188511e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the number of cars with an engine power larger than 150?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), t5.datum(cars_data.Id)",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9936752915382385,
            0.00010984680557157844,
            0.00022614933550357819,
            0.000671920133754611,
            0.0002150773216271773,
            0.0001372370752505958,
            0.0002086456079268828,
            0.00035093005863018334
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many vehicles with a horsepower of over 150?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), t5.dcars_data.Id",
            "select count(*), cars_data.MPG, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9939897060394287,
            0.0004932882729917765,
            0.0002871704054996371,
            0.0003403297159820795,
            0.0002462751290295273,
            0.000252322613960132,
            0.00011088998144259676,
            6.959599704714492e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars have more than 150 horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9912920594215393,
            0.0003026174963451922,
            0.00025178573559969664,
            0.022200746461749077,
            0.0003524186322465539,
            0.0003038238501176238,
            0.00023761963529977947,
            0.0013480468187481165
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars have a cylinder count greater than four?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.MPG, cars_data.Cylinders",
            "select count(*), cars_data.Id, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.992327868938446,
            0.00022883940255269408,
            0.00027328566648066044,
            0.012035157531499863,
            0.00011407842976041138,
            7.817370351403952e-05,
            0.00012347612937446684,
            0.00015817479288671166
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars were produced for having more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) dependant on cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "cars_data car_names",
            "car_names cars_data",
            "cars_data car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9750222563743591,
            0.0009974444983527064,
            0.00025962619110941887,
            0.0002209865633631125,
            0.00027166775544174016,
            0.000386480096494779,
            0.003877913812175393,
            0.00015512680693063885
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count how many cars have more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9902642965316772,
            0.0001627076999284327,
            0.0002312249707756564,
            0.004189498722553253,
            0.00027950736694037914,
            0.045425593852996826,
            0.00019741134019568563,
            0.0005904106656089425
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars have over 4 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9926151037216187,
            0.00051873893244192,
            0.0002754799497779459,
            0.00028039031894877553,
            0.00026618258561939,
            0.0001845165970735252,
            0.00033244036603718996,
            0.00016936309111770242
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars accelerate faster than car with the most horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Horsepower",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9881083369255066,
            0.08165735006332397,
            0.0005079858237877488,
            0.0067730862647295,
            0.0003192151489201933,
            0.0006768199964426458,
            0.0005144196911714971,
            0.0006234902539290488
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars have more acceleration than the one with the most horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Horsepower",
            "select count(*), cars_data.Id",
            "select count(distinct cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9559611678123474,
            0.0006019592401571572,
            0.00043737233499996364,
            0.00015966981300152838,
            0.0003928953956346959,
            0.00016014615539461374,
            0.0009121760376729071,
            8.23409209260717e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars have a higher rate of acceleration than the most powerful?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Horsepower",
            "select count(*), cars_data.Accelerate",
            "select count(*), cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9840333461761475,
            0.0007389438687823713,
            0.0004196410591248423,
            0.00021223232033662498,
            0.000477722060168162,
            0.00021932637901045382,
            0.0003490355738904327,
            0.00016028211393859237
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars are there are with more powerful accelerates than the car with the most power?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Accelerate",
            "select count(*), cars_data.MPG"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9591845273971558,
            0.0008759971824474633,
            0.00035664933966472745,
            0.0001652221253607422,
            0.0006316424696706235,
            0.00023695631534792483,
            0.0002542157890275121,
            9.803583088796586e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of cars with more than six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.MPG, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9936748147010803,
            0.0001153954872279428,
            0.000250617420533672,
            0.0003461540618445724,
            0.0002672350383363664,
            0.005283483769744635,
            0.00010686268797144294,
            7.371474930550903e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The number of cars that have more than six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)",
            "select count(*), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9925180673599243,
            0.00014150213974062353,
            0.00027285353280603886,
            0.0009309182059951127,
            0.0002787401608657092,
            0.0001340075396001339,
            0.0002619269653223455,
            0.011374544352293015
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many of the cars have more than 6 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)",
            "select count(*), cars_data.MPG, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9916849136352539,
            0.0002143415913451463,
            0.00023925943241920322,
            0.0017486636061221361,
            0.000309446215396747,
            0.00015387900930363685,
            0.00010567777644610032,
            7.693086081417277e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many cars have over six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9944636225700378,
            0.0003511721733957529,
            0.00026708858786150813,
            0.0032640935387462378,
            0.00029800046468153596,
            0.0123289218172431,
            0.00031692147604189813,
            0.00014557399845216423
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of vehicles with more than six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9940435290336609,
            0.00011172050290042534,
            0.0002717055904213339,
            0.00033046919270418584,
            0.00030078148120082915,
            0.00011905831343028694,
            0.00021697847114410251,
            0.0001790622918633744
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the brands that produced cars in 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_names.Make",
            "select distinct car_names.Make",
            "select car_names.Model, car_names.Make",
            "select car_names.Make, t4.c3"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9866220355033875,
            0.005175704602152109,
            0.6912497282028198,
            0.0003030785883311182,
            0.00020603528537321836,
            7.6847049058415e-05,
            0.00048639357555657625,
            9.879050776362419e-05
        ],
        "align_select": "select car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which car producers did make vehicles in 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select distinct car_makers.Maker, car_makers.FullName",
            "select distinct car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9821529984474182,
            0.002490055514499545,
            0.00035075831692665815,
            8.971808711066842e-05,
            0.0006106399814598262,
            0.0001249525521416217,
            0.6499806046485901,
            0.005812117829918861
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who made some cars in 1970?",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName, car_makers.Country"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "model_list car_makers car_names cars_data",
            "car_names cars_data",
            "car_makers car_names",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9851061105728149,
            0.00011055570212192833,
            0.00029490847373381257,
            7.053479930618778e-05,
            0.000284912355709821,
            6.573388236574829e-05,
            0.00022388360230252147,
            6.62286183796823e-05
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the names of car manufacturers who made specific cars in 1970.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select distinct car_makers.FullName, car_makers.Maker",
            "select specific car_makers.FullName, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers car_names",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "countries car_makers car_names cars_data"
        ],
        "align_scores": [
            0.00037506333319470286,
            6.185800884850323e-05,
            0.00035451067378744483,
            6.259477231651545e-05,
            0.00023929365852382034,
            5.7635927078081295e-05,
            0.0002842910180334002,
            7.038214971544221e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the names of the car manufacturers, which produced cars in 1970.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.FullName, car_makers.Maker",
            "select distinct car_makers.FullName, car_makers.Maker",
            "select distinct car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.00042651433614082634,
            7.122360693756491e-05,
            0.0005401629023253918,
            6.859077257104218e-05,
            0.0003876623813994229,
            6.25654065515846e-05,
            0.0003341523988638073,
            6.5993721364066e-05
        ],
        "align_select": "select car_makers.Maker, car_makers.FullName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "If some cars had been made in 1970, please let me know what manufacturers produced them.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Maker",
            "select car_makers.FullName",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "model_list car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.00039280494092963636,
            7.162526162574068e-05,
            0.8558471202850342,
            0.00012278470967430621,
            0.4984229505062103,
            0.0001790945534594357,
            0.0005239192396402359,
            8.98966463864781e-05
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The types of automobiles made either by the manufacturer General Motors (GM) or weighing more than 3.500 kg.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct car_names.Model",
            "select distinct car_names.Model, car_names.Make",
            "select car_names.Model",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names"
        ],
        "align_scores": [
            0.06478597223758698,
            0.00016051121929194778,
            0.0002703020581975579,
            8.63570676301606e-05,
            0.9488551020622253,
            0.004454051610082388,
            0.00022744029411114752,
            9.863304148893803e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the model and year of the car produced in the earliest years.",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_names.Model, cars_data.Year",
            "select car_names.Model, t4.c7",
            "select car_names.Model, cars_data.Year",
            "select car_makers.FullName, cars_data.Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9477298259735107,
            7.748245116090402e-05,
            0.0003939494490623474,
            8.607564814155921e-05,
            0.9477298259735107,
            7.748245116090402e-05,
            0.0004618675448000431,
            7.69493417465128e-05
        ],
        "align_select": "select car_names.Model, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What's the rate acceleration of 'amc hornet sports about sw'?",
        "gold_select": "select cars_data.Accelerate",
        "select_candidates": [
            "select avg(cars_data.Accelerate)",
            "select cars_data.Accelerate",
            "select max(cars_data.Accelerate)",
            "select acceleration(cars_data.Accelerate)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.40710145235061646,
            5.775746831204742e-05,
            0.9914205074310303,
            7.48176098568365e-05,
            0.001109027536585927,
            6.34502139291726e-05,
            0.000796013162471354,
            6.942969048395753e-05
        ],
        "align_select": "select cars_data.Accelerate",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me the acceleration value for the AMC Hornet Sportabout.",
        "gold_select": "select cars_data.Accelerate",
        "select_candidates": [
            "select avg(cars_data.Accelerate)",
            "select cars_data.Accelerate",
            "select accel(cars_data.Accelerate)",
            "select max(cars_data.Accelerate)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.0036291214637458324,
            5.6731325457803905e-05,
            0.9943016767501831,
            0.0001101372399716638,
            0.0010046671377494931,
            6.80526063661091e-05,
            0.0011250135721638799,
            6.340714026009664e-05
        ],
        "align_select": "select cars_data.Accelerate",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average miles per gallon for the four-cylinder engine?",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9964176416397095,
            0.00013593482435680926,
            0.0004277670232113451,
            0.00012239240459166467,
            0.0004740242147818208,
            0.00011430207814555615,
            0.9964176416397095,
            0.00013593482435680926
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average miles per gallon for four-cylinder cars.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9960269927978516,
            0.0001168092421721667,
            0.0003731534816324711,
            0.000115349939733278,
            0.0004412163107190281,
            9.419780690222979e-05,
            0.9960269927978516,
            0.0001168092421721667
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The average miles per gallon of all the cars with four cylinders.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9955984354019165,
            0.00028300780104473233,
            0.0003923687618225813,
            0.0001120926026487723,
            0.00047189785982482135,
            0.00011257699225097895,
            0.9955984354019165,
            0.00028300780104473233
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The average fuel efficiency for vehicles with four-cylinder engines is what?",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9958987832069397,
            0.00016537988267373294,
            0.0004463130026124418,
            0.00013811769895255566,
            0.9958987832069397,
            0.00016537988267373294,
            0.9958987832069397,
            0.00016537988267373294
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the average miles per gallon of the cars with four cylinders.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9959253072738647,
            0.000433151435572654,
            0.0003871812950819731,
            0.00011717392771970481,
            0.00037702603731304407,
            0.00013223251153249294,
            0.9959253072738647,
            0.000433151435572654
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please provide the average miles per gallon for the cars with four cylinders.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.995859682559967,
            0.00016406823124270886,
            0.0004419384349603206,
            0.00012511946260929108,
            0.0004904322559013963,
            0.00011908284068340436,
            0.995859682559967,
            0.00016406823124270886
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me an approximate average miles per gallon value for all four-cylinder engine cars.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.99101722240448,
            0.00018649210687726736,
            0.00041506465640850365,
            0.00011704718781402335,
            0.99101722240448,
            0.00018649210687726736,
            0.99101722240448,
            0.00018649210687726736
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Cars that weigh no less than 3,000 but no more than 4,000 were manufactured in what years?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select specific cars_data.Year",
            "select cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "cars_data car_names cars_data"
        ],
        "align_scores": [
            0.922179102897644,
            0.0020906962454319,
            0.1271105855703354,
            0.00045589375076815486,
            0.0032216054387390614,
            0.0001935583568410948,
            0.922179102897644,
            0.0020906962454319
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which years cars weights no less than 3 thousand and no more than 4 thousand?.",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select cars_data.Year, cars_data.Accelerate",
            "select cars_data.Year, t5.c8"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9907565712928772,
            0.000494329840876162,
            0.07951164990663528,
            0.00016095754108391702,
            0.00014870284940116107,
            7.160600216593593e-05,
            0.000288080278551206,
            0.00010524775279918686
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How about in which years the cars were produced weighting no less than 3,000 and no less than 4,000 kgs?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select avg(cars_data.Year)",
            "select cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "car_makers cars_data",
            "cars_data car_names"
        ],
        "align_scores": [
            0.919096827507019,
            0.0013525767717510462,
            0.055143311619758606,
            0.0005115637904964387,
            0.0016580036608502269,
            8.929652540246025e-05,
            0.919096827507019,
            0.0013525767717510462
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What year was it when cars were produced weighing no less than 3,000 and no more than 4,000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select cars_data.Year",
            "select cars_data.Year (or t5.c8)",
            "select cars_data.Year (cars_data.Accelerate)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9865308403968811,
            0.7317009568214417,
            0.9865308403968811,
            0.7317009568214417,
            0.0008713989518582821,
            0.00043614584137685597,
            0.002240532310679555,
            0.0002893508644774556
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "When was cars of the weight of 3,000 to 4,000 kg made.",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select t4.c7",
            "select t7.c7",
            "select t8.c7"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list cars_data",
            "countries car_names cars_data",
            "countries cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.99201899766922,
            0.00017693366680759937,
            0.0007186798029579222,
            8.675440767547116e-05,
            0.0004530962905846536,
            7.302920857910067e-05,
            0.0007445347146131098,
            7.853264105506241e-05
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The cars with more than lowest horsepower are those that don't have more than three cylinders. Please list the brand of the vehicle as well as the make id.",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.Make, car_names.MakeId",
            "select car_names.Model, car_names.MakeId",
            "select distinct car_names.Make, car_names.MakeId",
            "select car_names.Make, car_names.MakeId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "model_list cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.8825797438621521,
            0.0007256748504005373,
            0.0021661175414919853,
            0.00026420081849209964,
            0.023038970306515694,
            0.00014932721387594938,
            0.8825797438621521,
            0.0007256748504005373
        ],
        "align_select": "select car_names.Make, car_names.MakeId",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list makers cars along with their identifications and how many models they produce.",
        "gold_select": "select car_makers.FullName, car_makers.Id, count(*)",
        "select_candidates": [
            "select car_makers.Id, count(*)",
            "select car_makers.Maker, count(*)",
            "select car_makers.FullName, model_list.Maker, count(*)",
            "select car_makers.Maker, model_list.Maker, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list",
            "car_makers model_list car_names",
            "model_list car_makers",
            "model_list car_names",
            "continents car_makers model_list",
            "countries model_list"
        ],
        "align_scores": [
            0.9387631416320801,
            0.00025962741347029805,
            0.8439739346504211,
            0.00028068319079466164,
            0.012887924909591675,
            0.0002590169897302985,
            0.00037324175355024636,
            0.00011236420687055215
        ],
        "align_select": "select car_makers.Id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which country is known as the country with many automakers (car companies)?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, car_makers.Country",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, countries.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.42932167649269104,
            6.931582902325317e-05,
            0.0016020240727812052,
            6.066742571420036e-05,
            0.0028883519116789103,
            5.641040115733631e-05,
            0.0014661288587376475,
            5.640270683215931e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the country with the largest number of car manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, car_makers.Country",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName commensurate with count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.7220682501792908,
            7.155631465138867e-05,
            0.0010123960673809052,
            6.195990863488987e-05,
            0.001797376316972077,
            6.031617886037566e-05,
            0.01293694693595171,
            5.4058800742495805e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the model of the car model with the weakest engine?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select model_list.Model, car_names.Model",
            "select car_names.Model",
            "select model_list.Model, model_list.ModelId"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "countries model_list car_names cars_data",
            "countries car_names cars_data",
            "model_list car_names",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9918050765991211,
            6.644782843068242e-05,
            0.0004035990859847516,
            5.576976764132269e-05,
            0.9929977655410767,
            6.55440308037214e-05,
            0.0005986939650028944,
            6.285826384555548e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "which car model has the weakest engine?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.993083119392395,
            6.505173223558813e-05,
            0.00040349483606405556,
            5.621396121568978e-05,
            0.000550722936168313,
            6.143539940239862e-05,
            0.00031398620922118425,
            5.7521170674590394e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "The faster you accelerate, what is the sound output of hornet sw?",
        "gold_select": "select cars_data.Accelerate",
        "select_candidates": [
            "select cars_data.Accelerate, max(t5.c8)",
            "select cars_data.Accelerate, t5.c8",
            "select cars_data.Accelerate, cars_data.Year",
            "select cars_data.Accelerate, decibel(t5.c8)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.0003014520916622132,
            0.00016488942492287606,
            0.00032404728699475527,
            0.00019077623437624425,
            0.00011248019291087985,
            8.502514538122341e-05,
            0.00031278247479349375,
            0.0001730058284010738
        ],
        "align_select": "select cars_data.Accelerate, max(t5.c8)",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "How fast can a 'Hornet sportabout' go with an 'AMC Hornet'?",
        "gold_select": "select cars_data.Accelerate",
        "select_candidates": [
            "select cars_data.Accelerate",
            "select max(cars_data.Accelerate)",
            "select avg(cars_data.Accelerate)",
            "select cars_data.Id, max(cars_data.Accelerate)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.6594918370246887,
            0.00028941326308995485,
            0.8248914480209351,
            7.276935502886772e-05,
            0.12190753221511841,
            7.625509897479787e-05,
            0.0004961328231729567,
            6.22142615611665e-05
        ],
        "align_select": "select cars_data.Accelerate",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How fast can you accelerate the car with 'AMC Hornet Sportsabout' (SW) engine?",
        "gold_select": "select cars_data.Accelerate",
        "select_candidates": [
            "select max(cars_data.Accelerate)",
            "select avg(cars_data.Accelerate)",
            "select cars_data.Accelerate",
            "select accel(cars_data.Accelerate)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9863505959510803,
            0.00010432031558593735,
            0.04342920333147049,
            7.30808314983733e-05,
            0.9822373986244202,
            0.00011125879245810211,
            0.0012733089970424771,
            8.841911039780825e-05
        ],
        "align_select": "select max(cars_data.Accelerate)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The acceleration of the car hornet sportabout is how much?",
        "gold_select": "select cars_data.Accelerate",
        "select_candidates": [
            "select avg(cars_data.Accelerate)",
            "select cars_data.Accelerate",
            "select accel(cars_data.Accelerate)",
            "select sum(cars_data.Accelerate)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "cars_data",
            "continents car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "countries cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.020417658612132072,
            5.755453457823023e-05,
            0.9937201738357544,
            7.27915539755486e-05,
            0.0009347781888209283,
            6.880918954266235e-05,
            0.09667470306158066,
            6.0104706790298223e-05
        ],
        "align_select": "select cars_data.Accelerate",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many cars were made by the producer called American Motor Corporation.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.FullName, car_makers.Maker",
            "select count(*), car_makers.Maker, car_makers.FullName",
            "select count(*), car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "continents car_makers car_names",
            "countries car_makers car_names",
            "car_makers car_makers car_names"
        ],
        "align_scores": [
            0.9928796887397766,
            0.0016286977333948016,
            0.00013856780424248427,
            9.255112672690302e-05,
            0.00013569043949246407,
            9.489888179814443e-05,
            0.00031001941533759236,
            0.0009381053387187421
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the make American Motors, how many models were produced?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_names.Make",
            "select car_names.Make, count(*)",
            "select count(*) pour car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "model_list car_names",
            "car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "continents model_list car_names",
            "car_makers car_names",
            "continents car_makers car_names",
            "countries car_names",
            "car_names"
        ],
        "align_scores": [
            0.9921443462371826,
            0.0002229898818768561,
            0.0003459789149928838,
            0.019688548520207405,
            0.00653123389929533,
            0.015994615852832794,
            0.04887077957391739,
            0.0002093085495289415
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car brands was made by the company called American Car Company?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct car_names.Make)",
            "select count(distinct car_names.Model)",
            "select count(distinct car_names.MakeId)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "continents car_makers car_names",
            "continents countries car_makers car_names",
            "continents car_makers model_list car_names",
            "countries car_makers car_names",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9939785003662109,
            9.143643546849489e-05,
            0.5685847401618958,
            7.692293729633093e-05,
            0.39250320196151733,
            8.672512194607407e-05,
            0.11000417917966843,
            8.225082274293527e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all car models from the car-maker American Motors Corporation.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_makers.FullName",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "model_list car_names",
            "car_makers model_list car_makers car_names",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.9933778643608093,
            9.852717630565166e-05,
            0.9917226433753967,
            0.0001079881694749929,
            0.00018391638877801597,
            6.762229168089107e-05,
            0.00018710769654717296,
            6.141495396150276e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars did they manufacture under the brand name American Motors?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*) car_makers.Maker, car_makers.FullName",
            "select count(*), car_makers.Maker, car_makers.FullName",
            "select count(*), car_makers.Maker, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "continents car_makers car_names",
            "continents countries car_makers car_names",
            "continents car_makers model_list car_names",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.9912949204444885,
            0.0009436143445782363,
            0.0001646446471568197,
            0.000126880215248093,
            0.00013988155114930123,
            0.00011770552373491228,
            0.000141235621413216,
            0.00010074493184220046
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cylinders in a volvo that accelerates slowly?",
        "gold_select": "select cars_data.Cylinders",
        "select_candidates": [
            "select cars_data.Cylinders",
            "select count(*)",
            "select sum(cars_data.Cylinders)",
            "select count(distinct cars_data.Cylinders)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.986716628074646,
            0.00019561128283385187,
            0.7386105060577393,
            9.292280446970835e-05,
            0.0065286289900541306,
            8.082962449407205e-05,
            0.001334005268290639,
            6.890215445309877e-05
        ],
        "align_select": "select cars_data.Cylinders",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the cylinder count for a Volvo with the lowest acceleration.",
        "gold_select": "select cars_data.Cylinders",
        "select_candidates": [
            "select cars_data.Cylinders",
            "select cars_data.Id, cars_data.Cylinders",
            "select cars_data.Cylinders, cars_data.Edispl",
            "select cars_data.Cylinders, cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "continents car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9877976775169373,
            0.5132119059562683,
            0.0001963787799468264,
            0.0001937513006851077,
            0.0002851710596587509,
            0.00018822532729245722,
            0.0005308224353939295,
            0.00022139842621982098
        ],
        "align_select": "select cars_data.Cylinders",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show the number of French automobile manufacturers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Country",
            "select count(*), car_makers.Id",
            "select count(*) dependant on car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "car_makers"
        ],
        "align_scores": [
            0.9952235817909241,
            0.00022036858717910945,
            0.00025448837550356984,
            0.00035813471185974777,
            0.00030919266282580793,
            0.00024186799419112504,
            0.0007223791908472776,
            0.00016899594629649073
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of car models made in the United States.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(*), car_makers.Maker",
            "select count(*), car_makers.Maker, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "car_makers model_list car_makers car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9920713305473328,
            0.00638094637542963,
            0.05137607455253601,
            9.764452261151746e-05,
            0.00030166946817189455,
            0.0028709592297673225,
            0.00013033136201556772,
            9.27801665966399e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of car models that are produced in the U.S..",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(distinct car_names.Model)",
            "select count(*), car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list car_makers car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9890138506889343,
            0.003166820155456662,
            0.15228486061096191,
            0.00013631940237246454,
            0.18944424390792847,
            0.00015655365132261068,
            0.0003256338241044432,
            0.0005492757190950215
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of car models produced in the United States.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(*), car_makers.Maker",
            "select count(*), car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9930889010429382,
            0.005236111581325531,
            0.0857679471373558,
            9.951210086001083e-05,
            0.00026689207879826427,
            0.0006998255266807973,
            0.00025810531224124134,
            0.0004009484255220741
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Number of car manufacturers produced in the U.S.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Id",
            "select count(*), car_makers.Maker",
            "select count(distinct car_makers.Maker)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers",
            "car_makers model_list",
            "countries car_makers",
            "continents car_makers",
            "car_makers model_list car_names",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9809066653251648,
            7.938103954074904e-05,
            0.0002926794404629618,
            6.182503420859575e-05,
            0.000290930358460173,
            6.683222454739735e-05,
            0.5318708419799805,
            6.442279845941812e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all cars that have four cylinders and their MPG.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select cars_data.Id, cars_data.MPG",
            "select cars_data.MPG, cars_data.Id",
            "select cars_data.MPG, cars_data.Cylinders",
            "select cars_data.Id, cars_data.MPG"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.0027815676294267178,
            0.00011458911467343569,
            0.0009905635379254818,
            9.561757906340063e-05,
            0.00026852969313040376,
            7.549941801698878e-05,
            0.0027815676294267178,
            0.00011458911467343569
        ],
        "align_select": "select cars_data.Id, cars_data.MPG",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the smallest weight of cars with eight engines manufactured in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9928049445152283,
            0.00010904986993409693,
            0.0001441462809452787,
            6.036181002855301e-05,
            0.00018348761659581214,
            5.773484008386731e-05,
            0.00014075552462600172,
            6.073087206459604e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all the makers that have more than three models and return their names and identifiers.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, car_makers.Id",
            "select car_makers.FullName, model_list.Maker, model_list.ModelId",
            "select car_makers.Maker, car_makers.FullName, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9437428116798401,
            7.532869494752958e-05,
            0.9126247763633728,
            7.298047421500087e-05,
            0.00020912718900945038,
            6.000677967676893e-05,
            0.0005229049711488187,
            7.259054109454155e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the number of countries whose is more than two car manufacturers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.6483887434005737,
            0.4929262399673462,
            0.0009332302142865956,
            0.639003336429596,
            0.00065321329748258,
            0.48095259070396423,
            0.0006886772462166846,
            0.022731997072696686
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which are the auto-makers which produce two or more models and more three auto makers? List the ids along with the makes.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_names.MakeId, car_names.Make",
            "select car_names.Model, car_names.Make",
            "select car_names.Make, car_names.Model",
            "select car_names.Make, car_names.MakeId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "model_list car_names",
            "car_names",
            "car_makers model_list car_names",
            "car_makers car_names",
            "continents model_list car_names",
            "countries car_names"
        ],
        "align_scores": [
            0.5504317879676819,
            0.32001447677612305,
            0.0013227805029600859,
            0.0003302456170786172,
            0.002825910924002528,
            0.0004873807483818382,
            0.33205974102020264,
            0.19895371794700623
        ],
        "align_select": "select car_names.MakeId, car_names.Make",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the code of airport that currently has the most flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode IATA-CONTROL-GROUP BY-ORDER BY-LIMIT",
            "select airports.AirportCode IATA-CONTROL-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.989876925945282,
            8.259381866082549e-05,
            0.008038482628762722,
            6.809974001953378e-05,
            0.003177684498950839,
            9.581134509062394e-05,
            0.000572661985643208,
            0.0001341727183898911
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code of the airport that has the most flights?",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9924374222755432,
            7.107415149221197e-05,
            0.007523516193032265,
            7.116007327567786e-05,
            0.00047019225894473493,
            7.799038576195017e-05,
            0.007523516193032265,
            7.116007327567786e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the code for the airport that currently has the most flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode-, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9911181330680847,
            7.0517577114515e-05,
            0.007549516391009092,
            6.714672053931281e-05,
            0.007549516391009092,
            6.714672053931281e-05,
            0.0017634999239817262,
            5.538271943805739e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the code for the airport that currently has the most flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode-, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9910467267036438,
            7.408556120935827e-05,
            0.0081024169921875,
            7.307156192837283e-05,
            0.0081024169921875,
            7.307156192837283e-05,
            0.0024380148388445377,
            5.790333671029657e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the code of airport that has the most flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode IATA-CONTROL-GROUP BY-ORDER BY-LIMIT",
            "select airports.AirportCode IATA-CONTROL-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.993178129196167,
            6.869550270494074e-05,
            0.005619047675281763,
            6.248861609492451e-05,
            0.0028527118265628815,
            8.141988655552268e-05,
            0.0004419966135174036,
            0.00011720130714820698
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the airport code that currently has fewest flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode (airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9922782182693481,
            5.338227856555022e-05,
            0.003411742625758052,
            5.7991368521470577e-05,
            0.0002427990984870121,
            6.159442273201421e-05,
            0.013602742925286293,
            5.01496069773566e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the code for the airport that currently has the fewest flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9900175929069519,
            7.27626247680746e-05,
            0.004634207580238581,
            6.625224341405556e-05,
            0.00033926975447684526,
            6.896776176290587e-05,
            0.004634207580238581,
            6.625224341405556e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "I need to find the acronym and country of the airline that had the least number of flights.",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.uid, airlines.Abbreviation, airlines.Country",
            "select airlines.Country, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9925369620323181,
            7.81165508669801e-05,
            0.001232502399943769,
            8.190971857402474e-05,
            0.0003735955979209393,
            7.35261055524461e-05,
            0.9936264753341675,
            8.367984992219135e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the abbreviation and country of the airline with the fewest flights?",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.uid, airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9941522479057312,
            7.5724528869614e-05,
            0.002225172007456422,
            8.09464036137797e-05,
            0.0004752376116812229,
            7.250945782288909e-05,
            0.9904402494430542,
            7.622355042258278e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the abbreviation and country of the airline with the smallest count of flights.",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select flights.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.Country, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9938173890113831,
            6.823807052569464e-05,
            0.002842162037268281,
            7.563193503301591e-05,
            0.0034348065964877605,
            7.79267429606989e-05,
            0.9941605925559998,
            7.059832569211721e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the abbreviation and country of the airline which operates with fewer flights than all others.",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.uid, airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9866688251495361,
            8.180910663213581e-05,
            0.002123336773365736,
            8.531443745596334e-05,
            0.0006488562794402242,
            7.635689689777792e-05,
            0.9797836542129517,
            8.515871013514698e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return how many airlines there are in the US.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Country",
            "select count(*), airlines.Country, airports.CountryAbbrev",
            "select count(*), airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports"
        ],
        "align_scores": [
            0.9947556257247925,
            0.0008824958349578083,
            0.00025141341029666364,
            0.00011357090261299163,
            0.00011098815593868494,
            7.212904893094674e-05,
            0.00021239141642581671,
            0.0005692859995178878
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many airlines there is in the US.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Country",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports"
        ],
        "align_scores": [
            0.9933629035949707,
            6.333203054964542e-05,
            0.0002431755856378004,
            5.394848631112836e-05,
            0.00025167869171127677,
            5.3597330406773835e-05,
            0.0002431755856378004,
            5.394848631112836e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many airlines exist in the US?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Country",
            "select count(*), airlines.Airline",
            "select count(*) the SELECT-FROM-WHERE"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports"
        ],
        "align_scores": [
            0.9945646524429321,
            0.0009618249023333192,
            0.0002515818050596863,
            0.00010757418203866109,
            0.0002739049377851188,
            0.0004350124509073794,
            0.00043360417475923896,
            0.00012054925173288211
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights have arrived at Ataturk Airport?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportName",
            "select count(avg(flights.FlightNo)",
            "select count(*), airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9565550684928894,
            0.0002405570849077776,
            0.0003627293626777828,
            0.0005618614959530532,
            0.000330218521412462,
            0.00011155294487252831,
            0.00046657511848025024,
            0.00042462479905225337
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of flights that have entered Atlanta.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportName",
            "select count(*), airports.City",
            "select count(*), airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9938923120498657,
            0.0008042445406317711,
            0.00023130103363655508,
            0.0002001355605898425,
            0.0002583158202469349,
            0.0006904618348926306,
            0.00023130103363655508,
            0.0002001355605898425
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights went in to Atlanta?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportName",
            "select count(*), airports.City",
            "select count(*) descended on airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.994873583316803,
            0.00017037737416103482,
            0.00023325970687437803,
            0.00027442825376056135,
            0.00023589278862345964,
            0.0004955458571203053,
            0.000415664108004421,
            0.00011664962221402675
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return how many times were there flights into Atlanta Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportName",
            "select count(*), airports.AirportName, airports.City",
            "select count(*), airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9944185018539429,
            0.0002091227943310514,
            0.00032576799276284873,
            0.0013299823040142655,
            0.00013658797251991928,
            7.987353455973789e-05,
            0.00046888712677173316,
            0.001971330028027296
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many United Airlines flights arrived in Anchorage Airport?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportName",
            "select count(*), airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9959535598754883,
            0.00022033412824384868,
            0.00030837274971418083,
            0.36579886078834534,
            0.0001337315479759127,
            0.00013559291255660355,
            0.0003561066114343703,
            0.0006055223057046533
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights had arrived from United in the airport in ASY?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), airports.AirportName",
            "select count(*), airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.9849531054496765,
            0.00022027110389899462,
            0.0002922079584095627,
            0.002717082854360342,
            0.0003231806622352451,
            0.012215091846883297,
            0.0003802394203376025,
            0.26010841131210327
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of United flights arriving in ASY airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), flights.Airline",
            "select count(*), flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "flights",
            "airlines flights",
            "airports flights"
        ],
        "align_scores": [
            0.9841975569725037,
            0.00016893571591936052,
            0.0002596793929114938,
            0.0665765106678009,
            0.00029386021196842194,
            0.17672190070152283,
            0.00024740901426412165,
            0.0003095669380854815
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights land in Aberdeen or Abilene?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City, flights.FlightNo",
            "select count(*), airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9949042797088623,
            6.928959192009643e-05,
            0.0002676218282431364,
            8.039852400543168e-05,
            0.0001219025143655017,
            5.555977622861974e-05,
            0.00012573841377161443,
            5.907391823711805e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights land at Aberdeen or Abilene?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City, airports.AirportName",
            "select count(*), airports.City, airports.AirportName",
            "select count(*), airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9947434663772583,
            6.690440932288766e-05,
            0.0001263264421140775,
            5.919871910009533e-05,
            0.0001263264421140775,
            5.919871910009533e-05,
            0.0002617562422528863,
            7.942131924210116e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights have landed in Aberdeen or Abilene?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City-UNION-SELECT-FROM-WHERE",
            "select count(*), airports.City, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9940797090530396,
            7.271413051057607e-05,
            0.0003480755549389869,
            8.31641154945828e-05,
            0.00023768196115270257,
            6.640310311922804e-05,
            0.0001278589916182682,
            5.7120607380056754e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like you to display (or return) the codes of the flights from Aberdeen Airport.",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.AirportCode",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo (or return flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9920105934143066,
            0.3149590492248535,
            0.000261250592302531,
            0.00014128263865131885,
            0.00025624671252444386,
            0.00014358508633449674,
            0.49902862310409546,
            0.0001099909350159578
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the departures from 'Aberdeen'/ what are the flight numbers?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, airports.AirportName",
            "select distinct flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9350844621658325,
            0.00010697312245611101,
            0.0002195272099925205,
            6.0639376897597685e-05,
            0.00015808551688678563,
            5.9924426750512794e-05,
            0.0070262025110423565,
            0.00010330130317015573
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What airports are there in Aberdeen?",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.City, airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName",
            "select airports.AirportName, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.8403288722038269,
            0.00020477559883147478,
            0.00018789003661368042,
            7.151292084017769e-05,
            0.0002386954874964431,
            6.95851122145541e-05,
            0.0011509796604514122,
            8.407265704590827e-05
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which airports are there at 'Aberdeen'?",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.City, airports.AirportCode, airports.AirportName",
            "select airports.AirportName, airports.AirportCode",
            "select airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9206445217132568,
            0.0002228228113381192,
            0.00016223720740526915,
            7.074066525092348e-05,
            0.0017084635328501463,
            9.926521306624636e-05,
            0.00019541385699994862,
            7.229224866023287e-05
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What airports do we have at Aberdeen?",
        "gold_select": "select airports.AirportName",
        "select_candidates": [
            "select airports.AirportName",
            "select airports.City, airports.AirportCode, airports.AirportName",
            "select airports.AirportName, airports.AirportCode",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.955784261226654,
            0.00018143608758691698,
            0.00020008023420814425,
            6.848501652712002e-05,
            0.0024548033252358437,
            7.513757009292021e-05,
            0.004123419988900423,
            8.043387060752138e-05
        ],
        "align_select": "select airports.AirportName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where do JetBlue Airlines belong to?",
        "gold_select": "select airlines.Country",
        "select_candidates": [
            "select airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9835295081138611,
            0.00014773278962820768,
            0.00034186767879873514,
            7.17502916813828e-05,
            0.00031525897793471813,
            7.19909294275567e-05,
            0.00023011189477983862,
            6.614354060729966e-05
        ],
        "align_select": "select airlines.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "From 'Aberdeen' what is the total number of departing flights.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select sum(flights.FlightNo)",
            "select count(*), airports.City, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9955167174339294,
            0.00012440126738511026,
            0.00034495018189772964,
            0.0003609611594583839,
            0.5130100846290588,
            0.0001256591931451112,
            0.00010970382572850212,
            0.0001683414011495188
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For arrivals to 'Aberdeen' what is the number of flights?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City, flights.FlightNo",
            "select count(*), airports.City, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9957281947135925,
            0.00011952310160268098,
            0.0003224033280275762,
            0.0003601933713071048,
            0.0001346790522802621,
            0.0001602466800250113,
            0.00013080035569146276,
            0.000184225122211501
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of all the flights arriving into Aberdeen, how many go on to fly to Ashly?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(distinct flights.FlightNo)",
            "select flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9914885759353638,
            0.0006979376194067299,
            0.000358805526047945,
            0.009807974100112915,
            0.0037200136575847864,
            0.00040979849291034043,
            0.09710690379142761,
            0.10770469158887863
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the number of flights from 'Aberdeen' to 'Ashley'.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City, airports.AirportName",
            "select count(*) dependant on airports.City, airports.AirportName",
            "select count(*), airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.995333731174469,
            0.00015992365661077201,
            0.00013593935000244528,
            7.267198816407472e-05,
            0.00017456778732594103,
            9.762813715497032e-05,
            0.00013593935000244528,
            7.267198816407472e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of United flights that go to \"Aberdeen\"?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), flights.Airline",
            "select count(distinct flights.FlightNo)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9943087697029114,
            0.00022195791825652122,
            0.00029768672538921237,
            0.002010512398555875,
            0.00037103542126715183,
            0.007683726958930492,
            0.004103897139430046,
            0.00013145591947250068
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of UA-flights to Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City, flights.FlightNo",
            "select count(*), flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9958641529083252,
            0.0001673462538747117,
            0.0003140745684504509,
            0.001314454129897058,
            0.00014814143651165068,
            9.514933481113985e-05,
            0.00036351176095195115,
            0.0058242762461304665
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the list of all flight paths arriving in Aberdeen?",
        "gold_select": "select flights.FlightNo",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.FlightNo, airports.AirportName",
            "select flights.FlightNo, airports.City",
            "select flights.FlightNo, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.0038527967408299446,
            0.0002972017973661423,
            0.00014522986020892859,
            7.351972453761846e-05,
            0.0002424146659905091,
            7.349659426836297e-05,
            0.000199607849936001,
            7.487207767553627e-05
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show an airline abbreviations for airlines in the US.",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Country, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9831603169441223,
            6.450898217735812e-05,
            0.000244096401729621,
            5.928572500124574e-05,
            0.00015724319382570684,
            5.961897477391176e-05,
            0.0002028234739555046,
            5.7212797401007265e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different airline companies and abbreviations in the United States?",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select distinct airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select different airlines.Airline, airlines.Abbreviation",
            "select count(distinct airlines.Airline), airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9855416417121887,
            0.0001895172754302621,
            0.9608418941497803,
            0.00027657844475470483,
            0.001082800910808146,
            9.804740693653002e-05,
            0.0004534234176389873,
            8.767271356191486e-05
        ],
        "align_select": "select distinct airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the list of the airlines and their abbreviations used in the United States.",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select distinct airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Airline.c1, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9936943650245667,
            0.00027540221344679594,
            0.003482571803033352,
            7.423633360303938e-05,
            0.000602355576120317,
            0.00015026304754428566,
            0.00019468707614578307,
            9.29797170101665e-05
        ],
        "align_select": "select airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of American airlines.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airlines.Abbreviation",
            "select count(*) dependant on airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9959839582443237,
            0.00023347641399595886,
            0.00020662310998886824,
            0.051850710064172745,
            0.00011735384032363072,
            0.0001693702070042491,
            0.0005241125472821295,
            0.00017698325973469764
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of airline companies from United States of America.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Country",
            "select count(*), airlines.Abbreviation",
            "select count(*), airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9958934783935547,
            0.00013643878628499806,
            0.0002995837712660432,
            0.0010990797309204936,
            0.00022730806085746735,
            0.0013864889042451978,
            0.0002807691053021699,
            0.03784991800785065
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of airlines originating in the United States of America.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Country",
            "select count(*), airlines.Abbreviation",
            "select count(*), airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9943835735321045,
            0.00011114342487417161,
            0.00029363558860495687,
            0.0008850582526065409,
            0.00020717628649435937,
            0.0006690075970254838,
            0.0002512507780920714,
            0.0017620769795030355
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the count of the jet blue airways flights?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Abbreviation",
            "select count(*), airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9952867031097412,
            0.00020074867643415928,
            0.00021524062321987003,
            0.3731263279914856,
            0.0002363549720030278,
            0.0018074371619150043,
            0.00012675444304477423,
            0.00012190717097837478
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the total count of United flights departing from airport AHD.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), flights.SourceAirport",
            "select flights.Airline, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "flights",
            "airlines airports flights",
            "airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9951763153076172,
            0.00019602145766839385,
            0.0001189505128422752,
            0.0001769476366462186,
            0.00024207998649217188,
            0.0019753812812268734,
            0.0010610182071104646,
            0.43893319368362427
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "show the number of United airplanes that get to Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(distinct flights.Airline)",
            "select count(*), airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9896596074104309,
            0.00024907811894081533,
            0.0002575573744252324,
            0.010591425932943821,
            0.0005253884592093527,
            0.0001347172074019909,
            0.0003107606607954949,
            0.0005281163030304015
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many United flights arrive in Aberdeen?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airports.City",
            "select count(*), flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9954743981361389,
            6.925934576429427e-05,
            0.0002857594517990947,
            6.891057273605838e-05,
            0.00027716337353922427,
            6.67657150188461e-05,
            0.00033742791856639087,
            6.703545659547672e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all aircraft (United) that arrive in Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select flights.Airline",
            "select flights.FlightNo",
            "select flights.Airline, flights.FlightNo",
            "select flights.Airline, airports.AirportName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.09529008716344833,
            0.0010995666962116957,
            0.07216572761535645,
            0.005701245274394751,
            0.0003437997947912663,
            0.00011900406389031559,
            0.00024863157887011766,
            9.905066690407693e-05
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the air carriers who have between zero and two hundred flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9869821667671204,
            0.00023924712149892002,
            0.0013911713613197207,
            7.901158824097365e-05,
            0.0005301216151565313,
            6.561276677530259e-05,
            0.0003737008373718709,
            6.802185816923156e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me where there are stores that sell 3000 products or less, and 10000 products or greater.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.Location",
            "select shop.Location, shop.District",
            "select shop.Location for both shop.Name, shop.Location",
            "select shop.Location for both shop.District, shop.Number_products"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9926504492759705,
            0.004205739591270685,
            0.00031158453202806413,
            9.624310041544959e-05,
            0.0001541177771287039,
            7.536994235124439e-05,
            0.00016874847642611712,
            8.718034951016307e-05
        ],
        "align_select": "select shop.Location",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all districts where there is a shop with fewer than 3000 products or one with over 10,000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select distinct shop.District",
            "select distinct shop.District, shop.Number_products",
            "select shop.District, shop.Number_products"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9833744764328003,
            0.9756807088851929,
            0.0014660577289760113,
            0.10426987707614899,
            0.00014826537517365068,
            0.0004974465118721128,
            0.00013923428195994347,
            0.00016486756794620305
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Where do you have shops that sell fewer than 3000 products or those selling more than 10000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.Location",
            "select shop.Location, shop.District",
            "select shop.Location dependant on whether you have shop.Name, shop.Location",
            "select shop.Location dependant on whether you have shop.Name or shop.Location"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9813635349273682,
            0.9453784823417664,
            0.0002283267822349444,
            0.0024026939645409584,
            0.00021165033103898168,
            0.0036600688472390175,
            0.0002626444329507649,
            0.001180143328383565
        ],
        "align_select": "select shop.Location",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the districts that have both shops selling less than 3,000 products and shops selling more than 10,000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District Then-intersect shop.District",
            "select shop.District Then-intersect-shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9924299120903015,
            0.9924299120903015,
            0.00014142321015242487,
            0.00014142321015242487,
            0.00021589321841020137,
            0.00021589321841020137,
            0.0002587780181784183,
            0.0002587780181784183
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the shop that is hiring the most employees?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Shop_ID",
            "select shop.Name, hiring.Start_from",
            "select shop.Name, hiring.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.988226592540741,
            6.763041892554611e-05,
            0.0007197280647233129,
            7.096226181602105e-05,
            0.0021486282348632812,
            6.104557542130351e-05,
            0.00032553760684095323,
            6.353691424010321e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which shop do they hire most people",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Shop_ID",
            "select shop.Name, hiring.Employee_ID",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.9934526681900024,
            6.058163853595033e-05,
            0.0018057979177683592,
            6.82302052155137e-05,
            0.00015062096645124257,
            5.2141618652967736e-05,
            0.0005517342360690236,
            5.597036215476692e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the store that is hiring the most employees?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Start_from",
            "select shop.Name, hiring.Shop_ID",
            "select shop.Name, hiring.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.9866857528686523,
            8.289681863971055e-05,
            0.0026023981627076864,
            7.072285370668396e-05,
            0.0008835159242153168,
            7.490170537494123e-05,
            0.000351188937202096,
            6.71984744258225e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which store is hiring the most people?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Shop_ID",
            "select shop.Name, hiring.Employee_ID",
            "select shop.Name, hiring.Start_from"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.9909233450889587,
            6.3319705077447e-05,
            0.0032035382464528084,
            7.575305789941922e-05,
            0.00018838043615687639,
            5.991922807879746e-05,
            0.0036711625289171934,
            5.7749984989641234e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the employee's name sorted by his/her age from the youngest to the oldest.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name (ordered by employee.Age)",
            "select employee.Name-ordered"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9950641989707947,
            0.00014290907711256295,
            0.0002657289442140609,
            9.34320196392946e-05,
            0.008410153910517693,
            9.122854680754244e-05,
            0.9901621341705322,
            0.00014383172674570233
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show list of employee and rank by how old in ascending order.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name, employee.Age",
            "select employee.Employee_ID, employee.Name, employee.Age",
            "select employee.Employee_ID, employee.Name",
            "select employee.Name, employee.City"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.001772659714333713,
            0.001772659714333713,
            0.00024429522454738617,
            0.00024429522454738617,
            0.0002244972565677017,
            0.0002244972565677017,
            0.00019698227697517723,
            0.00019698227697517723
        ],
        "align_select": "select employee.Name, employee.Age",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Which shops have more products than average? Give me the shop names.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.District",
            "select shop.Name, shop.District, shop.Number_products"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9201298952102661,
            8.15699459053576e-05,
            0.0002542957372497767,
            7.293810631381348e-05,
            0.0002692362177185714,
            8.02699796622619e-05,
            0.00015827646711841226,
            7.07079452695325e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which shops sell more units than average? Give me the shop names.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring"
        ],
        "align_scores": [
            0.9654250144958496,
            0.721861720085144,
            0.0002491854829713702,
            0.0002995306858792901,
            0.00023865523689892143,
            0.0001986295246751979,
            0.00034578979830257595,
            0.0005579726421274245
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What shops sell more products than average? Give me the shop names.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9378433227539062,
            8.693461859365925e-05,
            0.0002713089925237,
            7.781683962093666e-05,
            0.00025796680711209774,
            6.814533844590187e-05,
            0.0003715098719112575,
            8.100385457510129e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of the shops' products, which ones are above the average? Provide the names of those businesses.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Number_products",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring",
            "shop hiring evaluation",
            "shop evaluation"
        ],
        "align_scores": [
            0.036555007100105286,
            0.0002565811446402222,
            0.00020950000907760113,
            9.450964716961607e-05,
            0.00028840728919021785,
            0.00011701258335961029,
            0.00030328580760397017,
            0.00010920366912614554
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which shops have more items than the average? Give their names.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9513498544692993,
            7.009026012383401e-05,
            0.0003940497408621013,
            9.146321099251509e-05,
            0.00023920013336464763,
            7.818950689397752e-05,
            0.00024232338182628155,
            7.063071825541556e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which shops sell more products above the average? Give me the shop names.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9382839798927307,
            7.313011155929416e-05,
            0.00026831525610759854,
            8.052757766563445e-05,
            0.00023634823446627706,
            7.430008554365486e-05,
            0.0003801755083259195,
            7.744773029116914e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which stores have a number products greater than the average product of what stores?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Shop_ID",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.5093961954116821,
            0.000144029370858334,
            0.0007083244272507727,
            9.088573278859258e-05,
            0.00029673182871192694,
            7.337355054914951e-05,
            0.00030220288317650557,
            8.351554424734786e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the names of stores that have more products than the average store?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.7787030339241028,
            0.00028881209436804056,
            0.0002505347947590053,
            8.85886765900068e-05,
            0.0002533485821913928,
            7.876979361753911e-05,
            0.0003039588045794517,
            7.591011672047898e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out which stores sell more products than the average store.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Shop_ID",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.4673919081687927,
            0.00011997688125120476,
            0.00026107626035809517,
            6.718801887473091e-05,
            0.00034234041231684387,
            9.155465522781014e-05,
            0.0002364830143051222,
            7.15857240720652e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "To find the name of the store which sells in quantity of more than the average total number of items.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9228798747062683,
            0.7849688529968262,
            0.0005523649742826819,
            0.00021003362780902535,
            0.0004999635275453329,
            0.00020833748567383736,
            0.00036971925874240696,
            0.00019082189828623086
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the stores whose number of products is larger than the average.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Shop_ID",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.8766254782676697,
            6.426926847780123e-05,
            0.0002123537560692057,
            5.805472392239608e-05,
            0.00032161190756596625,
            7.487464608857408e-05,
            0.00020040634262841195,
            6.466444756370038e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What stores have more products than average?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Shop_ID",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.6343079209327698,
            7.96769600128755e-05,
            0.00037408454227261245,
            8.224141492974013e-05,
            0.00024117896100506186,
            6.819305417593569e-05,
            0.00022000558965373784,
            7.463213842129335e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the names of stores which have more products than the average product count.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9508804082870483,
            6.980130274314433e-05,
            0.0002499187830835581,
            7.405942596960813e-05,
            0.00020587112521752715,
            6.768770253984258e-05,
            0.00021162368648219854,
            6.059503721189685e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the store names whose total products is greater than the average products.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.41052520275115967,
            7.276172254933044e-05,
            0.00022165337577462196,
            5.101786882732995e-05,
            0.000163553879247047,
            6.362070416798815e-05,
            0.0001579074451001361,
            5.4179461585590616e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which are the stores that have more products above average?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Shop_ID",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.424253910779953,
            0.0006099040037952363,
            0.00027162733022123575,
            0.00010203096462646499,
            0.0005962924333289266,
            0.00016409029194619507,
            0.00027558187139220536,
            0.00011659136362140998
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the smallest and largest number of products across all shops?",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select max(shop.Number_products), min(shop.Number_products)",
            "select shop.Number_products, min(shop.Number_products), max(shop.Number_products)",
            "select min(shop.Location), max(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9931262731552124,
            0.0008717954042367637,
            0.9944596290588379,
            0.0016825043130666018,
            0.00020373854204081,
            9.292236063629389e-05,
            0.0007008109823800623,
            0.00013670016778632998
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all cities that have two or more employees under the age of thirty.",
        "gold_select": "select employee.City",
        "select_candidates": [
            "select employee.City",
            "select employee.City, count(*)",
            "select employee.City for employee.Age",
            "select employee.City as the employee.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9763957262039185,
            6.583563663298264e-05,
            0.0037586153484880924,
            6.52771195746027e-05,
            0.00020504719577729702,
            6.123074126662686e-05,
            0.0008666888461448252,
            5.334899469744414e-05
        ],
        "align_select": "select employee.City",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Find all cities where there are two or more employees under the age of thirty.",
        "gold_select": "select employee.City",
        "select_candidates": [
            "select employee.City",
            "select employee.City, count(*)",
            "select employee.City as a possible employee.City",
            "select employee.City as the employee.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9644426107406616,
            6.465445039793849e-05,
            0.0029530897736549377,
            6.201571522979066e-05,
            0.001367530319839716,
            5.9326157497707754e-05,
            0.0007724568713456392,
            5.291977140586823e-05
        ],
        "align_select": "select employee.City",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What's the list of cities, where at least two people are below thirty years old?",
        "gold_select": "select employee.City",
        "select_candidates": [
            "select employee.City",
            "select employee.City, employee.Age",
            "select employee.City, min(employee.Age)",
            "select employee.City, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.7675461769104004,
            0.8398452401161194,
            0.00021865862072445452,
            0.0001773684489307925,
            0.00026759173488244414,
            0.000199790476472117,
            0.007820457220077515,
            0.002958482364192605
        ],
        "align_select": "select employee.City",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the manager name and district of the shop that sells the most products.",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Manager_name, shop.District, shop.Location",
            "select shop.Manager_name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9915453791618347,
            0.9940066337585449,
            0.007267947308719158,
            0.15494924783706665,
            0.00023296341532841325,
            0.0002112674410454929,
            0.9749246835708618,
            0.9880653023719788
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which manager is responsible for the shop that sells the most products? And which district does it belong to?",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Manager_name, shop.Location",
            "select shop.Name, shop.District",
            "select shop.Location, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9906196594238281,
            0.9924650192260742,
            0.9887363314628601,
            0.9910416007041931,
            0.0014384174719452858,
            0.0045261383056640625,
            0.001215641968883574,
            0.0008418899378739297
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Manager who work at this shop that has sold the greatest number of products, and which District do they belong to?.",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Manager_name, shop.Location",
            "select shop.Name, shop.District",
            "select shop.Location, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.8795254826545715,
            0.0001560112286824733,
            0.9067608714103699,
            0.00023249653168022633,
            0.0016285263700410724,
            9.88733590929769e-05,
            0.0010626752628013492,
            9.346044680569321e-05
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the manager's name and district for the shop with the highest sales volume.",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Location, shop.Manager_name",
            "select shop.Manager_name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9933795928955078,
            7.964688120409846e-05,
            0.0026900277007371187,
            8.411250018980354e-05,
            0.8492156863212585,
            9.37200675252825e-05,
            0.9848484396934509,
            9.302255784859881e-05
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who are managers of the shop selling most products? Districts?",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name",
            "select shop.Manager_name, shop.District",
            "select shop.Manager_name (shop.District), shop.Location",
            "select shop.Manager_name dependant on shop.District, shop.Location"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.965543806552887,
            0.002697308547794819,
            0.9928487539291382,
            0.00020674373081419617,
            0.00024449516786262393,
            6.554834544658661e-05,
            0.0010457677999511361,
            7.218987593660131e-05
        ],
        "align_select": "select shop.Manager_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What's the name of the boss and district of this store which sold the most products?",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Manager_name, shop.Location",
            "select shop.Location, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.8062378168106079,
            0.00010783330071717501,
            0.0019360956503078341,
            9.083235636353493e-05,
            0.8646824955940247,
            0.00016059420886449516,
            0.8201571702957153,
            0.00018573526176624
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the manager's name and the district of the store that sells the most items?",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Location, shop.Manager_name",
            "select shop.Manager_name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9931789636611938,
            0.9890933036804199,
            0.0024004641454666853,
            0.0022553640883415937,
            0.9918820261955261,
            0.9786293506622314,
            0.9897925853729248,
            0.9788467288017273
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which employee got the biggest one time bonus?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select evaluation.Employee_ID",
            "select evaluation.Employee_ID, employee.Name",
            "select evaluation.Year_awarded"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "evaluation",
            "hiring evaluation",
            "shop evaluation",
            "employee shop evaluation"
        ],
        "align_scores": [
            0.9820597171783447,
            0.9939775466918945,
            0.6951079964637756,
            0.9912412166595459,
            0.0036400863900780678,
            0.003418323351070285,
            0.0011633880203589797,
            0.0007852438720874488
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the person who received the most one-time bonus.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, evaluation.Employee_ID",
            "select employee.Name, employee.Age",
            "select employee.Name, employee.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "employee shop evaluation",
            "hiring evaluation",
            "shop evaluation",
            "evaluation"
        ],
        "align_scores": [
            0.9897342920303345,
            7.1790607762523e-05,
            0.0023159675765782595,
            7.564571569673717e-05,
            0.0003057145222555846,
            5.9821202739840373e-05,
            0.0003139569307677448,
            6.900315202074125e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the lowest and the highest numbers of products sold in all stores.",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select max(shop.Number_products), min(shop.Number_products)",
            "select min(shop.District), max(shop.Number_products)",
            "select minimum(shop.Number_products), max(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9921585321426392,
            0.003932933323085308,
            0.9936822652816772,
            0.011176218278706074,
            0.00046877539716660976,
            0.00012054706894559786,
            0.00103039073292166,
            0.0002271542325615883
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the smallest and largest number of products of all stores.",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select shop.Number_products, min(shop.Number_products), max(shop.Number_products)",
            "select max(shop.Number_products), min(shop.Number_products)",
            "select min(shop.District), max(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9945436716079712,
            0.0009426604956388474,
            0.00018762882973533124,
            9.208016854245216e-05,
            0.9952563643455505,
            0.0012243541423231363,
            0.00036174312117509544,
            9.901865996653214e-05
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of districts that have both stores with less than 3,000 products and stores with more than 10,000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select count(distinct shop.District)",
            "select count(*)",
            "select count(distinct shop.District),",
            "select count(distinct shop.Location)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.00039028696483001113,
            0.0011154902167618275,
            0.009770465083420277,
            0.23648710548877716,
            0.00017293443670496345,
            0.0002981269499287009,
            0.000355882802978158,
            0.0013426047516986728
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me the districts that have stores with fewer than 3000 products, and those with over 10000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District (shop.Number_products), shop.District",
            "select shop.District (*), shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9708831310272217,
            0.9910187721252441,
            0.00012202579091535881,
            0.00016631830658297986,
            8.548823825549334e-05,
            0.00011695212742779404,
            8.993480878416449e-05,
            0.00012002849689451978
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "show the districts that have stores with less than 10 000 products and more than 100 000.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, shop.Location",
            "select shop.District,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9907644987106323,
            0.7839179635047913,
            0.00014501978876069188,
            0.00022896839072927833,
            0.00022880229516886175,
            0.00028115560417063534,
            0.021449876949191093,
            0.28816184401512146
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which districts have stores that have over 10,000 products and stores with less than 3,000 products?",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, shop.Location",
            "select shop.District, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9932360053062439,
            0.4126374423503876,
            0.0001764600456226617,
            0.00012003479059785604,
            0.0002073960640700534,
            0.00014404297689907253,
            0.0002446110302116722,
            0.00015865557361394167
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which district in the dataset has both stores with less than 3,000 products and stores with more than 10,000 products?",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, shop.Location",
            "select shop.District,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9925521612167358,
            0.9925521612167358,
            0.0001580089592607692,
            0.0001580089592607692,
            0.0002265243965666741,
            0.0002265243965666741,
            0.015274155884981155,
            0.015274155884981155
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the ID of the manager and district of the shop with the highest number of products?",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Location, shop.District",
            "select shop.District, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.003452542470768094,
            8.510983025189489e-05,
            0.0011574213858693838,
            0.00012996736040804535,
            0.001659815083257854,
            0.0001982507383218035,
            0.006837897934019566,
            8.08391923783347e-05
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show managers and districts of shops that sell most products",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Manager_name, shop.Location",
            "select shop.Manager_name, shop.District,",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9940764904022217,
            0.995161235332489,
            0.9915279150009155,
            0.994283139705658,
            0.004859037697315216,
            0.0018660963978618383,
            0.0008752704015932977,
            0.001783866435289383
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who is the manager of the shop that has the most products and which district does this shop belong to?.",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Manager_name, shop.Location",
            "select shop.Location, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9873558878898621,
            0.00010042620124295354,
            0.07079741358757019,
            9.297891665482894e-05,
            0.9860283732414246,
            0.00010679638216970488,
            0.0015132927801460028,
            0.00016158554353751242
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the manager's name and district of the shop that sells the most items?",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Manager_name, shop.Location",
            "select shop.Location, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9940965175628662,
            0.9916559457778931,
            0.009498109109699726,
            0.0025261850096285343,
            0.9887182712554932,
            0.977551281452179,
            0.990666925907135,
            0.9703518152236938
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the manager name and district of the shop with the most products.",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Manager_name, shop.District, shop.Location",
            "select shop.Manager_name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.992889404296875,
            8.49714779178612e-05,
            0.002975384471938014,
            7.978385838214308e-05,
            0.00020667001081164926,
            7.023464422672987e-05,
            0.9789389371871948,
            9.292448521591723e-05
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many stores are found at each area?",
        "gold_select": "select count(*), shop.Location",
        "select_candidates": [
            "select shop.Location, count(*)",
            "select shop.District, count(*)",
            "select shop.Location.c3, count(*)",
            "select shop_shop.Location, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9930967688560486,
            0.00020422223315108567,
            0.9906216859817505,
            0.0001509866415290162,
            0.0005808558198623359,
            0.0002051332121482119,
            0.004335696808993816,
            0.00014330427802633494
        ],
        "align_select": "select shop.Location, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Who had the highest number of awards during an evaluation?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.City",
            "select employee.Name, evaluation.Employee_ID",
            "select employee.Name, evaluation.Bonus"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "employee shop evaluation"
        ],
        "align_scores": [
            0.9912996888160706,
            5.660498209181242e-05,
            0.0005348746199160814,
            5.966828393866308e-05,
            0.005268508568406105,
            7.957930938573554e-05,
            0.00153246964327991,
            6.234730244614184e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For each shop, how many people work there and what is the shop called?",
        "gold_select": "select count(*), shop.Name",
        "select_candidates": [
            "select shop.Name, count(*)",
            "select count(*), shop.Name",
            "select shop.Name, count(*), shop.Location",
            "select shop shop.Name, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring",
            "employee shop hiring"
        ],
        "align_scores": [
            0.9908548593521118,
            0.00016069422417785972,
            0.9916150569915771,
            0.00017507353913970292,
            0.00019834072736557573,
            9.840182610787451e-05,
            0.0006561814225278795,
            0.00014211874804459512
        ],
        "align_select": "select shop.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the ID of document with one or two paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.0005522757419385016,
            0.9959619641304016,
            0.00043808293412439525,
            0.995904266834259,
            8.924595749704167e-05,
            0.0002996186667587608,
            8.491882908856496e-05,
            0.00047785593778826296
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the document id with one paragraph or two.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID (or Paragraphs.Paragraph_Text)",
            "select Paragraphs.Document_ID - Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.002041925210505724,
            0.9957959651947021,
            0.00011414479376981035,
            0.0005137830739840865,
            0.00027550070080906153,
            0.007688775192946196,
            0.00013180925452616066,
            0.000713803805410862
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the document with one to two paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_Name ou Documents.Document_Description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.994918167591095,
            0.00022870632528793067,
            0.0004556452331598848,
            6.296402716543525e-05,
            0.00039030349580571055,
            6.996458250796422e-05,
            0.0034770772326737642,
            8.385423279833049e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Identify the documents where there are two or fewer paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description, Documents.Other_Details"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9906308054924011,
            0.00016040212358348072,
            0.0007769857184030116,
            6.0236801800783724e-05,
            0.0006081915344111621,
            7.25714344298467e-05,
            0.002505226293578744,
            6.692559691146016e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which template type has the most count of templates?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Template_Details",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Ref_Template_Types.Template_Type_Description, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9929457306861877,
            0.00011419270595069975,
            0.0002847619471140206,
            7.050453859847039e-05,
            0.0002754348097369075,
            5.6194563512690365e-05,
            0.002040814608335495,
            7.783643377479166e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Of all the template types, which one had a higher number of documents?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Version_Number",
            "select Templates.Template_Type_Code, Documents.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9628647565841675,
            0.00011243473272770643,
            0.0002117865951731801,
            5.9735863032983616e-05,
            0.000658983422908932,
            5.8021843869937584e-05,
            0.00033051930950023234,
            6.417256372515112e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the id and type code of the template that is used for the most documents.",
        "gold_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Documents.Template_ID, Templates.Template_Type_Code",
            "select Documents.Document_ID, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Template_Details"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9941307902336121,
            7.620298129040748e-05,
            0.8797568082809448,
            7.523665408371016e-05,
            0.000358683115337044,
            7.226881280075759e-05,
            0.0002847135765478015,
            6.653551099589095e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the template type code and id of the template used for the most documents?",
        "gold_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code, Templates.Template_ID",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Documents.Document_Name, Documents.Template_ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9943668246269226,
            8.174101094482467e-05,
            0.9940013289451599,
            8.362671360373497e-05,
            0.9943019151687622,
            8.710389374755323e-05,
            0.0006484347395598888,
            0.00010362589819123968
        ],
        "align_select": "select Templates.Template_Type_Code, Templates.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the id and type code of the template for the largest document counts.",
        "gold_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Documents.Template_ID, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Template_Details",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Date_Effective_From"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9857472777366638,
            9.92272689472884e-05,
            0.9620938897132874,
            9.66708903433755e-05,
            0.00020203253370709717,
            6.844009476481006e-05,
            0.0001327541540376842,
            5.693201092071831e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find out the id of the document with the minimum amount of paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_ID",
            "select Documents.Document_ID, Paragraphs.Document_ID",
            "select Documents.Document_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9952383041381836,
            8.098918624455109e-05,
            0.0002552129444666207,
            6.366785964928567e-05,
            0.00022097582404967397,
            5.526570384972729e-05,
            0.0008593270322307944,
            5.7050707255257294e-05
        ],
        "align_select": "select Documents.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the document id with the fewest paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID (Paragraphs.Paragraph_ID)",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Ref_Template_Types Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9959271550178528,
            6.37418488622643e-05,
            0.00046033752732910216,
            5.365983088267967e-05,
            0.0013043401995673776,
            5.582601806963794e-05,
            0.0004503625677898526,
            6.066615242161788e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List ids of documents that have two or multiples paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9847984910011292,
            0.0004369589441921562,
            0.9785671234130859,
            0.00043570820707827806,
            0.0002592568635009229,
            9.74989088717848e-05,
            0.0005827916320413351,
            8.594253449700773e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the document ids whose paragraph numbers is greater or equal to two.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID - Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.8890256881713867,
            0.0001590859319549054,
            0.00012785849685315043,
            6.569045217474923e-05,
            0.00015235650062095374,
            5.792907177237794e-05,
            0.00042672845302149653,
            6.847587792435661e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all documents that have at least 2 paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_Name, Documents.Document_Description, Documents.Other_Details",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9900668859481812,
            0.00010807387297973037,
            0.001489240792579949,
            5.590901491814293e-05,
            0.0014477500226348639,
            5.401634189183824e-05,
            0.0008774946327321231,
            5.976321699563414e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Out of which template types, which ones have the largest total number of documents?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Ref_Template_Types.Template_Type_Description, Templates.Template_Type_Code",
            "select Templates.Version_Number, Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9861975312232971,
            7.841896876925603e-05,
            0.00047362607438117266,
            6.60211662761867e-05,
            0.0077273184433579445,
            7.117228233255446e-05,
            0.000251521822065115,
            5.8471418014960364e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the document id and name with most paragraphs?",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name",
        "select_candidates": [
            "select Paragraphs.Document_ID, Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Documents.Document_Name, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.0045362478122115135,
            7.034779264358804e-05,
            0.9943557977676392,
            7.835581345716491e-05,
            0.002025175141170621,
            7.873075810493901e-05,
            0.00016269218758679926,
            5.765396053902805e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many paragraphs in the document 'Summer Show'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Document_Name",
            "select count(*), Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9954946041107178,
            7.30119354557246e-05,
            0.00016268226318061352,
            5.988410339341499e-05,
            0.00023474068439099938,
            6.0038768424419686e-05,
            0.0001774134289007634,
            6.33809031569399e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of paragraphs in Summer Show?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_Name",
            "select count(*), Documents.Document_ID",
            "select count(distinct Paragraphs.Paragraph_Text)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.9951909780502319,
            8.807619451545179e-05,
            0.0002134874084731564,
            6.66777923470363e-05,
            0.0001727174239931628,
            6.970698450459167e-05,
            0.0005910032195970416,
            6.368996400851756e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many paragraphs are in the document named'summer show'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(distinct Paragraphs.Paragraph_Text)",
            "select count(*), Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9739283919334412,
            6.554471474373713e-05,
            0.0001753498800098896,
            6.039059371687472e-05,
            0.0006964824860915542,
            6.429636414395645e-05,
            0.00020983886497560889,
            6.52072558295913e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many paragraphs have been given in the 'Summer Show'?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Document_Name",
            "select count(*), Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9910534024238586,
            0.0001335478009423241,
            0.00021197648311499506,
            9.34632116695866e-05,
            0.0002539139532018453,
            0.00010041826317319646,
            0.00022803721367381513,
            0.0001109250879380852
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many paragraphs does the document titled Summer Show have?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Document_ID",
            "select count(*), Documents.Document_Name",
            "select count(*), Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9939334988594055,
            8.385247201658785e-05,
            0.00017894469783641398,
            6.821959686931223e-05,
            0.00021550020028371364,
            7.460323831764981e-05,
            0.0002192492102039978,
            7.561831444036216e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all template types ids and their corresponding numbers of templates.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code.c2, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, count(**)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9957269430160522,
            0.00022240130056161433,
            0.0003436939441598952,
            0.00013127092097420245,
            0.00029156540404073894,
            0.00014396193728316575,
            0.9944045543670654,
            0.00021078212012071162
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "I need you to show me all template style code and their count for each template design.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, count(**)",
            "select Documents.Document_Name, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.021215377375483513,
            0.000351569993654266,
            0.0015151436673477292,
            0.00016403304471168667,
            0.026024745777249336,
            0.0003844417806249112,
            0.15908236801624298,
            0.0020086790900677443
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Enter all template type ids and the number of templates used for each.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select Templates.Template_Type_Code.c2, count(*)",
            "select Templates.Template_Type_Code, count(**)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9935958981513977,
            0.00030227695242501795,
            0.00035420749918557703,
            0.00015136590809561312,
            0.0003409064083825797,
            0.00013762732851319015,
            0.9919092059135437,
            0.00029252711101435125
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me a list of the codes for which template types described with \"Presentation.\"",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, t0.c2",
            "select t0.c, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9888142943382263,
            9.647226397646591e-05,
            0.00012844199954997748,
            6.337993545457721e-05,
            0.000320396909955889,
            8.080419502221048e-05,
            0.0002364925021538511,
            7.732390076853335e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want to see the IDs, versions, and type ids for each template.",
        "gold_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number.c1, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9937500357627869,
            8.529442129656672e-05,
            0.9937500357627869,
            8.529442129656672e-05,
            0.0026433670427650213,
            8.070308831520379e-05,
            0.9948638081550598,
            8.810601138975471e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "I would like to know the amount of templates tagged with 'CV' below.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9926968216896057,
            0.00014414353063330054,
            0.00018972900579683483,
            0.0009936046553775668,
            0.0001619304093765095,
            0.0002084833540720865,
            0.00017001776723191142,
            0.0005682998453266919
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the model type of the template associated with data base file?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_ID",
            "select Documents.Document_Name",
            "select Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.6898077130317688,
            0.00011542255379026756,
            0.0006653369637206197,
            0.0002004671114264056,
            0.0005419068038463593,
            0.00013132022286299616,
            0.0004515524778980762,
            8.220988820539787e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all template types and the number of files that use each type.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(Documents.Template_ID)",
            "select Templates.Template_Type_Code, count(*), Documents.Template_ID",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9945894479751587,
            0.00021815636137034744,
            0.003915087785571814,
            0.0001895635505206883,
            0.00018865476886276156,
            9.929106454364955e-05,
            0.0002546978648751974,
            0.00011460745736258104
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For every template type that you have, state their type numbers and definitions here.",
        "gold_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code",
            "select Documents.Document_Name, Ref_Template_Types.Template_Type_Description",
            "select Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Description"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types Templates",
            "Ref_Template_Types"
        ],
        "align_scores": [
            0.0005236821016296744,
            0.00032446737168356776,
            0.004210941027849913,
            0.005423850379884243,
            0.00027112389216199517,
            0.00019892481213901192,
            0.0005247018416412175,
            0.0005584429600276053
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "For each presentation template that has a name of 'Presentation', return the code assigned to it.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_ID",
            "select Templates.Version_Number",
            "select Templates.Date_Effective_From"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.20689833164215088,
            0.00012687088747043163,
            0.9842798709869385,
            0.0003051731619052589,
            0.018099598586559296,
            0.00012624094961211085,
            0.0004077170742675662,
            6.665910041192546e-05
        ],
        "align_select": "select Templates.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return to me the code for the Presentation Template.",
        "gold_select": "select Templates.Template_ID",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Details",
            "select Documents.Document_Name",
            "select Templates.Template_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types Templates",
        "table_candidates": [
            "Ref_Template_Types Templates"
        ],
        "align_scores": [
            0.9187846779823303,
            0.00011479843669803813,
            0.5686527490615845,
            8.109243208309636e-05,
            0.09399351477622986,
            8.223474287660792e-05,
            0.0038820249028503895,
            8.889932360034436e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show the additional information for the paragraph with'Korea '.",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9911096096038818,
            0.00011560296843526885,
            0.00028773059602826834,
            0.00010541168012423441,
            0.00019844420603476465,
            8.842838724376634e-05,
            0.0002064630389213562,
            0.00010703381849452853
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the paragraph that has the word Korea in it?",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID",
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.09416940063238144,
            0.00017393477901350707,
            0.0035981673281639814,
            0.00013780868903268129,
            0.9949369430541992,
            0.00010426570224808529,
            0.00015832085045985878,
            6.771262997062877e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to get more information on the paragraph that contains the word 'Korea'.",
        "gold_select": "select Paragraphs.Other_Details",
        "select_candidates": [
            "select Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs"
        ],
        "align_scores": [
            0.9943189024925232,
            9.910178778227419e-05,
            0.00043911190005019307,
            9.317719377577305e-05,
            0.00037576319300569594,
            8.484096179017797e-05,
            0.00046689482405781746,
            8.526173769496381e-05
        ],
        "align_select": "select Paragraphs.Other_Details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show letter w documents names and ids",
        "gold_select": "select Documents.Document_Name, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Document_ID",
            "select Documents.Document_Name, Documents.Document_ID, Documents.Template_ID",
            "select Documents.Document_Name, Documents.Document_ID, Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.946700930595398,
            8.665370114613324e-05,
            0.00011321105557726696,
            6.47376145934686e-05,
            0.00011321105557726696,
            6.47376145934686e-05,
            0.00037287292070686817,
            0.00010881728667300195
        ],
        "align_select": "select Documents.Document_Name, Documents.Document_ID",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find documents containing the letter w in its name and what are their template",
        "gold_select": "select Documents.Document_Name, Documents.Template_ID",
        "select_candidates": [
            "select Documents.Document_Name, Documents.Template_ID",
            "select Documents.Document_ID, Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Document_Name, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9309886693954468,
            9.844115993473679e-05,
            0.4580130875110626,
            0.000107068735815119,
            0.0029918120708316565,
            7.98583059804514e-05,
            0.9923253059387207,
            8.758430340094492e-05
        ],
        "align_select": "select Documents.Document_Name, Documents.Template_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the template type descriptors under \"AD\"?",
        "gold_select": "select Ref_Template_Types.Template_Type_Description",
        "select_candidates": [
            "select Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, t0.c2",
            "select Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description",
            "select Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Template_Types",
        "table_candidates": [
            "Ref_Template_Types",
            "Ref_Template_Types Templates",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9961870312690735,
            8.20877612568438e-05,
            0.0003138617321383208,
            7.24649362382479e-05,
            0.00015550862008240074,
            6.789250619476661e-05,
            0.00012863283336628228,
            6.72703463351354e-05
        ],
        "align_select": "select Ref_Template_Types.Template_Type_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find documents that have 'Brazil', and also are 'Ireland'.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Paragraphs.Document_ID",
            "select Paragraphs.Paragraph_Text",
            "select Documents.Document_Name, Documents.Document_Description"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.994834303855896,
            0.994834303855896,
            0.9846839308738708,
            0.9846839308738708,
            0.993965208530426,
            0.993965208530426,
            0.0003776786325033754,
            0.0003776786325033754
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of documents that use the PowerPoint template.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Template_ID",
            "select count(*), Templates.Template_Details",
            "select count(*), Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Documents",
            "Ref_Template_Types Templates Documents",
            "Paragraphs Documents"
        ],
        "align_scores": [
            0.9932706952095032,
            7.46475052437745e-05,
            0.0002947238099295646,
            7.573882612632588e-05,
            0.00030723915551789105,
            6.689700967399403e-05,
            0.00022683045244775712,
            6.711074092891067e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the versions and template types of templates with version numbers higher than five.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Version_Number",
            "select Templates.Template_Details, Templates.Template_Type_Code",
            "select version(Templates.Version_Number), Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9947124719619751,
            0.00016408653755206615,
            0.9952048063278198,
            0.00018005493620876223,
            0.0005245968932285905,
            8.524458098690957e-05,
            0.00024677577312104404,
            6.98336007189937e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the versions and template types of templates with a version number greater than five.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Version_Number",
            "select Templates.Template_Details, Templates.Template_Type_Code",
            "select version(Templates.Version_Number), Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9950591325759888,
            0.00016971325385384262,
            0.9955678582191467,
            0.00019868844537995756,
            0.0007918541086837649,
            9.01810999494046e-05,
            0.00023868911375757307,
            7.126798300305381e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the teachers in order from youngest to oldest?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name (ordered by teacher.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9944775700569153,
            0.0002222071634605527,
            0.00015392919885925949,
            0.00012833108485210687,
            0.00020243592734914273,
            0.0001498810015618801,
            0.002067727968096733,
            0.0001445247617084533
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the names of the teachers starting with the youngest.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name (orthodox teacher.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9875497221946716,
            0.9875497221946716,
            0.00016189677990041673,
            0.00016189677990041673,
            0.00018526072381064296,
            0.00018526072381064296,
            0.0010060957865789533,
            0.0010060957865789533
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Who are the professors who teach two or more courses?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, course.Staring_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9841300249099731,
            0.00010427575034555048,
            0.0004173183406237513,
            6.626424874411896e-05,
            0.00021021913562435657,
            6.05250388616696e-05,
            0.0021926420740783215,
            6.774066423531622e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which teachers teaches at least 2 courses?.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Course_ID",
            "select teacher.Name, course.Staring_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher",
            "course teacher course_arrange"
        ],
        "align_scores": [
            0.9904736876487732,
            8.295477891806513e-05,
            0.000225826574023813,
            6.764383579138666e-05,
            0.00024466399918310344,
            6.574684812221676e-05,
            0.0008492290508002043,
            7.238523539854214e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show which teachers teaches at least 2 courses.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Course_ID",
            "select teacher.Name, course.Staring_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9892026782035828,
            8.061563858063892e-05,
            0.0002218762383563444,
            7.07828949089162e-05,
            0.00026162900030612946,
            6.79403092362918e-05,
            0.0008978145197033882,
            7.116326014511287e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which teachers teach at least two courses.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Course_ID",
            "select teacher.Name, course.Staring_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9900000691413879,
            8.10545461717993e-05,
            0.00023300139582715929,
            6.076011777622625e-05,
            0.0002671708643902093,
            6.311816832749173e-05,
            0.0005984354647807777,
            6.454356480389833e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me a list of teachers in increasing order of age.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name, teacher.Age",
            "select teacher.Name",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Teacher_ID, teacher.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.00029668203205801547,
            0.0001256752439076081,
            0.9952077269554138,
            0.0002122274599969387,
            0.00017047359142452478,
            0.00013049461995251477,
            0.00044229664490558207,
            9.767748997546732e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Rank the teachers from youngest to oldest.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Age",
            "select teacher.Name, teacher.Age",
            "select teacher.Age, teacher.Name",
            "select teacher.Teacher_ID, teacher.Age"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.00469739967957139,
            0.00017063034465536475,
            0.0001945812691701576,
            0.00017818326887208968,
            0.00021043112792540342,
            0.00019198661902919412,
            0.00016970773867797107,
            0.00014575176464859396
        ],
        "align_select": "select teacher.Age",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Find the list of teacher names in the order of youngest to oldest.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name (ordered by teacher.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9952852129936218,
            0.0003298264928162098,
            0.00015691800217609853,
            0.00016249530017375946,
            0.00019079315825365484,
            0.00014710990944877267,
            0.004083910956978798,
            0.0002142884477507323
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "I would like to know who are the teachers whose birthplace was not Little Lever Urban District.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Teacher_ID, teacher.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9645772576332092,
            0.0001889244158519432,
            0.00032797554740682244,
            8.616573177278042e-05,
            0.0002063779829768464,
            6.817199027864262e-05,
            0.00035337338340468705,
            8.366931433556601e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the teachers who were born in other districts except Little Lever Urban District?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Name - teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9832487106323242,
            0.0005231479881331325,
            0.0003939257876481861,
            0.00012476170377340168,
            0.0001757104037096724,
            8.999296551337466e-05,
            0.00022632235777564347,
            8.335460006492212e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which are the teachers whose place of birth is not Little Lever Urban District?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.8798205852508545,
            0.005515281111001968,
            0.00021589321841020137,
            0.00012069094373146072,
            0.00020859509822912514,
            9.04384141904302e-05,
            0.014202876947820187,
            0.0035798654425889254
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which teachers teaches the two courses",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course_arrange.Teacher_ID",
            "select teacher.Name, teacher.Teacher_ID",
            "select teacher.Name, course.Course"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-UNION-SELECT-FROM",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.0008209030493162572,
            0.9958223104476929,
            0.00010513220331631601,
            0.000203756193513982,
            8.393151074415073e-05,
            0.00020229276560712606,
            7.730487413937226e-05,
            0.00016488393885083497
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which Teachers teach at least 2 courses?.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Course_ID",
            "select teacher.Name, course.Staring_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9911965131759644,
            8.155867544701323e-05,
            0.00020187310292385519,
            6.441480945795774e-05,
            0.00022028980311006308,
            6.246138946153224e-05,
            0.0008654093253426254,
            7.006192754488438e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which faculty members are assigned teaching responsibilities in more than one course?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9798803925514221,
            0.00016384357877541333,
            0.00023792684078216553,
            6.652434967691079e-05,
            0.0006301365792751312,
            8.397425699513406e-05,
            0.0016436699079349637,
            0.00010058288899017498
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which teachers teach two classes?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Teacher_ID",
            "select teacher.Name, course.Course"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9943642616271973,
            0.0002634263946674764,
            0.00017280866450164467,
            6.918864528415725e-05,
            0.0005604401812888682,
            0.00010339759319322184,
            0.00021262992231640965,
            9.173362923320383e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "I would like to know which teachers teach more than one course.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select course_arrange.Teacher_ID",
            "select teacher.Name, course.Course",
            "select course_arrange.Teacher_ID, teacher.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.993060827255249,
            9.425871394341812e-05,
            0.9844770431518555,
            0.00013310500071384013,
            0.0005612751701846719,
            8.906496077543125e-05,
            0.0012085916241630912,
            9.442785813007504e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which teachers teach two or more courses?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Course_ID",
            "select teacher.Name, course.Staring_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9931908249855042,
            8.768241241341457e-05,
            0.0002231098187621683,
            6.348409806378186e-05,
            0.0002285929658683017,
            6.703238614136353e-05,
            0.0008914949139580131,
            6.999220931902528e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me a list of the teachers that are teaching more than one course.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, course.Course_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9858824014663696,
            9.863782179309055e-05,
            0.0010148478904739022,
            8.64822359289974e-05,
            0.00016051398415584117,
            5.552433867705986e-05,
            0.0007962316740304232,
            9.78785174083896e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please enter teachers who were born outside Little Lever Urban District below.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Teacher_ID",
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.007197514176368713,
            0.00016298658738378435,
            0.8106622099876404,
            0.00019474831060506403,
            0.00019292304932605475,
            8.493672794429585e-05,
            0.0002201317111030221,
            8.413728937739506e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please enter teachers who were not born in Little Lever Urban District below.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Teacher_ID",
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.007941441610455513,
            0.00041681461152620614,
            0.8504470586776733,
            0.00040658359648659825,
            0.0002024751011049375,
            0.00010378917068010196,
            0.00020009167201351374,
            9.26287320908159e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "show the names of teachers whose hometown is a place other than Little Lever.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Hometown, teacher.Teacher_ID",
            "select teacher.Name, teacher.Hometown, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9892153143882751,
            0.00010266349272569641,
            0.0002712321584112942,
            6.393033254425973e-05,
            0.00014881434617564082,
            6.446366023737937e-05,
            0.00014156420365907252,
            5.6542889069532976e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Enter teachers who are not born in Little Lever Urban District below.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Teacher_ID",
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.0030558721628040075,
            0.006013443227857351,
            0.6429471373558044,
            0.01120800245553255,
            0.00017602027219254524,
            0.00015348466695286334,
            0.00019454455468803644,
            0.00012050684017594904
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the teachers who live in towns other than Little Lever Urban District.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Teacher_ID",
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Teacher_ID, teacher.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.015118532814085484,
            0.00023231309023685753,
            0.9075992107391357,
            0.0004378116282168776,
            0.0002470980689395219,
            9.929352381732315e-05,
            0.0002883050183299929,
            8.876903302734718e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For each city, how many teachers are from there?",
        "gold_select": "select teacher.Hometown, count(*)",
        "select_candidates": [
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, count(*), teacher.Teacher_ID",
            "select teacher.Hometown.c3, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9951549768447876,
            0.00032211514189839363,
            0.9951549768447876,
            0.00032211514189839363,
            0.00020141011918894947,
            0.00011447530414443463,
            0.0005176172708161175,
            0.000330007984302938
        ],
        "align_select": "select teacher.Hometown, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For every town, how many teachers are from there?",
        "gold_select": "select teacher.Hometown, count(*)",
        "select_candidates": [
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, count(*), teacher.Teacher_ID",
            "select count(*), teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9955713152885437,
            0.0003007097984664142,
            0.9955713152885437,
            0.0003007097984664142,
            0.00023875148326624185,
            0.00010305827163392678,
            0.9950690269470215,
            0.00026405625976622105
        ],
        "align_select": "select teacher.Hometown, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "I want to know which are the most common cities that some teachers come from.",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, t1.c4",
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.8352633118629456,
            8.627195347798988e-05,
            0.0007075532921589911,
            6.220204522833228e-05,
            0.0037700976245105267,
            5.7830715377349406e-05,
            0.00022455441649071872,
            5.530988710233942e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "show, list of teachers and number of courses taught.",
        "gold_select": "select teacher.Name, count(*)",
        "select_candidates": [
            "select teacher.Name, count(*)",
            "select teacher.Name, sum(course.Course)",
            "select teacher.Name, count(distinct course.Course)",
            "select teacher.Name, count(*), course.Course"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9662551879882812,
            0.0001870324049377814,
            0.013087958097457886,
            0.00017291218682657927,
            0.0022142701782286167,
            0.0001652708015171811,
            0.001645783893764019,
            0.00010662785643944517
        ],
        "align_select": "select teacher.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Who are the teachers and how many courses they teach?",
        "gold_select": "select teacher.Name, count(*)",
        "select_candidates": [
            "select teacher.Name, count(*)",
            "select teacher.Name, count(distinct course.Course)",
            "select teacher.Name, count(*), course.Course",
            "select teacher.Name, count(*), course.Course_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9916917085647583,
            0.00016192485054489225,
            0.005559192970395088,
            0.00010104308603331447,
            0.0009213511948473752,
            0.00010697291872929782,
            0.0003824039886239916,
            0.00010841326002264395
        ],
        "align_select": "select teacher.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "About how old and what city did teachers originate from?",
        "gold_select": "select teacher.Age, teacher.Hometown",
        "select_candidates": [
            "select teacher.Age, teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Teacher_ID, teacher.Age, teacher.Hometown",
            "select teacher.Name, teacher.Age, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9822073578834534,
            0.9903745651245117,
            0.9743958711624146,
            0.9931634664535522,
            0.00018339804955758154,
            0.00014275926514528692,
            0.00023524010612163693,
            0.00016107883129734546
        ],
        "align_select": "select teacher.Age, teacher.Hometown",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How old are teachers and where are they from?",
        "gold_select": "select teacher.Age, teacher.Hometown",
        "select_candidates": [
            "select teacher.Age, teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Teacher_ID, teacher.Age, teacher.Hometown",
            "select teacher.Name, teacher.Age, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9949147701263428,
            0.0046019600704312325,
            0.9948646426200867,
            0.018990425392985344,
            0.00017527415184304118,
            0.000169508668477647,
            0.00018315513443667442,
            0.0001426899980287999
        ],
        "align_select": "select teacher.Age, teacher.Hometown",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which teachers were 32 or 33 years old?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name ou teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9835644960403442,
            0.0004154771158937365,
            0.00017355853924527764,
            6.227195990504697e-05,
            0.00020512030459940434,
            9.641303040552884e-05,
            0.000359705911250785,
            7.858538447180763e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List of all teachers who are either 32 or 33 years old.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name ou teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9641119837760925,
            0.001795448362827301,
            0.00021614631987176836,
            8.361524669453502e-05,
            0.00019507987599354237,
            0.00011801493383245543,
            0.0004931259900331497,
            0.00015370699111372232
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which teachers are 32 or 33 years old?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name ou teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9881921410560608,
            0.0004149020533077419,
            0.0001809865061659366,
            6.493416731245816e-05,
            0.00020663929171860218,
            9.891295485431328e-05,
            0.0006710958550684154,
            9.870425856206566e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the teachers who are 33 years old?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9910003542900085,
            0.0001656984240980819,
            0.00014960912812966853,
            5.564031744142994e-05,
            0.00015416274254675955,
            6.481217133114114e-05,
            0.0001495988544775173,
            5.4386113333748654e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who teaches math?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select distinct teacher.Name",
            "select teacher.Name, course.Course",
            "select distinct teacher.Name, course.Course"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher",
            "course teacher course_arrange",
            "course teacher course_arrange"
        ],
        "align_scores": [
            0.995680570602417,
            0.00010895008745137602,
            0.22913257777690887,
            0.0001479089551139623,
            0.00014160039427224547,
            6.070001109037548e-05,
            0.00029297955916263163,
            6.647804548265412e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who is the teacher of math?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher",
            "course teacher course_arrange"
        ],
        "align_scores": [
            0.9949585795402527,
            8.340650674654171e-05,
            0.00014827131235506386,
            5.6635381042724475e-05,
            0.00014805713726673275,
            5.574291935772635e-05,
            0.00021165538055356592,
            6.573545397259295e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which teacher teaches math?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select distinct teacher.Name",
            "select teacher.Name, teacher.Teacher_ID",
            "select teacher.Name, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9938556551933289,
            8.336580503964797e-05,
            0.18072764575481415,
            0.00012727087596431375,
            0.00016504150698892772,
            6.520595343317837e-05,
            0.00014021515380591154,
            5.823814353789203e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name of people teaching mathematics?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select distinct teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9942933917045593,
            0.092109814286232,
            0.06554429233074188,
            0.0003904227924067527,
            0.00011734355939552188,
            0.00014153883967082947,
            0.00015112000983208418,
            0.0002270782133564353
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of those teaching mathematics, what are their names?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select distinct teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "teacher course_arrange",
            "teacher"
        ],
        "align_scores": [
            0.9930036664009094,
            0.0001107154312194325,
            0.05457857996225357,
            0.00013419460447039455,
            0.00013586546992883086,
            5.688436795026064e-05,
            0.0001938904752023518,
            6.761790427844971e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name some teachers of mathematics.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select distinct teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9935382008552551,
            0.0001043871816364117,
            0.0892142727971077,
            9.527662768959999e-05,
            0.00013938797928858548,
            5.8067511417903006e-05,
            0.00022477484890259802,
            6.345547444652766e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The names of persons who teach mathematics.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select distinct teacher.Name",
            "select unique teacher.Name",
            "select specific teacher.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9930782914161682,
            0.00021956616546958685,
            0.09987787902355194,
            0.015343066304922104,
            0.0034049111418426037,
            0.00020541661069728434,
            0.0029575766529887915,
            0.0002877835067920387
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the id, name and membership level of visitors who has spent the most in all museum tickets.",
        "gold_select": "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
            "select visitor.ID, visitor.Name, visitor.Level_of_membership",
            "select visit.visitor_ID, visitor.ID, visitor.Name, visitor.Level_of_membership",
            "select visit.visitor_ID, visitor.ID, visitor.Name, visitor.Level_of_membership"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.8860984444618225,
            0.6609405875205994,
            0.925493061542511,
            0.8402948379516602,
            0.0006054472760297358,
            0.00055261718807742,
            0.0006054472760297358,
            0.00055261718807742
        ],
        "align_select": "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the customer ids, total spent, membership levels of those who have spent the most on museum tickets in total?",
        "gold_select": "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visit.visitor_ID, sum(visit.Total_spent), visitor.Level_of_membership",
            "select visit.visitor_ID, visit.Total_spent, visitor.Level_of_membership",
            "select visitor.ID, sum(visit.Total_spent), visitor.Level_of_membership",
            "select visit.visitor_ID, sum(visit.Total_spent), visit.Num_of_Ticket"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.030297232791781425,
            0.00010499354539206252,
            0.02096806839108467,
            0.0001154681303887628,
            0.624828577041626,
            0.00012004451855318621,
            0.00023408605193253607,
            7.638304668944329e-05
        ],
        "align_select": "select visitor.ID, sum(visit.Total_spent), visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the id, name and membership level of visitors who have spent the most in all museum tickets?",
        "gold_select": "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
            "select visitor.ID, visitor.Name, visitor.Level_of_membership",
            "select visit.Museum_ID, visitor.Name, visitor.Level_of_membership",
            "select visit.visitor_ID, visitor.ID, visitor.Name, visitor.Level_of_membership"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9027487635612488,
            0.6408770084381104,
            0.9515076875686646,
            0.8799360394477844,
            0.0006507296930067241,
            0.0007529649883508682,
            0.0008096364326775074,
            0.000674495124258101
        ],
        "align_select": "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the visitors below 30.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select visitor.ID",
            "select visitor.ID, visitor.Age",
            "select min(visitor.Age)",
            "select visitor.ID, visitor.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.032366491854190826,
            0.0009268125868402421,
            0.0001915932516567409,
            9.62100675678812e-05,
            0.0018093030666932464,
            0.00011507638555485755,
            0.0005823119427077472,
            0.00011346005339873955
        ],
        "align_select": "select visitor.ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many guests are under 30 years old?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), visitor.ID",
            "select count(*), visitor.Age",
            "select count(*) (visitor.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9951261281967163,
            0.0003867188934236765,
            0.0002834447077475488,
            0.0002376588381594047,
            0.0003278135845903307,
            0.0505620539188385,
            0.00044971867464482784,
            0.00019608056754805148
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find visitors under 30",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select visitor.ID",
            "select visitor.ID, visitor.Age",
            "select visitor.Name",
            "select visitor.Age"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor",
            "visitor visit"
        ],
        "align_scores": [
            0.007744506932795048,
            0.0010867801029235125,
            0.0002513894869480282,
            0.0001161242471425794,
            0.023985829204320908,
            0.000621525221504271,
            0.17527753114700317,
            0.00037790442002005875
        ],
        "align_select": "select visitor.ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many visitors under 30?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), visitor.ID",
            "select count(*), visitor.Age",
            "select count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor",
            "visitor visit"
        ],
        "align_scores": [
            0.9953943490982056,
            0.00046127731911838055,
            0.0002655843272805214,
            0.0004622740380000323,
            0.0003228511777706444,
            0.3264433741569519,
            0.0006509998347610235,
            0.5494300723075867
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many under-30-year-olds visited the site?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), visitor.ID",
            "select count(*), visitor.Age",
            "select count(*), visitor.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9915340542793274,
            0.0010185567662119865,
            0.0003093633276876062,
            0.00034150315332226455,
            0.00047297976561821997,
            0.024304000660777092,
            0.0003093633276876062,
            0.00034150315332226455
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many visitors under 30 years old are there?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), visitor.ID",
            "select count(*), visitor.Age",
            "select count(*), visitor.ID3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor",
            "visitor visit"
        ],
        "align_scores": [
            0.9928455948829651,
            0.0008333923178724945,
            0.00034954489092342556,
            0.00027192194829694927,
            0.000370610534446314,
            0.17053991556167603,
            0.0003042472817469388,
            0.00020744925132021308
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of visitors under age 30?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select sum(visitor.Age)",
            "select visitor.Age, count(*)",
            "select count(*), visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor",
            "visitor visit"
        ],
        "align_scores": [
            0.9941198825836182,
            0.0006298036314547062,
            0.004292553290724754,
            0.0002437015064060688,
            0.0006676923367194831,
            0.16700008511543274,
            0.0002594697580207139,
            0.0905722826719284
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many visitors are there who are less than 30 years old?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), visitor.ID",
            "select count(*) (visitor.ID)",
            "select count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor",
            "visitor visit"
        ],
        "align_scores": [
            0.989936113357544,
            0.0002925151202362031,
            0.0003160947235301137,
            0.000206344950129278,
            0.0003814162337221205,
            0.00014369560813065618,
            0.0007962764357216656,
            0.05363348871469498
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the visitor\u2019s name and how old he/she was for who bought the largest volume of tickets?",
        "gold_select": "select visitor.Name, visitor.Age",
        "select_candidates": [
            "select visitor.Name, visitor.Age",
            "select visitor.Name, visitor.Age, visitor.ID",
            "select visitor.ID, visitor.Name, visitor.Age",
            "select visitor.Name, visitor.Age, visit.visitor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9465565085411072,
            9.973791020456702e-05,
            0.00020825328829232603,
            6.777089583920315e-05,
            0.0005660369643010199,
            8.741351484786719e-05,
            0.00024041879805736244,
            6.475490954471752e-05
        ],
        "align_select": "select visitor.Name, visitor.Age",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the visitor who visited a museum with an open date earlier than 2009 and later than 2011?",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, visit.visitor_ID",
            "select visitor.Name, museum.Name",
            "select visitor.Name, visit.Museum_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visitor visit",
            "museum visitor"
        ],
        "align_scores": [
            0.9751361608505249,
            0.8872140645980835,
            0.00026964052813127637,
            0.00022719432308804244,
            0.0003782060812227428,
            0.0002502418647054583,
            0.0002326085086679086,
            0.00027094606775790453
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the names and membership levels of visitors who has a membership level above 4, and sort them in ascending order by age from oldest to youngest.",
        "gold_select": "select visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.Name, visitor.Level_of_membership, visitor.Age",
            "select visitor.Name, visitor.Level_of_membership sort-by-order by",
            "select visitor.Name, visitor.Level_of_membership sort-by-ORDER BY"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.98853600025177,
            0.98853600025177,
            0.0004636986996047199,
            0.0004636986996047199,
            0.0009276978671550751,
            0.0009276978671550751,
            0.0009276978671550751,
            0.0009276978671550751
        ],
        "align_select": "select visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Find the name and membership level of the visitors whose membership level is bigger than 4, show in ascending order from the oldest to the youngest and sort them from the oldest to the youngest.",
        "gold_select": "select visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.Name, visitor.Level_of_membership, visitor.Age",
            "select visitor.Name, visitor.Level_of_membership sort(visitor.Age)",
            "select visitor.Name, visitor.Level_of_membership sort in visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.02174585871398449,
            0.02174585871398449,
            0.00013372671674005687,
            0.00013372671674005687,
            0.0002983396698255092,
            0.0002983396698255092,
            0.00016725645400583744,
            0.00016725645400583744
        ],
        "align_select": "select visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Find the names and levels of all visitors who have a membership level greater than 4, sort them in ascending order of age, from oldest to youngest.",
        "gold_select": "select visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.Name, visitor.Level_of_membership, visitor.Age",
            "select visitor.Name, visitor.Age",
            "select visitor.Name, visitor.Level_of_membership in visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9920837879180908,
            0.00024743922404013574,
            0.00033141381572932005,
            9.102588956011459e-05,
            0.06271451711654663,
            0.0002582205052021891,
            0.001029117382131517,
            0.0002685857471078634
        ],
        "align_select": "select visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Please find the names and levels of the people who are higher than level four and then sort them from oldest to youngest.",
        "gold_select": "select visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.Name, visitor.Level_of_membership, visitor.Age",
            "select visitor.Name, t1.c4",
            "select visitor.Name, visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9923721551895142,
            0.0009245961555279791,
            0.00038692649104632437,
            0.00010319989087292925,
            0.0006473272806033492,
            0.00020039717492181808,
            0.0009478493011556566,
            0.0002646717766765505
        ],
        "align_select": "select visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Give me the max and avg ticket sales for all visits.",
        "gold_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "select_candidates": [
            "select max(visit.Num_of_Ticket), avg(visit.Num_of_Ticket)",
            "select max(t2.c6), avg(visit.Num_of_Ticket)",
            "select max(visit.Total_spent), avg(visit.Num_of_Ticket)",
            "select max(t2.c4), avg(visit.Num_of_Ticket)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visit",
        "table_candidates": [
            "visit"
        ],
        "align_scores": [
            0.9917705059051514,
            6.403484439942986e-05,
            0.0003631406289059669,
            0.0001225353335030377,
            0.02118835411965847,
            8.717834862181917e-05,
            0.00035018526250496507,
            0.00011435909982537851
        ],
        "align_select": "select max(visit.Num_of_Ticket), avg(visit.Num_of_Ticket)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the names of the visitors whose membership level is greater than 4, and sort them by their level from high to low.",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.Name, t1.c4",
            "select visitor.Name&sort(visitor.Level_of_membership)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9807235598564148,
            0.0003045494086109102,
            0.00024279009085148573,
            8.799619536148384e-05,
            0.00018706222181208432,
            0.00018560515309218317,
            0.0004888020921498537,
            0.00019714875088538975
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Which members have higher level than four? Show it in order from high to low.",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.ID",
            "select visitor.ID, visitor.Level_of_membership",
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.026396766304969788,
            0.0005039901589043438,
            0.0002638700243551284,
            0.00011292814451735467,
            0.00024691270664334297,
            0.00010181577818002552,
            0.9858733415603638,
            0.0002618370926938951
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Which members have level greater than 4, and list them from highest to lowest.",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.ID",
            "select visitor.ID, visitor.Level_of_membership",
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.ID, visitor.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.028368405997753143,
            0.3477177917957306,
            0.00026645680190995336,
            0.00037760805571451783,
            0.0003138503525406122,
            0.0005756025202572346,
            0.0018392499769106507,
            0.0018729566363617778
        ],
        "align_select": "select visitor.ID",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
    },
    {
        "question": "Find the names of the visitors whose membership level is larger than four, and list the results in descending order by level.",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.Name, visitor.Level_of_membership, visitor.Age",
            "select visitor.Name, visitor.Level_of_membership - visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9902273416519165,
            0.9902273416519165,
            0.00028443659539334476,
            0.00028443659539334476,
            0.00010952863522106782,
            0.00010952863522106782,
            0.00014809847925789654,
            0.00014809847925789654
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Of people who are members but not higher than Level four, how old are they on average?",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select avg(visitor.Age)",
            "select an avg(visitor.Age)",
            "select  avg(visitor.Age)",
            "select Avg(visitor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.03741521015763283,
            0.00029901880770921707,
            0.000563931418582797,
            0.00022008489759173244,
            0.03741521015763283,
            0.00029901880770921707,
            0.03741521015763283,
            0.00029901880770921707
        ],
        "align_select": "select avg(visitor.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How old are visitors on average whose membership level is not higher than four?",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select avg(visitor.Age)",
            "select an avg(visitor.Age)",
            "select  avg(visitor.Age)",
            "select Avg(visitor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9950097799301147,
            0.00014449238369707018,
            0.0005730307893827558,
            0.0001347863144474104,
            0.9950097799301147,
            0.00014449238369707018,
            0.9950097799301147,
            0.00014449238369707018
        ],
        "align_select": "select avg(visitor.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "On average how old are visitors whose membership level is not higher than 4?",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select avg(visitor.Age)",
            "select an avg(visitor.Age)",
            "select  avg(visitor.Age)",
            "select Avg(visitor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9951510429382324,
            0.0001645564188947901,
            0.0005785219836980104,
            0.00015244253154378384,
            0.9951510429382324,
            0.0001645564188947901,
            0.9951510429382324,
            0.0001645564188947901
        ],
        "align_select": "select avg(visitor.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How old are the visitors whose membership levels do not exceed 4 years?",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select visitor.Age",
            "select visitor.Age, visitor.Level_of_membership",
            "select visitor.Age, t1.c4",
            "select visitor.Age,"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9895016551017761,
            0.00011860360245918855,
            0.00017402501543983817,
            5.817548299091868e-05,
            0.0006798155955038965,
            7.212485070340335e-05,
            0.2893596887588501,
            7.160087989177555e-05
        ],
        "align_select": "select visitor.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many visitors whose membership level is not larger than 4, how old are they in average?",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select count(*), avg(visitor.Age)",
            "select avg(visitor.Age), count(*)",
            "select avg(visitor.Age)",
            "select number(*), avg(visitor.Age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9612746834754944,
            0.3760000765323639,
            0.976335346698761,
            0.04504327476024628,
            0.9512306451797485,
            0.00023201931617222726,
            0.0003141934867016971,
            0.00022295289090834558
        ],
        "align_select": "select count(*), avg(visitor.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the ID and name of the museum that has the highest number of employees?",
        "gold_select": "select museum.Museum_ID, museum.Name",
        "select_candidates": [
            "select museum.Museum_ID, museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Museum_ID, museum.Name, museum.Num_of_Staff",
            "select museum.Num_of_Staff, museum.Name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.5321404933929443,
            8.387325215153396e-05,
            0.5921599864959717,
            8.826730481814593e-05,
            0.00044413478462956846,
            7.560157973784953e-05,
            0.004323966801166534,
            7.551475573563948e-05
        ],
        "align_select": "select museum.Museum_ID, museum.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please fill in the names of museums that had more staff than the amount for all museums established after 2010.",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Name, museum.Num_of_Staff, museum.Open_Year",
            "select museum.Name, museum.Open_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.7138333916664124,
            0.0006163579528219998,
            0.00033078284468501806,
            8.097218960756436e-05,
            0.0001530583540443331,
            7.033471047179773e-05,
            0.00023789869737811387,
            9.103786578634754e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the list of museums with more staff members than the minimum amount of staff members for all museums opened after 2010.",
        "gold_select": "select museum.Name",
        "select_candidates": [
            "select museum.Name",
            "select museum.Name, museum.Num_of_Staff",
            "select museum.Museum_ID, museum.Name",
            "select museum.Museum_ID, museum.Name, museum.Num_of_Staff"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.3101661503314972,
            0.0002547143667470664,
            0.00027012222562916577,
            9.016605326905847e-05,
            0.0002932755451183766,
            0.00012192506255814806,
            0.000136001588543877,
            7.813583215465769e-05
        ],
        "align_select": "select museum.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out the total amount of money that was spent on tickets for member level 1.",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent), visitor.ID",
            "select sum(visit.Total_spent), visitor.Level_of_membership",
            "select sum(visit.Total_spent) dependant on visitor.Level_of_membership"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9953722357749939,
            0.0003864907776005566,
            0.00013226452574599534,
            0.005534256808459759,
            0.00012684729881584644,
            0.010299508459866047,
            0.00024151380057446659,
            0.00011229801020817831
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The total amount of money spent on tickets for those who are at level 1 should be written here.",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent), visitor.ID",
            "select sum(visit.Total_spent) descripted in visitor.Name",
            "select sum(visit.Total_spent) descripted by visitor.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9896730184555054,
            0.000820659042801708,
            0.00014707553782500327,
            0.0020543262362480164,
            0.0005032113404013216,
            0.000421359931351617,
            0.00046315754298120737,
            0.0003711009048856795
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need to find out the total amount spent on tickets for the members of level 1.",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent), visitor.ID",
            "select sum(visit.Total_spent) descripted in visitor.ID",
            "select sum(visit.Total_spent) descripted in visitor.Level_of_membership"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9947294592857361,
            0.01641951873898506,
            0.00012955038982909173,
            0.002597839804366231,
            0.00044963040272705257,
            0.00031903080525808036,
            0.0005533801158890128,
            0.00025974304298870265
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me the total expenditure on tickets for those people whose membership level is one.",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent), visitor.ID",
            "select sum(visit.Total_spent), visitor.Name",
            "select sum(visit.Total_spent) descripted in visitor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.992344081401825,
            0.0040390100330114365,
            0.0001619301037862897,
            0.016718950122594833,
            0.00016759024583734572,
            0.010544761084020138,
            0.0005876790382899344,
            0.0007184969144873321
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The amount of money that was spent on tickets for the members who are in level one.",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent) denoted by visit.Num_of_Ticket",
            "select sum(visit.Total_spent) delegated to visit.Num_of_Ticket",
            "select sum(visit.Total_spent), visitor.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9015586376190186,
            7.9449346230831e-05,
            0.00040682294638827443,
            7.084833487169817e-05,
            0.0003298893861938268,
            7.050494605209678e-05,
            0.0001604849094292149,
            6.203605880727991e-05
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What has been the opening date and the number of the employees working at the 'Plaza Museum'.",
        "gold_select": "select museum.Num_of_Staff, museum.Open_Year",
        "select_candidates": [
            "select museum.Open_Year, museum.Num_of_Staff",
            "select museum.Museum_ID, museum.Open_Year, museum.Num_of_Staff",
            "select museum.Name, museum.Open_Year, museum.Num_of_Staff",
            "select museum.Name, museum.Num_of_Staff"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9905616641044617,
            0.0001264595048269257,
            0.0002274628495797515,
            8.070146577665582e-05,
            0.0002478098904248327,
            7.468965486623347e-05,
            0.0008813483291305602,
            0.00011897717922693118
        ],
        "align_select": "select museum.Open_Year, museum.Num_of_Staff",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id and country code of the player with the highest number of tours?",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.player_id, players.country_code",
            "select rankings.player_id, players.country_code",
            "select players.first_name, players.country_code",
            "select t3.c2, players.country_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9899791479110718,
            9.144889918388799e-05,
            0.005728339310735464,
            8.937992970459163e-05,
            0.0007156766369007528,
            0.0001018161783576943,
            0.00042173711699433625,
            8.55961479828693e-05
        ],
        "align_select": "select players.player_id, players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the first and last name of all players (Left-Handed) in their birth order.",
        "gold_select": "select players.first_name, players.last_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name in players.birth_date",
            "select players.first_name, players.last_name, players.hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.99517422914505,
            0.00019213258929084986,
            0.00014466622087638825,
            8.63585519255139e-05,
            0.00029431720031425357,
            0.00012889388017356396,
            0.00011579439888009802,
            8.751184941502288e-05
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "The first name or last name of all players who are left handed in the order of birthday.",
        "gold_select": "select players.first_name, players.last_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name ou players.last_name",
            "select players.first_name, players.last_name, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9601380228996277,
            0.9601380228996277,
            0.00014383791130967438,
            0.00014383791130967438,
            0.9889046549797058,
            0.9889046549797058,
            0.00014383791130967438,
            0.00014383791130967438
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "List the first and last name of all players that are left-handed, listed by birth date.",
        "gold_select": "select players.first_name, players.last_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select distinct players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name (Date, Last)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9933454990386963,
            0.00037842392339371145,
            0.004529590252786875,
            0.0001430888078175485,
            0.00023978286480996758,
            0.00030575148412026465,
            0.00039250284316949546,
            0.000143737270263955
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Who are the loser and winner played in the longest match?",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.loser_name, matches.winner_name",
            "select matches.loser_name, matches.winner_hand",
            "select matches.loser_name, matches.winner_age",
            "select matches.loser_name, matches.tourney_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9809877872467041,
            7.916967297205701e-05,
            0.0017295206198468804,
            6.306498107733205e-05,
            0.0005276225274428725,
            6.985471554799005e-05,
            0.00037640330265276134,
            7.253545481944457e-05
        ],
        "align_select": "select matches.loser_name, matches.winner_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who won and lost the most in game with the most minutes played.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.winner_name, matches.winner_rank",
            "select matches.winner_hand, matches.winner_ht",
            "select matches.minutes, matches.winner_name",
            "select matches.winner_entry, matches.winner_hand"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.000520989065989852,
            0.0005840523517690599,
            0.0012721617240458727,
            0.0011705445358529687,
            0.0005096862441860139,
            0.0007427152013406157,
            0.000752687978092581,
            0.0009689918952062726
        ],
        "align_select": "select matches.winner_name, matches.winner_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the names of the losers and winners who played in the match that had the longest time.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.loser_name, matches.winner_name",
            "select matches.loser_name, t1.c 27",
            "select matches.loser_ioc, matches.loser_name",
            "select t1.c 8, matches.winner_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9510740041732788,
            0.00010948967246804386,
            0.0005932850181125104,
            0.00014410383300855756,
            0.000627295405138284,
            9.491318633081391e-05,
            0.0006646700203418732,
            8.961718413047493e-05
        ],
        "align_select": "select matches.loser_name, matches.winner_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who are the losers and winners played in the match that lasted the longest?",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.loser_name, matches.winner_name",
            "select matches.loser_name, matches.winner_hand",
            "select matches.loser_name, matches.winner_age",
            "select matches.loser_name, matches.loser_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9828779697418213,
            7.882765930844471e-05,
            0.004733429756015539,
            6.841144931968302e-05,
            0.0007891358691267669,
            7.980158989084885e-05,
            0.00048596947453916073,
            0.0001102926762541756
        ],
        "align_select": "select matches.loser_name, matches.winner_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Let's find the winner and loser with the highest amount of time on the field of play in a particular game.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.winner_name, matches.loser_name",
            "select matches.winner_rank, matches.loser_rank",
            "select matches.winner_hand, matches.loser_name",
            "select matches.minutes, matches.loser_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9756636619567871,
            0.8339422345161438,
            0.8668424487113953,
            0.5754105448722839,
            0.025841964408755302,
            0.019758081063628197,
            0.0009593063150532544,
            0.0006894153775647283
        ],
        "align_select": "select matches.winner_name, matches.loser_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Let's find out the names of the loser and winner that were on the pitch for the longest time.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.loser_name, matches.winner_name",
            "select matches.loser_ioc, matches.loser_name",
            "select matches.loser_name, t1.c 27",
            "select matches.loser_name, matches.loser_ioc"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9744705557823181,
            0.0002693733258638531,
            0.0004893788136541843,
            9.574303112458438e-05,
            0.0004895728197880089,
            0.0001256002433365211,
            0.0005268104141578078,
            0.00011045853898394853
        ],
        "align_select": "select matches.loser_name, matches.winner_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the winners and losers who played the most minutes in the game.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.winner_name, matches.loser_name",
            "select matches.winner_hand, matches.loser_name",
            "select matches.winner_hand, matches.winner_rank",
            "select matches.winner_entry, matches.loser_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9887949228286743,
            0.9462283849716187,
            0.02041981741786003,
            0.012772150337696075,
            0.0003986354568041861,
            0.0003447679046075791,
            0.04798068478703499,
            0.03495945408940315
        ],
        "align_select": "select matches.winner_name, matches.loser_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name of winner and loser who played in the match that lasted the longest?",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.winner_name, matches.loser_name",
            "select t1.c 27, matches.loser_name",
            "select matches.winner_rank, matches.loser_name",
            "select matches.winner_hand, matches.loser_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9717288613319397,
            0.00012851662177126855,
            0.0007512705633416772,
            8.255697321146727e-05,
            0.0010364387417212129,
            8.817359048407525e-05,
            0.0006702317041344941,
            7.713036757195368e-05
        ],
        "align_select": "select matches.winner_name, matches.loser_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the names of loser and winner who have played a game that lasted the longest.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.loser_name, matches.winner_name",
            "select t1.c 8, matches.winner_name",
            "select matches.loser_name, t1.c 27",
            "select matches.loser_name, matches.loser_ioc"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.8874215483665466,
            9.475347906118259e-05,
            0.0006926447385922074,
            7.532488234573975e-05,
            0.0005189085495658219,
            0.00010719163401518017,
            0.000519395456649363,
            9.40678219194524e-05
        ],
        "align_select": "select matches.loser_name, matches.winner_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the names of the losers and winners who played in the match that had the largest duration.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.loser_name, matches.winner_name",
            "select matches.loser_name, t1.c 27",
            "select matches.loser_ioc, matches.loser_name",
            "select matches.loser_name, matches.loser_ioc"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9726299047470093,
            7.443397771567106e-05,
            0.000738088390789926,
            0.00014186420594342053,
            0.0006719458033330739,
            9.960874740500003e-05,
            0.0005916677764616907,
            9.578841127222404e-05
        ],
        "align_select": "select matches.loser_name, matches.winner_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me all the codes of countries with at least 51 players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, count(*)",
            "select players.country_code (wHERE-GROUP BY-HAVING",
            "select players.country_code, t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches",
            "players rankings"
        ],
        "align_scores": [
            0.9814471006393433,
            0.00012975512072443962,
            0.0008378017810173333,
            6.533510168083012e-05,
            0.00017710986139718443,
            7.641961565241218e-05,
            0.0003986752999480814,
            6.293282058322802e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the code of the country with the most players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, players.birth_date",
            "select players.country_code, t0.c6",
            "select players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9957990050315857,
            7.589889719383791e-05,
            0.00016100511129479855,
            5.453983976622112e-05,
            0.0005507255555130541,
            6.46471744403243e-05,
            0.0001691703946562484,
            5.438434527604841e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find all those that won the most times, their names and their ranking points.",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select rankings.player_id, rankings.player_id7, rankings.ranking_points",
            "select matches.draw_size, players.last_name, rankings.ranking_points",
            "select rankings.player_id, players.first_name, players.last_name, rankings.ranking_points",
            "select matches.draw_size, matches.loser_age, rankings.ranking_points"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "rankings"
        ],
        "align_scores": [
            0.0002970734494738281,
            6.145753286546096e-05,
            0.00041826325468719006,
            8.771067950874567e-05,
            0.045485712587833405,
            7.659566472284496e-05,
            0.00022450409596785903,
            8.74332690727897e-05
        ],
        "align_select": "select rankings.player_id, rankings.player_id7, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who has won the most time? And what are their rank points?",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select rankings.player_id, rankings.ranking_points",
            "select matches.draw_size, rankings.ranking_points",
            "select matches.winner_name, rankings.ranking_points",
            "select players.first_name, players.last_name, rankings.ranking_points"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "rankings"
        ],
        "align_scores": [
            0.2221248745918274,
            7.577154610771686e-05,
            0.0003376705280970782,
            5.8006793551612645e-05,
            0.9867975115776062,
            8.62513916217722e-05,
            0.9398886561393738,
            7.017787720542401e-05
        ],
        "align_select": "select matches.winner_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the names and ranks of the players with the most number of wins.",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select players.first_name, players.last_name, rankings.ranking",
            "select players.first_name, players.last_name, players.first_name, rankings.ranking",
            "select players.first_name, players.last_name, players.first_name, players.last_name, rankings.ranking",
            "select players.first_name, players.last_name, players.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.9878736138343811,
            6.892844976391643e-05,
            0.00037443707697093487,
            6.517082510981709e-05,
            0.0007943125674501061,
            0.00012292694009374827,
            0.00020132525241933763,
            6.532475526910275e-05
        ],
        "align_select": "select players.first_name, players.last_name, rankings.ranking",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please find the name and ranking points of the player who has won the most times.",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select players.first_name, players.last_name, rankings.ranking_points",
            "select rankings.ranking, rankings.player_id",
            "select matches.draw_size, players.last_name, rankings.ranking_points",
            "select t3.c1, players.first_name, players.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches rankings",
            "players rankings",
            "players matches"
        ],
        "align_scores": [
            0.991312563419342,
            9.52925329329446e-05,
            0.36479452252388,
            0.00010030972043750808,
            0.00028537423349916935,
            7.851137343095616e-05,
            0.0002625955967232585,
            7.494228339055553e-05
        ],
        "align_select": "select players.first_name, players.last_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the country code with over fifty players?",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, t0.c6",
            "select players.country_code, players.birth_date",
            "select players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches",
            "players rankings"
        ],
        "align_scores": [
            0.9883370995521545,
            9.755890641827136e-05,
            0.0003652938758023083,
            6.501725874841213e-05,
            0.000131826353026554,
            5.618030627374537e-05,
            0.00013204701826907694,
            5.7005574490176514e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of Tournaments that have more tha ten matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.best_of, matches.tourney_name",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.tourney_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9907594919204712,
            0.00010013826977228746,
            0.00029242646996863186,
            6.0703136114170775e-05,
            0.00015574574354104698,
            5.3513933380600065e-05,
            0.00015705272380728275,
            5.263154162093997e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all tournaments with 11+ matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name,",
            "select matches.winner_age",
            "select matches.tourney_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.99068284034729,
            0.9929537177085876,
            0.06789971143007278,
            0.006997288204729557,
            0.0004579098313115537,
            0.0004198507813271135,
            0.03992815688252449,
            0.031510576605796814
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "find the first name, country code and birth date of the winner who has the most points in all matches.",
        "gold_select": "select players.first_name, players.country_code, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.country_code, players.birth_date",
            "select players.first_name, players.birth_date, players.country_code",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.country_code, players.birth_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9346505999565125,
            0.8276404142379761,
            0.9239816665649414,
            0.8114301562309265,
            0.0003903014585375786,
            0.0005032924236729741,
            0.9346505999565125,
            0.8276404142379761
        ],
        "align_select": "select players.first_name, players.country_code, players.birth_date",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the tournament name that has more than ten matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9891461133956909,
            9.387963655171916e-05,
            0.0001485381944803521,
            6.061503154342063e-05,
            0.0001604393037268892,
            5.724221409764141e-05,
            0.00013712314830627292,
            6.09088056080509e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which tournament has more than 10 matches?",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.minutes",
            "select matches.tourney_name, matches.winner_hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9913071990013123,
            0.00012149102985858917,
            0.00016706627502571791,
            6.376209785230458e-05,
            0.0001943682145792991,
            5.981532376608811e-05,
            0.00018315024499315768,
            6.730941822752357e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which tournament (tourney?) had more than 10 matches?",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name (matches.tourney_date)",
            "select matches.tourney_name,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9556396007537842,
            0.00014324879157356918,
            0.00018395429651718587,
            5.9971771406708285e-05,
            0.00036286981776356697,
            6.283782568061724e-05,
            0.009878363460302353,
            6.948253576410934e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which tournament had more than 10 matches?",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.minutes",
            "select matches.tourney_name (matches.match_num)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.991117000579834,
            0.0001274541427846998,
            0.00018906623881775886,
            6.283962284214795e-05,
            0.00018557612202130258,
            5.893753404961899e-05,
            0.00032395648304373026,
            6.63128012092784e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the name of tournament that has more than ten matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.991990864276886,
            9.340119868284091e-05,
            0.00015419830742757767,
            5.5358010285999626e-05,
            0.00016092852456495166,
            6.0565460444195196e-05,
            0.00011562116560526192,
            6.146790838101879e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What tournament has more than 10 matches?",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.minutes",
            "select matches.tourney_name, matches.winner_hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.990996241569519,
            0.00010838866728590801,
            0.00017159018898382783,
            6.317910447251052e-05,
            0.00019608429283834994,
            5.948965917923488e-05,
            0.00018974780687130988,
            6.679399666609243e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the name of tournament with more than ten results.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9860760569572449,
            0.00014047689910512418,
            0.00018854648806154728,
            6.425382889574394e-05,
            0.0001572458859300241,
            5.979861452942714e-05,
            0.0001448576949769631,
            6.726700667059049e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the tournament that has more than 10 matchs",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.minutes"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9893090724945068,
            9.78634852799587e-05,
            0.00020078847592230886,
            6.336470687529072e-05,
            0.00020469128503464162,
            6.851741636637598e-05,
            0.00021059993014205247,
            6.04634296905715e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the name of tournament that has over 10 matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9896512031555176,
            8.739650365896523e-05,
            0.0001522121747257188,
            5.503723878064193e-05,
            0.00014152225048746914,
            6.004329407005571e-05,
            0.00013080411008559167,
            6.0390022554202005e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the tournament whose number of matches is greater than ten.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.match_num",
            "select matches.tourney_name, matches.minutes",
            "select matches.tourney_name (https://matches.match_num"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9215098023414612,
            7.939027273096144e-05,
            0.00013251624477561563,
            5.8971087128156796e-05,
            0.00015669132699258626,
            5.787909685750492e-05,
            0.000259188876952976,
            6.64434555801563e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which tournament have more than 10 matches?",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.minutes",
            "select matches.tourney_name, matches.winner_hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9914894104003906,
            0.0001262729783775285,
            0.00017696942086331546,
            6.3165498431772e-05,
            0.00020531793416012079,
            6.012981975800358e-05,
            0.00018759215890895575,
            6.724020204273984e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the name of tournament with greater than 10 matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9878934025764465,
            0.00010055412712972611,
            0.00015619117766618729,
            5.954975858912803e-05,
            0.00015134786372072995,
            5.7444212870905176e-05,
            0.0001318305148743093,
            6.079727245378308e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "How many participants of the WTA have won this tournament is left-handed?",
        "gold_select": "select count(distinct matches.winner_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.loser_age)",
            "select count(*), matches.tourney_name",
            "select count(*), players.hand"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.8331403136253357,
            0.003801199374720454,
            0.0003653534222394228,
            0.00016065761155914515,
            0.00033971446100622416,
            0.0016099957283586264,
            0.0005243298364803195,
            0.000987844541668892
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many left-handed WTA Champions participated in the Championships?",
        "gold_select": "select count(distinct matches.winner_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.loser_id)",
            "select count(*), players.hand",
            "select count(distinct matches.loser_name)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9890835881233215,
            0.003763214685022831,
            0.00040555099258199334,
            0.00018732118769548833,
            0.0007067227270454168,
            0.019510719925165176,
            0.0004468020924832672,
            0.00020480254897847772
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How old are the winners of all matches and losers on average?",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age), matches.winner_age",
            "select avg(matches.winner_age, matches.loser_age)",
            "select matches.winner_age, avg(matches.loser_age)",
            "select avg(matches.winner_age - avg(matches.loser_age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9224371910095215,
            8.905884169507772e-05,
            0.6672737002372742,
            7.272051152540371e-05,
            0.8372360467910767,
            9.540309838484973e-05,
            0.006346783600747585,
            7.052928413031623e-05
        ],
        "align_select": "select avg(matches.loser_age), matches.winner_age",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the average ages of players that lost (and won) each match.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age), avg(matches.winner_age)",
            "select avg(matches.loser_age), avg(matches.winner_age), matches.match_num",
            "select matches.loser_age, avg(matches.winner_age)",
            "select avg(matches.loser_age), avg(matches.loser_age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9948362112045288,
            0.00439127953723073,
            0.991381824016571,
            0.0006908758659847081,
            0.9855107069015503,
            0.0037449097726494074,
            0.000466074823634699,
            0.0002012018667301163
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "I am looking for the average age of those who lost and won in all games.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age), avg(matches.winner_age)",
            "select avg(matches.loser_age), avg(matches.winner_age",
            "select avg(matches.loser_age), avg(matches.loser_age)",
            "select avg(matches.loser_age), avg(matches.loser_entry)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.7887662649154663,
            0.0008311808342114091,
            0.33636292815208435,
            0.0004250452038832009,
            0.0004344146582297981,
            0.0001935457985382527,
            0.00023103784769773483,
            0.00010280231072101742
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the average age of people who lost and won during all matches.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age), avg(matches.winner_age)",
            "select avg(matches.loser_age), avg(matches.winner_age",
            "select avg(matches.loser_age), avg(matches.loser_age)",
            "select avg(matches.loser_age), avg(matches.loser_entry)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.8896740078926086,
            0.9919103980064392,
            0.5137914419174194,
            0.9596067667007446,
            0.0003849155909847468,
            0.0005866395658813417,
            0.00020461808890104294,
            0.00026093891938216984
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How old are losers and winners across matches on average?",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age), avg(matches.winner_age)",
            "select avg(matches.loser_age), avg(matches.winner_age",
            "select avg(matches.loser_age), avg(matches.loser_age)",
            "select avg(matches.loser_age), avg(matches.loser_entry)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9952670335769653,
            7.346933853114024e-05,
            0.9913966059684753,
            8.176222036127001e-05,
            0.0006660812068730593,
            8.80175139172934e-05,
            0.0003276446077506989,
            0.00010955391189781949
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How old are winners and losers across matches on average?",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.winner_age, avg(matches.loser_age)",
            "select avg(matches.loser_age), matches.winner_age",
            "select avg(matches.winner_age - avg(matches.loser_age)",
            "select avg(matches.loser_age), avg(matches.winner_age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.03778468817472458,
            9.697400673758239e-05,
            0.060873012989759445,
            9.326147846877575e-05,
            0.017474966123700142,
            7.27858641766943e-05,
            0.9953085780143738,
            8.218903531087562e-05
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How old are those who win and lose across matches on average?",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age)",
            "select avg(matches.loser_age), matches.winner_age",
            "select avg(matches.winner_age, matches.loser_age)",
            "select avg(matches.winner_age, avg(matches.loser_age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.0018989054951816797,
            0.0001695067185210064,
            0.001783781684935093,
            0.00012516647984739393,
            0.0007321589509956539,
            0.00011410759179852903,
            0.007084893994033337,
            0.00012793265341315418
        ],
        "align_select": "select avg(matches.loser_age)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "The average ages of players on the winning and losing sides of alll matches are listed here.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.winner_age, avg(matches.loser_age)",
            "select avg(matches.winner_age - matches.loser_age)",
            "select avg(matches.loser_age), matches.winner_age",
            "select avg(matches.winner_age - avg(matches.loser_age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.005524107255041599,
            0.00015224293747451156,
            0.008450244553387165,
            0.00019149592844769359,
            0.8801485896110535,
            0.00016077683540061116,
            0.0010975159239023924,
            0.00012044755567330867
        ],
        "align_select": "select avg(matches.loser_age), matches.winner_age",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the name of the winner who had the highest ranking and took part in the Australian Open tournament.",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select matches.winner_name, matches.winner_entry",
            "select matches.tourney_name, matches.winner_name",
            "select matches.winner_name, matches.winner_hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.6730155944824219,
            0.1854880005121231,
            0.0002592551172710955,
            0.0002874174388125539,
            0.00032700205338187516,
            0.0002864900161512196,
            0.00025386165361851454,
            0.00023782432253938168
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who was the winner that had the highest rank points and participated in the Australian Open tournament?",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select matches.winner_name, rankings.ranking_points",
            "select matches.tourney_name, matches.winner_name",
            "select rankings.player_id7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.8733728528022766,
            0.21198369562625885,
            0.0006945761269889772,
            0.0013140311930328608,
            0.0003481002931948751,
            0.0002467014128342271,
            0.006025063805282116,
            0.00813210941851139
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who is the winner that has the most points and participates in the Australian open test.",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select matches.winner_name, matches.winner_rank_points",
            "select matches.winner_name, matches.winner_entry",
            "select matches.winner_name, matches.winner_ioc"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.6816640496253967,
            0.9757362008094788,
            0.00024615071015432477,
            0.0002336338657187298,
            0.00030953565146774054,
            0.00030431777122430503,
            0.0004928691778331995,
            0.0005520956474356353
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name of the highest ranked winner participating in the Australian Open tournament?",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select matches.winner_name, rankings.player_id",
            "select matches.tourney_name, matches.winner_name",
            "select matches.winner_name, matches.winner_rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "matches"
        ],
        "align_scores": [
            0.9880727529525757,
            0.0006279356894083321,
            0.001263643498532474,
            0.00021782399562653154,
            0.0003816995886154473,
            0.00013338007556740195,
            0.0008757425821386278,
            0.0001250846398761496
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Who was the winner who had the most points and was playing at the Australian Open tournament.",
        "gold_select": "select matches.winner_name",
        "select_candidates": [
            "select matches.winner_name",
            "select matches.winner_name, matches.winner_ioc",
            "select matches.winner_name, matches.winner_rank",
            "select matches.winner_name, matches.winner_rank_points"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.8837924599647522,
            0.9333601593971252,
            0.00042571144877001643,
            0.000323709798976779,
            0.00031343233422376215,
            0.0003305340651422739,
            0.0002740532800089568,
            0.00034861540189012885
        ],
        "align_select": "select matches.winner_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give the names of the player who won and lost for the longest duration of time.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select matches.winner_name, players.last_name",
            "select rankings.ranking, players.last_name",
            "select t3.c1, players.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.5225263237953186,
            0.9623036980628967,
            0.00048285876982845366,
            0.0005562298465520144,
            0.0003787173191085458,
            0.00026572917704470456,
            0.00044683495070785284,
            0.00014367479889187962
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who were winners and losers who play in the longest match?",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.winner_name, matches.loser_name",
            "select matches.winner_rank, matches.loser_name",
            "select matches.winner_rank, matches.loser_rank",
            "select matches.winner_hand, matches.loser_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.8789308071136475,
            0.9828583002090454,
            0.0006574114668183029,
            0.00044886465184390545,
            0.9508812427520752,
            0.9022527933120728,
            0.00047766577336005867,
            0.00045410505845211446
        ],
        "align_select": "select matches.winner_name, matches.loser_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which players were the winners or losers in the longest match?",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select matches.winner_name, matches.loser_name",
            "select matches.winner_name, matches.winner_rank",
            "select t0.c8, players.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.9630609154701233,
            0.11383894830942154,
            0.8474652171134949,
            0.0009200431522913277,
            0.0005451830802485347,
            9.17494689929299e-05,
            0.0005433093756437302,
            0.00013133275206200778
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who had the longest match? And What were the winning and losing sides?",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.loser_name, matches.loser_rank",
            "select matches.match_num, matches.loser_name, matches.round",
            "select matches.minutes, matches.loser_name, matches.round",
            "select matches.minutes, matches.round"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.00042254332220181823,
            8.570853242417797e-05,
            0.00025843505864031613,
            6.85720588080585e-05,
            0.0003351545601617545,
            6.714441406074911e-05,
            0.000743483251426369,
            7.48117599869147e-05
        ],
        "align_select": "select matches.loser_name, matches.loser_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who are the three youngest winners across all matches? And their ranks?",
        "gold_select": "select distinct matches.winner_name, matches.winner_rank",
        "select_candidates": [
            "select matches.winner_name, matches.winner_rank",
            "select matches.winner_rank, matches.winner_name",
            "select matches.loser_age, matches.winner_rank",
            "select matches.loser_ioc, matches.winner_rank"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9929115176200867,
            5.5606898968108e-05,
            0.9907553791999817,
            5.718371903640218e-05,
            0.00038053025491535664,
            5.7510209444444627e-05,
            0.0005499171675182879,
            5.6251392379635945e-05
        ],
        "align_select": "select matches.winner_name, matches.winner_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which player has the most wins and how much rank points he/she has?",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select players.first_name, players.last_name, rankings.ranking_points",
            "select players.first_name, players.last_name, sum(rankings.ranking_points)",
            "select rankings.player_id, rankings.ranking_points",
            "select matches.draw_size, players.last_name, rankings.ranking_points"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches rankings",
            "matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.9192050099372864,
            8.396081102546304e-05,
            0.934273898601532,
            7.457962055923417e-05,
            0.23060066998004913,
            0.00010108164133271202,
            0.00023121858248487115,
            5.920041076024063e-05
        ],
        "align_select": "select players.first_name, players.last_name, rankings.ranking_points",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many players were part of all matches that were played in 2013 or 2016?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.loser_id)",
            "select count(distinct matches.loser_age)",
            "select count(distinct matches.loser_name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.7314522862434387,
            8.435564086539671e-05,
            0.026032783091068268,
            9.874078386928886e-05,
            0.0005554506205953658,
            6.481037416961044e-05,
            0.019648311659693718,
            7.432615529978648e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The names and birth dates of American players.",
        "gold_select": "select players.first_name, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.last_name, players.birth_date",
            "select distinct players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name, players.hand, players.birth_date",
            "select players.first_name.c1, players.last_name, players.birth_date"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9405476450920105,
            7.764517795294523e-05,
            0.0004968025023117661,
            6.846307951491326e-05,
            0.0002159609430236742,
            6.914141704328358e-05,
            0.00015086027269717306,
            5.6869612308219075e-05
        ],
        "align_select": "select players.first_name, players.last_name, players.birth_date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the highest and lowest number of people killed each incident?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select death.id, max(death.killed), min(death.killed)",
            "select death.caused_by_ship_id, max(death.killed), min(death.killed)",
            "select max(death.killed), min(death.killed), death.caused_by_ship_id",
            "select max(death.killed), min(death.killed), death.id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.9784212112426758,
            0.006044129375368357,
            0.2761708199977875,
            0.0008079423569142818,
            0.15949338674545288,
            0.0005938506801612675,
            0.3943776786327362,
            0.00039020320400595665
        ],
        "align_select": "select death.id, max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the greatest and lowest numbers of deaths each time?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select max(death.killed), min(death.killed), death.caused_by_ship_id",
            "select max(death.killed), min(death.killed), death.id",
            "select max(death.killed), min(death.killed), death.injured",
            "select death.id, max(death.killed), min(death.killed)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.0009994155261665583,
            0.00022577663185074925,
            0.0002538527187425643,
            9.700655937194824e-05,
            0.00012761878315359354,
            0.00011737063323380426,
            0.0006730330060236156,
            0.0001540499069960788
        ],
        "align_select": "select max(death.killed), min(death.killed), death.caused_by_ship_id",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the highest and lowest number of deaths per incident?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select max(death.killed), min(death.killed)",
            "select max(death.injured), min(death.killed)",
            "select max(death.killed), min(death.killed), death.caused_by_ship_id",
            "select max(t2.c6), min(death.killed)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.9934821724891663,
            0.8750991821289062,
            0.000526749121490866,
            0.0006938047590665519,
            0.0003228250134270638,
            0.1130252555012703,
            0.0005046340520493686,
            0.00037633944884873927
        ],
        "align_select": "select max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the largest and smallest death toll caused each time?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select max(death.killed), min(death.killed), death.caused_by_ship_id",
            "select max(death.killed), min(death.killed), battle.name",
            "select death.caused_by_ship_id, max(death.killed), min(death.killed)",
            "select max(death.killed), min(death.killed), death.id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.029773149639368057,
            0.002239952562376857,
            0.9460647106170654,
            0.09206613898277283,
            0.0446568988263607,
            0.0009834433440119028,
            0.0011616095434874296,
            0.00022777103004045784
        ],
        "align_select": "select max(death.killed), min(death.killed), battle.name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How high or low did casualties reach each time?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select death.killed, death.injured",
            "select max(death.killed), min(death.injured)",
            "select death.killed, death.injured, min(death.killed)",
            "select max(death.killed), min(death.killed)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.1521468311548233,
            0.011270951479673386,
            0.004792903549969196,
            0.0018530453089624643,
            0.0002647601068019867,
            0.00010641212429618463,
            0.8997385501861572,
            0.03910285606980324
        ],
        "align_select": "select max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What's the highest and lowest number of death per incident?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select max(death.killed), min(death.killed)",
            "select max(death.injured), min(death.killed)",
            "select max(death.killed), min(death.injured)",
            "select max(t2.c6), min(death.killed)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.9929243326187134,
            0.9189679622650146,
            0.0010372783290222287,
            0.0007756467675790191,
            0.0045465389266610146,
            0.0015102928737178445,
            0.0004527015262283385,
            0.0003249468863941729
        ],
        "align_select": "select max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What was the highest and lowest number of deaths during each event?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select battle.name, max(death.killed), min(death.killed)",
            "select battle.date, max(death.killed), min(death.killed)",
            "select max(death.killed), min(death.killed), battle.date",
            "select battle.id, max(death.killed), min(death.killed)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "battle death",
            "battle ship death",
            "ship death"
        ],
        "align_scores": [
            0.9945307374000549,
            0.0002998426789417863,
            0.9711859822273254,
            0.00030864629661664367,
            0.018300266936421394,
            0.00017234428378287703,
            0.9940685033798218,
            0.0003676107444334775
        ],
        "align_select": "select battle.name, max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the battle names which are between the Bulgarian leader, Kaloyan, and the Latin leader, Baldwin I.",
        "gold_select": "select battle.name",
        "select_candidates": [
            "select battle.name",
            "select battle.name, battle.bulgarian_commander, battle.latin_commander",
            "select battle.name, battle.date",
            "select battle.name, battle.date, battle.bulgarian_commander"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9863515496253967,
            0.00012416127719916403,
            0.00014635060506407171,
            7.66896628192626e-05,
            0.00023258323199115694,
            8.200006413972005e-05,
            0.00013936113100498915,
            7.192148768808693e-05
        ],
        "align_select": "select battle.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What were the different battles involving commander Kaloyan against Latin commander Baldwin I?",
        "gold_select": "select battle.name",
        "select_candidates": [
            "select distinct battle.name",
            "select distinct battle.name, battle.date",
            "select count(*)",
            "select count(distinct battle.name)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.9891905784606934,
            0.0005318387993611395,
            0.000480762158986181,
            8.737725875107571e-05,
            0.014719834551215172,
            0.0001924813404912129,
            0.012221895158290863,
            7.994393672561273e-05
        ],
        "align_select": "select distinct battle.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the names of battles that Bulgarian officer Kaloyan fought against Latin officer Baldwin.",
        "gold_select": "select battle.name",
        "select_candidates": [
            "select battle.name",
            "select battle.name, battle.date",
            "select battle.name, battle.date, battle.bulgarian_commander",
            "select battle.name, battle.date, battle.latin_commander"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle",
            "battle ship",
            "battle death",
            "battle ship death"
        ],
        "align_scores": [
            0.9816799163818359,
            0.00023305698414333165,
            0.0003261837991885841,
            0.0001015098241623491,
            0.00014906059368513525,
            7.434246072079986e-05,
            0.000162446332979016,
            7.781150634400547e-05
        ],
        "align_select": "select battle.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me further information on deaths that contain the word \"East\".",
        "gold_select": "select death.note",
        "select_candidates": [
            "select death.note",
            "select *",
            "select death.caused_by_ship_id, death.note",
            "select death.id, death.note"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death",
            "ship death"
        ],
        "align_scores": [
            0.9917068481445312,
            0.00034634885378181934,
            0.9504836797714233,
            0.00011594299576245248,
            0.00026604405138641596,
            8.267293014796451e-05,
            0.00023086348664946854,
            0.00015986512880772352
        ],
        "align_select": "select death.note",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find battles and results when Bulgarians commander is not'Boril'.",
        "gold_select": "select battle.name, battle.result",
        "select_candidates": [
            "select battle.name, battle.result",
            "select battle.id, battle.name, battle.result",
            "select battle.name, battle.date, battle.bulgarian_commander, battle.result",
            "select battle.name, battle.bulgarian_commander, battle.result"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle",
            "battle ship",
            "battle death"
        ],
        "align_scores": [
            0.26686421036720276,
            0.00011095937225036323,
            0.00035245338222011924,
            9.304241393692791e-05,
            0.0001514908071840182,
            7.418532186420634e-05,
            0.0002054213109659031,
            7.409559475490823e-05
        ],
        "align_select": "select battle.name, battle.result",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "A list of battles, where were they held, and what was the results?",
        "gold_select": "select battle.name, battle.date",
        "select_candidates": [
            "select battle.name, battle.date, battle.result",
            "select battle.id, battle.name, battle.date, battle.result",
            "select battle.id, battle.date, battle.result",
            "select battle.name, battle.bulgarian_commander, battle.latin_commander, battle.result"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle",
        "table_candidates": [
            "battle"
        ],
        "align_scores": [
            0.0012457927223294973,
            0.00012772396439686418,
            0.00034358850098215044,
            0.00010841563198482618,
            0.0004120984231121838,
            0.00012646577670238912,
            0.0003451768134254962,
            0.00010200401447946206
        ],
        "align_select": "select battle.name, battle.date, battle.result",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Shows the ids and names of battles that lead to more than ten people dead in total.",
        "gold_select": "select battle.id, battle.name",
        "select_candidates": [
            "select battle.id, battle.name",
            "select battle.name, battle.id",
            "select battle.date, battle.name",
            "select death.id, battle.name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship death",
        "table_candidates": [
            "battle death"
        ],
        "align_scores": [
            0.9304000735282898,
            0.000114603535621427,
            0.9516103267669678,
            0.0001217183016706258,
            0.000407715531764552,
            6.291769386734813e-05,
            0.002588646486401558,
            0.000101118566817604
        ],
        "align_select": "select battle.id, battle.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "When was the latest transcript release?",
        "gold_select": "select Transcripts.transcript_date",
        "select_candidates": [
            "select max(t10.c6)",
            "select t8.c5",
            "select max(t9.c6)",
            "select t9.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0010906298412010074,
            0.00021476176334545016,
            0.004592782352119684,
            0.0021341019310057163,
            0.001181218889541924,
            0.00022694337530992925,
            0.0047736139968037605,
            0.0022387157659977674
        ],
        "align_select": "select max(t10.c6)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "When was the most recent transcript released?",
        "gold_select": "select Transcripts.transcript_date",
        "select_candidates": [
            "select t10.c5",
            "select t9.c5",
            "select max(t10.c5)",
            "select max(t10.c6)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.0015732275787740946,
            0.002512357197701931,
            0.0015659671043977141,
            0.003934684209525585,
            0.00026416050968691707,
            0.0011177430860698223,
            0.00025042780907824636,
            0.0011894125491380692
        ],
        "align_select": "select t10.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What degree summary is the one with most number of students enrolled?",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_summary_name (or Degree_Programs.degree_summary_description)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Departments Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9936923980712891,
            0.00013334471441339701,
            0.003610471496358514,
            8.003006223589182e-05,
            0.9939379692077637,
            0.00012774954666383564,
            0.991357684135437,
            0.00027867904282175004
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the degree summaries with the largest enrollment.",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment",
            "Departments Student_Enrolment",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9952658414840698,
            6.037344064679928e-05,
            0.0008671989780850708,
            6.55597832519561e-05,
            0.0005039044772274792,
            6.64682884234935e-05,
            0.000165111108799465,
            5.767782568000257e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Summarize degrees that have the most enrollments.",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.department_id, Degree_Programs.degree_summary_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Departments Student_Enrolment",
            "Courses Student_Enrolment",
            "Sections Student_Enrolment"
        ],
        "align_scores": [
            0.9959189295768738,
            6.5110762079712e-05,
            0.000703263736795634,
            6.847169424872845e-05,
            0.00037231671740300953,
            6.853087688796222e-05,
            0.00020499087986536324,
            6.299982487689704e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Name of degree program with highest number of students.",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id",
            "select Degree_Programs.degree_summary_name, Students.current_address_id",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Degree_Programs Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Student_Enrolment_Courses",
            "Degree_Programs Transcripts"
        ],
        "align_scores": [
            0.9959397315979004,
            6.266703712753952e-05,
            0.0006110537215135992,
            6.073087206459604e-05,
            0.00017018723883666098,
            5.739678454119712e-05,
            0.000596959434915334,
            6.311148899840191e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the address that currently has the most students and show me the address and all the lines.",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3",
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.other_address_details, Addresses.line_1, Addresses.line_2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Semesters Students",
            "Addresses Courses Students",
            "Addresses Student_Enrolment",
            "Addresses Sections Students",
            "Addresses Students Transcripts"
        ],
        "align_scores": [
            0.04640017822384834,
            0.00010391561954747885,
            0.20415379106998444,
            9.409770427737385e-05,
            0.007372355088591576,
            9.421631693840027e-05,
            0.512430727481842,
            0.0001224694715347141
        ],
        "align_select": "select Addresses.other_address_details, Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please tell me when the first transcript was released and what information it contains.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t7.c9, Student_Enrolment.degree_program_id0",
            "select t10.c5, t10.c6",
            "select t7.c5, t7.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Addresses Transcripts",
            "Addresses Student_Enrolment_Courses",
            "Addresses",
            "Courses Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0022206634748727083,
            5.555511233978905e-05,
            0.0003749746538233012,
            7.522546366089955e-05,
            0.0029075019992887974,
            5.4793094022898003e-05,
            0.003522338578477502,
            5.497879828908481e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please indicate when can be seen the first transcript and provide additional information.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t8.c5, t9.c6",
            "select t8.c5, t10.c6",
            "select t7.c9, Student_Enrolment.degree_program_id0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Transcripts",
            "Courses Student_Enrolment_Courses",
            "Student_Enrolment",
            "Courses",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.003222815226763487,
            6.94050540914759e-05,
            0.004003392998129129,
            7.24917626939714e-05,
            0.001120919012464583,
            6.91054156050086e-05,
            0.0004384744097478688,
            9.992136619985104e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the earliest transcript released? List the data and details.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id",
            "select Student_Enrolment_Courses.student_course_id, t8.c3",
            "select Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.student_enrolment_id",
            "select Student_Enrolment.degree_program_id, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0004204407159704715,
            8.255634020315483e-05,
            0.0004952417802996933,
            0.00013741935254074633,
            0.00040177564369514585,
            7.96891181380488e-05,
            0.0015002262080088258,
            0.0001011869462672621
        ],
        "align_select": "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When did the transcript with the fewest results occur, and what is its ID?",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t8.c5, t8.c6",
            "select t8.c3, t8.c4",
            "select t8.c5, Student_Enrolment.student_enrolment_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts"
        ],
        "align_scores": [
            0.0003423387825023383,
            8.556072862120345e-05,
            0.0003479438310023397,
            5.728097676183097e-05,
            0.00027824522112496197,
            5.715750012313947e-05,
            0.0003076620923820883,
            7.556482159998268e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the id and date of the transcripts that has the fewest results?",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select Student_Enrolment_Courses.student_course_id, t8.c3",
            "select Student_Enrolment_Courses.course_id, t8.c3",
            "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id",
            "select Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.00038484326796606183,
            7.901113713160157e-05,
            0.0003825155727099627,
            7.42599877412431e-05,
            0.0002078668330796063,
            6.820502312621102e-05,
            0.0001589731255080551,
            7.604770507896319e-05
        ],
        "align_select": "select Student_Enrolment_Courses.student_course_id, t8.c3",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the date of the transcript which has the fewest results. List its id.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t8.c5, t8.c6",
            "select t9.c5, Transcripts.transcript_id",
            "select t10.c5, Transcript_Contents.student_course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Semesters Student_Enrolment_Courses",
            "Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.0002444834972266108,
            6.672613380942494e-05,
            0.00019776629051193595,
            5.214107295614667e-05,
            0.00021170401305425912,
            6.146251689642668e-05,
            0.00015853429795242846,
            6.70958252158016e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What course has most number of enrollment?",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.degree_program_id",
            "select Courses.course_name, Student_Enrolment.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Addresses Courses Sections Student_Enrolment",
            "Courses Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9908581376075745,
            7.45653233025223e-05,
            0.00017345249943900853,
            5.901840268052183e-05,
            0.0002782622177619487,
            7.112349703675136e-05,
            0.0002455614157952368,
            5.597954441327602e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the course id and name with the highest enrollments.",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Sections.course_id, Courses.course_name",
            "select Courses.course_id, Courses.course_name",
            "select Student_Enrolment.degree_program_id, Courses.course_name",
            "select Departments.department_name, Courses.course_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Sections Student_Enrolment"
        ],
        "align_scores": [
            0.06454387307167053,
            0.00010165182902710512,
            0.9937863349914551,
            0.00010068134724861011,
            0.0005767676047980785,
            9.157753811450675e-05,
            0.00038561856490559876,
            6.213950109668076e-05
        ],
        "align_select": "select Courses.course_id, Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What course had the most number of enrollment?",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.degree_program_id",
            "select Courses.course_name, Student_Enrolment.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Addresses Courses Sections Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses Departments Student_Enrolment",
            "Courses Semesters Student_Enrolment",
            "Courses Departments Sections Student_Enrolment"
        ],
        "align_scores": [
            0.9858119487762451,
            7.504883978981525e-05,
            0.00017843030218500644,
            6.226993718883023e-05,
            0.00024234327429439873,
            7.504969835281372e-05,
            0.00021220803319010884,
            5.7511086197337136e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names and IDs of courses having two sections or less?",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.7110234498977661,
            9.509808296570554e-05,
            0.9889066219329834,
            8.547127799829468e-05,
            0.0004917007754556835,
            7.74335494497791e-05,
            0.00036595738492906094,
            7.947071571834385e-05
        ],
        "align_select": "select Courses.course_name, Courses.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the names and ids of courses with two or fewer sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections"
        ],
        "align_scores": [
            0.9884465932846069,
            0.00011586231994442642,
            0.001476438483223319,
            0.0001007906612358056,
            0.9932752847671509,
            0.00010490527347428724,
            0.00039326990372501314,
            8.726883970666677e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the name and id of courses in which there are two or less sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections"
        ],
        "align_scores": [
            0.9786979556083679,
            9.552734991302714e-05,
            0.0016994713805615902,
            8.386637637158856e-05,
            0.9939872026443481,
            9.36695869313553e-05,
            0.0003974443825427443,
            8.195330883609131e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of courses with no more than two sections and return their IDs",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Departments.department_id",
            "select Courses.course_name, Courses.course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections"
        ],
        "align_scores": [
            0.9836452007293701,
            9.607162792235613e-05,
            0.1858137547969818,
            9.494485129835084e-05,
            0.0002946299791801721,
            9.234130993718281e-05,
            0.9799976944923401,
            9.453272650716826e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the date and id of the transcripts that has more or equal to two courses listed?",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t14.c3, t14.c0",
            "select t14.c3, t14.c4",
            "select t12.c5, t12.c0",
            "select t14.c5, t14.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Courses Student_Enrolment_Courses",
            "Courses Transcripts",
            "Courses Student_Enrolment",
            "Semesters Student_Enrolment_Courses",
            "Courses Sections",
            "Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.0002419113297946751,
            6.28433408564888e-05,
            0.0009607651736587286,
            6.173472502268851e-05,
            0.0002649485250003636,
            6.439564458560199e-05,
            0.0002993253874592483,
            6.511007813969627e-05
        ],
        "align_select": "select t14.c3, t14.c0",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "When is transcripts for two or more courses, what id does it contain?.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select Student_Enrolment_Courses.course_id",
            "select Student_Enrolment_Courses.student_course_id",
            "select Student_Enrolment.degree_program_id",
            "select Student_Enrolment.student_enrolment_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Transcripts",
            "Courses Student_Enrolment_Courses",
            "Semesters Student_Enrolment",
            "Semesters Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.9863720536231995,
            0.0014209299115464091,
            0.8342275619506836,
            0.0012281149392947555,
            0.9910727143287659,
            0.002443933393806219,
            0.9876807928085327,
            0.0011019669473171234
        ],
        "align_select": "select Student_Enrolment_Courses.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the date and ID of the transcript with two or more courses.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t9.c5, Transcripts.transcript_id",
            "select t10.c5, t10.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Courses Student_Enrolment_Courses",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.00027869443874806166,
            9.738545486470684e-05,
            0.000422934623202309,
            8.679230813868344e-05,
            0.00043407941120676696,
            9.917523857438937e-05,
            0.0008559161797165871,
            5.563734157476574e-05
        ],
        "align_select": "select t10.c5, Transcript_Contents.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What's the course that has the most students?",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.degree_program_id",
            "select Courses.course_name, Student_Enrolment.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Sections Students",
            "Courses Sections Student_Enrolment",
            "Courses Sections Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Courses Students",
            "Courses Semesters Students Student_Enrolment",
            "Courses Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.9932273030281067,
            8.193315443350002e-05,
            0.0002597366110421717,
            6.0883026890223846e-05,
            0.0006577157182618976,
            7.490549614885822e-05,
            0.0003820833517238498,
            6.303654663497582e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code of the course with the highest number of students?",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Sections.course_id",
            "select Sections.course_id, Student_Enrolment.semester_id",
            "select Courses.course_name",
            "select Departments.department_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Sections Students Student_Enrolment",
            "Sections Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Courses Sections Students Student_Enrolment",
            "Courses Sections Students",
            "Sections Students",
            "Departments Sections Students Student_Enrolment",
            "Degree_Programs Sections Students Student_Enrolment"
        ],
        "align_scores": [
            0.993747353553772,
            9.177011816063896e-05,
            0.00025624086265452206,
            7.511601143050939e-05,
            0.3854300081729889,
            8.67186754476279e-05,
            0.0009089433588087559,
            7.702805305598304e-05
        ],
        "align_select": "select Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many times does a course appear in different transcripts the most times and what is that course's enrollment id?",
        "gold_select": "select count(*), Transcript_Contents.student_course_id",
        "select_candidates": [
            "select Departments.department_id, Departments.department_name",
            "select Sections.course_id, Sections.section_name",
            "select Departments.department_name, Departments.department_description",
            "select Departments.department_id, Departments.department_description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcript_Contents",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Student_Enrolment_Courses",
            "Transcript_Contents",
            "Semesters Student_Enrolment",
            "Departments Student_Enrolment",
            "Student_Enrolment_Courses",
            "Semesters Student_Enrolment_Courses",
            "Transcripts"
        ],
        "align_scores": [
            0.00037514345603995025,
            0.0001238056574948132,
            0.00030099201831035316,
            0.00014208460925146937,
            0.0003468879731371999,
            0.00018476218974683434,
            0.00027697422774508595,
            0.00010534715693211183
        ],
        "align_select": "select Departments.department_id, Departments.department_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many times a course appears in different transcripts the most, and what is that course\u2019s enrollment ID?",
        "gold_select": "select count(*), Transcript_Contents.student_course_id",
        "select_candidates": [
            "select Student_Enrolment.degree_program_id, Student_Enrolment.semester_id",
            "select Student_Enrolment_Courses.course_id, t10.c2",
            "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id",
            "select Student_Enrolment_Courses.course_id, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcript_Contents",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Student_Enrolment Transcript_Contents",
            "Semesters Student_Enrolment",
            "Student_Enrolment Student_Enrolment_Courses",
            "Student_Enrolment",
            "Departments Student_Enrolment",
            "Student_Enrolment Sections"
        ],
        "align_scores": [
            0.00043381130672059953,
            0.00011863039981108159,
            0.016679761931300163,
            0.0005406108102761209,
            0.0006481785676442087,
            0.00018127837392967194,
            0.0003274393966421485,
            9.034532558871433e-05
        ],
        "align_select": "select Student_Enrolment.degree_program_id, Student_Enrolment.semester_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "I'm looking for all the addresses on line one and line two.",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.other_address_details",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3",
            "select Addresses.line_1, Addresses.line_2 - Addresses.other_address_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9949508905410767,
            6.415464304154739e-05,
            0.00017559817933943123,
            5.758363477070816e-05,
            0.00027407892048358917,
            5.9093079471495e-05,
            0.00029851263388991356,
            7.738593558315188e-05
        ],
        "align_select": "select Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please provide me with all the addresses including line one and two.",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3",
            "select Addresses.line_1, Addresses.line_2, Addresses.other_address_details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9508710503578186,
            8.184725447790697e-05,
            0.00017565980670042336,
            7.559235382359475e-05,
            0.00044335960410535336,
            6.590026896446943e-05,
            0.00024470294010825455,
            5.941776908002794e-05
        ],
        "align_select": "select Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Enter the addresses that include the first line followed by the second line.",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.other_address_details",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id",
            "select Addresses.line_1, Addresses.line_2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9796072244644165,
            0.550295352935791,
            0.0001988136937143281,
            0.000136231305077672,
            0.059553828090429306,
            0.017340952530503273,
            0.9926655888557434,
            0.00043274773634038866
        ],
        "align_select": "select Addresses.other_address_details",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are lines 1 and 2 of all addresses?",
        "gold_select": "select Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select distinct Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses"
        ],
        "align_scores": [
            0.9945023059844971,
            8.74763063620776e-05,
            0.00017261120956391096,
            7.005724910413846e-05,
            0.0014134766533970833,
            8.054816134972498e-05,
            0.00019597887876443565,
            6.631697760894895e-05
        ],
        "align_select": "select Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Please list all the sections and their relevant details here.",
        "gold_select": "select Sections.section_name, Sections.section_description",
        "select_candidates": [
            "select Sections.section_id, Sections.section_name, Sections.section_description, Sections.other_details",
            "select Sections.section_name, Sections.section_description, Sections.other_details",
            "select Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details",
            "select Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections"
        ],
        "align_scores": [
            0.0012953589903190732,
            0.00027124278130941093,
            0.9757866859436035,
            0.0017671013483777642,
            0.0004423993523232639,
            0.0001103260219679214,
            0.00023802326177246869,
            0.00013428587408270687
        ],
        "align_select": "select Sections.section_name, Sections.section_description, Sections.other_details",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the information on the department that uses the word \"computer\"?",
        "gold_select": "select Departments.department_description",
        "select_candidates": [
            "select Departments.department_description",
            "select Departments.other_details",
            "select t2.c4",
            "select t2.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments",
        "table_candidates": [
            "Departments",
            "Courses Departments",
            "Departments Degree_Programs",
            "Departments Transcripts",
            "Addresses Departments",
            "Departments Sections",
            "Departments Student_Enrolment"
        ],
        "align_scores": [
            0.991934061050415,
            0.00010971721349051222,
            0.981648325920105,
            0.00011397633352316916,
            0.000813647173345089,
            7.221665873657912e-05,
            0.0007111125160008669,
            7.130006270017475e-05
        ],
        "align_select": "select Departments.department_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The department which has the substring 'computers' should be described.",
        "gold_select": "select Departments.department_description",
        "select_candidates": [
            "select Departments.department_description",
            "select t2.c5, Departments.department_description",
            "select Departments.department_id, Departments.department_description",
            "select Departments.department_name, Departments.department_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Departments",
        "table_candidates": [
            "Departments",
            "Departments Transcripts",
            "Courses Departments",
            "Departments Student_Enrolment_Courses",
            "Addresses Departments",
            "Departments Student_Enrolment"
        ],
        "align_scores": [
            0.9952722191810608,
            0.00010732602822827175,
            0.00025579784414730966,
            6.588242104044184e-05,
            0.00014620386355090886,
            6.963244959479198e-05,
            0.0001798816374503076,
            6.72488022246398e-05
        ],
        "align_select": "select Departments.department_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For everybody enrolled in a bachelors program, what are the full names?",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.current_address_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.current_address_id, Students.middle_name, Students.last_name",
            "select distinct Students.first_name, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Departments Students Student_Enrolment",
            "Addresses Degree_Programs Students Student_Enrolment",
            "Addresses Students Student_Enrolment"
        ],
        "align_scores": [
            0.989685595035553,
            0.00012217831681482494,
            0.0001887857506517321,
            7.12185210431926e-05,
            0.0003440488362684846,
            7.742158049950376e-05,
            0.007434035651385784,
            6.452042725868523e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please enter the mobile number of the student named Timmy Ward below.",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.cell_mobile_number, Students.date_first_registered",
            "select Students.cell_mobile_number, Students.ssn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment",
            "Addresses Students Student_Enrolment",
            "Semesters Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9936019778251648,
            0.00011552099749678746,
            0.00019322882872074842,
            6.25099492026493e-05,
            0.0001803267514333129,
            6.487574137281626e-05,
            0.00019499285554047674,
            7.179177191574126e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which cell number belongs to the student Timothy Ward?",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select t66.c6",
            "select t.c6",
            "select t62.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses",
            "Semesters Students",
            "Students Student_Enrolment",
            "Addresses Students",
            "Courses Students",
            "Sections Students",
            "Degree_Programs Students"
        ],
        "align_scores": [
            0.994051992893219,
            0.00011213589459657669,
            0.001563387457281351,
            0.00010598295193631202,
            0.9049476981163025,
            0.0001399212924297899,
            0.0016759192803874612,
            0.0001114441838581115
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the cellphone number of the student called Timothy Ward.",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.cell_mobile_number, Students.date_first_registered",
            "select Students.cell_mobile_number, Students.ssn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.993821382522583,
            0.00012460655125323683,
            0.0001750982628436759,
            6.0027949075447395e-05,
            0.00014901996473781765,
            6.111354741733521e-05,
            0.00020396438776515424,
            7.065624959068373e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Full name of students who register earliest.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.current_address_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.current_address_id, Students.first_name, Students.last_name",
            "select Students.current_address_id, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment"
        ],
        "align_scores": [
            0.9932790398597717,
            7.277808617800474e-05,
            0.00021941379236523062,
            7.884450315032154e-05,
            0.00022877853189129382,
            7.823455962352455e-05,
            0.00022801700106356293,
            9.158958710031584e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "First name, middle name, surname - list those students who came first to be a student on this day.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students"
        ],
        "align_scores": [
            0.9673424363136292,
            0.9518992304801941,
            0.0003483816981315613,
            0.0002590495569165796,
            0.026557933539152145,
            0.012669792398810387,
            0.9673424363136292,
            0.9518992304801941
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "On which date was the first transcript released? Please give some more information on this.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5",
            "select t10.c5",
            "select t13.c5",
            "select t12.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Student_Enrolment",
            "Courses"
        ],
        "align_scores": [
            0.0014092138735577464,
            7.501107029384002e-05,
            0.0013367037754505873,
            7.40653631510213e-05,
            0.0014632458332926035,
            7.395879947580397e-05,
            0.0013660404365509748,
            7.40557661629282e-05
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When was the earliest transcript released, and what Details?.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t7.c9, Student_Enrolment.degree_program_id3",
            "select t7.c9, Student_Enrolment.degree_program_id2",
            "select t12.c5, t12.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.0024399443063884974,
            6.116672739153728e-05,
            0.0004794089181814343,
            8.387797424802557e-05,
            0.0004573440528474748,
            8.410479495069012e-05,
            0.0027967628557235003,
            6.319260137388483e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What's the earliest available transcript release, and can you tell me more information about it?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id",
            "select Transcripts.transcript_id, Transcripts.other_details",
            "select t9.c5, t9.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.01875646784901619,
            7.176801591413096e-05,
            0.001801924081519246,
            8.24212038423866e-05,
            0.004318951163440943,
            8.552035433240235e-05,
            0.031625211238861084,
            7.039731281111017e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When was the earliest transcript Released, and what is Details could help me please?.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t9.c5, t9.c6",
            "select t7.c9, Student_Enrolment.degree_program_id2",
            "select t10.c5, t10.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.0030769184231758118,
            6.0405622207326815e-05,
            0.004294931888580322,
            5.97207726968918e-05,
            0.00037625947152264416,
            8.512850035913289e-05,
            0.003995876759290695,
            6.109728565206751e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When was the earliest transcript released, and what details can you tell me?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t8.c5, t9.c6",
            "select t7.c9, Student_Enrolment.degree_program_id0",
            "select t12.c5, t12.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses",
            "Semesters Student_Enrolment",
            "Addresses Transcripts",
            "Semesters Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.011450188234448433,
            6.152503920020536e-05,
            0.009881041944026947,
            6.077675425331108e-05,
            0.00035461544757708907,
            7.616630318807438e-05,
            0.014888351783156395,
            6.129156099632382e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When were transcripts released first time, and what details could I know?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t8.c5, t9.c6",
            "select t7.c9, Student_Enrolment.degree_program_id0",
            "select t8.c5, t10.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Addresses Transcripts",
            "Courses Student_Enrolment_Courses",
            "Semesters Student_Enrolment",
            "Student_Enrolment",
            "Semesters Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.004123573191463947,
            0.001139866653829813,
            0.005449902731925249,
            0.0021630546543747187,
            0.0004483406082727015,
            0.000512646627612412,
            0.002327828900888562,
            0.001105087110772729
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When was the earliest transcript released? and what details can you tell me?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t8.c5, t9.c6",
            "select t7.c9, Student_Enrolment.degree_program_id0",
            "select t10.c5, t10.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.01760767214000225,
            6.112584378570318e-05,
            0.014982638880610466,
            6.131261034170166e-05,
            0.0003548117820173502,
            7.505420944653451e-05,
            0.02350412867963314,
            6.080904495320283e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When was the earliest transcript released and what details can you tell me?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t7.c9, Student_Enrolment.degree_program_id0",
            "select t8.c5, t9.c6",
            "select t12.c5, t12.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Courses Student_Enrolment_Courses",
            "Addresses Transcripts",
            "Semesters Student_Enrolment_Courses",
            "Semesters Student_Enrolment",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.013683491386473179,
            6.036733611836098e-05,
            0.0003399162960704416,
            7.349918450927362e-05,
            0.011288904584944248,
            6.020303044351749e-05,
            0.01696408912539482,
            6.002176814945415e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When is the earliest release of a transcription, and what details can you tell me?",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select t8.c5, t8.c6",
            "select t7.c9, Student_Enrolment.degree_program_id0",
            "select t8.c5, t9.c6",
            "select t8.c5, t10.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses",
            "Student_Enrolment",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.008420726284384727,
            6.500920426333323e-05,
            0.0004139953525736928,
            7.968904537847266e-05,
            0.012026689946651459,
            6.45972540951334e-05,
            0.0049110278487205505,
            6.18275735178031e-05
        ],
        "align_select": "select t8.c5, t8.c6",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please tell me which other information you know about the students in reverse alphabetical order.",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select Students.other_student_details",
            "select Students.last_name, Students.first_name",
            "select Student_Enrolment_Courses.course_id, Students.permanent_address_id",
            "select Student_Enrolment_Courses.course_id, Students.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students"
        ],
        "align_scores": [
            0.9863905906677246,
            0.9863905906677246,
            0.0004888906260021031,
            0.0004888906260021031,
            0.0002287600073032081,
            0.0002287600073032081,
            0.00022055566660128534,
            0.00022055566660128534
        ],
        "align_select": "select Students.other_student_details",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What information do you have on the students that are in reverse alphabetical order please?",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select *",
            "select Students.current_address_id3, Students.current_address_id4",
            "select Students.last_name, Students.first_name",
            "select *, Students.first_name, Students.middle_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9834820032119751,
            0.9661091566085815,
            0.0019621404353529215,
            0.0006318303057923913,
            0.002660438185557723,
            0.00898860115557909,
            0.00030071267974562943,
            0.00024168286472558975
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you give me some more information about the students in reverse alphabetical order?",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select *",
            "select Students.current_address_id3, Students.current_address_id4",
            "select Student_Enrolment_Courses.course_id, Students.first_name, Students.last_name",
            "select Student_Enrolment_Courses.course_id, Students.first_name, Students.middle_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment",
            "Semesters Students Student_Enrolment_Courses",
            "Semesters Students"
        ],
        "align_scores": [
            0.9782649278640747,
            0.9782649278640747,
            0.0006931010284461081,
            0.0006931010284461081,
            0.00018256423936691135,
            0.00018256423936691135,
            0.0001806609652703628,
            0.0001806609652703628
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you provide more information on the students in reverse alphabetical order?",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select *",
            "select Student_Enrolment_Courses.course_id, Students.first_name, Students.middle_name",
            "select Student_Enrolment_Courses.course_id, Students.first_name, Students.last_name",
            "select Students.current_address_id3, Students.current_address_id4"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment",
            "Semesters Students",
            "Semesters Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9307539463043213,
            0.000367606378858909,
            0.00016409842646680772,
            0.0001512575545348227,
            0.0001642607821850106,
            0.00014178306446410716,
            0.0007229832117445767,
            0.00011103462747996673
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Can you tell me more information about students in reverse alphabetical order?",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select *",
            "select Students.last_name, Students.first_name",
            "select Students.current_address_id3, Students.current_address_id4",
            "select Student_Enrolment_Courses.course_id, Students.first_name, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students",
            "Courses Students"
        ],
        "align_scores": [
            0.9736781120300293,
            0.004055685829371214,
            0.0018058116547763348,
            0.00015335022180806845,
            0.0008805856923572719,
            0.00015311804600059986,
            0.000161365358508192,
            0.0001050779756042175
        ],
        "align_select": "select *",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show the names of each course with less than two sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.course_id, Sections.section_name",
            "select Courses.course_name, Sections.section_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.9951634407043457,
            0.00013349381333682686,
            0.00022880600590724498,
            6.0687911172863096e-05,
            0.0001276470284210518,
            5.464141577249393e-05,
            0.0005196604761295021,
            6.737177318427712e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "In which courses have less than two sections? And their ids?",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Sections.course_id, Sections.section_name",
            "select Courses.course_name, Sections.course_id",
            "select Sections.course_id, Courses.course_description",
            "select Sections.course_id, Courses.course_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Sections",
            "Courses Sections",
            "Departments Sections",
            "Courses Departments Sections",
            "Degree_Programs Sections",
            "Addresses Courses Sections",
            "Courses Degree_Programs Sections",
            "Courses Departments"
        ],
        "align_scores": [
            0.006116937845945358,
            9.87206440186128e-05,
            0.2626529335975647,
            0.00010434319847263396,
            0.0006581242778338492,
            9.23874686122872e-05,
            0.007504178211092949,
            0.00010898563050432131
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of every course where there is fewer than two section.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_name",
            "select Courses.course_name, Sections.course_id, Sections.section_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.9943245053291321,
            0.00015348012675531209,
            0.0003224023967050016,
            6.762132397852838e-05,
            0.0011823039967566729,
            7.215477671707049e-05,
            0.00015905471809674054,
            5.801011138828471e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who are the people studying bachelor degrees?",
        "gold_select": "select distinct Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select distinct Student_Enrolment.degree_program_id, Student_Enrolment.semester_id",
            "select distinct Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id",
            "select Student_Enrolment_Courses.course_id",
            "select distinct Student_Enrolment_Courses.course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Students Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students Student_Enrolment_Courses",
            "Degree_Programs Students",
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Students Transcripts",
            "Departments Degree_Programs Students Student_Enrolment_Courses",
            "Courses Degree_Programs Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.00016123832028824836,
            8.034417987801135e-05,
            0.00017394406313542277,
            7.019514305284247e-05,
            0.001720308791846037,
            0.005619194358587265,
            0.003590939799323678,
            0.00034174727625213563
        ],
        "align_select": "select distinct Student_Enrolment.degree_program_id, Student_Enrolment.semester_id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who is the eldest graduated student?.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Student_Enrolment_Courses.course_id",
            "select Students.current_address_id3",
            "select Student_Enrolment_Courses.student_course_id",
            "select Students.current_address_id, Students.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment_Courses",
            "Students",
            "Semesters Students Student_Enrolment_Courses",
            "Students Student_Enrolment",
            "Sections Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment",
            "Students Transcripts",
            "Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.005347713362425566,
            6.99767260812223e-05,
            0.001620783470571041,
            6.538708112202585e-05,
            0.004606788046658039,
            6.875120016047731e-05,
            0.00027332425815984607,
            6.299526285147294e-05
        ],
        "align_select": "select Student_Enrolment_Courses.course_id",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which are the sections in reverse alphabetical order?",
        "gold_select": "select Sections.section_name",
        "select_candidates": [
            "select Sections.section_name",
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_id, Sections.section_name",
            "select Sections.course_id, Sections.section_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections"
        ],
        "align_scores": [
            0.9952589869499207,
            0.9952589869499207,
            0.0012651532888412476,
            0.0012651532888412476,
            0.00025055199512280524,
            0.00025055199512280524,
            0.00023886650160420686,
            0.00023886650160420686
        ],
        "align_select": "select Sections.section_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What semester is the highest percentage of students enrolled in? And show the ID.",
        "gold_select": "select Semesters.semester_name, Semesters.semester_id",
        "select_candidates": [
            "select Semesters.semester_name, Student_Enrolment.semester_id",
            "select Student_Enrolment.degree_program_id, Semesters.semester_name",
            "select Student_Enrolment.degree_program_id, Student_Enrolment.semester_id",
            "select Semesters.semester_name, Student_Enrolment.degree_program_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment",
            "Departments Semesters Student_Enrolment",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9864343404769897,
            6.324915739241987e-05,
            0.0019630156457424164,
            7.444625225616619e-05,
            0.0012888525379821658,
            6.726662104483694e-05,
            0.0006078708101995289,
            7.449660188285634e-05
        ],
        "align_select": "select Semesters.semester_name, Student_Enrolment.semester_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the phone number for Timmothy Ward?",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.cell_mobile_number, Students.last_name",
            "select Students.cell_mobile_number, Students.date_first_registered"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Addresses Students",
            "Students Student_Enrolment_Courses",
            "Students Student_Enrolment",
            "Semesters Students",
            "Degree_Programs Students",
            "Sections Students",
            "Courses Students"
        ],
        "align_scores": [
            0.9929123520851135,
            0.00011419379734434187,
            0.000179788374225609,
            7.751998782623559e-05,
            0.000129318970721215,
            6.266428681556135e-05,
            0.0001448926341254264,
            6.008666241541505e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the phone number of Timmothy Ward.",
        "gold_select": "select Students.cell_mobile_number",
        "select_candidates": [
            "select Students.cell_mobile_number",
            "select Students.cell_mobile_number, Students.email_address",
            "select Students.cell_mobile_number, Students.last_name",
            "select Students.cell_mobile_number, Students.date_first_registered"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Addresses Students",
            "Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students",
            "Degree_Programs Students",
            "Sections Students",
            "Courses Students"
        ],
        "align_scores": [
            0.9928007125854492,
            9.659119677962735e-05,
            0.00014668310177512467,
            6.045525151421316e-05,
            0.0001301166630582884,
            5.851855894434266e-05,
            0.00014652012032456696,
            5.5757111113052815e-05
        ],
        "align_select": "select Students.cell_mobile_number",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What does the section h describe?",
        "gold_select": "select Sections.section_description",
        "select_candidates": [
            "select Sections.section_description",
            "select Sections.section_description, Sections.section_name",
            "select Sections.section_description, Sections.other_details",
            "select Sections.section_name, Sections.section_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections",
            "Departments Sections",
            "Degree_Programs Sections",
            "Addresses Courses Departments Sections",
            "Addresses Sections",
            "Addresses Courses Sections",
            "Addresses Departments Sections",
            "Addresses Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.9958547949790955,
            7.412422564812005e-05,
            0.00017670974193606526,
            5.8966310461983085e-05,
            0.0002153210953110829,
            5.884446727577597e-05,
            0.00017092149937525392,
            6.027506969985552e-05
        ],
        "align_select": "select Sections.section_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Display all the classifications for all mathematical classes.",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select distinct Transcripts.other_details",
            "select distinct t10.c2",
            "select distinct Student_Enrolment_Courses.student_enrolment_id",
            "select distinct Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Transcripts",
            "Courses Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.22977571189403534,
            0.0004994063638150692,
            0.0008014526683837175,
            0.00027079679421149194,
            0.000201832692255266,
            9.856035467237234e-05,
            0.00010664210276445374,
            7.505807298002765e-05
        ],
        "align_select": "select distinct Transcripts.other_details",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the date and ID of the transcript with two or more course results.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t12.c5, t12.c0",
            "select t9.c5, Transcripts.transcript_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.0002748718543443829,
            9.900704026222229e-05,
            0.00038380787009373307,
            9.130006947088987e-05,
            0.0003602296346798539,
            5.7926310546463355e-05,
            0.0005076622474007308,
            9.016631520353258e-05
        ],
        "align_select": "select t10.c5, Transcript_Contents.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the dates and identification numbers of transcripts with at least two grades.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t9.c5, Transcripts.transcript_id",
            "select t8.c5, t8.c6",
            "select t12.c5, t12.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.00021476503752637655,
            8.449653250863776e-05,
            0.000505940755829215,
            8.199912554118782e-05,
            0.0019495291635394096,
            5.395816333475523e-05,
            0.0005126461619511247,
            5.5715870985295624e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the date and ID of the transcript with minimum two course results.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t9.c5, Transcripts.transcript_id",
            "select t12.c5, t12.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses Transcripts",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.00040495124994777143,
            7.668593025300652e-05,
            0.0002938977559097111,
            8.468578744214028e-05,
            0.0005678888410329819,
            8.517900278093293e-05,
            0.00031939020846039057,
            5.7169214414898306e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the first first name of student(s) with permanent Haitian address or who's mobile has number 09700166582",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select Students.first_name, Students.last_name",
            "select Students.student_id, Students.first_name",
            "select Students.first_name, Students.middle_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Courses Students",
            "Addresses Semesters Students"
        ],
        "align_scores": [
            0.5184049606323242,
            0.49342143535614014,
            0.00016824092017486691,
            0.0001723259047139436,
            0.00018845753220375627,
            0.00011298026947770268,
            0.0002248790260637179,
            0.00015300435188692063
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all the TV channels in countries where there are three or more TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.series_name",
            "select TV_Channel.id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.7111944556236267,
            8.804033859632909e-05,
            0.00014696437574457377,
            6.141899211797863e-05,
            0.0004551186866592616,
            6.042642780812457e-05,
            0.7011954188346863,
            0.00013221056724432856
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all shares for the TV series and their minima and maxima.",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select TV_series.Share, min(TV_series.Share), max(TV_series.Share)",
            "select TV_series.Share, minima(TV_series.Share), maxima(TV_series.Share)",
            "select TV_series.Share, minima(TV_series.Share), max(TV_series.Share)",
            "select sum(TV_series.Share), min(TV_series.Share), max(TV_series.Share)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9939391613006592,
            0.9939391613006592,
            0.001394492108374834,
            0.001394492108374834,
            0.0005637833382934332,
            0.0005637833382934332,
            0.0009029459906741977,
            0.0009029459906741977
        ],
        "align_select": "select TV_series.Share, min(TV_series.Share), max(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Can you list the highest and lowest percentage achieved for TV show?",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select max(TV_series.Rating), min(TV_series.Rating)",
            "select max(TV_series.Share), min(TV_series.Share)",
            "select max(TV_series.Rating), min(TV_series.Share)",
            "select max(TV_series.18_49_Rating_Share), min(TV_series.18_49_Rating_Share)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9943671822547913,
            0.0005938668618910015,
            0.9942811727523804,
            0.0005161283770576119,
            0.01128170546144247,
            0.0002998349373228848,
            0.992706835269928,
            0.0009430458885617554
        ],
        "align_select": "select max(TV_series.Rating), min(TV_series.Rating)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the smallest and largest share for the TV series?",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select min(TV_series.Share), max(TV_series.Share)",
            "select max(TV_series.Share), min(TV_series.Share)",
            "select TV_series.Share, min(TV_series.Share), max(TV_series.Share)",
            "select TV_series.Share, min(TV_series.Rating), max(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9946784973144531,
            0.00015661545330658555,
            0.9948810338973999,
            0.00019623205298557878,
            0.0002673790149856359,
            6.382086576195434e-05,
            0.0001307577040279284,
            6.693426985293627e-05
        ],
        "align_select": "select min(TV_series.Share), max(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What's the highest and lowest percentage that could be for TV show?",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select max(TV_series.Share), min(TV_series.Share)",
            "select max(TV_series.Rating), min(TV_series.Rating)",
            "select max(TV_series.Rating), min(TV_series.Share)",
            "select max(TV_series.18_49_Rating_Share), min(TV_series.18_49_Rating_Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9801918268203735,
            0.9742587208747864,
            0.98371821641922,
            0.9753730297088623,
            0.0017103186110034585,
            0.002173889894038439,
            0.9796859622001648,
            0.9694442749023438
        ],
        "align_select": "select max(TV_series.Share), min(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the highest and lowest percentage for the TV show?",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select max(TV_series.Rating), min(TV_series.Rating)",
            "select max(TV_series.Share), min(TV_series.Share)",
            "select max(TV_series.Rating), min(TV_series.Share)",
            "select max(TV_series.18_49_Rating_Share), min(TV_series.18_49_Rating_Share)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9945421814918518,
            0.0005261417245492339,
            0.9942584037780762,
            0.0005796548794023693,
            0.028542686253786087,
            0.00033459102269262075,
            0.9933978319168091,
            0.0009319853852503002
        ],
        "align_select": "select max(TV_series.Rating), min(TV_series.Rating)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the names and IDs of all TV channels with 3 or more TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.id",
            "select TV_Channel.id, TV_Channel.series_name",
            "select TV_Channel.Country, TV_Channel.id",
            "select Cartoon.Title, TV_Channel.id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.00028036010917276144,
            7.761888991808519e-05,
            0.00029987184097990394,
            7.326015474973246e-05,
            0.0002645448548719287,
            6.440019205911085e-05,
            0.01787470281124115,
            9.488694195169955e-05
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the code for each television channel that has a minimum of 3 channels?",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.Hight_definition_TV",
            "select TV_Channel.series_name",
            "select TV_Channel.Country",
            "select TV_Channel.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.8003774285316467,
            0.000130136264488101,
            0.0004663325671572238,
            7.465419912477955e-05,
            0.0036264187656342983,
            8.065268775681034e-05,
            0.08240332454442978,
            0.00010350185766583309
        ],
        "align_select": "select TV_Channel.Hight_definition_TV",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the ids of all channels that have three or more TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Hight_definition_TV",
            "select TV_Channel.id, TV_Channel.Pay_per_view_PPV",
            "select TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9493066668510437,
            0.00010275290696881711,
            0.00033240331686101854,
            9.790791955310851e-05,
            0.0003759815590456128,
            7.100572111085057e-05,
            0.00022466106747742742,
            6.312707409961149e-05
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the language of the fewest channels and how many channels use it?",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country",
            "select TV_Channel.series_name, count(*)",
            "select TV_Channel.Country, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9953166246414185,
            9.562449849909171e-05,
            0.00011131163773825392,
            6.033366662450135e-05,
            0.0006681723170913756,
            6.531697727041319e-05,
            0.0006726162973791361,
            6.836651300545782e-05
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the Top three television programs and their episode ratings.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.id, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Episode",
            "select TV_series.Rating, TV_series.Air_Date"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.0014758361503481865,
            6.759430834790692e-05,
            0.6414051055908203,
            6.395275704562664e-05,
            0.0009926420170813799,
            7.536174962297082e-05,
            0.0003044948389288038,
            6.580838817171752e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the top three TV series, their Episode and rating.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Air_Date, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9863815307617188,
            6.205718091223389e-05,
            0.0012315964559093118,
            7.127429853426293e-05,
            0.003461910178884864,
            6.47885026410222e-05,
            0.0015566545771434903,
            6.853976083220914e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the top three TV shows' ratings and list their episodes.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Rating, TV_series.Episode",
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Rating, TV_series.Episode",
            "select TV_series.Air_Date, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9947156310081482,
            6.809181650169194e-05,
            0.11184507608413696,
            6.59578581689857e-05,
            0.0002186365454690531,
            7.059832569211721e-05,
            0.0022939404007047415,
            6.77423449815251e-05
        ],
        "align_select": "select TV_series.Rating, TV_series.Episode",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What countries has the most TV channels and how many does it have?",
        "gold_select": "select TV_Channel.Country, count(*)",
        "select_candidates": [
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Country, count(*), TV_Channel.Language",
            "select TV_Channel.series_name, count(*)",
            "select TV_Channel.Country.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9948786497116089,
            0.00011621518206084147,
            0.00013781670713797212,
            6.411366484826431e-05,
            0.0004484480887185782,
            6.719795783283189e-05,
            0.004098801873624325,
            7.298409764189273e-05
        ],
        "align_select": "select TV_Channel.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the country with most TV channels, and what is their exact number?",
        "gold_select": "select TV_Channel.Country, count(*)",
        "select_candidates": [
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Country, count(*), TV_Channel.Language",
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Country.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9949082732200623,
            0.00010637418017722666,
            0.0001414781145285815,
            6.146245868876576e-05,
            0.9949082732200623,
            0.00010637418017722666,
            0.0017706628423184156,
            6.799241964472458e-05
        ],
        "align_select": "select TV_Channel.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the largest and smallest share of TV series.",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select max(TV_series.Share), min(TV_series.Share)",
            "select TV_series.Share, max(TV_series.Share), min(TV_series.Share)",
            "select TV_series.Share, max(TV_series.Share)",
            "select max(TV_series.Viewers_m), min(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9947466254234314,
            7.798503065714613e-05,
            0.0001602251286385581,
            6.46767730358988e-05,
            0.0002530825149733573,
            8.234955021180212e-05,
            0.002289628144353628,
            9.660316572990268e-05
        ],
        "align_select": "select max(TV_series.Share), min(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the smallest and largest share of TV series.",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select min(TV_series.Share), max(TV_series.Share)",
            "select TV_series.Share, min(TV_series.Share), max(TV_series.Share)",
            "select max(TV_series.Share), min(TV_series.Share)",
            "select TV_series.Share, min(TV_series.Rating), max(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9948679208755493,
            0.0002559029671829194,
            0.00020526742446236312,
            7.245290908031166e-05,
            0.9951193332672119,
            0.0002447265142109245,
            0.0001116288112825714,
            7.506844849558547e-05
        ],
        "align_select": "select min(TV_series.Share), max(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many cartoons did Joseph Kuhr write?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.Written_by",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.9910887479782104,
            0.00042065841262228787,
            0.00023769533436279744,
            0.0008957504760473967,
            0.0002598431019578129,
            0.00017750549886841327,
            0.00022320002608466893,
            0.0004696871619671583
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cartoones has Joseph Kuhr written?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Written_by",
            "select count(*), Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9844829440116882,
            0.00043946155346930027,
            0.00025936070596799254,
            0.0002479341928847134,
            0.00024625493097119033,
            0.0018242490477859974,
            0.0002454865025356412,
            0.0006557669257745147
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cartoons has Joseph Kuhr written?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Written_by",
            "select count(*), Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9920712113380432,
            0.0005017928197048604,
            0.00029376440215855837,
            0.0002853581972885877,
            0.00028254298376850784,
            0.002758680609986186,
            0.00026475629420019686,
            0.001247206935659051
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cartoons does Joseph Kuhr write?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Cartoon.Written_by",
            "select count(*), Cartoon.id",
            "select count(*), Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.974770724773407,
            0.0003059159789700061,
            0.00022220375831238925,
            0.00047503673704341054,
            0.00023586330644320697,
            0.00015657066251151264,
            0.00021120462042745203,
            0.00030628632521256804
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me which country has the most TV Channels? And how many TV channels does this country have?",
        "gold_select": "select TV_Channel.Country, count(*)",
        "select_candidates": [
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Country, count(*), TV_Channel.Language",
            "select TV_Channel.Country.c2, count(*)",
            "select TV_Channel.Country, count(TV_Channel.Content)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9952612519264221,
            0.00012698756472673267,
            0.00014946483133826405,
            6.6918641095981e-05,
            0.0037390633951872587,
            7.377831934718415e-05,
            0.0004072602605447173,
            8.805310062598437e-05
        ],
        "align_select": "select TV_Channel.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What country has the most TV Channels and how many does it have?",
        "gold_select": "select TV_Channel.Country, count(*)",
        "select_candidates": [
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Country, count(*), TV_Channel.Language",
            "select TV_Channel.Country.c2, count(*)",
            "select TV_Channel.series_name, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.99529629945755,
            0.00010903343354584649,
            0.0001382229820592329,
            6.392752402462065e-05,
            0.0042905439622700214,
            6.921456952113658e-05,
            0.00048767952830530703,
            6.891799421282485e-05
        ],
        "align_select": "select TV_Channel.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the country with the most TV channels and how many TV channels does it have?",
        "gold_select": "select TV_Channel.Country, count(*)",
        "select_candidates": [
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Country, count(*), TV_Channel.Language",
            "select TV_Channel.Country, count(TV_Channel.Content)",
            "select TV_Channel.Country, count(TV_Channel.Country)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9947916865348816,
            0.00011113451910205185,
            0.00013529766874853522,
            6.332459452096373e-05,
            0.0003203944652341306,
            7.79123292886652e-05,
            0.00025093540898524225,
            6.974289863137528e-05
        ],
        "align_select": "select TV_Channel.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which countries have the most tv channels? And how many?",
        "gold_select": "select TV_Channel.Country, count(*)",
        "select_candidates": [
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Country, count(*), TV_Channel.Language",
            "select TV_Channel.Country., count(*)",
            "select TV_Channel.series_name, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9950842261314392,
            6.929792289156467e-05,
            0.00015608815010637045,
            5.657729343511164e-05,
            0.003819770645350218,
            6.66040723444894e-05,
            0.0004700757563114166,
            6.499816663563251e-05
        ],
        "align_select": "select TV_Channel.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Tell me which country has the most of TV Channels and how many channels does it have?",
        "gold_select": "select TV_Channel.Country, count(*)",
        "select_candidates": [
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Country, count(*), TV_Channel.Language",
            "select TV_Channel.Country, count(TV_Channel.id)",
            "select TV_Channel.Country.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9905828237533569,
            0.00010205958824371919,
            0.00012644696107599884,
            6.0392550949472934e-05,
            0.0003500108723528683,
            7.836746226530522e-05,
            0.003962044138461351,
            6.876720726722851e-05
        ],
        "align_select": "select TV_Channel.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which country has the most TV channels? List the country and how many channels it has.",
        "gold_select": "select TV_Channel.Country, count(*)",
        "select_candidates": [
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Country, count(*), TV_Channel.Language",
            "select TV_Channel.Country.c0, count(*)",
            "select TV_Channel.Country, count(TV_Channel.Hight_definition_TV)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9949806332588196,
            0.00011535961675690487,
            0.00014495164214167744,
            6.358929385896772e-05,
            0.0012598789762705564,
            7.62796844355762e-05,
            0.006183131132274866,
            0.00013833411503583193
        ],
        "align_select": "select TV_Channel.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please list the names of all cartoons in alphabetical order.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9955381751060486,
            0.9955381751060486,
            0.0001545513077871874,
            0.0001545513077871874,
            0.0003519619640428573,
            0.0003519619640428573,
            0.0003365080337971449,
            0.0003365080337971449
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "I would like to know the names of the cartoons sorted alphabetically.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Production_code",
            "select Cartoon.Title, t2.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9953304529190063,
            0.00031444543856196105,
            0.00015499122673645616,
            0.0001245609309989959,
            0.00021234140149317682,
            0.00011694298154907301,
            0.0008690700633451343,
            0.00017365852545481175
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Here's the list of all the cartoons made under the direction of Ben Jones or Brandon Vietti.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title de, Cartoon.Directed_by",
            "select Cartoon.id, Cartoon.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.8797826766967773,
            0.0015711176674813032,
            0.0002519216504879296,
            9.922216122504324e-05,
            0.0002597177808638662,
            7.569391163997352e-05,
            0.00034108461113646626,
            9.484459587838501e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all the cartoons made by Ben Jones and Brandon Vietti?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Written_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9939886331558228,
            0.0003155382873956114,
            0.0002442533150315285,
            6.23635423835367e-05,
            0.0001571950560901314,
            6.391191709553823e-05,
            0.00025874297716654837,
            6.394477532012388e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the full titles of all the cartoons by directors Brandon Nguyen or Benjamin Jones.",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title, Cartoon.Written_by",
            "select Cartoon.Title, Cartoon.Directed_by",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Original_air_date"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.0002741000789683312,
            7.62823037803173e-05,
            0.0004409302491694689,
            8.697897283127531e-05,
            0.00037886397331021726,
            7.213414210127667e-05,
            0.0001897554175229743,
            7.637736416654661e-05
        ],
        "align_select": "select Cartoon.Title, Cartoon.Written_by",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the package selection for Sky Radio?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.Pay_per_view_PPV",
            "select TV_Channel.Package_Option, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9594854712486267,
            0.00012748208246193826,
            0.00016503223741892725,
            7.230327173601836e-05,
            0.0002117185649694875,
            7.483409717679024e-05,
            0.00016345067706424743,
            6.98423245921731e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What kind of package does 'Sky Radio' come under?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select distinct TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.Package_Option, t0.c9"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9882325530052185,
            0.00014761167403776199,
            0.15116097033023834,
            0.00011679922317853197,
            0.00012587793753482401,
            6.489318911917508e-05,
            0.00037345278542488813,
            8.060133404796943e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which package does the TV channel Sky Radio come under?",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.Package_Option, TV_Channel.Pay_per_view_PPV",
            "select TV_Channel.Package_Option, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series Cartoon",
            "TV_Channel TV_series",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9242364764213562,
            0.00011182165326317772,
            0.00011816345795523375,
            5.8171652199234813e-05,
            0.00017818277410697192,
            7.929017738206312e-05,
            0.00012693901953753084,
            6.682412640657276e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which channel has this series called Sky Radio? Explain which packages they offer.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select TV_Channel.Package_Option, TV_series.Channel",
            "select TV_Channel.id, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_Channel",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.9705881476402283,
            0.00010547944839345291,
            0.00034904785570688546,
            7.380098395515233e-05,
            0.0006354176439344883,
            8.045558206504211e-05,
            0.000209893099963665,
            6.987363303778693e-05
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Let us look for the package selection and series name for the HD TV channel.",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.series_name",
            "select TV_Channel.Pay_per_view_PPV, TV_Channel.series_name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9950379729270935,
            0.00013897485041525215,
            0.9952670335769653,
            0.00010730105714173988,
            0.0003054173430427909,
            8.834106847643852e-05,
            0.9874230623245239,
            0.00011396643822081387
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the package selection and television name of the TV channel that is high definition.",
        "gold_select": "select TV_Channel.Package_Option, TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.Package_Option, TV_Channel.series_name",
            "select TV_Channel.Package_Option, TV_Channel.Hight_definition_TV",
            "select TV_Channel.Package_Option, TV_Channel.Country",
            "select TV_Channel.Package_Option, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.002378671197220683,
            0.00013086771650705487,
            0.9882063269615173,
            0.00013749615754932165,
            0.0019755407702177763,
            0.0001045960234478116,
            0.00027174080605618656,
            7.926121907075867e-05
        ],
        "align_select": "select TV_Channel.Package_Option, TV_Channel.Hight_definition_TV",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For tv channels that don't use English, please tell me their pixel aspect ratio and country.",
        "gold_select": "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
        "select_candidates": [
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.Language, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9712058305740356,
            0.0001690546196186915,
            0.0003156309248879552,
            8.48313356982544e-05,
            0.00020397041225805879,
            7.78082394390367e-05,
            0.984067440032959,
            0.0001767984067555517
        ],
        "align_select": "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the package types of all TV channels which are not showing cartoons by director Ben Jones.",
        "gold_select": "select TV_Channel.Package_Option",
        "select_candidates": [
            "select TV_Channel.Package_Option",
            "select distinct TV_Channel.Package_Option",
            "select TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Package_Option",
            "select TV_Channel.Hight_definition_TV, TV_Channel.Package_Option"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9845826625823975,
            0.9845826625823975,
            0.00951611902564764,
            0.00951611902564764,
            0.00022133532911539078,
            0.00022133532911539078,
            0.00019869735115207732,
            0.00019869735115207732
        ],
        "align_select": "select TV_Channel.Package_Option",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the channel that broadcasts cartoons directed by Ben Jones and Michael Chang? And where is it from?",
        "gold_select": "select TV_Channel.series_name, TV_Channel.Country",
        "select_candidates": [
            "select Cartoon.Channel, TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Language",
            "select Cartoon.Channel, Cartoon.Directed_by",
            "select TV_Channel.Country, Cartoon.Channel"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.00030649572727270424,
            0.00016937310283537954,
            0.00024835814838297665,
            0.00014056506915949285,
            0.00015818428073544055,
            9.667753329267725e-05,
            0.00022121297661215067,
            0.00013667174789588898
        ],
        "align_select": "select Cartoon.Channel, TV_Channel.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which channel airs 'A love of a lifetime?' What is the title of its series?",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_Channel.series_name, TV_series.Channel",
            "select TV_Channel.series_name",
            "select TV_Channel.series_name, TV_Channel.Country",
            "select TV_series.Channel, TV_Channel.series_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.35725563764572144,
            8.149927452905104e-05,
            0.991897463798523,
            0.0002470671897754073,
            0.0004066895926371217,
            8.450556197203696e-05,
            0.9946374297142029,
            9.355826477985829e-05
        ],
        "align_select": "select TV_series.Channel, TV_Channel.series_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which TV channel is series \" A love of a lifetime\" aired on?",
        "gold_select": "select TV_Channel.series_name",
        "select_candidates": [
            "select TV_series.Channel",
            "select TV_Channel.series_name",
            "select TV_Channel.series_name, TV_series.Channel",
            "select t2.c8"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_series"
        ],
        "align_scores": [
            0.9941343665122986,
            0.0001042803269228898,
            0.4042080044746399,
            8.782969234744087e-05,
            0.00019343105668667704,
            6.814260268583894e-05,
            0.0011118768015876412,
            9.266805136576295e-05
        ],
        "align_select": "select TV_series.Channel",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which TV channels is English used?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.series_name",
            "select distinct TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.0021547996439039707,
            0.0001480794308008626,
            0.03246324509382248,
            8.791282016318291e-05,
            0.1138199046254158,
            0.00019029842223972082,
            0.00017632736125960946,
            6.266141281230375e-05
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which TV channel is English?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.series_name",
            "select TV_Channel.Content",
            "select TV_Channel.Country"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.001743398723192513,
            8.483238343615085e-05,
            0.0005991179496049881,
            6.288128497544676e-05,
            0.003175341058522463,
            6.782424316043034e-05,
            0.004653859417885542,
            9.855414828052744e-05
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of TV channels using English?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), TV_Channel.Language",
            "select count(*), TV_Channel.Language, TV_Channel.Content",
            "select count(*), TV_Channel.Language, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9947593808174133,
            6.169499829411507e-05,
            0.00023483112454414368,
            6.26604596618563e-05,
            0.0001042215881170705,
            5.380612128647044e-05,
            0.00010340951121179387,
            5.178439459996298e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all the cartoons that air on the TV channel 'Sky Radio'?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select Cartoon.Title, TV_Channel.series_name",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Directed_by"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.36566996574401855,
            0.0001323745382251218,
            0.0003495713754091412,
            6.619775376748294e-05,
            0.000182639982085675,
            5.8166773669654503e-05,
            0.00019123700622003525,
            5.947286990704015e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of all the cartools on the TV channel 'Sky radio'?",
        "gold_select": "select Cartoon.Title",
        "select_candidates": [
            "select Cartoon.Title",
            "select TV_series.Episode",
            "select Cartoon.Title, TV_Channel.series_name",
            "select Cartoon.Title, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel Cartoon",
        "table_candidates": [
            "TV_Channel TV_series",
            "TV_Channel TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.26707425713539124,
            9.668426355347037e-05,
            0.007628876715898514,
            7.283745799213648e-05,
            0.0003439509600866586,
            6.110730464570224e-05,
            0.00018613219435792416,
            5.475768193718977e-05
        ],
        "align_select": "select Cartoon.Title",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the week one rank for 'A love of a lifetime'?",
        "gold_select": "select TV_series.Weekly_Rank",
        "select_candidates": [
            "select TV_series.Weekly_Rank",
            "select TV_series.id, TV_series.Weekly_Rank",
            "select TV_series.Weekly_Rank, TV_series.Viewers_m",
            "select TV_series.Weekly_Rank, TV_series.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.920549750328064,
            8.140016143443063e-05,
            0.00018847713363356888,
            6.767454033251852e-05,
            0.00013575979392044246,
            6.310010940069333e-05,
            0.0001579856179887429,
            6.293546175584197e-05
        ],
        "align_select": "select TV_series.Weekly_Rank",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the list of TV shows shown on TV channel 'Sky Radio'.",
        "gold_select": "select TV_series.Episode",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_series.Episode, TV_series.Air_Date",
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Air_Date, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.008666271343827248,
            6.428949563996866e-05,
            0.0001276903785765171,
            6.009817298036069e-05,
            0.0001802081533242017,
            5.9080906794406474e-05,
            0.000126805214677006,
            6.242964445846155e-05
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the episode name of the TV show named'sky radio'?",
        "gold_select": "select TV_series.Episode",
        "select_candidates": [
            "select TV_series.Episode",
            "select TV_series.Episode, TV_Channel.Country",
            "select TV_series.Episode, TV_Channel.series_name",
            "select TV_series.Episode, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel TV_series",
        "table_candidates": [
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.9888501763343811,
            7.29352468624711e-05,
            0.00012634065933525562,
            5.839753066538833e-05,
            0.00012099712330382317,
            5.8842058933805674e-05,
            0.00017183726595249027,
            5.973489533062093e-05
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the three highest rated episodes in the TV series table and what were their ratings?",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Episode, TV_series.Rating",
            "select top-TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Rating",
            "select TV_series.Episode, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9942843317985535,
            6.0909158491995186e-05,
            0.0004429472901392728,
            7.03814803273417e-05,
            0.0006209005368873477,
            5.692766353604384e-05,
            0.0004503383534029126,
            6.929739174665883e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the three highest rated episodes in the TV series table and what were their ratings.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, sum(TV_series.Rating)",
            "select TV_series.id, TV_series.Rating",
            "select TV_series.Episode, max(TV_series.Rating)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9948451519012451,
            6.366671004798263e-05,
            0.005459891166538,
            5.46922892681323e-05,
            0.000378547643776983,
            6.040096195647493e-05,
            0.0026827917899936438,
            6.279212539084256e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the income of poker players, ranked descending by amount.",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Earnings-ORDER BY",
            "select poker_player.Earnings, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9942295551300049,
            0.9942295551300049,
            0.00024695368483662605,
            0.00024695368483662605,
            0.013577276840806007,
            0.013577276840806007,
            0.00024695368483662605,
            0.00024695368483662605
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show the earnings of poker players, sorted starting with the highest.",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Earnings, t0.c6",
            "select poker_player.Earnings, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9926268458366394,
            0.00018225588428322226,
            0.00017296594160143286,
            7.455076411133632e-05,
            0.0005509064067155123,
            0.0001888457190943882,
            9.986782970372587e-05,
            6.800195114919916e-05
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the poker player earnings, sorted from highest to lowest.",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Earnings, t0.c6",
            "select poker_player.Earnings, t0.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9945164322853088,
            0.9945164322853088,
            0.00015038016135804355,
            0.00015038016135804355,
            0.0006255359621718526,
            0.0006255359621718526,
            0.0005548743647523224,
            0.0005548743647523224
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Please list the poker players winnings in descending order.",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, t0.c6",
            "select poker_player.Earnings, poker_player.Poker_Player_ID",
            "select poker_player.Earnings, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9955910444259644,
            0.9955910444259644,
            0.0005051179905422032,
            0.0005051179905422032,
            0.00011927831656066701,
            0.00011927831656066701,
            0.00022806742344982922,
            0.00022806742344982922
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "The average income of a player of poker who is over 200 cm tall is what?",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select avg(poker_player.Earnings), people.Height",
            "select an avg(poker_player.Earnings)",
            "select  avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9953727126121521,
            0.00011559084668988362,
            0.00024521464365534484,
            8.49967691465281e-05,
            0.0005040111136622727,
            9.037238487508148e-05,
            0.9953727126121521,
            0.00011559084668988362
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average earnings for poker players over 200cm.",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select an avg(poker_player.Earnings)",
            "select  avg(poker_player.Earnings)",
            "select the avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9961000680923462,
            0.00010377600119682029,
            0.000407734012696892,
            9.412201325176284e-05,
            0.9961000680923462,
            0.00010377600119682029,
            0.0003545032232068479,
            0.00012731176684610546
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the avgerage earnings of poker players taller than 200cm.",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select avgerage(poker_player.Earnings)",
            "select avgerge(poker_player.Earnings)",
            "select avge(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9964433312416077,
            6.999888137215748e-05,
            0.9827926754951477,
            7.889060361776501e-05,
            0.3979049026966095,
            7.976438791956753e-05,
            0.7759432792663574,
            7.562855171272531e-05
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List down the name of poker player, starting from the greatest earnings.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Earnings",
            "select people.Name (or people.Birth_Date)",
            "select people.Name, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9885028004646301,
            0.0017350204288959503,
            0.00023384534870274365,
            0.00015078291471581906,
            0.0005382458912208676,
            0.00026799587067216635,
            0.00020272855181246996,
            0.00013148262223694474
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the names of non-russians.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.Birth_Date",
            "select distinct people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.991936206817627,
            0.00010472207941347733,
            0.00017443850811105222,
            6.41838923911564e-05,
            0.0001515460025984794,
            5.9423200582386926e-05,
            0.027365852147340775,
            7.490206189686432e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are non-Russian people called.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.Birth_Date",
            "select people.Name (or people.Birth_Date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9912791848182678,
            9.220502397511154e-05,
            0.00014802042278461158,
            6.167436367832124e-05,
            0.0001340746384812519,
            5.306895764078945e-05,
            0.00038593701901845634,
            6.718212534906343e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the people from outside Russia?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Height",
            "select distinct people.Name, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9933286905288696,
            0.0014792918227612972,
            0.00020148255862295628,
            9.009049972519279e-05,
            0.0001701794535620138,
            0.00010879561159526929,
            0.00033732305746525526,
            8.20934001239948e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of poker players whose earnings is over $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Poker_Player_ID",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9842492938041687,
            0.000522847636602819,
            0.00016331981169059873,
            8.641456224722788e-05,
            0.0001710666110739112,
            8.934106881497428e-05,
            0.00015165731019806117,
            8.022726979106665e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of poker players whose earnings exceeds $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9885162115097046,
            0.0006876611150801182,
            0.00015023384185042232,
            8.400877413805574e-05,
            0.00015041156439110637,
            7.801946776453406e-05,
            0.00014692218974232674,
            8.371895819436759e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name of poker player with more than 300K in their accounts.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.984826922416687,
            0.0005109407939016819,
            0.0001553586480440572,
            8.92172974999994e-05,
            0.0001371107209706679,
            8.09629273135215e-05,
            0.000190527003724128,
            9.918204887071624e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The name of the poker players whose earnings are more than 300K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.990528404712677,
            0.0003807078755926341,
            0.00012951926328241825,
            7.884292426751927e-05,
            0.00014493020717054605,
            7.464764348696917e-05,
            0.0001420658954884857,
            8.31809375085868e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which poker player's total winnings amount to more than 300000?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.Poker_Player_ID",
            "select poker_player.Poker_Player_ID, sum(poker_player.Earnings)",
            "select poker_player.Poker_Player_ID, poker_player.Earnings",
            "select poker_player.People_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.10478799045085907,
            0.0002249289973406121,
            0.0009003582526929677,
            8.167666237568483e-05,
            0.0003995210863649845,
            8.21362336864695e-05,
            0.12912942469120026,
            0.00021251906582619995
        ],
        "align_select": "select poker_player.Poker_Player_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please list poker players whose total winnings amount to more than 300000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.Poker_Player_ID",
            "select poker_player.Poker_Player_ID, sum(poker_player.Earnings)",
            "select poker_player.People_ID",
            "select poker_player.Poker_Player_ID, poker_player.People_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.017534315586090088,
            0.000220549336518161,
            0.0007104885880835354,
            8.492142660543323e-05,
            0.01897875778377056,
            0.0002355697943130508,
            0.00020288075029384345,
            8.085861918516457e-05
        ],
        "align_select": "select poker_player.Poker_Player_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who has earned more than 300000 in poker?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select poker_player.People_ID",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9802128672599792,
            0.0006555394502356648,
            0.00021971776732243598,
            0.00010638633830239996,
            0.019336175173521042,
            0.0006062952452339232,
            0.00036331062437966466,
            0.00011381884542061016
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to see the names of poker players who've earned more than \u00a3300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9741816520690918,
            0.0006252662860788405,
            0.00018994348647538573,
            0.00011010962043656036,
            0.0001970217126654461,
            9.164270159089938e-05,
            0.00019958976190537214,
            0.00010602420661598444
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the poker players whose earnings is more than 300k dollars?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.People_ID",
            "select poker_player.People_ID, poker_player.Poker_Player_ID",
            "select poker_player.People_ID, poker_player.Final_Table_Made",
            "select poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.006846737116575241,
            0.0018762542167678475,
            0.00023136723029892892,
            9.068938379641622e-05,
            0.00020214004325680435,
            9.102380863623694e-05,
            0.0023240125738084316,
            0.0018352929037064314
        ],
        "align_select": "select poker_player.People_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who has earned more than $300000 playing poker?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select poker_player.People_ID",
            "select people.Name, people.Birth_Date",
            "select poker_player.People_ID, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9680533409118652,
            0.002138417912647128,
            0.035909589380025864,
            0.001160331186838448,
            0.00023458049690816551,
            0.00012028239871142432,
            0.0006003031739965081,
            0.000143803350511007
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name of Poker players whose earnings are over 300K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9931167364120483,
            0.00022816423734184355,
            0.00014128330803941935,
            7.621178519912064e-05,
            0.00014405653928406537,
            7.318285497603938e-05,
            0.00013868717360310256,
            7.810693932697177e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of poker players whose winnings is over $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Nationality",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9817678928375244,
            0.00033217997406609356,
            0.00015465995238628238,
            8.306329982588068e-05,
            0.00021279136126395315,
            9.776061779120937e-05,
            0.00015849513874854892,
            7.795097917551175e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of poker players whose lifetime winnings exceed 300000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Nationality",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9815596342086792,
            0.056793246418237686,
            0.00014962910790927708,
            0.0001627627934794873,
            0.00022960323258303106,
            0.0002965285093523562,
            0.00014530576299875975,
            0.0001571899774717167
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the poker players whose revenue is over 300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.Poker_Player_ID",
            "select poker_player.People_ID",
            "select poker_player.Poker_Player_ID, poker_player.People_ID",
            "select poker_player.Poker_Player_ID, poker_player.Earnings"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.0032302653416991234,
            0.0005914740613661706,
            0.006005547940731049,
            0.0004994896007701755,
            0.00017932403716258705,
            8.69392606546171e-05,
            0.00018041204020846635,
            7.811238174326718e-05
        ],
        "align_select": "select poker_player.Poker_Player_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What poker player earn more than 300000?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.Poker_Player_ID",
            "select poker_player.Poker_Player_ID, poker_player.Earnings",
            "select poker_player.Poker_Player_ID, poker_player.People_ID",
            "select poker_player.Poker_Player_ID, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.0028577609919011593,
            0.00026150280609726906,
            0.00019059679470956326,
            6.55543408356607e-05,
            0.00016711839998606592,
            7.28074592188932e-05,
            0.0004222465504426509,
            0.0001338264555670321
        ],
        "align_select": "select poker_player.Poker_Player_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the poker players whose earnings is over 300000?.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.Poker_Player_ID",
            "select poker_player.Poker_Player_ID, poker_player.People_ID",
            "select poker_player.People_ID",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.0031264028511941433,
            0.0014317143941298127,
            0.00019538574269972742,
            8.886864088708535e-05,
            0.003611205844208598,
            0.0011727381497621536,
            0.0001441091881133616,
            7.541378727182746e-05
        ],
        "align_select": "select poker_player.Poker_Player_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the money rank of the poker player with the most money?",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Final_Table_Made",
            "select poker_player.People_ID, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9900842905044556,
            7.086853293003514e-05,
            0.00020047953876201063,
            6.537549052154645e-05,
            0.00019040241022594273,
            6.230890721781179e-05,
            0.0002008562587434426,
            6.661297084065154e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the money rank of the player who has won the most amount of money during his poker career?",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.Money_Rank, poker_player.Earnings",
            "select poker_player.People_ID, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.3145372271537781,
            8.128024637699127e-05,
            0.0002132959198206663,
            6.98146250215359e-05,
            0.00047980211093090475,
            6.495683192042634e-05,
            0.0002730499836616218,
            7.595776696689427e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the money rank of the poker player who has won the most?",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.8680272698402405,
            0.9908762574195862,
            0.00022198393708094954,
            0.00028176800697110593,
            0.0002449767489451915,
            0.0003186988178640604,
            0.00026182286092080176,
            0.0003693395701702684
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the money rank of the poker player who won the most.",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9466956853866577,
            0.994658887386322,
            0.00018810459005180746,
            0.0002266207739012316,
            0.00019914229051209986,
            0.0002555011888034642,
            0.0002046362351393327,
            0.00024210885749198496
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the birth date of the poker player that made the smallest amount?",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, people.Height",
            "select people.Birth_Date, people.Name",
            "select people.Birth_Date, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9921183586120605,
            7.067107071634382e-05,
            0.00014716391160618514,
            6.338550156215206e-05,
            0.0004692944639828056,
            6.304273847490549e-05,
            0.00041349520324729383,
            5.4605519835604355e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When was the low-earning poker player born?",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, people.Name",
            "select people.Birth_Date, people.Height",
            "select people.Nationality, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9601081609725952,
            0.9473906755447388,
            0.0002905184810515493,
            0.00013771596422884613,
            0.00015795323997735977,
            0.00012943640467710793,
            0.000183682786882855,
            0.00014162983279675245
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the birthday of the poker player who made the least.",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, poker_player.Final_Table_Made",
            "select people.Birth_Date, people.Height",
            "select people.Birth_Date, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9930353760719299,
            7.87080789450556e-05,
            0.0005063142161816359,
            5.5810898629715666e-05,
            0.0001452730648452416,
            5.748646435677074e-05,
            0.00034574628807604313,
            6.176146416692063e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Tell me the birthday of the poker player who earns less than the rest.",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Name, people.Birth_Date",
            "select people.People_ID, people.Birth_Date",
            "select people.Birth_Date, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9870240688323975,
            0.00011019354860763997,
            0.0005181354936212301,
            8.026975410757586e-05,
            0.0003235894546378404,
            7.142078538890928e-05,
            0.0006209710845723748,
            7.59752219892107e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the birthdate of the poker player with the least earnings?",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, people.Height",
            "select people.Birth_Date, poker_player.People_ID",
            "select people.People_ID, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9895451664924622,
            0.00011235241254325956,
            0.00018786388682201505,
            6.654655589954928e-05,
            0.00027811710606329143,
            6.542108167195693e-05,
            0.0002862118126358837,
            7.92861683294177e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "return the birthday of the poker player who made the least amount.",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.People_ID, people.Birth_Date",
            "select people.Birth_Date, people.Name",
            "select people.Birth_Date, people.Height"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9907647371292114,
            7.295931573025882e-05,
            0.00033815184724517167,
            6.33431991445832e-05,
            0.0004097605706192553,
            6.0980873968219385e-05,
            0.00015313805488403887,
            5.808285277453251e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Give me names of poker players who had more than $300000 in their bankrolls.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9579277634620667,
            0.0005463295965455472,
            0.0001541121891932562,
            8.019300730666146e-05,
            0.00017325280350632966,
            6.794004730181769e-05,
            0.00022723025176674128,
            0.00010058749467134476
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "give the names of poker players who have earned more than 30 K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9486925601959229,
            0.0004807740915566683,
            0.00016321396105922759,
            9.267935820389539e-05,
            0.00016278807015623897,
            7.82861970947124e-05,
            0.00014677840226795524,
            8.737459575058892e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all people who have won over $300000 while playing poker as their occupation.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Nationality, people.Name",
            "select people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "poker_player"
        ],
        "align_scores": [
            0.8873692154884338,
            0.00165538617875427,
            0.0002189458900829777,
            0.00010698391997721046,
            0.00024699349887669086,
            0.0001067035409505479,
            0.004134820774197578,
            0.0008013452170416713
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name the poker players who had winnings of more than $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.People_ID",
            "select poker_player.Poker_Player_ID",
            "select poker_player.People_ID, poker_player.Final_Table_Made",
            "select poker_player.People_ID, people.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "poker_player"
        ],
        "align_scores": [
            0.022195082157850266,
            0.0012137305457144976,
            0.008365689776837826,
            0.001229292363859713,
            0.00017391852452419698,
            7.789480878273025e-05,
            0.0003908046055585146,
            0.00010933308658422902
        ],
        "align_select": "select poker_player.People_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of poker players that have made more than $300K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9731354117393494,
            0.0006862881709821522,
            0.00015129636449273676,
            9.216643229592592e-05,
            0.00014508150343317538,
            7.680837734369561e-05,
            0.0001795106945792213,
            9.407418838236481e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "give the names of the poker players who have revenues above 300K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9794988036155701,
            0.0004840283072553575,
            0.00015374172653537244,
            8.6904939962551e-05,
            0.0001610431936569512,
            8.087934838840738e-05,
            0.00015889039786998183,
            9.106608922593296e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List poker players whose earnings are more than 30000",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.Poker_Player_ID",
            "select poker_player.Poker_Player_ID, poker_player.Earnings",
            "select poker_player.Poker_Player_ID, poker_player.People_ID",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.0019835331477224827,
            0.00020929555466864258,
            0.00016961894289124757,
            8.021305256988853e-05,
            0.00017350740381516516,
            8.825065015116706e-05,
            0.00012040679575875401,
            7.197596278274432e-05
        ],
        "align_select": "select poker_player.Poker_Player_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of poker players whose earnings exceed $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9856890439987183,
            0.0006471561500802636,
            0.0001502276718383655,
            8.636248821858317e-05,
            0.00015212685684673488,
            7.502244261559099e-05,
            0.0001507740089436993,
            8.204151527024806e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of poker players who have earned more than $300K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9640000462532043,
            0.0007189685711637139,
            0.00017211554222740233,
            0.00010298105917172506,
            0.0001689659693511203,
            8.267167140729725e-05,
            0.00020655557455029339,
            0.00010478770855115727
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of the poker players who have earned more than $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9614564776420593,
            0.0015627110842615366,
            0.00018394833023194224,
            0.00011129401536891237,
            0.00018441793508827686,
            8.655394049128518e-05,
            0.00018074420222546905,
            9.78501484496519e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What Poker players have earned more than $300000?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.Poker_Player_ID",
            "select poker_player.Poker_Player_ID, poker_player.People_ID",
            "select poker_player.Poker_Player_ID, poker_player.Earnings",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.0030703083612024784,
            0.00032299247686751187,
            0.00019876971782650799,
            7.634460052940995e-05,
            0.00020319338364060968,
            7.176049257395789e-05,
            0.0001391522673657164,
            6.407832552213222e-05
        ],
        "align_select": "select poker_player.Poker_Player_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of poker players whose earnings exceed $300K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9865289926528931,
            0.0004829010576941073,
            0.00014586742327082902,
            8.494636858813465e-05,
            0.000146611244417727,
            7.499175990233198e-05,
            0.00015231147699523717,
            8.277864981209859e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who amongst the people making more than 300,000' are poker professionals?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select distinct people.Name",
            "select poker_player.Poker_Player_ID",
            "select people.Name",
            "select distinct people.Name, people.Birth_Date"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.08395105600357056,
            0.05782250687479973,
            0.006614279933273792,
            0.0017362880753353238,
            0.25638923048973083,
            0.00678259739652276,
            0.0008449007291346788,
            0.0002420181263005361
        ],
        "align_select": "select distinct people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give names of poker players who have exceeded $300,000 earnings.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9830318689346313,
            0.0006382488645613194,
            0.0001701075816527009,
            0.0001036178000504151,
            0.0001551540190121159,
            8.409126166952774e-05,
            0.00020080877584405243,
            0.00010674221266526729
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of poker players who have earnings larger than $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.Poker_Player_ID",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.972485363483429,
            0.0004950862494297326,
            0.0002030428877333179,
            0.00010557765926932916,
            0.00017618550918996334,
            9.23069819691591e-05,
            0.00016878660244401544,
            8.341000648215413e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name those poker players who have made over 300000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select poker_player.People_ID",
            "select poker_player.People_ID, people.Name",
            "select people.Name, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "poker_player"
        ],
        "align_scores": [
            0.928482711315155,
            0.00047551855095662177,
            0.01144368015229702,
            0.00019052681454923004,
            0.00026377924950793386,
            8.065522706601769e-05,
            0.00018707127310335636,
            7.425956573570147e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which poker players have earned more than 300000?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.Poker_Player_ID",
            "select poker_player.Poker_Player_ID, poker_player.People_ID",
            "select poker_player.People_ID",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.0028746153693646193,
            0.0002929494366981089,
            0.0001902090007206425,
            7.465134694939479e-05,
            0.009412749670445919,
            0.000348723609931767,
            0.00012815046648029238,
            6.381405546562746e-05
        ],
        "align_select": "select poker_player.Poker_Player_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are countries which exist at least two people?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, count(*)",
            "select people.Nationality, min(people.Name)",
            "select people.Nationality, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9783046245574951,
            0.00010693639342207462,
            0.006671569310128689,
            7.639178511453792e-05,
            0.00019051902927458286,
            5.6398886954411864e-05,
            0.0005228070076555014,
            7.872204878367484e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the country where the largest group is from?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.Birth_Date",
            "select people.Nationality, people.Name, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9936123490333557,
            6.664442480541766e-05,
            0.00033202479244209826,
            6.33792151347734e-05,
            0.0002580897998996079,
            5.671871986123733e-05,
            0.00019335620163474232,
            5.6693574151722714e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please return the rank of the players with the largest income.",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9474875926971436,
            6.683725951006636e-05,
            0.00014084573194850236,
            6.554721767315641e-05,
            0.00032590466435067356,
            6.27779882051982e-05,
            0.00015347075532190502,
            6.675159238511696e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "I need the highest amount of money that was won at the final table among those players which had an income under 200000 and played poker.",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Money_Rank)",
            "select max(poker_player.Earnings)",
            "select max(t0.c6)",
            "select max(poker_player.Money_Rank), poker_player.Earnings"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.2573850154876709,
            0.00038965774001553655,
            0.3337503671646118,
            0.0003393944934941828,
            0.0017546929884701967,
            0.00018969987286254764,
            0.00013739131100010127,
            9.222303924616426e-05
        ],
        "align_select": "select max(poker_player.Money_Rank)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the maximum final tables made across all poker players who have earned less than 200K.",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.Earnings",
            "select max(poker_player.Final_Table_Made), poker_player.Best_Finish",
            "select max(poker_player.Final_Table_Made) de poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9945840239524841,
            0.00010082604421768337,
            0.0001471789291827008,
            6.477782153524458e-05,
            0.0001376088330289349,
            6.532002589665353e-05,
            0.00013962970115244389,
            6.60341393086128e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the highest final table made for all poker players that have earnings under 200K.",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select poker_player.Final_Table_Made",
            "select max(poker_player.Final_Table_Made), poker_player.Best_Finish",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9960930943489075,
            8.582451118854806e-05,
            0.9326879978179932,
            0.00010280740389134735,
            0.00014139949053060263,
            6.25250831944868e-05,
            0.00020849767315667123,
            6.778336683055386e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different countries that people originate from and the corresponding number of people from each country?",
        "gold_select": "select people.Nationality, count(*)",
        "select_candidates": [
            "select people.Nationality, count(*)",
            "select people.Nationality, count(*), people.Name",
            "select people.Nationality, count(*), people.Birth_Date",
            "select people.Nationality, count(*), people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9918443560600281,
            0.00042699987534433603,
            0.0002928142494056374,
            0.00015259669453371316,
            0.0001904425589600578,
            0.0001741643063724041,
            0.00035505476989783347,
            0.00015136488946154714
        ],
        "align_select": "select people.Nationality, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are names of people that aren't Russian?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Height"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9896751046180725,
            0.0001296286063734442,
            0.00013532205775845796,
            6.272054451983422e-05,
            0.00014372851001098752,
            5.824147956445813e-05,
            0.00012764459825120866,
            5.596321716438979e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the people who do not have Russian citizenship and return their names.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.People_ID",
            "select people.People_ID, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.6205919981002808,
            0.00022587481362279505,
            0.0001916104374686256,
            8.376454934477806e-05,
            0.00017082066915463656,
            6.689796282444149e-05,
            0.00025470732362009585,
            8.663882181281224e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of the persons who are NOT Russian citizens.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.Birth_Date",
            "select people.Nationality, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people"
        ],
        "align_scores": [
            0.9769203662872314,
            0.02235053852200508,
            0.00014940895198378712,
            0.00012166468513896689,
            0.00017833607853390276,
            0.00028668183949775994,
            0.0002701062767300755,
            0.00015381387493107468
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all those who do not come from Russia below.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.People_ID",
            "select people.Name",
            "select people.Nationality",
            "select people.People_ID, people.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people"
        ],
        "align_scores": [
            0.001096588559448719,
            0.0001541875972179696,
            0.753059446811676,
            0.00018684346287045628,
            0.18907715380191803,
            0.0003683562099467963,
            0.00029292679391801357,
            9.672943997429684e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of those who aren't Russian.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Nationality",
            "select people.Name (or people.Birth_Date)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9031373858451843,
            0.00013387470971792936,
            0.00018377529340796173,
            6.514490814879537e-05,
            0.00015780389367137104,
            6.986111111473292e-05,
            0.0005346546531654894,
            6.549130193889141e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show people without Russian as their nationality.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.People_ID",
            "select people.Name",
            "select people.People_ID, people.Name",
            "select people.Nationality"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.005580973345786333,
            0.0029891803860664368,
            0.006206057965755463,
            0.9271490573883057,
            0.00017278676386922598,
            0.0002910760813392699,
            0.8883005976676941,
            0.555763840675354
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name poker players, listed from most number of final table in descending order",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Poker_Player_ID",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.8259289264678955,
            0.06477458775043488,
            0.00016829193918965757,
            0.00015879375860095024,
            0.00014551928325090557,
            0.00014458788791671395,
            0.00034455349668860435,
            0.0004963224637322128
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "list poker players that made final tables ranked from least to most.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.Poker_Player_ID",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made, poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made, poker_player.Best_Finish"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.010489575564861298,
            0.012327400967478752,
            0.0001388366799801588,
            0.00012234084715601057,
            0.00010804337944136932,
            9.859466808848083e-05,
            0.00011640950106084347,
            0.00011050069588236511
        ],
        "align_select": "select poker_player.Poker_Player_ID",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show lists of poker players ranked according to the final table made in order",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made",
            "select poker_player.Final_Table_Made",
            "select poker_player.People_ID, poker_player.Final_Table_Made",
            "select poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.00010689663758967072,
            0.00010689663758967072,
            0.892767071723938,
            0.892767071723938,
            0.00012110793613828719,
            0.00012110793613828719,
            0.0008927343296818435,
            0.0008927343296818435
        ],
        "align_select": "select poker_player.Final_Table_Made",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the birthday of the poker player who has made the least?",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, poker_player.Final_Table_Made",
            "select people.Birth_Date, people.Height",
            "select people.Birth_Date, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9862318634986877,
            0.00012838971451856196,
            0.0006700496305711567,
            6.928185757715255e-05,
            0.00019821898604277521,
            6.489436782430857e-05,
            0.0005009991582483053,
            8.33486337796785e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Determine the maximum number of Final Tables made among poker players with Earnings under 200K.",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.Earnings",
            "select max(poker_player.Final_Table_Made) dependant on poker_player.Earnings",
            "select max(poker_player.Final_Table_Made) dependant on poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.995508074760437,
            6.616157770622522e-05,
            0.00014739070320501924,
            5.277281525195576e-05,
            0.0003779649268835783,
            7.269464549608529e-05,
            0.00013905596279073507,
            6.344567373162135e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the largest and smallest possible area codes?",
        "gold_select": "select max(AREA_CODE_STATE.area_code), min(AREA_CODE_STATE.area_code)",
        "select_candidates": [
            "select max(AREA_CODE_STATE.area_code), min(AREA_CODE_STATE.area_code)",
            "select max(t0.c2), min(t0.c2)",
            "select max(AREA_CODE_STATE.state), min(t0.c2)",
            "select max(t0.c6), min(t0.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE",
        "table_candidates": [
            "AREA_CODE_STATE",
            "AREA_CODE_STATE CONTESTANTS",
            "AREA_CODE_STATE VOTES"
        ],
        "align_scores": [
            0.9906904697418213,
            0.0002864473790396005,
            0.01723054051399231,
            0.0012323082191869617,
            0.000563413486815989,
            0.00024057080736383796,
            0.007751171477138996,
            0.000587480841204524
        ],
        "align_select": "select max(AREA_CODE_STATE.area_code), min(AREA_CODE_STATE.area_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What was the latest day that CA votes were counted on?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select max(t2.c5)",
            "select max(VOTES.contestant_number)",
            "select max(t2.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.0025306849274784327,
            6.707919237669557e-05,
            0.0008779139607213438,
            8.540853741578758e-05,
            0.0008497191593050957,
            6.623070657951757e-05,
            0.0008016950450837612,
            8.82185049704276e-05
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the last date for the creation of the votes in the State of California?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select min(VOTES.created)",
            "select the max(VOTES.created)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9934346675872803,
            0.0002110538334818557,
            0.018932785838842392,
            0.9940071105957031,
            0.06428094953298569,
            0.0001556807110318914,
            0.0005597653798758984,
            0.00021585801732726395
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "On the last date, what was the number of votes from California?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select count(*)",
            "select count(*), VOTES.state",
            "select count(*), AREA_CODE_STATE.state",
            "select VOTES.created, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.01176657248288393,
            0.0002511719358153641,
            0.0002708861429709941,
            0.0001883014483610168,
            0.00022869760869070888,
            0.00019763546879403293,
            0.0005248376401141286,
            0.0002491761988494545
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show the date of votes from the state California.",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select VOTES.created",
            "select t2.c5",
            "select VOTES.vote_id",
            "select VOTES.vote_id, VOTES.created"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9956974983215332,
            5.767419497715309e-05,
            0.00044006604002788663,
            5.823636820423417e-05,
            0.00028960866620764136,
            6.157022289698943e-05,
            0.00010887137614190578,
            6.0013189795427024e-05
        ],
        "align_select": "select VOTES.created",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Determine when last votes were posted for the State of California.",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select t2.c5",
            "select max(VOTES.created)",
            "select VOTES.created",
            "select VOTES.vote_id, max(VOTES.created)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.0007743443129584193,
            0.0008192166569642723,
            0.9478830695152283,
            0.0005217482103034854,
            0.8453227877616882,
            0.99553382396698,
            0.00019813585095107555,
            0.0001478959748055786
        ],
        "align_select": "select VOTES.created",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "When did the last vote from California get created?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select min(VOTES.created)",
            "select max(t2.c5)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9956231713294983,
            0.0002828235737979412,
            0.9674199819564819,
            0.9937892556190491,
            0.8715513944625854,
            0.00021071020455565304,
            0.0007675045635551214,
            0.00018565151549410075
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the latest day in which we collected votes from CA?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select max(t2.c5)",
            "select max(t2.c6)",
            "select max(VOTES.contestant_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.38065385818481445,
            7.210600597318262e-05,
            0.000755199755076319,
            9.563718049321324e-05,
            0.0006858095875941217,
            0.00010015489533543587,
            0.0005359176429919899,
            6.72067326377146e-05
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please give me the last date that new votes for CA were added.",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select VOTES.vote_id, max(VOTES.created)",
            "select VOTES.vote_id, VOTES.created"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.5557028651237488,
            0.0004722801095340401,
            0.09109897166490555,
            0.9932610392570496,
            0.00021928623027633876,
            0.00012287512072362006,
            0.00017987974570132792,
            0.00017843472596723586
        ],
        "align_select": "select VOTES.created",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the last date of votes from California.",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select t2.c5",
            "select VOTES.vote_id, max(VOTES.created)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.3395671844482422,
            0.00019734301895368844,
            0.0018497910350561142,
            0.9958881735801697,
            0.0005291838897392154,
            0.0004573231271933764,
            0.00014610352809540927,
            0.00011765670933527872
        ],
        "align_select": "select VOTES.created",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show the last date when a vote was created from California.",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select max(VOTES.created), AREA_CODE_STATE.state",
            "select max(VOTES.created), VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.8711898922920227,
            0.00026252298266626894,
            0.32701802253723145,
            0.994358241558075,
            0.00016853251145221293,
            0.00010755327093647793,
            0.00011177292617503554,
            7.88311954238452e-05
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the latest date a vote from California was cast?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select max(VOTES.created), AREA_CODE_STATE.state",
            "select max(t2.c5)",
            "select max(VOTES.created), VOTES.phone_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.7078686356544495,
            7.301918230950832e-05,
            0.00021521579765249044,
            6.216811743797734e-05,
            0.0009795299265533686,
            8.397201600018889e-05,
            0.0001522485981695354,
            5.8974517742171884e-05
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The total number of voters for New York (or California).",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), AREA_CODE_STATE.state",
            "select VOTES.state, count(*)",
            "select count(*), AREA_CODE_STATE.state, VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES"
        ],
        "align_scores": [
            0.9953085780143738,
            8.358168270206079e-05,
            0.0001948255958268419,
            9.309318556915969e-05,
            0.0009321137331426144,
            6.95087801432237e-05,
            0.00012001853610854596,
            6.064694753149524e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of votes in either NY or California.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), VOTES.state",
            "select count(*), AREA_CODE_STATE.state",
            "select count(*) in VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9957091808319092,
            6.726822903146967e-05,
            0.0002502363931853324,
            9.702543320599943e-05,
            0.0001965076371561736,
            8.030243043322116e-05,
            0.0009389673941768706,
            8.572317165089771e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of the votes in California, how many came from New York?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select VOTES.state, count(*)",
            "select AREA_CODE_STATE.state, count(*)",
            "select VOTES.vote_id, count(*)",
            "select VOTES.phone_number, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.23264706134796143,
            0.0014926688745617867,
            0.2416531890630722,
            0.0007196427322924137,
            0.00033711123978719115,
            0.00027473008958622813,
            0.0008977160905487835,
            0.00027164496714249253
        ],
        "align_select": "select VOTES.state, count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Show the number of vote count in New York or California?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select VOTES.state, count(*)",
            "select count(*), AREA_CODE_STATE.state",
            "select sum(VOTES.vote_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9954314231872559,
            0.0001169461029348895,
            0.0015321960672736168,
            9.659663191996515e-05,
            0.0001858431496657431,
            0.00012368860188871622,
            0.0015424172161146998,
            0.00011279641330474988
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of vote from state New York (or California).",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), AREA_CODE_STATE.state",
            "select VOTES.state, count(*)",
            "select count(*), VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES"
        ],
        "align_scores": [
            0.9949871301651001,
            8.28648844617419e-05,
            0.00020238786237314343,
            9.294415940530598e-05,
            0.0027973304968327284,
            8.651936514070258e-05,
            0.00032319300225935876,
            8.296514715766534e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many votes were from NY or CA?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), AREA_CODE_STATE.state",
            "select count(*), VOTES.state",
            "select count(*), VOTES.vote_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9946288466453552,
            0.0003376656968612224,
            0.00023998686810955405,
            0.0020380907226353884,
            0.00030477368272840977,
            0.03701600059866905,
            0.0001696161925792694,
            0.00011629732034634799
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many votes from NY or CA?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), AREA_CODE_STATE.state",
            "select count(*), VOTES.state",
            "select count(*), AREA_CODE_STATE.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9959034323692322,
            0.00011086778249591589,
            0.00021880670101381838,
            9.062921162694693e-05,
            0.0002627481007948518,
            8.365663234144449e-05,
            0.00021880670101381838,
            9.062921162694693e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where did more votes come from, California or New York?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select VOTES.state",
            "select AREA_CODE_STATE.state, count(*)",
            "select AREA_CODE_STATE.state, VOTES.state",
            "select AREA_CODE_STATE.state ou VOTES.state"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9566233158111572,
            0.006508353166282177,
            0.005477648228406906,
            0.0007868419052101672,
            0.0006164922378957272,
            0.000353130919393152,
            0.0012931320816278458,
            0.00045436836080625653
        ],
        "align_select": "select VOTES.state",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many votes came from either NY or CA?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), AREA_CODE_STATE.state",
            "select count(*), VOTES.state",
            "select count(*), AREA_CODE_STATE.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9943548440933228,
            0.0002922082494478673,
            0.00024747155839577317,
            0.005818003322929144,
            0.0003579807234928012,
            0.10879778116941452,
            0.00024747155839577317,
            0.005818003322929144
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the native tongue of the most speakers in each country?",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9924147725105286,
            7.658259710296988e-05,
            0.005256173200905323,
            6.549792306032032e-05,
            0.0005611037486232817,
            6.029932774254121e-05,
            0.26834896206855774,
            7.42132542654872e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Sum up the numbers for all Asian countries, what is the total population and highest GNP?",
        "gold_select": "select sum(country.Population), max(country.GNP)",
        "select_candidates": [
            "select sum(country.Population), max(country.GNP)",
            "select sum(country.Population), country.GNP",
            "select country.Population, country.GNP",
            "select sum(country.Population), sum(country.GNP)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.00015157778398133814,
            0.9940981864929199,
            0.13767345249652863,
            0.9316834211349487,
            0.40393713116645813,
            0.9474936127662659,
            0.38310712575912476,
            0.008172906935214996
        ],
        "align_select": "select sum(country.Population), max(country.GNP)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know the total population and greatest national income of Asia.",
        "gold_select": "select sum(country.Population), max(country.GNP)",
        "select_candidates": [
            "select sum(country.Population), max(country.Population)",
            "select max(country.Population), sum(country.Population)",
            "select sum(country.Population), max(country.SurfaceArea)",
            "select country.Population, max(country.SurfaceArea)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0003540581092238426,
            0.00010925324750132859,
            0.00024991112877614796,
            8.64287358126603e-05,
            0.00033407058799639344,
            9.135685832006857e-05,
            0.00026684856857173145,
            9.119157766690478e-05
        ],
        "align_select": "select sum(country.Population), max(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many official languages are spoken in the countries that were founded before 1930?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.IsOfficial)",
            "select count(count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.07170040160417557,
            0.00014781900972593576,
            0.9932438731193542,
            0.001153640798293054,
            0.014854680746793747,
            0.0008854766492731869,
            0.0008246050565503538,
            9.151414269581437e-05
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many unique official languages spoken in countries that are founded before 1930?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(distinct t3.c6)",
            "select count(distinct t3.c5)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.007323714438825846,
            9.07430294319056e-05,
            0.9956745505332947,
            0.00011427406570874155,
            0.0005856722127646208,
            7.819905295036733e-05,
            0.000623188738245517,
            7.786480273352936e-05
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of official languages spoken in the countries that were established prior to 1930.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.IsOfficial)",
            "select count(*)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.18496710062026978,
            0.0001632930216146633,
            0.9902650117874146,
            0.000167213540407829,
            0.01242712140083313,
            0.0004837381711695343,
            0.9656898975372314,
            0.007407977245748043
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know the total number of official languages spoken in the countries which were independent in the year 1930 or earlier.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select sum(countrylanguage.IsOfficial)",
            "select count(*)",
            "select count(countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.16883790493011475,
            0.00026061394601128995,
            0.009950650855898857,
            0.0007806133944541216,
            0.9807573556900024,
            0.02306070365011692,
            0.05930589511990547,
            0.0006593202706426382
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the country with the most languages in use?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9948522448539734,
            8.052112389123067e-05,
            0.005608456674963236,
            0.00010249808110529557,
            0.0019769722130149603,
            7.555617048637941e-05,
            0.00032632253714837134,
            6.413005030481145e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which country has the largest number of official languages?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9728448987007141,
            6.589033728232607e-05,
            0.0043893614783883095,
            8.319585322169587e-05,
            0.0010802632896229625,
            6.53791066724807e-05,
            0.0003440675209276378,
            6.134119030321017e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which nation use the most languages",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9933562874794006,
            7.282140722963959e-05,
            0.005377643741667271,
            8.47402261570096e-05,
            0.00024990542442537844,
            6.016560655552894e-05,
            0.0011923550628125668,
            6.764506542822346e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the name of the country that speaks the most languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9953464865684509,
            6.662230589427054e-05,
            0.0036060521379113197,
            8.147548942361027e-05,
            0.0002018170926021412,
            5.821671584271826e-05,
            0.0011469867313280702,
            6.666914123343304e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which country uses the largest number of languages?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9922922849655151,
            5.526138193090446e-05,
            0.005112051032483578,
            7.280113641172647e-05,
            0.0009169591940008104,
            5.7338475016877055e-05,
            0.000287692149868235,
            5.6121134548448026e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which nation uses the most languages",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9943324327468872,
            6.302614201558754e-05,
            0.007112518884241581,
            7.928745617391542e-05,
            0.0002411373716313392,
            5.834654803038575e-05,
            0.001241446123458445,
            6.417189433705062e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "The top three countries in population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Population",
            "select country.Name, country.Code",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9920487999916077,
            4.6919620217522606e-05,
            0.00037448309012688696,
            5.6778684665914625e-05,
            0.007074803579598665,
            5.3315739933168516e-05,
            0.0002328361733816564,
            5.636350397253409e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the names of the top three countries in terms of population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Population",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9918970465660095,
            5.6741446314845234e-05,
            0.0002401924430159852,
            5.361455987440422e-05,
            0.0005565653555095196,
            5.3821768233319744e-05,
            0.001092853955924511,
            5.5117914598667994e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "The top three most populous countries.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.HeadOfState",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9941593408584595,
            4.84030315419659e-05,
            0.00033724604872986674,
            5.3630203183274716e-05,
            0.0001956049381988123,
            4.9598002078710124e-05,
            0.0005238724988885224,
            5.540977144846693e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the names of the three largest countries.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.HeadOfState",
            "select country.Name (country.Code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9954896569252014,
            5.337189577403478e-05,
            0.0004070747527293861,
            5.065380173618905e-05,
            0.00023345681256614625,
            5.06640353705734e-05,
            0.018065383657813072,
            5.6153632613131776e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the most populated three countries.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Population",
            "select country.Name, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.994484007358551,
            4.7790810640435666e-05,
            0.00046425045002251863,
            5.2129635150777176e-05,
            0.0006953607080504298,
            5.335428795660846e-05,
            0.00025250788894481957,
            5.02622096973937e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What nations are the three most populous",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.HeadOfState",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9907681345939636,
            5.350474748411216e-05,
            0.00047054962487891316,
            5.5826174502726644e-05,
            0.0003297526272945106,
            5.774034434580244e-05,
            0.02098694071173668,
            6.052908065612428e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the three most populous countries?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Name, country.Capital",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9948863387107849,
            5.322555807651952e-05,
            0.0069008637219667435,
            5.867318031960167e-05,
            0.00040638577775098383,
            5.352307198336348e-05,
            0.0006748838350176811,
            5.718006650567986e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find names of the three countries with the highest population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9726142287254333,
            5.5082287872210145e-05,
            0.00030784844420850277,
            5.723751746700145e-05,
            0.002667620312422514,
            6.0147936892462894e-05,
            0.00017200906586367637,
            5.9352187236072496e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the top three countries in order of population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Population",
            "select country.Code, country.Name",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9925416707992554,
            0.9925416707992554,
            0.00041793682612478733,
            0.00041793682612478733,
            0.004804182332009077,
            0.004804182332009077,
            0.00395931676030159,
            0.00395931676030159
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the list of countries that have a bigger surface area than any European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.SurfaceArea",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6276401877403259,
            0.0005508405156433582,
            0.00026685086777433753,
            0.00010273154475726187,
            0.00038513948675245047,
            9.407966717844829e-05,
            0.0006983933853916824,
            0.00016001031326595694
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all the countries whose surface areas are larger than that of any European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Continent",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7552630305290222,
            0.0003952924453187734,
            0.0007087221601977944,
            0.00015934708062559366,
            0.00030355193302966654,
            9.492875688010827e-05,
            0.0002398308861302212,
            0.00011314091534586623
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the countries with more land area than any European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Region",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6948742866516113,
            0.00040824952884577215,
            0.00025827717036008835,
            8.39636122691445e-05,
            0.0005622123717330396,
            8.807611447991803e-05,
            0.00029079560772515833,
            9.558420424582437e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "which asian country has biggest area, and what is the population and expected live time of its citizens",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.Population, country.LifeExpectancy",
            "select country.Name, country.Code, country.Population, country.LifeExpectancy",
            "select country.Name, country.Continent, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0013647451996803284,
            9.877807315206155e-05,
            0.00018849634216167033,
            8.27380790724419e-05,
            0.00022814965632278472,
            9.17091456358321e-05,
            0.000219136563828215,
            7.10518506821245e-05
        ],
        "align_select": "select country.Name, country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the population and expected lifespan of the Asian nation with the biggest surface?",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Population, country.LifeExpectancy",
            "select country.Code, country.Population, country.LifeExpectancy",
            "select country.Code, country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9873215556144714,
            0.00020259039592929184,
            0.00043677922803908587,
            8.849790901876986e-05,
            0.00028155476320534945,
            9.35712960199453e-05,
            0.0004985546693205833,
            8.207453356590122e-05
        ],
        "align_select": "select country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the language that is used by the most Asian countries?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Code2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9918609857559204,
            8.394719770876691e-05,
            0.0005088619654998183,
            7.250835187733173e-05,
            0.0002575094986241311,
            6.372695497702807e-05,
            0.00041132463957183063,
            7.257669494720176e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language most commonly used by the most countries in Asia?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.994383692741394,
            0.00013106578262522817,
            0.0008011505706235766,
            8.085306762950495e-05,
            0.00028281199047341943,
            6.941088213352486e-05,
            0.0003157248720526695,
            7.977496716193855e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many countries have a majority of their population speaking Spanish?",
        "gold_select": "select count(*), max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), country.Name",
            "select count(*), country.Name, country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.990382730960846,
            0.0016884932992979884,
            0.001670614117756486,
            0.0015833112411201,
            0.0011223274050280452,
            0.0008295184816233814,
            0.0002723895013332367,
            0.0001522599341114983
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out which Asian countries have more than any African country's population size.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.5255629420280457,
            0.0001956415071617812,
            0.0003542466729413718,
            8.805981633486226e-05,
            0.0002403081307420507,
            6.348942406475544e-05,
            0.002332722069695592,
            0.00011134602391393855
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all Asian countries where there are a greater number of people than that found in any African country?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select distinct country.Name",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.6798855066299438,
            0.0020449357107281685,
            0.0004474388842936605,
            0.00017170491628348827,
            0.1308184415102005,
            0.0009780656546354294,
            0.0002738615730777383,
            9.028366184793413e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of Asian nations that surpass African nations in population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.9535061717033386,
            0.4813132584095001,
            0.0001788026129361242,
            0.0002409431617707014,
            0.00021291172015480697,
            0.00028614606708288193,
            0.00016148881695698947,
            0.00022740126587450504
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries in Asia have the shortest average life expectancy?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, avg(country.LifeExpectancy)",
            "select country.Name, country.LifeExpectancy",
            "select country.Name, avg(country.LifeExpectancy), country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9925321936607361,
            0.8814529776573181,
            0.0010269387857988477,
            0.0008468904998153448,
            0.0008598144049756229,
            0.0008869758457876742,
            0.00010016100713983178,
            7.476248720195144e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name of the Asian countries which live shortest?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9921733140945435,
            0.0002491783525329083,
            0.00026031670859083533,
            0.0001055528991855681,
            0.0003519227320794016,
            8.427428110735491e-05,
            0.0002220195165136829,
            9.719332592794672e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "How many official languages for countries founded before 1930?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.IsOfficial)",
            "select count(count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.031588632613420486,
            0.00011050196189898998,
            0.992345929145813,
            0.00037752505159005523,
            0.00813985150307417,
            0.0006439175922423601,
            0.0005056167137809098,
            0.00011975696543231606
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For countries founded before 1930, how many official languages are there?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(count(distinct countrylanguage.IsOfficial)",
            "select count(countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.06992270797491074,
            8.749466360313818e-05,
            0.9921303391456604,
            0.0002847407595254481,
            0.0005595192196778953,
            0.00010620654211379588,
            0.00863361731171608,
            0.0002629503724165261
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many countries were founded before 1930 that had an official language?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), countrylanguage.Language, country.Name",
            "select count(*), country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9719988703727722,
            0.014591640792787075,
            0.00036796805215999484,
            0.004782127682119608,
            0.00017866387497633696,
            0.00026984038413502276,
            0.0003808554320130497,
            0.005510920193046331
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different official languages were used in the countries established prior to 1930?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language, countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language, count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.99137282371521,
            0.0003395697276573628,
            0.03605670481920242,
            0.00011870361777255312,
            0.00045509939081966877,
            0.00014988753537181765,
            0.0001494713797001168,
            7.40133982617408e-05
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the total number of distinct official languages in the countries founded prior to 1930.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(distinct t3.c6)",
            "select count(distinct countrylanguage.IsOfficial)."
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.014934832230210304,
            0.00013825790665578097,
            0.9951708912849426,
            0.00015052765957079828,
            0.00043126195669174194,
            0.00013384447083808482,
            0.0003205038665328175,
            9.902762394631281e-05
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of different official languages for the countries that existed from 1890 to 1929?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.CountryCode)",
            "select count(distinct countrylanguage.Language)."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.992358386516571,
            0.0006048113573342562,
            0.43124738335609436,
            0.0004293191304896027,
            0.0018786615692079067,
            0.0009403738658875227,
            0.0006507154321298003,
            0.00014690106036141515
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The countries existing prior to 1930, how many official languages did they have?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select country.Name, count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select countrylanguage.CountryCode, count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.00015533642726950347,
            0.00013948623382020742,
            0.0012560267932713032,
            0.0002475657092873007,
            0.00024096730339806527,
            0.0015932770911604166,
            0.001716054161079228,
            0.0003499798767734319
        ],
        "align_select": "select count(distinct countrylanguage.IsOfficial)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Please tell me about each individual country that was founded prior to 1930 in terms of its total number of official languages.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select country.Name, sum(countrylanguage.IsOfficial)",
            "select country.Code, sum(countrylanguage.IsOfficial)",
            "select country.Name, sum(country.Continent)",
            "select country.Name, sum(countrylanguage.Percentage)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.00839242897927761,
            0.0003601396456360817,
            0.020362436771392822,
            0.0005989542114548385,
            0.0002631524985190481,
            0.00016078112821560353,
            0.0020047961734235287,
            0.000161619289428927
        ],
        "align_select": "select country.Name, sum(countrylanguage.IsOfficial)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Show the total count of official language in the country's founded earlier than 1930.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select sum(countrylanguage.IsOfficial)",
            "select count(*)",
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.7168843150138855,
            0.0004862201458308846,
            0.988466739654541,
            0.003630327060818672,
            0.009048485197126865,
            0.0001344224438071251,
            0.07299578934907913,
            0.00028413868858478963
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the cities, where their numbers range from 160000 to 900000?",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, city.Population",
            "select city.ID, city.Name",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9752722382545471,
            0.0002333718293812126,
            0.00017321945051662624,
            9.883386519504711e-05,
            0.00020301541371736676,
            0.00010913308506133035,
            0.0002093650255119428,
            0.00011349836859153584
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all cities whose population is between 160,000 and 900,000.",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, city.ID",
            "select city.Name, city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9584673643112183,
            0.000178469781531021,
            0.0003879826981574297,
            0.0001033015942084603,
            0.00032106199068948627,
            9.429900092072785e-05,
            0.00020496937213465571,
            8.547991455998272e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names and sizes of the five largest countries.",
        "gold_select": "select country.Name, country.SurfaceArea",
        "select_candidates": [
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.SurfaceArea, country.Population",
            "select country.Name, country.SurfaceArea, country.IndepYear",
            "select country.Name, country.SurfaceArea,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9956578016281128,
            6.979332101764157e-05,
            0.0004762552271131426,
            5.265478102955967e-05,
            0.00016536162002012134,
            5.1098792027914897e-05,
            0.0023077719379216433,
            6.997759192017838e-05
        ],
        "align_select": "select country.Name, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the names and area of the 5 biggest countries.",
        "gold_select": "select country.Name, country.SurfaceArea",
        "select_candidates": [
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.SurfaceArea, country.Region",
            "select country.Name, country.SurfaceArea)",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9953019618988037,
            6.767673039576039e-05,
            0.0001344193733530119,
            5.7245870266342536e-05,
            0.00226931762881577,
            6.46517364657484e-05,
            0.07358428835868835,
            7.79973779572174e-05
        ],
        "align_select": "select country.Name, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who are the 5 largest countries and their sizes?",
        "gold_select": "select country.Name, country.SurfaceArea",
        "select_candidates": [
            "select country.Name, country.SurfaceArea",
            "select country.Code, country.Name, country.SurfaceArea",
            "select country.Name, country.SurfaceArea, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9938470721244812,
            8.047637675190344e-05,
            0.0012594664003700018,
            6.305794522631913e-05,
            0.001044290023855865,
            6.052942626411095e-05,
            0.00035893727908842266,
            7.22320910426788e-05
        ],
        "align_select": "select country.Name, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language which is spoken by the most countries?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9927617907524109,
            7.683759758947417e-05,
            0.002300718566402793,
            6.801082781748846e-05,
            0.0007620451506227255,
            6.147764361230657e-05,
            0.0008672460680827498,
            7.416799053316936e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Out of which languages do the most countries speak?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, countrylanguage.Percentage"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9942865967750549,
            7.791857206029817e-05,
            0.0008054014178924263,
            6.326224684016779e-05,
            0.0006807301542721689,
            6.037136699887924e-05,
            0.000866614980623126,
            5.666142169502564e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the three biggest countries in population?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9897326827049255,
            5.479194442159496e-05,
            0.00879720225930214,
            5.9361245803302154e-05,
            0.0005037910887040198,
            5.996742402203381e-05,
            0.012944461777806282,
            5.873340705875307e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List three countries with the largest populations.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Name, country.Population",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9887621998786926,
            5.42913367098663e-05,
            0.0067290738224983215,
            5.810202128486708e-05,
            0.0007983301184140146,
            5.907572267460637e-05,
            0.0003600071358960122,
            5.9133217291673645e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the name of countries that have the top three populations.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9863877296447754,
            5.1139886636519805e-05,
            0.0004443660145625472,
            5.5272237659664825e-05,
            0.0017412613378837705,
            5.8601097407517955e-05,
            0.0005767892580479383,
            5.466752190841362e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Name the top three most populous countries.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.HeadOfState",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9938150644302368,
            5.404566036304459e-05,
            0.00027883474831469357,
            5.8569650718709454e-05,
            0.00018988302326761186,
            5.471957410918549e-05,
            0.0045270672999322414,
            5.6710498029133305e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the top 3 countries by population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Population",
            "select country.Name, country.Code",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9954932928085327,
            5.303997022565454e-05,
            0.0005062003037892282,
            5.932706335443072e-05,
            0.008078206330537796,
            5.5880551371956244e-05,
            0.007050108630210161,
            5.776313992100768e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the names of countries with the three highest populations.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9901084899902344,
            5.4035710491007194e-05,
            0.00037208787398412824,
            5.0967973947990686e-05,
            0.0014382271328940988,
            5.364079697756097e-05,
            0.005155268125236034,
            5.343973680282943e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the three biggest countries in terms of population?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Population",
            "select country.Name, country.Code",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9886958599090576,
            5.808922287542373e-05,
            0.0005775209283456206,
            6.111156108090654e-05,
            0.006839951034635305,
            6.078857768443413e-05,
            0.01065151672810316,
            6.0875474446220323e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the names of countries whose populations are the top three in the world.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Population",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9869322180747986,
            5.5187865655170754e-05,
            0.000324640073813498,
            5.520765625988133e-05,
            0.0005467369919642806,
            5.5908218200784177e-05,
            0.0018128935480490327,
            5.7299170293845236e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the city with the most people who speak English.",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.Name, countrylanguage.IsOfficial",
            "select city.Name, countrylanguage.Language",
            "select city.Name, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9901295304298401,
            0.00010253659274894744,
            0.0021082868333905935,
            0.00011886456923093647,
            0.0029994978103786707,
            0.00010472127178218216,
            0.0006885864422656596,
            0.0001027859325404279
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which country speaks the most number of different language?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9864867925643921,
            6.270506128203124e-05,
            0.005480366293340921,
            8.836955385049805e-05,
            0.0012110602110624313,
            6.711394235026091e-05,
            0.0003124874201603234,
            5.8089390222448856e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which country has the most languages?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9947966933250427,
            6.288259464781731e-05,
            0.006170632783323526,
            7.556654600193724e-05,
            0.00019061623606830835,
            5.486813097377308e-05,
            0.0019804800394922495,
            6.891168595757335e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which is the country that speaks the most langauges?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9930639863014221,
            7.577971700811759e-05,
            0.005483126733452082,
            9.80977201834321e-05,
            0.0011063329875469208,
            7.325812475755811e-05,
            0.0004721005097962916,
            6.281985406531021e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which country has most language spoken?.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9928311109542847,
            7.843145431252196e-05,
            0.0036137327551841736,
            8.034265192691237e-05,
            0.00023040630912873894,
            5.790846989839338e-05,
            0.0017212432576343417,
            7.757841376587749e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What country has the largest number of languages as spoken?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9904029369354248,
            7.560331141576171e-05,
            0.006331615149974823,
            8.010832243598998e-05,
            0.0008593803504481912,
            5.98786209593527e-05,
            0.0003227815614081919,
            5.985600728308782e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the name of the country that speaks the most languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.9948888421058655,
            6.894428952364251e-05,
            0.00441313162446022,
            8.618093124823645e-05,
            0.0002231923717772588,
            5.9768062783405185e-05,
            0.0013161341194063425,
            6.744885467924178e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Name of country which speaks the most languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.9950205087661743,
            8.470329339616e-05,
            0.004053352400660515,
            8.109690679702908e-05,
            0.0010151125025004148,
            6.418805423891172e-05,
            0.00019816227722913027,
            5.937811511103064e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the average lifespan and number of inhabitants in continents, where the average lifespan is lower than 72 years old.",
        "gold_select": "select sum(country.Population), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select avg(country.LifeExpectancy), avg(country.Population)",
            "select avg(country.LifeExpectancy), count(*)",
            "select avg(country.LifeExpectancy), country.Population",
            "select avg(country.LifeExpectancy), sum(country.Population)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7457131743431091,
            0.006055857054889202,
            0.9342721104621887,
            0.061535753309726715,
            0.9770844578742981,
            0.02742677368223667,
            0.03254192695021629,
            0.02129901945590973
        ],
        "align_select": "select avg(country.LifeExpectancy), country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the African countries with less people than any Asian country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Code, country.Name",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.677282989025116,
            0.000553889840375632,
            0.0002781646035145968,
            9.886675979942083e-05,
            0.0021548799704760313,
            0.00012752925977110863,
            0.00038125738501548767,
            7.487478433176875e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries belonging to the continents named Africa have even fewer residents than any Asian nations?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Population",
            "select country.Name, country.Continent",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.3838665783405304,
            0.06627597659826279,
            0.0004139621742069721,
            0.00012311273894738406,
            0.0004937390913255513,
            0.00018097426800522953,
            0.0027825916185975075,
            0.0004190864274278283
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please show the names of African countries which have fewer inhabitants than any country in Asia.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7813370227813721,
            0.0006797495880164206,
            0.0002573276578914374,
            9.384187433170155e-05,
            0.0002792588493321091,
            7.873037975514308e-05,
            0.00024101279268506914,
            9.471887460676953e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names and areas of countries with the five biggest areas.",
        "gold_select": "select country.Name, country.SurfaceArea",
        "select_candidates": [
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Region",
            "select country.Name, country.SurfaceArea)",
            "select country.Name, country.SurfaceArea,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9923655390739441,
            8.568965859012678e-05,
            0.001047731377184391,
            6.740243406966329e-05,
            0.002982419217005372,
            7.348838698817417e-05,
            0.003469893941655755,
            8.002937829587609e-05
        ],
        "align_select": "select country.Name, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of countries that can speak two or more languages and how many languages they can speak?",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(distinct country.Name)",
            "select country.Name, count(countrylanguage.Language)",
            "select country.Name, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.44526100158691406,
            0.2141442745923996,
            0.00029061100212857127,
            0.0001897306356113404,
            0.051447898149490356,
            0.03987661376595497,
            0.9097274541854858,
            0.8778350353240967
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of the countries that speak two or more languages and how many language they speak?",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(*)",
            "select country.Name, count(distinct country.Name)",
            "select country.Name, count(countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.4035819172859192,
            0.00011540341074578464,
            0.9250346422195435,
            0.00011988401820417494,
            0.0002441839314997196,
            7.513112359447405e-05,
            0.08636549115180969,
            8.993598748929799e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What country speak more than two languages? And what languages do they speak?",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Name",
            "select countrylanguage.Language, country.Name",
            "select country.Name.c1, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.7881516814231873,
            0.00010197980736847967,
            0.0018968514632433653,
            8.026668365346268e-05,
            0.9760180711746216,
            9.597786993253976e-05,
            0.0005483950371854007,
            8.73327735462226e-05
        ],
        "align_select": "select country.Name, countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show names of countries who speak two or more languages and their number.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(*)",
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(distinct countrylanguage.CountryCode)",
            "select country.Name, count(distinct country.Code)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9922928810119629,
            0.00015917654673103243,
            0.03167501091957092,
            0.00011354793969076127,
            0.012891540303826332,
            0.00012521445751190186,
            0.0015101302415132523,
            0.00010356384882470593
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of countries that speak two or more languages, as well as how many languages they speak.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(distinct country.Name)",
            "select country.Name, count(*)",
            "select country.Name, count(countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.27710816264152527,
            9.536243305774406e-05,
            0.00026040058583021164,
            7.252646901179105e-05,
            0.97206050157547,
            9.708855213830248e-05,
            0.02615753747522831,
            7.814492710167542e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List countries that speak more than two languages,and how many languages do they speak?",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(countrylanguage.Language)",
            "select country.Name, country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(distinct country.Name)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.30217429995536804,
            9.738647349877283e-05,
            0.06304659694433212,
            8.462943515041843e-05,
            0.00020666765340138227,
            8.037437510211021e-05,
            0.0005382033414207399,
            7.65482836868614e-05
        ],
        "align_select": "select country.Name, count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "To which countries do language is spoken more than two, plus how many do each of them speak?",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(*)",
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.CountryCode, count(*)",
            "select countrylanguage.Language, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "countrylanguage"
        ],
        "align_scores": [
            0.8273503184318542,
            0.000120505690574646,
            0.2385062724351883,
            0.00022318768606055528,
            0.010735435411334038,
            0.00016373457037843764,
            0.7777743339538574,
            0.00011945610458496958
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names of the countries that speak 3 or more languages and the total number of languages they speak.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, sum(countrylanguage.Language)",
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(*)",
            "select country.Name, count(countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.11734604835510254,
            0.0001881058415165171,
            0.04074142500758171,
            8.031453762669116e-05,
            0.9234105944633484,
            0.00011573533265618607,
            0.015432077459990978,
            0.00011169716890435666
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the number of cities in each district with a population that is larger than the average across all cities?",
        "gold_select": "select count(*), city.District",
        "select_candidates": [
            "select count(*), city.District",
            "select city.District, count(*)",
            "select counts(*), city.District",
            "select count(*), city.District,"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9925612807273865,
            0.00020373737788759172,
            0.9933688044548035,
            0.0002020038227783516,
            0.0009207662078551948,
            0.0001716034603305161,
            0.0017655425472185016,
            0.00012269530270714313
        ],
        "align_select": "select count(*), city.District",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "I would like to see the names of the three smallest countries in terms of population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9929038882255554,
            5.8050736697623506e-05,
            0.00046317302621901035,
            5.630914165521972e-05,
            0.0026261580642312765,
            6.0774200392188504e-05,
            0.0008828145219013095,
            5.6669094192329794e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the three countries with the smallest population?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9907776117324829,
            5.42056150152348e-05,
            0.00930597260594368,
            5.9900321502937004e-05,
            0.0009135602158494294,
            5.735356535296887e-05,
            0.014849112369120121,
            5.797340054414235e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the name of Asian countries that has a short average life expectancy.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9557684659957886,
            0.6233885288238525,
            0.0001939711073646322,
            0.00025245232973247766,
            0.00018283879035152495,
            0.00019708764739334583,
            0.00018897629342973232,
            0.0002483022981323302
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the name of Asian country whose life expectancy is the lowest.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9926319122314453,
            0.9926319122314453,
            0.00024041607684921473,
            0.00024041607684921473,
            0.0001609223836567253,
            0.0001609223836567253,
            0.00019656594668049365,
            0.00019656594668049365
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For country that's part of Asia called as having the shortest expected lifespan, please list.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Region",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9668047428131104,
            0.0006008071941323578,
            0.0003508133231662214,
            0.00017502599803265184,
            0.00030024745501577854,
            0.00015939661534503102,
            0.0041461531072855,
            0.00021270006254781038
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Please select the Asian country which has the lowest average life span below.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7941306829452515,
            0.9737078547477722,
            0.0012099262094125152,
            0.0003235286567360163,
            0.0004891937715001404,
            0.0002599900180939585,
            0.0005558247794397175,
            0.0002548734482843429
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which country has the lowest lifespan in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Name, country.Continent",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9899511933326721,
            0.0003644496900960803,
            0.004699221812188625,
            0.00015751042519696057,
            0.0003255227056797594,
            0.00011984609591308981,
            0.005700296722352505,
            0.00015492872626055032
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which country in Asia has the least life expectancy?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9917880892753601,
            0.00023549143224954605,
            0.00031472768750973046,
            0.00010309641220374033,
            0.00023428229906130582,
            8.080834959400818e-05,
            0.000777783861849457,
            8.717586024431512e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "In which Asian country do people live for the least amount of time?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9771589636802673,
            5.9370413509896025e-05,
            0.00048010406317189336,
            6.3195257098414e-05,
            0.000665136321913451,
            6.267194112297148e-05,
            0.00032438355265185237,
            6.0552752984222025e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of Asian country with the lowest average life expectancy?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Region",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9932258725166321,
            0.8315556049346924,
            0.0002970765926875174,
            0.0012087068753316998,
            0.0002475879155099392,
            0.00042710447451099753,
            0.00020705780480057,
            0.00025310085038654506
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the countries whose area exceeds that of any European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Continent",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8825326561927795,
            0.0008729725377634168,
            0.0004009679250884801,
            0.00011729320976883173,
            0.00024276948533952236,
            9.36259311856702e-05,
            0.00021296122577041388,
            9.332605986855924e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which nations have an land area bigger than that of any European nation?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Region",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.5587770342826843,
            0.00042233674321323633,
            0.00046743988059461117,
            8.2104277680628e-05,
            0.0002905605942942202,
            8.880544919520617e-05,
            0.00034815885010175407,
            0.0001035071982187219
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the countries which are larger than the biggest European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Code",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.645351231098175,
            0.0009508513612672687,
            0.0002328961418243125,
            0.00010418908641440794,
            0.0013365860795602202,
            0.0001732055825414136,
            0.0002134878159267828,
            9.739668894326314e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me which countries have a larger area than that of any European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Continent",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7588467597961426,
            0.001329007325693965,
            0.0005829238798469305,
            0.00014597429253626615,
            0.00034100780612789094,
            0.00011443098628660664,
            0.00028464983915910125,
            0.00011769330012612045
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the countries from which an area is larger than all that of all European nations?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Region",
            "select country.Name, country.Continent",
            "select country.Name, country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7161496877670288,
            0.0005106836906634271,
            0.00027565230266191065,
            8.772574074100703e-05,
            0.00028573928284458816,
            8.98786456673406e-05,
            0.00037516007432714105,
            8.617903949925676e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have an area larger than that of any European country?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Region",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7716646790504456,
            0.0003345020522829145,
            0.0003022296878043562,
            8.441552199656144e-05,
            0.0005063537391833961,
            7.436245505232364e-05,
            0.00032697117421776056,
            9.583318751538172e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the countries whose landmass is larger than that of any European nation.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Continent",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8340148329734802,
            0.0001350441452814266,
            0.0005551428184844553,
            7.526708941441029e-05,
            0.00035812260466627777,
            8.791717846179381e-05,
            0.0002495475928299129,
            8.082469139480963e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the countries which have bigger area tham that of any European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Region",
            "select country.Name, country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6586474776268005,
            0.0006748861051164567,
            0.0002210107777500525,
            9.977055015042424e-05,
            0.0002087116736220196,
            9.869578934740275e-05,
            0.000358114717528224,
            0.00012681380030699074
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the country and show its language spoken numbers for all countries that speak at least 3 languages.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, countrylanguage.Language",
            "select country.Name, countrylanguage.CountryCode, count(distinct countrylanguage.Language)",
            "select country.Name, countrylanguage.CountryCode, count(*)",
            "select country.Name, countrylanguage.Language, countrylanguage.Percentage"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.01464939210563898,
            8.079417602857575e-05,
            0.034370385110378265,
            0.00010696679237298667,
            0.520461916923523,
            0.00011787322728196159,
            0.0004778946458827704,
            9.546979708829895e-05
        ],
        "align_select": "select country.Name, countrylanguage.CountryCode, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me countries and their #of languages spoken per country for those with 3 or more languages.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(*)",
            "select count(distinct countrylanguage.Language), country.Name",
            "select country.Name, countrylanguage.CountryCode, count(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.1071191355586052,
            8.920486288843676e-05,
            0.5244580507278442,
            8.67810522322543e-05,
            0.10172079503536224,
            9.378872346132994e-05,
            0.0390617810189724,
            0.00010207846207777038
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Return the name of the country and how many languages spoken for each country that speaks at least 3 languages.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(*)",
            "select country.Name, count(distinct country.Name)",
            "select country.Name, count(countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.10166380554437637,
            9.1500100097619e-05,
            0.8842306733131409,
            0.00013019671314395964,
            0.00020986427261959761,
            7.11593238520436e-05,
            0.009204825386404991,
            9.163099457509816e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "How many cities in each district of those populations are larger than the average population of cities?",
        "gold_select": "select count(*), city.District",
        "select_candidates": [
            "select count(*), city.District",
            "select city.District, count(*)",
            "select counts(*), city.District",
            "select count(*), city.District,"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9883063435554504,
            0.6611923575401306,
            0.9902515411376953,
            0.8719762563705444,
            0.0008998951525427401,
            0.0004472533764783293,
            0.002083117375150323,
            0.000524244736880064
        ],
        "align_select": "select count(*), city.District",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "For nations belonging to the United States, show their mean GDP and their total population.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.SurfaceArea), sum(country.Population)",
            "select avg(country.Population), sum(country.Population)",
            "select avg(country.IndepYear), sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9923833012580872,
            0.0020380381029099226,
            0.0001657044340390712,
            0.00010672909411368892,
            0.00022720577544532716,
            0.00010970047151204199,
            0.0003348061291035265,
            0.00017894076881930232
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I need you to provide the population of all the countries that are considered U.S. territory as well as their respective mean gross national products.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select country.Population, avg(country.GNP)",
            "select country.Code, country.Population, avg(country.GNP)",
            "select country.Name, avg(country.GNP)",
            "select country.Code, country.Name, avg(country.Population)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "country countrylanguage",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.1090603619813919,
            0.00018201483180746436,
            0.011863642372190952,
            0.00014420169463846833,
            0.00032228868803940713,
            0.00013469548139255494,
            0.0004455083981156349,
            0.00010212363122263923
        ],
        "align_select": "select country.Population, avg(country.GNP)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Give me the average Gross National Product and the total population of those countries that are considered U.S. territories.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select sum(country.Population), avg(country.GNP)",
            "select sum(country.GNP), avg(country.GNP)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9924926161766052,
            0.014983941800892353,
            0.9871473908424377,
            0.015507527627050877,
            0.9932242631912231,
            0.06034816801548004,
            0.0005162188899703324,
            0.0004526822885964066
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please find out average Gross National Product and Total Population for all nations that are considered territories of U.S.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), avg(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select avg(country.LifeExpectancy), avg(country.Population)",
            "select avg(country.SurfaceArea), avg(country.GNP)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9786413311958313,
            0.006508470978587866,
            0.9940798282623291,
            0.04066161811351776,
            0.00022103943047113717,
            0.00011646345956251025,
            0.0002498573448974639,
            0.0001294848188990727
        ],
        "align_select": "select avg(country.GNP), avg(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Calculate the average GDP and the total population for those nations who consider themselves part of the United States' Territory.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.SurfaceArea), sum(country.Population)",
            "select avg(country.Population), sum(country.Population)",
            "select avg(country.IndepYear), sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9901571273803711,
            0.00443353783339262,
            0.0002421411481918767,
            0.0001383939088555053,
            0.0002303463261341676,
            0.00012394173245411366,
            0.00035853948793374,
            0.00020302239863667637
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Estimate the average income and total population for countries in which they are classified as U.S.Territory:.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.SurfaceArea), sum(country.Population)",
            "select avg(country.Population), sum(country.Population)",
            "select avg(country.IndepYear), sum(country.Population)",
            "select avg(country.GNP), sum(country.Population)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "country countrylanguage",
            "city country"
        ],
        "align_scores": [
            0.0003179944178555161,
            0.00012913683895021677,
            0.00035457100602798164,
            0.00016537329065613449,
            0.0006451609078794718,
            0.00026524675195105374,
            0.9675822257995605,
            0.0011995489476248622
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "give me the mean GDP and population for countries considered to be part of the US.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), avg(country.Population)",
            "select avg(country.SurfaceArea), avg(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select avg(country.IndepYear), avg(country.Population)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9935613870620728,
            0.0003792643256019801,
            0.0002448436862323433,
            0.00012415867240633816,
            0.9947645664215088,
            0.000582230684813112,
            0.0004198259557597339,
            0.00015783774142619222
        ],
        "align_select": "select avg(country.GNP), avg(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which is the largest nation in Asia by surface area, and what is its population, and average life span?",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.Population, avg(country.LifeExpectancy)",
            "select country.Name, country.SurfaceArea, country.Population, avg(country.LifeExpectancy)",
            "select country.Name, country.Population, avg(country.LifeExpectancy)",
            "select country.Name, country.Population, avg(country.Population)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.11835332959890366,
            0.2202838957309723,
            0.0005221859901212156,
            0.00042225097422488034,
            0.11835332959890366,
            0.2202838957309723,
            0.010624059475958347,
            0.07130245119333267
        ],
        "align_select": "select country.Name, country.Population, avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want to find out the country that has the greatest land area, it's population, and the president of this country.",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState",
            "select country.Name, country.Code6, country.HeadOfState",
            "select country.Code, country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0010654162615537643,
            0.00011979672126471996,
            0.0010654162615537643,
            0.00011979672126471996,
            0.00040946167428046465,
            0.0001222261053044349,
            0.0003085403877776116,
            0.00010741918958956376
        ],
        "align_select": "select country.Name, country.Population, country.HeadOfState",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Of the land areas of all the nations in the Caribbean, what is the total area?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea) descripted in country.Name",
            "select sum(country.SurfaceArea) descripted by country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.989159882068634,
            0.0008733077556826174,
            0.000246003590291366,
            0.0049493927508592606,
            0.001409761025570333,
            0.0003124501381535083,
            0.002106626285240054,
            0.0011236350983381271
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total area of land that comprises the Caribbean countries?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Region",
            "select sum(country.SurfaceArea), country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9951897859573364,
            0.00012693055032286793,
            0.00020028180733788759,
            8.816349873086438e-05,
            0.00025538133922964334,
            7.823157648090273e-05,
            0.0001595371140865609,
            8.128272747853771e-05
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Among all Asian countries, how many people are living there and what's their largest gross national product?",
        "gold_select": "select sum(country.Population), max(country.GNP)",
        "select_candidates": [
            "select country.Population, country.GNP",
            "select country.Name, country.Population, country.GNP",
            "select country.Population, max(country.GNP)",
            "select country.Name, country.Population, max(country.GNP)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.3105812072753906,
            6.633702287217602e-05,
            0.0005997156258672476,
            8.257034642156214e-05,
            0.00011905671999556944,
            7.415185973513871e-05,
            8.357880869880319e-05,
            7.394849671982229e-05
        ],
        "align_select": "select country.Population, country.GNP",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "How much will the life span be the countries on this continent if they were all republics?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select country.LifeExpectancy",
            "select sum(country.LifeExpectancy)",
            "select max(country.LifeExpectancy)",
            "select country.Code, country.LifeExpectancy"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.884985089302063,
            0.0002697701274883002,
            0.753072202205658,
            7.112960884114727e-05,
            0.007421748246997595,
            6.490921077784151e-05,
            0.00027398616657592356,
            8.047300070757046e-05
        ],
        "align_select": "select country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the average lifespan in African republics above.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.GovernmentForm",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9957914352416992,
            0.0001369471283396706,
            0.00011696830915752798,
            0.0003224746324121952,
            0.0004036817990709096,
            0.0001372249098494649,
            0.00013400075840763748,
            7.880444172769785e-05
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Average life span for African countries that are republics.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy)."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9964105486869812,
            0.00019733341468963772,
            0.00039440920227207243,
            0.00012973359844181687,
            0.9964105486869812,
            0.00019733341468963772,
            0.0002843400579877198,
            9.7399388323538e-05
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the average lifespan of all African Republics.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select Avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9961692690849304,
            0.0003498857840895653,
            0.00037559037446044385,
            0.00013316074910108,
            0.9961692690849304,
            0.0003498857840895653,
            0.9961692690849304,
            0.0003498857840895653
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For every country in which the United States has some kind of control, what is their gross national product and population?",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select country.GNP, country.Population",
            "select country.Code, country.GNP, country.Population",
            "select country.Name, country.GNP, country.Population",
            "select country.IndepYear, country.GNP, country.Population"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9632643461227417,
            0.3880447447299957,
            0.002054257784038782,
            0.03826126828789711,
            0.003037540940567851,
            0.058133501559495926,
            0.00040762691060081124,
            0.0004882837529294193
        ],
        "align_select": "select country.GNP, country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The average income (GNP) and the total number of inhabitants in all the countries that are governed by the United States should be mentioned here.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select sum(country.GNP), sum(country.Population)",
            "select an avg(country.GNP), sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9925792813301086,
            8.317792526213452e-05,
            0.9010302424430847,
            8.975702803581953e-05,
            0.00045978600974194705,
            7.408810779452324e-05,
            0.00043307174928486347,
            0.00010427873348817229
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the average age at which people die in which country their mother tongue is not the same as English.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9299283027648926,
            0.611969530582428,
            0.0002451534091960639,
            0.037708982825279236,
            0.0006813434883952141,
            0.00038877816405147314,
            0.0018616607412695885,
            0.6484791040420532
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How long do people live in countries where English is not the official language?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select country.LifeExpectancy",
            "select country.Code, country.LifeExpectancy",
            "select max(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9697191715240479,
            0.00011474502389319241,
            0.00039577283314429224,
            7.361864118138328e-05,
            0.03628786653280258,
            7.683671719860286e-05,
            0.9332981705665588,
            7.568612636532634e-05
        ],
        "align_select": "select country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How long do people live in the countries where English isn't the official language?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select country.LifeExpectancy",
            "select max(country.LifeExpectancy)",
            "select country.Code, country.LifeExpectancy",
            "select avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9747282862663269,
            0.0001237278920598328,
            0.02304326556622982,
            7.867491513025016e-05,
            0.00047869206173345447,
            7.528028800152242e-05,
            0.9184414744377136,
            7.862983329687268e-05
        ],
        "align_select": "select country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How long do people live in countries where English isn't the official language?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select country.LifeExpectancy",
            "select country.Code, country.LifeExpectancy",
            "select max(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9690964221954346,
            0.00012421340215951204,
            0.00044138423982076347,
            7.492092117900029e-05,
            0.05782113969326019,
            7.974674372235313e-05,
            0.9436705112457275,
            7.811356772435829e-05
        ],
        "align_select": "select country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the name of African countries that have lesser population than any Asian country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8711138963699341,
            0.0002985894971061498,
            0.00019371714734006673,
            7.940739305922762e-05,
            0.00020741979824379086,
            6.687761197099462e-05,
            0.00017594410746823996,
            7.994866609806195e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which African nations contain fewer people than any country in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6270414590835571,
            0.0005717045860365033,
            0.00030686939135193825,
            9.694775508251041e-05,
            0.0004045420209877193,
            7.489713607355952e-05,
            0.0002872046607080847,
            8.870058809407055e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Do you have information on which Asian countries have more people than all African countries?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.5115780830383301,
            0.0025007356889545918,
            0.00044209478073753417,
            0.00015601597260683775,
            0.00041723105823621154,
            9.562796913087368e-05,
            0.0003592345747165382,
            0.0001222652499563992
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to see the codes of countries which don't speak English and for whose the government types aren't republics.",
        "gold_select": "select country.Code",
        "select_candidates": [
            "select country.Code",
            "select country.Code, countrylanguage.Language",
            "select country.Name, country.Code2",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9804054498672485,
            0.05872663855552673,
            0.00029087241273373365,
            0.000583008979447186,
            0.00034845739719457924,
            0.0003980529145337641,
            0.0005439099040813744,
            0.0004161509859841317
        ],
        "align_select": "select country.Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the European cities that English is not their official language?.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select distinct city.Name",
            "select city.ID, city.Name",
            "select city.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage"
        ],
        "align_scores": [
            0.78997403383255,
            0.027846628800034523,
            0.06885074824094772,
            0.025182774290442467,
            0.00032907899003475904,
            0.000203634612262249,
            0.0002843972761183977,
            0.0001850022963481024
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me cities in European countries where English is not an official language.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, country.Continent",
            "select city.ID, city.Name",
            "select city.Name, country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.0036488426849246025,
            0.9790710210800171,
            0.00013115780893713236,
            0.00033370641176588833,
            0.00021345441928133368,
            0.0004029278934467584,
            0.0001689975761109963,
            0.00025962074869312346
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please indicate European cities that do not speak English as their mother tongue below.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select distinct city.Name",
            "select city.ID, city.Name",
            "select city.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.7528815269470215,
            0.0026596917305141687,
            0.027968447655439377,
            0.06345000863075256,
            0.0004298138082958758,
            0.00017778054461814463,
            0.0003582955105230212,
            0.00015384524886030704
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which European cities do not speak English as their official language?",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select distinct city.Name",
            "select city.ID, city.Name",
            "select city.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage"
        ],
        "align_scores": [
            0.6379021406173706,
            0.008345882408320904,
            0.11570769548416138,
            0.045067187398672104,
            0.00046764352009631693,
            0.0002221134927822277,
            0.00032524444395676255,
            0.00016176437202375382
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different types of governments and what are their populations for those that had an average life expectancy above 72?",
        "gold_select": "select sum(country.Population), country.GovernmentForm",
        "select_candidates": [
            "select country.GovernmentForm, country.Population",
            "select country.Name, country.Population",
            "select country.GNPOld, country.GovernmentForm, country.Population",
            "select country.GovernmentForm, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.845106840133667,
            0.0001704452879494056,
            0.0899970531463623,
            0.00015502478345297277,
            0.00027511041844263673,
            8.255909779109061e-05,
            0.9473647475242615,
            0.00021576666040346026
        ],
        "align_select": "select country.GovernmentForm, country.Population",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me the names of the continents and their populations and lifespans which have an average life expectancy below 72.",
        "gold_select": "select sum(country.Population), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, avg(country.LifeExpectancy)",
            "select country.Name, country.IndepYear, country.Population, avg(country.LifeExpectancy)",
            "select country.Name, country.Continent, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.45888766646385193,
            0.00010958222992485389,
            0.23307769000530243,
            9.286584827350453e-05,
            0.00012840735143981874,
            6.662312807748094e-05,
            0.0025551794096827507,
            9.060069714905694e-05
        ],
        "align_select": "select country.Name, country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please tell me about all the European nations where their populations that exceed 8000.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select distinct country.Name",
            "select country.Name, country.Continent",
            "select distinct country.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.4608108103275299,
            0.001087107928469777,
            0.08892125636339188,
            0.0006106991204433143,
            0.00020849965221714228,
            0.00010659676627255976,
            0.0002787183620966971,
            0.00011213342804694548
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries are in the continent of Europe with a population of 8000.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Code, country.Name",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9778918027877808,
            0.00023568618053104728,
            0.0002558229025453329,
            7.472114521078765e-05,
            0.0009306601714342833,
            9.820310515351593e-05,
            0.00018173475109506398,
            6.142983329482377e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries are in the continent of Europe and have a population of 8000",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.9038956165313721,
            0.009176335297524929,
            0.00027011451311409473,
            0.00011306411761324853,
            0.0002312761207576841,
            0.0001260011486010626,
            0.0011889752931892872,
            0.00017125984595622867
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of all the European countries, give me the exact names. Please show me those countries which have more than 80000 people residing in them.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select distinct country.Name",
            "select exact country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.519581139087677,
            0.0026574612129479647,
            0.00033718516351655126,
            0.00010596880747471005,
            0.05683910474181175,
            0.0011441627284511924,
            0.0012046501506119967,
            0.0005025215796194971
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the list of countries located on European continent that have a population equal to 80000.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Code, country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Continent, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8337610363960266,
            0.0002682963095139712,
            0.00048068974865600467,
            0.0001188874666695483,
            0.00019797949062194675,
            0.00010078335617436096,
            0.0001410739787388593,
            7.06505888956599e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Tell me all countries that are in Europe and have a population equal to 8000",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.8296971917152405,
            0.011121908202767372,
            0.00021831448248121887,
            0.0001447980321245268,
            0.00024829473113641143,
            0.00010932453733403236,
            0.0018309192964807153,
            0.0001884476514533162
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which European countries are there exactly 80000 people? Explain with an example?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6953717470169067,
            0.012625858187675476,
            0.00025872717378661036,
            9.130442776950076e-05,
            0.0002942195860669017,
            8.253792475443333e-05,
            0.00029063786496408284,
            0.00010082824883284047
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which european countries contain populations of 80000?.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Code, country.Name",
            "select distinct country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9211744666099548,
            0.0029758443124592304,
            0.0002086102031171322,
            0.00011779557826230302,
            0.00217177695594728,
            0.0002158946736017242,
            0.16645292937755585,
            0.0001973586477106437
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I am interested in knowing about the total population and average surface area of all countries located on North America whose surface area has exceeded 3000.",
        "gold_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.Population), avg(country.SurfaceArea)",
            "select avg(country.Population), sum(country.Population)",
            "select sum(country.Population), avg(country.Population)",
            "select total(country.Population), avg(country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9871212840080261,
            0.0032559975516051054,
            0.02324308268725872,
            0.0003907422360498458,
            0.0030985642224550247,
            0.00030265928944572806,
            0.0012331166071817279,
            0.00017603689047973603
        ],
        "align_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How long do people live in countries where English is not their official tongue?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select country.LifeExpectancy",
            "select country.Code, country.LifeExpectancy",
            "select max(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9380718469619751,
            0.00012030339712509885,
            0.0004451651475392282,
            7.231706695165485e-05,
            0.06158149987459183,
            8.056544902501628e-05,
            0.9447592496871948,
            7.813643605913967e-05
        ],
        "align_select": "select country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The countries which became independent since 1950.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select distinct country.Name",
            "select country.Name, country.Code",
            "select distinct country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9860776662826538,
            7.848263339838013e-05,
            0.09284553676843643,
            5.90661475143861e-05,
            0.0004976506461389363,
            6.92856265231967e-05,
            0.0016792245442047715,
            5.677202716469765e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of cities which have a population of 160,000-900,000.",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, city.District",
            "select city.ID, city.Name",
            "select city.Name, city.District, city.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9856454730033875,
            0.0003220024227630347,
            0.0002122448495356366,
            7.00006858096458e-05,
            0.00020304095232859254,
            8.040020475164056e-05,
            0.00020589426276274025,
            7.135542546166107e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of cities in the range 160,000 and 900,000.",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, city.District",
            "select city.ID, city.Name",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9887534379959106,
            0.00021432808716781437,
            0.000141690339660272,
            5.9273006627336144e-05,
            0.0001387980446452275,
            7.193499914137647e-05,
            0.00014923923299647868,
            6.112222763476893e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list all the cities with population in between160000 and 900000.",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, city.District",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.10534092783927917,
            0.00018462025036569685,
            0.000234926090342924,
            0.0001076195330824703,
            0.00017943694547284395,
            9.223289089277387e-05,
            0.00018699708743952215,
            7.19208037480712e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show different names of Asian cities with Chinese as an official language.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select distinct city.Name, country.Capital",
            "select distinct city.Name, countrylanguage.IsOfficial",
            "select city.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9945377707481384,
            0.0003182682557962835,
            0.00019029459508601576,
            8.002578397281468e-05,
            0.0003972547419834882,
            9.954873530659825e-05,
            0.04584048315882683,
            0.8512982726097107
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list the cities in Asia that use chinese as official language.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, country.Capital",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9256054162979126,
            0.0006811763159930706,
            0.00029561814153566957,
            0.0001165816793218255,
            0.00024724204558879137,
            0.00011848681606352329,
            0.00022929323313292116,
            0.0001065726755768992
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which country has English and French as official langues?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Continent",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9956355690956116,
            0.001777886995114386,
            0.0005364331300370395,
            0.00017174455570057034,
            0.0001741657906677574,
            0.00011101377458544448,
            0.0004329680814407766,
            0.0001423453795723617
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name, independence year, and surface area of the small country in which there is least people?",
        "gold_select": "select country.Name, country.SurfaceArea, country.IndepYear",
        "select_candidates": [
            "select country.Name, country.IndepYear, country.SurfaceArea",
            "select country.Name, country.IndepYear., country.SurfaceArea",
            "select country.Name, country.IndepYear, country.SurfaceArea",
            "select country.Name, country.IndepYear\", country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9659641981124878,
            9.863801824394614e-05,
            0.03604155406355858,
            0.00012491205416154116,
            0.9659641981124878,
            9.863801824394614e-05,
            0.011615517549216747,
            7.968061254359782e-05
        ],
        "align_select": "select country.Name, country.IndepYear, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "The life expectancy for countries in central Africa is how long?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select country.LifeExpectancy",
            "select sum(country.LifeExpectancy)",
            "select country.LifeExpectancy, country.Population",
            "select max(country.LifeExpectancy)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9913740754127502,
            6.733259942848235e-05,
            0.003620367730036378,
            6.081977699068375e-05,
            0.00017064041458070278,
            5.936248999205418e-05,
            0.0009531148243695498,
            6.160264456411824e-05
        ],
        "align_select": "select country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many years a human being lives on average in the Central African region.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select Avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9958106279373169,
            7.938013004604727e-05,
            0.0005232469411566854,
            0.00010053993901237845,
            0.9958106279373169,
            7.938013004604727e-05,
            0.9958106279373169,
            7.938013004604727e-05
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in Gelderland?",
        "gold_select": "select sum(city.Population)",
        "select_candidates": [
            "select sum(city.Population)",
            "select city.Population",
            "select count(*)",
            "select city.ID, city.District, city.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.954597532749176,
            6.855153333162889e-05,
            0.9945279955863953,
            0.00010476322495378554,
            0.9952955842018127,
            8.869128214428201e-05,
            0.00015266159607563168,
            6.560506881214678e-05
        ],
        "align_select": "select sum(city.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many residents does Gelderland have?",
        "gold_select": "select sum(city.Population)",
        "select_candidates": [
            "select sum(city.Population)",
            "select city.Population",
            "select count(*)",
            "select sum(city.Population), city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.2020479142665863,
            7.15776695869863e-05,
            0.9953101277351379,
            0.00011686651851050556,
            0.9955295920372009,
            8.308358519570902e-05,
            0.00014201062731444836,
            6.591937562916428e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of countries having a Republican Government.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.GovernmentForm"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9935166835784912,
            0.00021136357099749148,
            0.00029963950510136783,
            0.0035242338199168444,
            0.0003158088366035372,
            0.005704706069082022,
            0.0003475708654150367,
            0.0022538022603839636
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out the area of the continent Asia and the European continent.",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select country.SurfaceArea",
            "select sum(country.SurfaceArea)",
            "select country.SurfaceArea, country.IndepYear",
            "select country.SurfaceArea, country.Population"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.023398257791996002,
            0.9951909780502319,
            0.00020823183876927942,
            0.00026905915001407266,
            9.630626300349832e-05,
            0.00013301681610755622,
            8.667718066135421e-05,
            0.00010854587162612006
        ],
        "align_select": "select country.SurfaceArea",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show Total surfaces areas covered by the Asian or European countries",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Continent",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9954551458358765,
            0.10608317703008652,
            0.00016381203022319824,
            0.00028914184076711535,
            0.00013478053733706474,
            0.0008405428379774094,
            0.00016381203022319824,
            0.00028914184076711535
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "give the total surface area covered by Asian countries or European ones.",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Continent",
            "select sum(country.SurfaceArea) dependant on whether country.Name, country.Continent",
            "select sum(country.SurfaceArea) dependant on whether country.SurfaceArea is country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9958800077438354,
            0.0002292182616656646,
            0.00011508647003211081,
            7.701255526626483e-05,
            0.00016303818847518414,
            0.00010361285967519507,
            0.00017948586901184171,
            0.00010984764958266169
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of types of government on African countries.",
        "gold_select": "select count(distinct country.GovernmentForm)",
        "select_candidates": [
            "select count(distinct country.GovernmentForm)",
            "select count(distinct country.Name)",
            "select count(distinct country.GovernmentForm",
            "select count(distinct country.LocalName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.992764413356781,
            0.00013849885726813227,
            0.000953596259932965,
            0.00010919430496869609,
            0.10421252995729446,
            0.00013288749323692173,
            0.0007549990550614893,
            0.00010342292807763442
        ],
        "align_select": "select count(distinct country.GovernmentForm)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of African governments types.",
        "gold_select": "select count(distinct country.GovernmentForm)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct country.GovernmentForm)",
            "select count(distinct country.Name)",
            "select count(distinct country.GovernmentForm"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9963290095329285,
            0.01163232047110796,
            0.036501914262771606,
            0.00013349979417398572,
            0.001436722814105451,
            0.0002696025185286999,
            0.007861517369747162,
            0.00011377587361494079
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different Asian countries there are?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct country.Name)",
            "select count(count(distinct country.Name)",
            "select count(distinct country.Code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9952697157859802,
            0.9833811521530151,
            0.7417380809783936,
            0.00011032106704078615,
            0.0004924141685478389,
            9.382576536154374e-05,
            0.3889060318470001,
            0.0001331142702838406
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the total population and average surface area corresponding to countries in the North America that have a surface area larger than 3K.",
        "gold_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.Population), avg(country.SurfaceArea)",
            "select sum(country.Population), avg(country.Population)",
            "select avg(country.Population), sum(country.Population)",
            "select country.Population, avg(country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.986182689666748,
            0.0009385992889292538,
            0.005571210756897926,
            0.0004245163581799716,
            0.028523588553071022,
            0.00047594166244380176,
            0.45814943313598633,
            0.0005955619853921235
        ],
        "align_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What conductors were active or founded orchestras established after 2008?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select active conductor.Name",
            "select active conductor.Name, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.973883867263794,
            0.4537386894226074,
            0.0012698342325165868,
            0.0004358166770543903,
            0.005762496963143349,
            0.003964107483625412,
            0.0004046805261168629,
            0.00023990269983187318
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What conductor have conducted orchestra founded after 2008?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (orchestrator_orchestra.Conductor_ID)",
            "select distinct conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9753636121749878,
            0.00015370830078609288,
            0.0002477078523952514,
            8.467140287393704e-05,
            0.0005351154832169414,
            7.514817116316408e-05,
            0.10640443861484528,
            0.00022175164485815912
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of conductors who founded orchestras later than 2008.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (select conductor.Conductor_ID)",
            "select conductor.Name, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.97984778881073,
            7.631527114426717e-05,
            0.0001562433026265353,
            6.0857484641019255e-05,
            0.0005787166301161051,
            6.989303074078634e-05,
            0.0001562433026265353,
            6.0857484641019255e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are conductors who have led orchestras established after the year 2008?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, conductor.Age",
            "select distinct conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9849408268928528,
            0.00015655871538911015,
            0.0004956831107847393,
            9.048241190612316e-05,
            0.00030050601344555616,
            7.337809802265838e-05,
            0.10664418339729309,
            0.00017898598161991686
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are conductors who conducted orchestras founded after the year 2008?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, conductor.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9858470559120178,
            0.00011432028986746445,
            0.000239064684137702,
            6.824873707955703e-05,
            0.0002769663406070322,
            7.726567855570465e-05,
            0.0002636605640873313,
            7.58698079152964e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who has conducted orchestras founded in 2008",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select distinct conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9884088635444641,
            0.00010317882697563618,
            0.0003052394895348698,
            8.121920109260827e-05,
            0.15311384201049805,
            0.0001945239637279883,
            0.0003052394895348698,
            8.121920109260827e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the count of orchestras that use CD/DVD format for their recordings.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct orchestra.Orchestra)",
            "select count(distinct orchestra.Orchestra, count(distinct orchestra.Conductor_ID)",
            "select count(distinct orchestra.Orchestra, count(distinct orchestra.Orchestra_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9911758899688721,
            0.002047636779025197,
            0.003608653787523508,
            0.00011444670235505328,
            0.00014174006355460733,
            9.857831173576415e-05,
            0.0001532828318886459,
            9.775110811460763e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the highest and lowest share percentage for all performances that does not contain the \"Live Final\" in their description.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select performance.Share, max(performance.Share), min(performance.Share)",
            "select max(performance.Share), min(performance.Share), performance.Performance_ID",
            "select t2.cmax(performance.Share), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9880480766296387,
            0.00017260581080336124,
            0.00019211902690585703,
            8.128613990265876e-05,
            0.00010409345122752711,
            6.332665361696854e-05,
            0.00025072641437873244,
            7.582423859275877e-05
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For performances without the type Live final, show the max and min values.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(t2.c8), min(t2.c8)",
            "select max(performance.Weekly_rank), min(performance.Weekly_rank)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9947198629379272,
            0.00010931047290796414,
            0.9930168390274048,
            0.0001047969053615816,
            0.6549566388130188,
            0.00011612279922701418,
            0.9951221346855164,
            0.00011019931844202802
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the largest and smallest shares for performances that do not have a type of Live final.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)",
            "select maximum(performance.Share), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9946980476379395,
            0.00012960031745024025,
            0.0004898363258689642,
            9.073039109352976e-05,
            0.0004985249252058566,
            9.05887718545273e-05,
            0.00100613827817142,
            7.83420618972741e-05
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the largest and smallest values for performances that do not have the Live Final type.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Date), min(performance.Date)",
            "select max(performance.Date), min(performance.Official_ratings_in_millions)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9918805956840515,
            9.907693311106414e-05,
            0.9648563861846924,
            0.00012000479910057038,
            0.9683541655540466,
            0.00012566075020004064,
            0.0004397431912366301,
            9.812654025154188e-05
        ],
        "align_select": "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want to see the maximum and minimum stakes on performances which did not have Live Final.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9946664571762085,
            0.00014754300354979932,
            0.0006147912354208529,
            9.535269782645628e-05,
            0.0006079573649913073,
            9.300462988903746e-05,
            0.004123107064515352,
            0.00013574789045378566
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the maximum and minimum values for performances without type \"Live final\".",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(t2.c8), min(t2.c8)",
            "select max(t2.c7), min(t2.c7)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.987695574760437,
            9.896381379803643e-05,
            0.9925190210342407,
            8.838548819767311e-05,
            0.15990868210792542,
            9.077174036065117e-05,
            0.07446766644716263,
            9.573007264407352e-05
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list the most common record formats used by orchestras, in descending order.",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select top-ten-record-formats-in-descending-order",
            "select orchestra.Major_Record_Format, t1.c6",
            "select top-ten-record-formats-in-c5-ORDER BY-LIMIT"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.933085024356842,
            0.00010426600783830509,
            0.00021172825654502958,
            0.0001025275923893787,
            0.0003717667714226991,
            7.354076660703868e-05,
            0.00011654444824671373,
            0.00012601340131368488
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the common record types in an orchestra, from the least frequent to the most frequent.",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, t1.c6",
            "select top-ten-record-formats-gr.1, orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, performance.Type"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.18982970714569092,
            0.2665512263774872,
            0.00035075563937425613,
            0.0002764874661806971,
            0.0003174615849275142,
            0.00021330344316083938,
            0.0004895042511634529,
            0.00042877907981164753
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "List the most commonly used orchestra recording formats, sorted by frequency.",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select top-ten-recording-formats-in-GROUP BY-ORDER BY-LIMIT",
            "select top-ten-recording-formats-in-gROUP BY-ORDER BY-LIMIT",
            "select orchestra.Major_Record_Format, t1.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9902065396308899,
            0.0001152246113633737,
            0.00015101084136404097,
            0.00012060777225997299,
            0.00015101084136404097,
            0.00012060777225997299,
            0.00035336014116182923,
            6.746331928297877e-05
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the most common record formats for orchestras, ranked by their occurrence?",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, t1.c6",
            "select orchestra.Major_Record_Format, orchestra.Year_of_Founded",
            "select orchestra.Major_Record_Format, t1.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9793921113014221,
            0.0001305045880144462,
            0.00039090876816771924,
            6.76970012136735e-05,
            0.00020403614325914532,
            6.477930583059788e-05,
            0.0003891611995641142,
            6.801938434364274e-05
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the most frequent record formats for orchestras, sorted by their frequency?",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select top-ten-record-formats-in-GROUP BY-ORDER BY-LIMIT",
            "select top-ten-record-formats-in-gROUP BY-ORDER BY-LIMIT",
            "select top-ten-record-formats-in-c5-ordered by-gROUP BY-LIMIT"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9666473269462585,
            0.00010963468957925215,
            0.00016913683793973178,
            0.00013115217734593898,
            0.00016913683793973178,
            0.00013115217734593898,
            0.00022447051014751196,
            0.0001406095689162612
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "I need information about the main recording formats for orchestras, according to their popularity.",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, t1.c6",
            "select orchestra.Major_Record_Format, orchestra.Year_of_Founded",
            "select orchestra.Major_Record_Format (ORDER BY-LIMIT)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.08300507813692093,
            9.707643039291725e-05,
            0.00033267910475842655,
            5.9800098824780434e-05,
            0.0002190551022067666,
            5.8684705436462536e-05,
            0.00045576621778309345,
            9.35866410145536e-05
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Describe the names of conductors from youngest to oldest.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name (or conductor.Age)",
            "select conductor.Name descended conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9707878828048706,
            0.00023482351389247924,
            0.000175640030647628,
            0.00011424891272326931,
            0.0006948615191504359,
            0.00017511211626697332,
            0.0014162118313834071,
            0.00018958757573273033
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Which music company has been credited to be involved with the largest quantity of orchestras worldwide?",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company, orchestra.Conductor_ID",
            "select orchestra.Record_Company (http://www.orchestra.Record_Company)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9789242148399353,
            0.00014661179739050567,
            0.0003516792494338006,
            6.443083839258179e-05,
            0.00018217736214865,
            5.985658208373934e-05,
            0.04421009123325348,
            8.402767707593739e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the record company used by the most orchestras?",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company, orchestra.Conductor_ID",
            "select orchestra.Record_Company (http://www.orchestra.Record_Company)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9955756664276123,
            7.810292299836874e-05,
            0.0005112230428494513,
            5.642492396873422e-05,
            0.00014033072511665523,
            5.7772613217821345e-05,
            0.004837221931666136,
            7.252211071318015e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who are conductors who do not belong to USA?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9919008612632751,
            0.00011303545034024864,
            0.00021156520233489573,
            6.577971362276003e-05,
            0.000205747113795951,
            7.064519741106778e-05,
            0.0001337939320364967,
            5.833430986967869e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are conductors that are not from America?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9935411214828491,
            9.51939873630181e-05,
            0.00017283421766478568,
            6.626539106946439e-05,
            0.00020165492605883628,
            6.657264748355374e-05,
            0.0001248103508260101,
            5.776407851953991e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the conductors that don't have US as a nationality?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Conductor_ID, conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9804320335388184,
            0.00310843950137496,
            0.00020602368749678135,
            0.00011026776337530464,
            0.00023314541613217443,
            0.00011453405022621155,
            0.00015039349091239274,
            9.686827252153307e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name the Conductors from countries other than the United States.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.995274007320404,
            9.623640653444454e-05,
            0.00020643368770834059,
            6.38764540781267e-05,
            0.00015792340855114162,
            6.099250458646566e-05,
            0.0001435780868632719,
            5.6632252380950376e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which are the conductors whose nationalities are not from US?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Conductor_ID, conductor.Nationality",
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.007899963296949863,
            9.732261241879314e-05,
            0.00023090971808414906,
            6.835452222730964e-05,
            0.9376072287559509,
            0.00011293998250039294,
            0.0002371721639065072,
            6.72549576847814e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please list all conductors whose countries are not USA below.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra performance",
            "conductor orchestra",
            "conductor orchestra show",
            "conductor performance"
        ],
        "align_scores": [
            0.005103647243231535,
            0.002364105312153697,
            0.9865272641181946,
            0.00035232622758485377,
            0.00021690483845304698,
            8.481103577651083e-05,
            0.00021210363775026053,
            0.00010965926776407287
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List Conductors whose nationalities are not US (United States).",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Nationality",
            "select conductor.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.0026354987639933825,
            0.0001092503298423253,
            0.9956132173538208,
            9.977815352613106e-05,
            0.00016561879601795226,
            6.446433690143749e-05,
            0.8298734426498413,
            0.00012704569962807
        ],
        "align_select": "select conductor.Nationality",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of conductors who have nationalities other than US?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9650954008102417,
            0.00012874450476374477,
            0.0002131115470547229,
            6.569026299985126e-05,
            0.00021612738783005625,
            6.899394793435931e-05,
            0.00017509926692582667,
            6.51128138997592e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Record a list of conductors whose citizenships are not USA below.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Nationality"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.0009443791932426393,
            0.00044105987763032317,
            0.9028536081314087,
            0.00028950790874660015,
            0.00019804367912001908,
            8.178211282938719e-05,
            0.0001798216107999906,
            8.106784662231803e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of conductors who are non-US nationalities?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9949135780334473,
            0.00011306390661047772,
            0.0001952832972165197,
            6.118539749877527e-05,
            0.0001761267049005255,
            6.815222150180489e-05,
            0.00013693694199901074,
            5.882713230676018e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who had the longest career as a conductor?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra"
        ],
        "align_scores": [
            0.9941378831863403,
            0.9938096404075623,
            0.0003939768939744681,
            0.0006157628376968205,
            0.0006350940675474703,
            0.0009809869807213545,
            0.0003043915203306824,
            0.0005277404561638832
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who is the conductor that has worked the longest?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9932098984718323,
            6.343012501019984e-05,
            0.00034837270504795015,
            6.394105002982542e-05,
            0.0006330535397864878,
            5.7917142839869484e-05,
            0.00021022174041718245,
            5.539951962418854e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the conductor who has worked the longest?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9904991984367371,
            6.543323979713023e-05,
            0.00038805571966804564,
            5.920487456023693e-05,
            0.0006910909432917833,
            5.89564697293099e-05,
            0.00021053609088994563,
            5.5203025112859905e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which conductor has worked the longest time?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9878039360046387,
            5.979998240945861e-05,
            0.0005758428596891463,
            5.939273250987753e-05,
            0.0003609397972468287,
            6.560218753293157e-05,
            0.0005575096001848578,
            5.5001666623866186e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who is the conductor who has worked longest?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9931524991989136,
            5.9119684010511264e-05,
            0.0003520311147440225,
            5.5422719015041366e-05,
            0.0004199128015898168,
            5.7046028814511374e-05,
            0.000305098103126511,
            5.808540299767628e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the conductor\u2019s name who has had the longest career?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9907721281051636,
            7.109055877663195e-05,
            0.0007088390411809087,
            5.9416008298285306e-05,
            0.0006117504090070724,
            7.0420210249722e-05,
            0.0007579864468425512,
            5.8249370340490714e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the conductor with the most working experience?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9873902797698975,
            0.9926807284355164,
            0.0006293694605119526,
            0.0013252748176455498,
            0.0004399211029522121,
            0.0007157847285270691,
            0.0006064767367206514,
            0.000720987853128463
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who has worked the longest as conductor?.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9941271543502808,
            6.417250551749021e-05,
            0.00023353319556917995,
            6.695227784803137e-05,
            0.0003382982104085386,
            6.108535308158025e-05,
            0.0003724089765455574,
            6.078538717702031e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Identify the conductor who have led orchestras founded since 2009.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9329866766929626,
            0.00013132924505043775,
            0.0002984989550895989,
            9.02912433957681e-05,
            0.000248707685386762,
            7.373146945610642e-05,
            0.0002764497767202556,
            9.3436123279389e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the highest share and lowest share of performances whose types are not live final?",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select maximum(performance.Share), min(performance.Share)",
            "select performance.Share, t2.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9955654740333557,
            0.00010142449900740758,
            0.0003952438710257411,
            9.689820581115782e-05,
            0.0006838490371592343,
            7.261823338922113e-05,
            0.0003750111209228635,
            0.00010805943747982383
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum and minimum share of performances that aren't live finals?",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)",
            "select max(performance.Share ), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9952853322029114,
            0.00010925595415756106,
            0.0003299711679574102,
            7.459072367055342e-05,
            0.00035441032378003,
            7.540745718870312e-05,
            0.003961784765124321,
            0.00010275761451339349
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum and minimum share of performances that are non-live finals?",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select maximum(performance.Share), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance show",
            "performance"
        ],
        "align_scores": [
            0.9953820109367371,
            9.228973794961348e-05,
            0.00040121018537320197,
            8.02377617219463e-05,
            0.000851185992360115,
            6.4910389482975e-05,
            0.000428815430495888,
            8.051253826124594e-05
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the largest and smallest percentage of performances whose type is not \"Live final\"?",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(performance.Weekly_rank), min(performance.Weekly_rank)",
            "select max(performance.Type), min(performance.Official_ratings_in_millions)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9955461025238037,
            0.0006980883772484958,
            0.0009254813776351511,
            0.002013456542044878,
            0.0006068472866900265,
            0.0005456741200760007,
            0.0003371145867276937,
            0.0001414109574398026
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum and minimum percentage of performances that are not live finals?",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(t2.c8), min(t2.c8)",
            "select max(performance.Type), min(performance.Official_ratings_in_millions)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9946476817131042,
            0.0012683105887845159,
            0.0010469420813024044,
            0.00044487137347459793,
            0.006008207332342863,
            0.000543872534763068,
            0.00020475742348935455,
            0.00013504980597645044
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest and smallest percentage of performances in which the type is not \"live final\"?",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(performance.Type), min(performance.Official_ratings_in_millions)",
            "select max(performance.Weekly_rank), min(performance.Weekly_rank)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9950459003448486,
            0.0009616035968065262,
            0.001208959030918777,
            0.0009830320486798882,
            0.0003298308583907783,
            0.00013649332686327398,
            0.0025652702897787094,
            0.0006017975392751396
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to know the maximum and minimum percentage of performances that do not fall under the category of Live final.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(t2.c8), min(t2.c8)",
            "select max(performance.Performance_ID), min(performance.Performance_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9944211840629578,
            0.0005639964365400374,
            0.0010990534210577607,
            0.000906469882465899,
            0.008147958666086197,
            0.0011274457210674882,
            0.0003281062818132341,
            0.00039799712249077857
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the maximum and minimum shares of performances that aren't live finals.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)",
            "select max(performance.Share ), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9952391386032104,
            0.0001016962414723821,
            0.000410988403018564,
            7.658945833100006e-05,
            0.00043901268509216607,
            7.595348870381713e-05,
            0.0037182129453867674,
            0.00010030704288510606
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of conductors and their length of time in order.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name, conductor.Year_of_Work"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.0006196327740326524,
            0.0006196327740326524,
            0.0036201458424329758,
            0.0036201458424329758,
            0.0004647184396162629,
            0.0004647184396162629,
            0.00012596690794453025,
            0.00012596690794453025
        ],
        "align_select": "select conductor.Name, conductor.Year_of_Work",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Which conductors has conducted multiple Orchestras?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9861397743225098,
            9.451595542486757e-05,
            0.00103770534042269,
            9.55877621890977e-05,
            0.0010687087196856737,
            8.855783380568027e-05,
            0.00103770534042269,
            9.55877621890977e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the conductors that have conducted at least two orchestras.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9870909452438354,
            7.631920016137883e-05,
            0.002224464900791645,
            7.086751429596916e-05,
            0.0015462369192391634,
            7.580601959489286e-05,
            0.0001878663751995191,
            4.933157833875157e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List conductors who have worked with more then one orchestra.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9911180138587952,
            0.00011178006388945505,
            0.0018302571261301637,
            9.158417378785089e-05,
            0.0007679518312215805,
            7.862203347031027e-05,
            0.0004064205859322101,
            7.428351091220975e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the conductors with two or more orchestral groups they are conducting.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select orchestra.Conductor_ID",
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select orchestra.Orchestra, conductor.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra",
            "orchestra",
            "show orchestra"
        ],
        "align_scores": [
            0.9576361179351807,
            0.00025428799563087523,
            0.9878047704696655,
            0.00011540319246705621,
            0.0029816676396876574,
            9.778354433365166e-05,
            0.0025586721021682024,
            8.087065361905843e-05
        ],
        "align_select": "select orchestra.Conductor_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find out about the musician who conducts the maximum number of orchestras.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9818366169929504,
            6.64119070279412e-05,
            0.00027470936765894294,
            6.662732630502433e-05,
            0.0005798711790703237,
            6.41867081867531e-05,
            0.00027470936765894294,
            6.662732630502433e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which conductors have conducted the most orchestras?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.994046688079834,
            5.322551078279503e-05,
            0.001944963587448001,
            6.106211367296055e-05,
            0.00022373077808879316,
            5.1738090405706316e-05,
            0.0006855867686681449,
            6.449981447076425e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "what conductor has conducted most orchestras?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (orchestra.Conductor_ID)",
            "select conductor.Name, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.99467933177948,
            6.963324267417192e-05,
            0.0007659365073777735,
            5.9200126997893676e-05,
            0.0023905218113213778,
            5.9580725064734e-05,
            0.0007659365073777735,
            5.9200126997893676e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which conductor has done the most orchestras?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9943775534629822,
            5.158437852514908e-05,
            0.0011134836822748184,
            5.9908088587690145e-05,
            0.00019429021631367505,
            4.9677193601382896e-05,
            0.0009346348233520985,
            6.112083065090701e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which conductor has conducted the most orchestras?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9943331480026245,
            5.239727033767849e-05,
            0.0014841767260804772,
            5.84083391004242e-05,
            0.00021343895059544593,
            5.080657501821406e-05,
            0.0005809144349768758,
            6.083636253606528e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who has conducted the greatest number of orchestras",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, orchestra.Orchestra_ID",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra",
            "conductor orchestra performance"
        ],
        "align_scores": [
            0.99456787109375,
            5.147808769834228e-05,
            0.0017047809669747949,
            5.66751514270436e-05,
            0.008634098805487156,
            6.72554670018144e-05,
            0.00309933302924037,
            5.6624146964168176e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the names of conductors who have worked the longest amount of time.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9699996113777161,
            6.439761637011543e-05,
            0.00027511303778737783,
            6.05530985922087e-05,
            0.0004337406135164201,
            5.890382090001367e-05,
            0.0002056341472780332,
            5.426897405413911e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the longest-serving conductors of all those listed.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra"
        ],
        "align_scores": [
            0.9909374713897705,
            0.995500385761261,
            0.0007124500116333365,
            0.0009769118623808026,
            0.00030414233333431184,
            0.00045794693869538605,
            0.01001707836985588,
            0.018692972138524055
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which conductor has done longest work?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9906914830207825,
            5.968695040792227e-05,
            0.0006965489592403173,
            5.6921911891549826e-05,
            0.0005217038560658693,
            6.158155883895233e-05,
            0.0004589131858665496,
            5.523504296434112e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the name of conductor who has worked the longest.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9904224872589111,
            5.8488265494816005e-05,
            0.00027930489159189165,
            6.051973105059005e-05,
            0.00018571030523162335,
            5.474635327118449e-05,
            0.0006159328040666878,
            5.618989598588087e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which one did conduct the longest?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra"
        ],
        "align_scores": [
            0.9913349747657776,
            6.308519368758425e-05,
            0.0003954025451093912,
            5.517628960660659e-05,
            0.0005044993595220149,
            6.126029620645568e-05,
            0.00032630166970193386,
            6.148233660496771e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the name of the conductor who has been working the longest time.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9847758412361145,
            6.365845183609053e-05,
            0.0003268271975684911,
            5.691741171176545e-05,
            0.0006608028197661042,
            5.914004213991575e-05,
            0.00018643042130861431,
            5.5478034482803196e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the conductor who has worked the most years.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9808270931243896,
            0.9881873726844788,
            0.000389123015338555,
            0.00045427720760926604,
            0.000214666360989213,
            0.00024873900110833347,
            0.00023430644068866968,
            0.0004664601874537766
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the name of the conductor who has been working for the longest time.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9880318641662598,
            6.525527714984491e-05,
            0.00036279825144447386,
            5.997565313009545e-05,
            0.0007711011567153037,
            5.864900958840735e-05,
            0.00021341412502806634,
            5.604016769211739e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the name of the conductor who has had the longest career.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9855051636695862,
            6.141565245343372e-05,
            0.0005122650181874633,
            5.79937404836528e-05,
            0.000341683451551944,
            5.822460298077203e-05,
            0.000753283966332674,
            5.7226818171329796e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the name of the conductor with the longest career.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9934064149856567,
            6.053208198864013e-05,
            0.00039396373904310167,
            5.750664422521368e-05,
            0.0002730695123318583,
            5.669417078024708e-05,
            0.0002211018290836364,
            5.582378071267158e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which conductor had more years of experience?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.16112488508224487,
            5.8091052778763697e-05,
            0.0003454576653894037,
            5.7463166740490124e-05,
            0.00028978483169339597,
            5.5275402701226994e-05,
            0.00020723792840726674,
            5.5256161431316286e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who has had the most experience as a conductor?.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor orchestra performance"
        ],
        "align_scores": [
            0.9937511086463928,
            0.9811046719551086,
            0.00041418717592023313,
            0.0002601892047096044,
            0.0007323728641495109,
            0.00031968505936674774,
            0.0008945823647081852,
            0.0004966287524439394
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total number of spectators per show?",
        "gold_select": "select avg(show.Attendance)",
        "select_candidates": [
            "select sum(show.Attendance)",
            "select sum(show.Attendance), show.Show_ID",
            "select sum(show.Attendance), show.Performance_ID",
            "select sum(show.Attendance) par show.Show_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "show",
        "table_candidates": [
            "show",
            "performance show"
        ],
        "align_scores": [
            0.9948745369911194,
            0.29143840074539185,
            0.0001322390598943457,
            0.9476984739303589,
            0.00018481539154890925,
            0.4354665279388428,
            0.007512323092669249,
            0.36665835976600647
        ],
        "align_select": "select sum(show.Attendance)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the founding years for orchestras that have had multiple performances.",
        "gold_select": "select orchestra.Year_of_Founded",
        "select_candidates": [
            "select orchestra.Year_of_Founded",
            "select orchestra.Year_of_Founded, performance.Orchestra_ID",
            "select orchestra.Year_of_Founded, orchestra.Major_Record_Format",
            "select orchestra.Year_of_Founded, performance.Type"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra performance",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.43193337321281433,
            7.088218990247697e-05,
            0.0005570809007622302,
            6.444023892981932e-05,
            0.00019564021204132587,
            6.037786806700751e-05,
            0.0007067736005410552,
            6.684325489914045e-05
        ],
        "align_select": "select orchestra.Year_of_Founded",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What conductors don't have American nationality?.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.004832899663597345,
            0.003435495775192976,
            0.00452229892835021,
            0.6071966290473938,
            9.909262735163793e-05,
            0.000176908346475102,
            0.0001503540697740391,
            0.00026409252313897014
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What conductors don't have the nationality\" USA\"?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.006672934163361788,
            0.0009196260361932218,
            0.7566978931427002,
            0.0006739390664733946,
            0.0001801865000743419,
            0.0001031312276609242,
            0.0003363389987498522,
            0.00016163424879778177
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all the conductors whose names are different than \"USA.\"",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9848662614822388,
            7.693599764024839e-05,
            0.00020838517230004072,
            6.32303417660296e-05,
            0.000181863724719733,
            5.7996174291474745e-05,
            0.0014905431307852268,
            7.865615043556318e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the conductors' names who are not American.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor orchestra performance"
        ],
        "align_scores": [
            0.9941985607147217,
            7.437707245117053e-05,
            0.00018107384676113725,
            5.748202602262609e-05,
            0.00016718386905267835,
            5.967659308225848e-05,
            0.00012705019616987556,
            5.3226831369102e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which Conductors have no nationality USA?.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Name",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.0020996753592044115,
            0.000588411872740835,
            0.9433810114860535,
            0.0006673068273812532,
            0.0002421815734123811,
            0.00010868071694858372,
            0.00016882525233086199,
            9.98174655251205e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of conductors who are not American.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9945498108863831,
            6.951713294256479e-05,
            0.0001788684312487021,
            5.4966640163911507e-05,
            0.00014501232362817973,
            5.7088807807303965e-05,
            0.00012954173143953085,
            5.436703213490546e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of conductors who aren't American.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name (or conductor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9940535426139832,
            7.556381024187431e-05,
            0.00018871233623940498,
            5.7316821767017245e-05,
            0.00014083902351558208,
            6.008579657645896e-05,
            0.0003581248165573925,
            6.438704440370202e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show conductors without US citizenship.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Conductor_ID, conductor.Nationality",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.00197202037088573,
            0.006430435460060835,
            0.00016557538765482605,
            0.00010615165228955448,
            0.00017377795302309096,
            9.596843301551417e-05,
            0.6722890138626099,
            0.004607201088219881
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the list of conductors without American nationality.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9443336129188538,
            0.0014208387583494186,
            0.00014853592438157648,
            9.194267477141693e-05,
            0.00018835568334907293,
            0.00010708640184020624,
            0.0006990780238993466,
            0.0009920501615852118
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I want to find out the conductors who don't belong to USA.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.0008657046128064394,
            0.13134683668613434,
            0.681901216506958,
            0.3343798518180847,
            0.00019112399604637176,
            0.00012111879186704755,
            0.00025989857385866344,
            0.00031356862746179104
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the numbers of orchestras which used CDs or DVDs as records.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.Major_Record_Format",
            "select count(distinct orchestra.Orchestra)",
            "select count(*), orchestra.Orchestra_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9777090549468994,
            0.011962423101067543,
            0.0002488649624865502,
            0.012392453849315643,
            0.008150769397616386,
            0.00015169577091000974,
            0.0002459967799950391,
            0.008731712587177753
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Enter the number of orchestras that use CD/DVD as a major format below.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.Major_Record_Format",
            "select count(*) the SELECT-FROM-WHERE",
            "select count(*), orchestra.Major_Record_Format, t1.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9861708879470825,
            0.012408193200826645,
            0.00045887663145549595,
            0.6794323921203613,
            0.001019819057546556,
            0.00030586402863264084,
            0.00023970378970261663,
            0.0001267050247406587
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Describe conductors in descending years of work.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.00021828511671628803,
            0.00016536429757252336,
            0.9432755708694458,
            0.0003212637675460428,
            0.00018544663907960057,
            0.00019881407206412405,
            0.00023661630984861404,
            0.0001229567133123055
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List conductors by their years of service in descending order.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Conductor_ID, conductor.Year_of_Work",
            "select conductor.Year_of_Work",
            "select conductor.Name, conductor.Year_of_Work"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.001054049702361226,
            0.00021444319281727076,
            0.00012246970436535776,
            0.00014818791532889009,
            0.0016690603224560618,
            0.000323939515510574,
            0.00014176926924847066,
            0.00020399763889145106
        ],
        "align_select": "select conductor.Conductor_ID",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List conductors in descending year of experience.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Conductor_ID, conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.004918467253446579,
            0.00014524896687362343,
            0.00012402354332152754,
            9.324706479674205e-05,
            0.00016822938050609082,
            0.0001459155755583197,
            0.00018109630036633462,
            0.00014747914974577725
        ],
        "align_select": "select conductor.Conductor_ID",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the name of the high schooler with the most friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9901003241539001,
            7.574215123895556e-05,
            0.0006409241468645632,
            6.982987542869523e-05,
            0.0012756778160110116,
            8.857126522343606e-05,
            0.0006926381029188633,
            5.331472129910253e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the name of the high schooler who has the most friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9853566288948059,
            6.540666799992323e-05,
            0.0005214088596403599,
            6.441038567572832e-05,
            0.0013705766759812832,
            8.01517307991162e-05,
            0.0007902195211499929,
            5.85850648349151e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the high schooler who has the most friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9880988001823425,
            7.484330126317218e-05,
            0.0005296518793329597,
            7.224242290249094e-05,
            0.0014516679802909493,
            9.164304356090724e-05,
            0.0006398018449544907,
            5.5497337598353624e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which high schooler has the most friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.ID, Highschooler.name",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9902517795562744,
            7.490449934266508e-05,
            0.0036341233644634485,
            8.317015453940257e-05,
            0.01673729345202446,
            6.848932389402762e-05,
            0.0011763278162106872,
            6.089904854889028e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the names of high schoolers who have three or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, t1.c2",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9840962886810303,
            7.51864499761723e-05,
            0.0017756475135684013,
            7.717230619164184e-05,
            0.00044089072616770864,
            7.369527884293348e-05,
            0.000310816103592515,
            6.264420517254621e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all high school students that have no less than 2 friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.name",
            "select Highschooler.ID, Highschooler.name",
            "select Highschooler.name, Highschooler.ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.41328129172325134,
            8.196722774300724e-05,
            0.9760398864746094,
            8.24480812298134e-05,
            0.07871400564908981,
            8.834015170577914e-05,
            0.0682210922241211,
            7.820784958312288e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who has 3 or more friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9707928895950317,
            0.00010555319749983028,
            0.002237760229036212,
            9.955795394489542e-05,
            0.00035575914080254734,
            7.74116997490637e-05,
            0.00461213244125247,
            7.810202077962458e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of students who have at least two friends and have grades higher than five.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9876168370246887,
            0.9858204126358032,
            0.00038478203350678086,
            0.000490986742079258,
            0.00038478203350678086,
            0.000490986742079258,
            0.00033764465479180217,
            0.0004368269583210349
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of the students who have a grade better than five and have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.22981463372707367,
            0.07955548912286758,
            0.0005481484113261104,
            0.00026370605337433517,
            0.00033652951242402196,
            0.00022759646526537836,
            0.00045624046470038593,
            0.00023374527518171817
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Mention students who have a grade higher than 5 and have at least two friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.061097413301467896,
            0.8285647034645081,
            0.0006711764726787806,
            0.0007859505130909383,
            0.0005250565591268241,
            0.032615356147289276,
            0.00023690344823990017,
            0.001871748361736536
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Find all students that have a grade above 5, and find out if they also have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.ID",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.0001837277814047411,
            0.0013936642790213227,
            0.0005078657413832843,
            0.22465136647224426,
            0.00024061418662313372,
            0.09114160388708115,
            0.0002641428727656603,
            0.11114967614412308
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of students who have more than five grades and have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name (Highschooler.grade), Friend.friend_id",
            "select Highschooler.name, Highschooler.grade, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.27090322971343994,
            0.07839594036340714,
            0.00029133891803212464,
            0.00022707496827933937,
            0.00020757608581334352,
            0.00014689768431708217,
            0.00019053244614042342,
            0.00016006219084374607
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all students who have GPA above 5 and have at least two friend, and display their names.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.02594699338078499,
            0.0062163034453988075,
            0.00014399434439837933,
            0.00012090785457985476,
            0.0005197926657274365,
            0.00025260564871132374,
            0.00144514802377671,
            0.0004902782384306192
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who have grades higher than five and have at least two friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.4132978618144989,
            0.8926685452461243,
            0.0005831322632730007,
            0.0005762156215496361,
            0.0014541710261255503,
            0.061723921447992325,
            0.00035366087104193866,
            0.0006949423113837838
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the students who have a grade above five and at least two friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.8306057453155518,
            0.023085683584213257,
            0.0005440587410703301,
            0.00038451727596111596,
            0.03827625513076782,
            0.0007266336469911039,
            0.5868687629699707,
            0.013012941926717758
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of students who have a grade higher than five and have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.22317931056022644,
            0.9703660607337952,
            0.0006944851484149694,
            0.00048665536451153457,
            0.0006337937666103244,
            0.000960993580520153,
            0.0002838254440575838,
            0.001537489821203053
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the list of students who has a grade above five and have at least two friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.09370152652263641,
            0.8752239942550659,
            0.0005655006971210241,
            0.0006045137997716665,
            0.0006409749039448798,
            0.020025331526994705,
            0.0009285348933190107,
            0.012001825496554375
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of students with grades higher than 5 and have two or more friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.980357825756073,
            0.014148090034723282,
            0.0002698380558285862,
            0.0003334872890263796,
            0.00041043260716833174,
            0.00024225315428338945,
            0.0012675427133217454,
            0.00048213780974037945
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "List the names of students that have grades above 5 and have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9577528834342957,
            0.04963032528758049,
            0.0003344379656482488,
            0.00032483975519426167,
            0.0005516039091162384,
            0.00035167892929166555,
            0.0019615129567682743,
            0.0008219096926040947
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show students whose are at least two persons or people like",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Friend Likes",
            "Highschooler Likes",
            "Friend Likes"
        ],
        "align_scores": [
            0.9744004011154175,
            0.038208890706300735,
            0.0021977706346660852,
            0.0009000718127936125,
            0.0005152315134182572,
            0.0002446122234687209,
            0.0027250449638813734,
            0.0019491423154249787
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which student has at least two likes?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9081462621688843,
            0.0001172256816062145,
            0.0017094728536903858,
            8.533282380085438e-05,
            0.002024918794631958,
            8.598245040047914e-05,
            0.00036779092624783516,
            6.14059972576797e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the student names that have more or equal to two likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9794670343399048,
            0.00034553505247458816,
            0.00038999144453555346,
            7.77779714553617e-05,
            0.0010060453787446022,
            0.00010253267828375101,
            0.00019068713299930096,
            6.603791553061455e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which students have at least two likes",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes",
            "Friend Likes"
        ],
        "align_scores": [
            0.9441749453544617,
            0.00010570479207672179,
            0.011778014712035656,
            8.543590229237452e-05,
            0.0004598958184942603,
            6.050363299436867e-05,
            0.004374396521598101,
            9.116817818721756e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names of the students who have two or more likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9494373202323914,
            0.00010670649498933926,
            0.000495483516715467,
            6.172883877297863e-05,
            0.0009013724629767239,
            7.467036630259827e-05,
            0.0002651372633408755,
            6.440178549382836e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the list of students who have two or more likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes",
            "Friend Likes"
        ],
        "align_scores": [
            0.9513134956359863,
            8.341685315826908e-05,
            0.0053580403327941895,
            7.615627691848204e-05,
            0.000617050682194531,
            6.515242421301082e-05,
            0.0034655537456274033,
            8.742693898966536e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "I want to see which students have 2 Likes or more",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Likes.student_id",
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Likes",
            "Highschooler Likes",
            "Friend Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9906736016273499,
            0.0001308118226006627,
            0.9700174331665039,
            9.2520953330677e-05,
            0.019604826346039772,
            8.101783168967813e-05,
            0.003815349191427231,
            9.435007814317942e-05
        ],
        "align_select": "select Likes.student_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all students who have liked twice or more.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Likes.student_id",
            "select Likes.student_id, Likes.liked_id",
            "select Likes.student_id, count(*)",
            "select Likes.student_id, Highschooler.name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Likes",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9848341941833496,
            0.00012664665700867772,
            0.0001745531480992213,
            5.867989602847956e-05,
            0.0013304227031767368,
            9.007348853629082e-05,
            0.006535987835377455,
            9.961226169252768e-05
        ],
        "align_select": "select Likes.student_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show students who has had two or more likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes",
            "Likes",
            "Friend Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9688832759857178,
            7.936316978884861e-05,
            0.003285240149125457,
            7.070774881867692e-05,
            0.0006278896471485496,
            5.904514546273276e-05,
            0.004445150028914213,
            9.329998283647001e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the name of the high schooler with the most likes?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Likes.liked_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.990496039390564,
            0.9869810938835144,
            0.0011054481146857142,
            0.0007664629956707358,
            0.00034635362681001425,
            0.00038492880412377417,
            0.0009536634315736592,
            0.0005017232033424079
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the id of a high schooler who has the highest number of likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.ID, Highschooler.name, Highschooler.grade",
            "select Highschooler.ID, Highschooler.name",
            "select Highschooler.ID, Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.47813358902931213,
            6.677985948044807e-05,
            0.00035758575540967286,
            7.199656101875007e-05,
            0.002171124331653118,
            7.54467400838621e-05,
            0.00035758575540967286,
            7.199656101875007e-05
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me all grades that have four or more students in them.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, count(*)",
            "select Highschooler.grade, max(Highschooler.ID)",
            "select Highschooler.grade, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Likes",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9826958179473877,
            9.709318692330271e-05,
            0.002742339391261339,
            7.33165506972e-05,
            0.0001611172192497179,
            5.8972491387976333e-05,
            0.0005532516515813768,
            6.360541738104075e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all the grades that have 4+ students.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select distinct Highschooler.grade",
            "select distinct Highschooler.grade, t0.c3",
            "select Highschooler.grade, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.977007269859314,
            0.00011022612306987867,
            0.007711583282798529,
            9.274354670196772e-05,
            0.0002175722038373351,
            6.05324275966268e-05,
            0.0027127889916300774,
            8.639840962132439e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all grade levels that have four or more students in them.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade the SELECT-FROM-GROUP BY-HAVING",
            "select Highschooler.grade, count(*)",
            "select Highschooler.grade, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Likes",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.8947449326515198,
            9.669588325778022e-05,
            0.00034385392791591585,
            7.781320164212957e-05,
            0.00224889675155282,
            7.543205720139667e-05,
            0.0005573738599196076,
            6.852002115920186e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all the grades that have four or more students.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, count(*)",
            "select Highschooler.grade, count(*), t0.c3",
            "select Highschooler.grade, max(Highschooler.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9781432151794434,
            0.00010699105769162998,
            0.0032742787152528763,
            8.162915764842182e-05,
            0.0001898366754176095,
            5.91810567129869e-05,
            0.00016303756274282932,
            5.69198455195874e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the names of students who have more than two likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9353911876678467,
            0.00010125075641553849,
            0.00044068272109143436,
            5.996330583002418e-05,
            0.0009119161404669285,
            6.841654249001294e-05,
            0.00023678918660152704,
            6.0222726460779086e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who are students who like two or more students?.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Likes.student_id",
            "select Highschooler.name, Highschooler.ID",
            "select Likes.liked_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Likes",
            "Highschooler Likes",
            "Highschooler Friend Likes",
            "Friend Likes"
        ],
        "align_scores": [
            0.9402485489845276,
            0.0001908592093968764,
            0.9895527362823486,
            0.0001065896576619707,
            0.0012892711674794555,
            7.589085726067424e-05,
            0.5162304639816284,
            0.00014477773220278323
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of students who have at least two likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9598098993301392,
            7.69379039411433e-05,
            0.0004809450765606016,
            5.423094626166858e-05,
            0.0010020993649959564,
            6.13695738138631e-05,
            0.0002741306379903108,
            5.5813878134358674e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the name of students who have over two students.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID, max(Highschooler.name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend",
            "Highschooler Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9730556607246399,
            8.890118624549359e-05,
            0.000524558883626014,
            6.295135972322896e-05,
            0.00015434602391906083,
            5.552110815187916e-05,
            9.689525177236646e-05,
            5.845213672728278e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names of students who have at least two likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9251812100410461,
            8.734243601793423e-05,
            0.0004450669512152672,
            5.529158443096094e-05,
            0.0009119905298575759,
            6.276134081417695e-05,
            0.0002955524832941592,
            5.978504486847669e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the grade with the most high schoolers.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, t0.c3",
            "select Highschooler.grade, Highschooler.name",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9942589998245239,
            8.302101923618466e-05,
            0.0005855701165273786,
            5.9874964790651575e-05,
            0.0002245469222543761,
            5.644773773383349e-05,
            0.00018475197430234402,
            6.117121665738523e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the names of high school students who have a grade of 6 or higher and have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.3474135994911194,
            0.18494826555252075,
            0.0005850010784342885,
            0.00035452371230348945,
            0.00032328112865798175,
            0.00028005256899632514,
            0.0004657803801819682,
            0.00021720245422329754
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "which has students who have grade point over 5 and have at least two friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.ID",
            "select Highschooler.name, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.03687513247132301,
            0.29002881050109863,
            0.0003162785724271089,
            0.0005415032501332462,
            0.016216887161135674,
            0.6776604652404785,
            0.0006186208338476717,
            0.010990642011165619
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Names of highschoolers for whom there is a grade of more than five and they have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.14346085488796234,
            0.025693342089653015,
            0.0015496728010475636,
            0.0005550134228542447,
            0.0002454630739521235,
            0.00021591481345240027,
            0.0002222393377451226,
            0.00013179115194361657
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me the names of those highschool students who get higher grades than over 5 and have more than two mates.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend Likes",
            "Highschooler Friend",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.4113928973674774,
            0.016817957162857056,
            0.0009393588989041746,
            0.0004396924050524831,
            0.0003280049713794142,
            0.00022650326718576252,
            0.0009393588989041746,
            0.0004396924050524831
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "The list of highschoolers who have a grade over five and have two or more friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.24791261553764343,
            0.9765010476112366,
            0.0007577582728117704,
            0.0004281786677893251,
            0.0005022495752200484,
            0.004531637765467167,
            0.0006049443036317825,
            0.0015908910427242517
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of high schoolers whose grades are higher than 5 and they have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.0167992040514946,
            0.00225052353926003,
            0.0004690556088462472,
            0.00023541443806607276,
            0.00019850231183227152,
            0.00015121370961423963,
            0.0003324799763504416,
            0.00016806744679342955
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of high schoolers who have grades higher than five and who have two or more friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.19144102931022644,
            0.960740327835083,
            0.0005177765851840377,
            0.0004994852934032679,
            0.00026804523076862097,
            0.0010418696328997612,
            0.0004304060712456703,
            0.0006774711655452847
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "List the names of high schoolers that have 3+ friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9817109107971191,
            7.677797839278355e-05,
            0.0015438365517184138,
            6.840551941422746e-05,
            0.00022056637681089342,
            5.933996362728067e-05,
            0.0003421313303988427,
            7.249881309689954e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of highschoolers that have 3+ friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.990253746509552,
            7.463042857125401e-05,
            0.0013015231816098094,
            6.44286919850856e-05,
            0.0002324577944818884,
            5.770869393018074e-05,
            0.0003340699477121234,
            6.811110506532714e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who are all high school students that have at least 3 friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9586324095726013,
            0.000113628753751982,
            0.02293802611529827,
            8.841404633130878e-05,
            0.0004979681107215583,
            8.316697494592518e-05,
            0.06069308891892433,
            7.022038334980607e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show list of high schools students with likes, and how much they had per person.",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, sum(Likes.liked_id)",
            "select Highschooler.name, count(*)",
            "select Highschooler.ID, count(*)",
            "select Highschooler.ID, sum(Likes.liked_id)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.0028470326215028763,
            0.0002232202677987516,
            0.9518764019012451,
            0.00233616610057652,
            0.4564346373081207,
            0.003469382645562291,
            0.003807979868724942,
            0.00020688195945695043
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Who were friends of highschool Kyle.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Friend.friend_id",
            "select distinct Friend.friend_id",
            "select Friend.friend_id, Highschooler.name",
            "select list(Friend.friend_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.2301246076822281,
            0.00015862789587117732,
            0.050020910799503326,
            0.00020982227579224855,
            0.0004602422995958477,
            9.18535515666008e-05,
            0.013384832069277763,
            7.162868132581934e-05
        ],
        "align_select": "select Friend.friend_id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are friends of the high school student Kyle?.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Friend.friend_id",
            "select distinct Friend.friend_id",
            "select Friend.friend_id, Highschooler.name",
            "select list(Friend.friend_id)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.25516852736473083,
            0.014945948496460915,
            0.05137711018323898,
            0.0002890191972255707,
            0.0004871614510193467,
            0.00015066363266669214,
            0.014849602244794369,
            0.00014880727394483984
        ],
        "align_select": "select Friend.friend_id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show who's in high school and friend count.",
        "gold_select": "select Highschooler.name, count(*)",
        "select_candidates": [
            "select Highschooler.name, count(*)",
            "select Highschooler.name, count(Friend.friend_id)",
            "select Highschooler.name, count(distinct Friend.friend_id)",
            "select distinct Highschooler.name, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.595331072807312,
            0.6198365688323975,
            0.0041467598639428616,
            0.0033565196208655834,
            0.015234215185046196,
            0.012177630327641964,
            0.00861119944602251,
            0.0043899891898036
        ],
        "align_select": "select Highschooler.name, count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Who are all students currently in grade ten?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select distinct Highschooler.name",
            "select Highschooler.name",
            "select distinct Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.14565454423427582,
            0.00023775493900757283,
            0.8910791277885437,
            0.0002532852813601494,
            0.00024397681409027427,
            6.559368193848059e-05,
            0.00027737434720620513,
            7.014127913862467e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the list containing all students in grade ten.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select distinct Highschooler.name",
            "select distinct Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.ID",
            "select distinct Highschooler.name, t0.c3"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.13468067348003387,
            9.209175186697394e-05,
            0.0001923176896525547,
            7.041295611998066e-05,
            0.00029123565764166415,
            5.977878026897088e-05,
            0.00035410988493822515,
            7.738195563433692e-05
        ],
        "align_select": "select distinct Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of students in the 9th or 10th grade.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.ID",
            "select count(*), Highschooler.grade",
            "select count(*), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9960904717445374,
            0.00018423267465550452,
            0.00034068289096467197,
            0.000525728682987392,
            0.0002988215710502118,
            0.22225262224674225,
            0.000253140926361084,
            0.0014645535266026855
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Determine the number of high schoolers in ninth grade and tenth grade.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.grade",
            "select count(*), t0.c9, Highschooler.name0",
            "select Highschooler.grade, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.10221704840660095,
            0.12352898716926575,
            0.008461462333798409,
            0.807978093624115,
            0.00010165241110371426,
            0.00012235624308232218,
            0.23392482101917267,
            0.9815147519111633
        ],
        "align_select": "select Highschooler.grade, count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Find the name, email, and phone of the professional operators of more or equal to two treatment types.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.first_name, Professionals.email_address, Professionals.home_phone",
            "select Professionals.first_name, Professionals.last_name, Professionals.home_phone",
            "select Professionals.role_code, Professionals.email_address, Professionals.home_phone",
            "select Professionals.first_name, Professionals.email_address, Professionals.home_phone"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Sizes Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.0043830047361552715,
            0.00020750642579514533,
            0.0003437106788624078,
            9.561466140439734e-05,
            0.00033059052657335997,
            9.269102156395093e-05,
            0.0043830047361552715,
            0.00020750642579514533
        ],
        "align_select": "select Professionals.first_name, Professionals.email_address, Professionals.home_phone",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the name and mobile of the professionals who run no less than two types of treatment?",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.first_name, Professionals.cell_number",
            "select Professionals.role_code, Professionals.cell_number",
            "select t6).c2, Professionals.cell_number",
            "select Charges.charge_amount, Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.22384925186634064,
            0.0011052570771425962,
            0.0007076099864207208,
            9.161884372588247e-05,
            0.00037265545688569546,
            6.681412196485326e-05,
            0.0005182545864954591,
            8.147424523485824e-05
        ],
        "align_select": "select Professionals.first_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the name and cell phone of all of the people who operate at least two treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Owners.cell_number",
            "select Owners.first_name, Owners.last_name, Owners.home_phone, Owners.cell_number",
            "select Owners.first_name, Owners.last_name, Owners.cell_number, Treatments.professional_id",
            "select Owners.first_name, Owners.last_name, Owners.cell_number, Owners.home_phone"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Owners Treatments",
            "Owners Professionals Treatments",
            "Sizes Owners Treatments",
            "Owners Dogs Professionals Treatments",
            "Treatment_Types Owners Treatments",
            "Sizes Owners Professionals Treatments",
            "Owners Dogs Treatments"
        ],
        "align_scores": [
            0.6030486226081848,
            0.00011047013686038554,
            0.0007971541490405798,
            7.367601938312873e-05,
            0.0005432503530755639,
            7.06856299075298e-05,
            0.00041561416583135724,
            7.105306576704606e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Count the number of dogs who have a lower age than the average.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.age",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9840954542160034,
            0.001350801787339151,
            0.00019640517712105066,
            0.0003046829951927066,
            0.00021139279124327004,
            0.005103390663862228,
            0.00017467568977735937,
            0.01902630738914013
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of dogs that have an age less than the average.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.age",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9835667610168457,
            0.005039576906710863,
            0.00021136236318852752,
            0.00029034572071395814,
            0.00021205231314525008,
            0.0022620069794356823,
            0.00021736009512096643,
            0.3693840801715851
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many dogs are younger than the average.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.age",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9912480115890503,
            0.0023759526666253805,
            0.0003080143069382757,
            0.004816065542399883,
            0.00022381890448741615,
            0.00017866575217340142,
            0.00018862704746425152,
            0.00021093914983794093
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much is the last treatment?",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select max(Treatments.cost_of_treatment)",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code",
            "select Treatments.cost_of_treatment, Treatments.date_of_treatment"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Charges Treatments",
            "Dogs Professionals Treatments",
            "Professionals Treatments"
        ],
        "align_scores": [
            0.9944302439689636,
            5.6882632634369656e-05,
            0.00012320175301283598,
            5.721208799513988e-05,
            0.0002120969584211707,
            5.131688158144243e-05,
            0.00014840623771306127,
            5.264348874334246e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How much does the latest treatment cost?",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select max(Treatments.cost_of_treatment)",
            "select min(Treatments.cost_of_treatment)",
            "select max(Treatments.cost_of_treatment), Treatments.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.002839872846379876,
            5.872136898688041e-05,
            7.020124030532315e-05,
            6.160787597764283e-05,
            7.30119354557246e-05,
            6.157140160212293e-05,
            5.524273365153931e-05,
            5.5338536185445264e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the ID, LN and CELL PHONE of professional who lives in Indiana or has done more than 2 treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select t8.c2, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.126224547624588,
            0.004096501972526312,
            0.0628933385014534,
            0.0032464605756103992,
            0.0003704781993292272,
            0.00021272704179864377,
            0.00017639224824961275,
            0.00010848379315575585
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find ID, Last Name & Cell Phone of those people living in Indiana having treated > 2 patients.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Owners.last_name & Owners.cell_number",
            "select Professionals.professional_id, Owners.last_name, Owners.cell_number",
            "select Professionals.first_name, Owners.last_name, Owners.cell_number",
            "select Professionals.first_name, Owners.last_name & Owners.cell_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Owners Professionals Treatments",
            "Owners Professionals",
            "Owners Dogs Professionals Treatments",
            "Sizes Owners Professionals Treatments",
            "Treatment_Types Owners Professionals Treatments"
        ],
        "align_scores": [
            0.004048948176205158,
            8.24932285468094e-05,
            0.0056338137947022915,
            8.500698459101841e-05,
            0.00030123000033199787,
            6.403288716683164e-05,
            0.00032384993392042816,
            6.571195262949914e-05
        ],
        "align_select": "select Professionals.professional_id, Owners.last_name & Owners.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me the IDs, last names and cell phones of the professionals who live in Indiana and have performed at least three treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select t8.c2, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.6402202248573303,
            0.00024398890673182905,
            0.28098833560943604,
            0.00019045817316509783,
            0.0006706859567202628,
            9.83965874183923e-05,
            0.000649147666990757,
            7.993623876245692e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Find the ids, names and cell numbers of the doctors living in Indiana or having treated over 2 patients.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.first_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.first_name, Professionals.cell_number",
            "select Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.0025539910420775414,
            0.0006082883337512612,
            0.004789107013493776,
            0.0008077706443145871,
            0.002800503745675087,
            0.0007592479814775288,
            0.0002564002061262727,
            0.00017851096345111728
        ],
        "align_select": "select Professionals.professional_id, Professionals.first_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who lives in Indiana and has done over 2 treatments? (find ID, lastname, cellphone).",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Treatments.professional_id, Owners.last_name, Owners.cell_number",
            "select Professionals.first_name, Owners.last_name, Owners.cell_number",
            "select t8.c1, Owners.last_name, Owners.cell_number",
            "select t8.c2, Owners.last_name, Owners.cell_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Owners Treatments",
            "Sizes Owners Treatments"
        ],
        "align_scores": [
            0.13419978320598602,
            0.0004469525010790676,
            0.00030789183801971376,
            0.00014717373414896429,
            0.0005216131685301661,
            0.00018086092313751578,
            0.0004421318299137056,
            0.00014165184984449297
        ],
        "align_select": "select Treatments.professional_id, Owners.last_name, Owners.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Describe the least expensive treatment type?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9948340654373169,
            0.9953576922416687,
            0.0004484947130549699,
            0.0003647425037343055,
            0.0006174230366013944,
            0.0004258555418346077,
            0.0001386288640787825,
            0.00010994847252732143
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Describe which ones of these treatment types costs the least amount of money.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.0006394342635758221,
            0.000553418300114572,
            0.00054155383259058,
            0.0005231981631368399,
            0.9878286123275757,
            0.9937624335289001,
            0.00013922990183345973,
            0.0001159095045295544
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Describe the overall cheapest treatment type?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9962809681892395,
            7.851826376281679e-05,
            0.00034509587567299604,
            6.28686320851557e-05,
            0.0004866709350608289,
            6.0582675359910354e-05,
            0.00010920222121058032,
            5.4844116675667465e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Describe the treatment type, whose overall costs is the lowest.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Sizes Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9922224879264832,
            8.102664287434891e-05,
            0.0003454355464782566,
            6.215816392796114e-05,
            0.00038148750900290906,
            6.347466114675626e-05,
            0.0001080145375453867,
            5.621877789963037e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the desciption of the treatment for which the lowest total price was assigned?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Owners Treatments"
        ],
        "align_scores": [
            0.9928683638572693,
            6.708558794343844e-05,
            0.00013555206533055753,
            5.447819785331376e-05,
            0.0007924040546640754,
            6.285658309934661e-05,
            0.0002452604821883142,
            6.291217141551897e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the number of dogs that are younger than the average age?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.age",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9903676509857178,
            0.0017574322409927845,
            0.0001950352598214522,
            0.00027477514231577516,
            0.00021817318338435143,
            0.018292482942342758,
            0.00018607544188853353,
            0.12593741714954376
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs under the average age?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.age",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.993798553943634,
            9.780404798220843e-05,
            0.00024204122019000351,
            9.446459444006905e-05,
            0.00020545069128274918,
            7.341757736867294e-05,
            0.00017922573897521943,
            7.612461195094511e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs are younger than the average?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.age",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9918272495269775,
            8.926357986638322e-05,
            0.0002465946599841118,
            7.183827256085351e-05,
            0.00025826608180068433,
            7.338089926633984e-05,
            0.00020052961190231144,
            6.731385656166822e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me how many dogs are under the age of the average?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.age",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9897896647453308,
            8.3771905337926e-05,
            0.00024162160116247833,
            7.969625585246831e-05,
            0.00018973316764459014,
            6.740917160641402e-05,
            0.00018622915376909077,
            6.767879676772282e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs are there that are younger than what would be considered the average dog?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.age",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9658421874046326,
            0.00013777332787867635,
            0.0002698308671824634,
            7.754335820209235e-05,
            0.00022622333199251443,
            0.0001233254006365314,
            0.00024820712860673666,
            0.0001293363602599129
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs of an age lower than the average?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.age",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.9905568361282349,
            8.611833618488163e-05,
            0.00020398209744598716,
            9.498443978372961e-05,
            0.0002604060573503375,
            7.469920092262328e-05,
            0.0002482630079612136,
            7.513770833611488e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of dogs of an age smaller than the average?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.age",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9895360469818115,
            0.001900599803775549,
            0.00021380375255830586,
            0.010603008791804314,
            0.0001995224301936105,
            0.00036992537206970155,
            0.0002247328229714185,
            0.03236784413456917
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Describe the cheapest treatment type in terms of the amount spent to treat it.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9920660853385925,
            0.9946474432945251,
            0.00035098526859655976,
            0.00030542552121914923,
            0.0005411944002844393,
            0.0004278061678633094,
            0.00012497436546254903,
            9.752150799613446e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the description of the treatment type that is the cheapest in total?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.994529664516449,
            6.22577135800384e-05,
            0.000661487050820142,
            6.129594112280756e-05,
            0.0006064316257834435,
            7.295652903849259e-05,
            0.00012345905997790396,
            5.6586144637549296e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is thedescription of the treatment type that costs less money than others?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9427069425582886,
            0.9729413390159607,
            0.0005473913624882698,
            0.0004417202726472169,
            0.0002935706579592079,
            0.0003290156018920243,
            0.00014188126078806818,
            0.00011521934357006103
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the description of overall cheapest treatment option?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9959101676940918,
            0.9952000379562378,
            0.00012331987090874463,
            0.00014048453886061907,
            0.00040008514770306647,
            0.0003531371767167002,
            0.00023036477796267718,
            0.00023950614558998495
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the description of the treatment type that is cheapest overall?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9951707720756531,
            8.351228461833671e-05,
            0.0006352611817419529,
            6.56923366477713e-05,
            0.0006597859901376069,
            7.048047700664029e-05,
            0.00012942198372911662,
            5.965167656540871e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me information about the treatment type that has the lowest price in total.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Owners.first_name, Treatments.treatment_type_code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatments",
            "Treatment_Types Treatments",
            "Dogs Treatments",
            "Owners Treatments",
            "Dogs Professionals Treatments",
            "Professionals Treatments",
            "Charges Treatments",
            "Owners Professionals Treatments"
        ],
        "align_scores": [
            0.0010874506551772356,
            8.388813148485497e-05,
            0.9937585592269897,
            9.420526475878432e-05,
            0.00016867753583937883,
            5.9703517763409764e-05,
            0.00045240341569297016,
            7.966997509356588e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How old are the dogs who have been treated?",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select Dogs.age",
            "select distinct Dogs.age",
            "select Dogs.dog_id, Dogs.age",
            "select sum(Dogs.age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.8075690865516663,
            0.024649253115057945,
            0.5258417129516602,
            0.0006714774062857032,
            0.00028379703871905804,
            0.00017657886201050133,
            0.06894126534461975,
            0.00024298320931848139
        ],
        "align_select": "select Dogs.age",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Of dogs that have had treatment, how old are they on avergae?",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select Treatments.dog_id, avg(Dogs.age)",
            "select Dogs.age, avg(Dogs.age)",
            "select Treatments.date_of_treatment, avg(Dogs.age)",
            "select Treatments.date_of_treatment"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.032100848853588104,
            9.102242620429024e-05,
            0.00010442839993629605,
            6.751571345375851e-05,
            0.00013577818754129112,
            7.789688970660791e-05,
            0.007410046178847551,
            0.0026068375445902348
        ],
        "align_select": "select Treatments.dog_id, avg(Dogs.age)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Please list the first and last names of the medical professionals whom you have treated at a price lower than average.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select the Professionals.first_name, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Sizes Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.5132805109024048,
            0.00022328519844450057,
            0.10336866229772568,
            0.00012291569146327674,
            0.0005364989629015326,
            0.00010215733345830813,
            0.001514156931079924,
            0.00013038220640737563
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the first, last names of the doctors who treated you for less than average amount of money.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Dogs.owner_id, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Charges Professionals Treatments",
            "Charges Sizes Professionals Treatments",
            "Breeds Charges Professionals Treatments",
            "Charges Sizes Treatments",
            "Charges Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9699478149414062,
            0.00014539183757733554,
            0.0003042220778297633,
            9.440012945560738e-05,
            0.034674953669309616,
            8.26571776997298e-05,
            0.00036289129639044404,
            0.00012284818512853235
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What professionals have treated patients with costs that were below average?",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name",
            "select Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.10285370796918869,
            0.00030710999271832407,
            0.9016949534416199,
            0.00024005600425880402,
            0.09469617903232574,
            0.00010020780609920621,
            0.04051333665847778,
            8.73489334480837e-05
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the first and last name of the professionals who has done an operation of a certain kind, under an average cost.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select Professionals.professional_id, Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select Professionals.first_name, Professionals.last_name, avg(Treatments.cost_of_treatment)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Charges Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.7204717993736267,
            7.862345955800265e-05,
            0.00038798735477030277,
            6.835817475803196e-05,
            0.00020645023323595524,
            6.607539398828521e-05,
            0.002493971958756447,
            6.67295025778003e-05
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please list the names of the medical professionals whom you have treated at a price lower than average.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select the Professionals.first_name, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.46043065190315247,
            0.21789385378360748,
            0.09886427223682404,
            0.002154229674488306,
            0.0007417515153065324,
            0.0009534917771816254,
            0.0013239942491054535,
            0.0005182244931347668
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who has treated with costs below average?",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select distinct Treatments.professional_id",
            "select Treatments.professional_id",
            "select Treatments.professional_id, Treatments.treatment_type_code",
            "select distinct Treatments.professional_id, Treatments.treatment_type_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Dogs Professionals Treatments",
            "Owners Dogs Professionals Treatments",
            "Owners Treatments",
            "Owners Professionals Treatments",
            "Professionals Treatments",
            "Dogs Treatments",
            "Owners Dogs Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.18028229475021362,
            0.0005292496643960476,
            0.4154963493347168,
            0.8671824336051941,
            0.000191197992535308,
            0.0002550385252106935,
            0.000334354757796973,
            0.00010419543832540512
        ],
        "align_select": "select Treatments.professional_id",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What operators have operated a treatment that cost less than the average?",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Treatments.professional_id",
            "select Treatments.professional_id, Treatments.treatment_type_code",
            "select Treatments.dog_id, Treatments.professional_id",
            "select t8.c2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Professionals Treatments",
            "Dogs Treatments",
            "Breeds Treatments",
            "Professionals Treatments",
            "Charges Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.16274796426296234,
            0.884767472743988,
            0.00016476510791108012,
            0.0003775007789954543,
            0.00020813397713936865,
            0.00028308635228313506,
            0.0012538431910797954,
            0.00173462915699929
        ],
        "align_select": "select Treatments.professional_id",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "I need to find out about which therapists treat patients for a low price. Give me their first names and last names.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select Professionals.role_code, Professionals.first_name",
            "select distinct Professionals.first_name, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Owners Professionals Treatments",
            "Treatment_Types Owners Professionals Treatments",
            "Owners Dogs Professionals Treatments",
            "Sizes Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9187984466552734,
            0.004076703451573849,
            0.00043440473382361233,
            0.0002957151154987514,
            0.0003611325810197741,
            0.0002348998823435977,
            0.07226531952619553,
            0.0002491857158020139
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who have operated treatments that cost less than the average?",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Treatments.professional_id",
            "select Treatments.professional_id, Treatments.treatment_type_code",
            "select Professionals.first_name, Professionals.street",
            "select Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Professionals Treatments",
            "Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Dogs Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.09650851786136627,
            0.00024457581457681954,
            0.0002092093782266602,
            9.6485237008892e-05,
            0.0004461148346308619,
            8.648908260511234e-05,
            0.0009022862650454044,
            9.328352462034672e-05
        ],
        "align_select": "select Treatments.professional_id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who operated a treatment that cost less than the average.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Treatments.professional_id",
            "select Treatments.dog_id, Treatments.professional_id",
            "select Treatments.professional_id, Treatments.treatment_type_code",
            "select Owners.first_name, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Treatments",
            "Owners Professionals Treatments",
            "Owners Treatments",
            "Dogs Professionals Treatments",
            "Breeds Owners Professionals Treatments",
            "Professionals Treatments",
            "Treatment_Types Owners Treatments",
            "Dogs Treatments"
        ],
        "align_scores": [
            0.4691435396671295,
            0.00011886706488439813,
            0.00017354612646158785,
            7.396978617180139e-05,
            0.0002030076866503805,
            7.163523696362972e-05,
            0.8849998116493225,
            7.569709123345092e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the list of the dogs that the owners did not pay over $1000 for the treatment.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.dog_id",
            "select Dogs.dog_id, Dogs.owner_id",
            "select Dogs.dog_id, Dogs.owner_id, Dogs.breed_code",
            "select Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Sizes Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Owners Dogs Treatments",
            "Breeds Dogs Treatments"
        ],
        "align_scores": [
            0.043537430465221405,
            0.01274742092937231,
            0.00020830768335144967,
            0.0002518001419957727,
            0.000169160237419419,
            0.00022592606546822935,
            9.63463171501644e-05,
            0.00012799342221114784
        ],
        "align_select": "select Dogs.dog_id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Please provide me with the list of dogs for which the owner did not pay more than 1 000 for treatment.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.dog_id",
            "select Dogs.dog_id, Dogs.owner_id",
            "select Dogs.dog_id, Treatments.dog_id",
            "select Dogs.dog_id, Charges.charge_amount"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Sizes Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Breeds Dogs Treatments",
            "Owners Dogs Treatments"
        ],
        "align_scores": [
            0.013735827058553696,
            0.00889106560498476,
            0.00013801633031107485,
            0.00019181831157766283,
            0.00019764770695474,
            0.00035483375540934503,
            0.00024417461827397346,
            0.00017654604744166136
        ],
        "align_select": "select Dogs.dog_id",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the identification, role and e-mail address of the professionals who did not provide any service on the dogs.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
            "select Professionals.professional_id, Professionals.first_name, Professionals.email_address",
            "select Professionals.role_code, Professionals.first_name, Professionals.email_address",
            "select Professionals.first_name, Professionals.role_code, Professionals.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-EXCEPT-SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.8989313244819641,
            0.03082815557718277,
            0.0006170465494506061,
            0.0001771274401107803,
            0.0009827548637986183,
            0.0002167778875445947,
            0.001403320929966867,
            0.0002879127860069275
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.email_address",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Can you tell me which dog owner has spent the most on veterinary bills so far? Show the owner ID and ZIP code.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code",
            "select Sizes.size_code, Owners.zip_code",
            "select Charges.charge_type, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Charges Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.9832911491394043,
            0.00011170345533173531,
            0.426676869392395,
            0.00011533244833117351,
            0.0005255252472124994,
            9.466389019507915e-05,
            0.0004774634726345539,
            8.679851453052834e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "The owner who spent most on their dogs can be found here. Give me their ID and their ZIP Code.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code",
            "select Treatments.dog_id, Owners.zip_code",
            "select t8.c1, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Charges Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Breeds Owners Dogs Treatments"
        ],
        "align_scores": [
            0.9841788411140442,
            0.9561701416969299,
            0.5360390543937683,
            0.08594677597284317,
            0.010771675035357475,
            0.0026618405245244503,
            0.0006038532010279596,
            0.0007792922551743686
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please inform me about the price for the latest medical care.",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code",
            "select Treatments.cost_of_treatment, t7.c6",
            "select Treatments.cost_of_treatment, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Owners Treatments",
            "Dogs Professionals Treatments",
            "Charges Treatments",
            "Professionals Treatments",
            "Treatment_Types Treatments"
        ],
        "align_scores": [
            0.0015444755554199219,
            0.9784481525421143,
            0.00011071648623328656,
            0.00015656005416531116,
            0.0002143121528206393,
            0.00047500611981377006,
            0.00011160667781950906,
            0.00013423903146758676
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the cost of the latest treatment.",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select max(Treatments.cost_of_treatment)",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code",
            "select Treatments.cost_of_treatment, Treatments.date_of_treatment"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Breeds Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.006850843317806721,
            6.649212446063757e-05,
            7.184498099377379e-05,
            6.277846841840073e-05,
            0.0002606449997983873,
            5.617280839942396e-05,
            0.0002598805003799498,
            6.0238926380407065e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Please list the price for each charge category and total cost.",
        "gold_select": "select Charges.charge_type, Charges.charge_amount",
        "select_candidates": [
            "select Charges.charge_type, sum(Charges.charge_amount)",
            "select Charges.charge_id, Charges.charge_type, sum(Charges.charge_amount)",
            "select Charges.charge_amount, sum(Charges.charge_amount)",
            "select Charges.charge_type.c2, sum(Charges.charge_amount)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            0.8206566572189331,
            0.00046643102541565895,
            0.0005959906266070902,
            0.0001348365913145244,
            0.9645197987556458,
            0.0006879081483930349,
            0.00046196309267543256,
            0.00018323445692658424
        ],
        "align_select": "select Charges.charge_type, sum(Charges.charge_amount)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Please state every combination of breed and size codes.",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select Dogs.breed_code, Dogs.size_code",
            "select distinct Dogs.breed_code, Dogs.size_code",
            "select every Dogs.breed_code, Dogs.size_code",
            "select unique Dogs.breed_code, Dogs.size_code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.43622925877571106,
            9.554811549605802e-05,
            0.13428671658039093,
            0.00010109599679708481,
            0.0048424676060676575,
            0.00010113862663274631,
            0.0014774490846320987,
            0.00011830979201477021
        ],
        "align_select": "select Dogs.breed_code, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me the list of all possible combination of breed and size codes.",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select Dogs.breed_code, Dogs.size_code",
            "select distinct Dogs.breed_code, Dogs.size_code",
            "select possible Dogs.breed_code, Dogs.size_code",
            "select every possible Dogs.breed_code, Dogs.size_code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Treatment_Types Dogs",
            "Sizes Dogs",
            "Owners Dogs",
            "Charges Dogs",
            "Sizes Treatment_Types Dogs",
            "Sizes Treatment_Types Owners"
        ],
        "align_scores": [
            0.521075963973999,
            8.577647531637922e-05,
            0.05601465702056885,
            8.874144987203181e-05,
            0.0018897904083132744,
            0.00010097229824168608,
            0.5314468145370483,
            8.480125688947737e-05
        ],
        "align_select": "select Dogs.breed_code, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give me a list containing all possible breed and size combinations.",
        "gold_select": "select distinct Dogs.breed_code, Dogs.size_code",
        "select_candidates": [
            "select Dogs.breed_code, Dogs.size_code",
            "select possible Dogs.breed_code, Dogs.size_code",
            "select distinct Dogs.breed_code, Dogs.size_code",
            "select unique Dogs.breed_code, Dogs.size_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Sizes Dogs",
            "Breeds Sizes Dogs",
            "Treatment_Types Dogs",
            "Sizes Treatment_Types Dogs",
            "Charges Sizes Dogs",
            "Charges Dogs",
            "Owners Dogs"
        ],
        "align_scores": [
            0.8935083150863647,
            9.817315003601834e-05,
            0.0015887899789959192,
            0.00010583156836219132,
            0.423937052488327,
            8.4446590335574e-05,
            0.0007496949983760715,
            8.314034494105726e-05
        ],
        "align_select": "select Dogs.breed_code, Dogs.size_code",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "The most uncommon dog of breeds and their treatments times of each.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Dogs.breed_code, Treatments.date_of_treatment",
            "select Treatments.dog_id, Treatments.date_of_treatment",
            "select Dogs.breed_code, avg(Treatments.date_of_treatment)",
            "select Dogs.dog_id, Treatments.date_of_treatment"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Breeds Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.9908733367919922,
            7.389801612589508e-05,
            0.9822476506233215,
            7.572936738142744e-05,
            0.7217925786972046,
            6.551590922754258e-05,
            0.5398169755935669,
            7.400330650852993e-05
        ],
        "align_select": "select Dogs.breed_code, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "When did the dogs arrive and when did they leave for receiving treatment?",
        "gold_select": "select distinct Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Treatments.cost_of_treatment, t7.c6",
            "select Treatments.date_of_treatment, Treatments.cost_of_treatment"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9393069744110107,
            0.00015354673087131232,
            0.0006226523546501994,
            7.137428474379703e-05,
            0.0006220450159162283,
            9.047861385624856e-05,
            0.0008121445425786078,
            6.890708755236119e-05
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the owner names and their emails in a state that starts containing North.",
        "gold_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Owners.email_address",
            "select Owners.first_name, Owners.last_name, t4.c 7",
            "select Owners.first_name, Owners.last_name, t4.c-7",
            "select Owners.first_name, Owners.last_name, t4c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners",
        "table_candidates": [
            "Owners"
        ],
        "align_scores": [
            0.9923039078712463,
            7.460360211553052e-05,
            0.00027861580019816756,
            0.00010207261948380619,
            0.0003886606718879193,
            0.00010986776032950729,
            0.0003861889417748898,
            0.00010169401502935216
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.email_address",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who has more dogs than anyone else, list their names and ids.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.last_name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Dogs.dog_id",
            "select Dogs.owner_id, Dogs.dog_id",
            "select Owners.first_name, Owners.last_name, Owners.owner_id",
            "select Dogs.abandoned_yn, Dogs.dog_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Dogs",
            "Treatment_Types Dogs",
            "Breeds Owners Dogs",
            "Charges Dogs",
            "Sizes Owners Dogs"
        ],
        "align_scores": [
            0.006188263650983572,
            0.00012044481263728812,
            0.00016045583470258862,
            5.740215055993758e-05,
            0.9890102744102478,
            0.0001405321090715006,
            0.00028636958450078964,
            5.633244654745795e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.owner_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "When were dogs received, and when did they depart after treatment",
        "gold_select": "select distinct Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Treatments.date_of_treatment, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Treatments.treatment_id, Dogs.date_arrived, Dogs.date_departed",
            "select Treatments.cost_of_treatment, Treatments.dog_id2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.0017699567833915353,
            0.0002493085921742022,
            0.0007114767213352025,
            0.00021838818793185055,
            0.0002668874803930521,
            0.0001288166968151927,
            0.00047478979104198515,
            0.0003608653205446899
        ],
        "align_select": "select Treatments.date_of_treatment, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "When do dogs arrive and depart?",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed",
            "select Dogs.weight, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9939752221107483,
            8.944217552198097e-05,
            0.0004032636934425682,
            8.656499994685873e-05,
            0.0004215991939418018,
            9.371202759211883e-05,
            0.0006964224739931524,
            0.00013077640323899686
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Tell me when were dogs came and left",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.weight, Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.weight, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.7926134467124939,
            0.002142014680430293,
            0.00034622455132193863,
            0.00013574270997196436,
            0.00016914588923100382,
            9.474516991758719e-05,
            0.00045111560029909015,
            0.0002591631782706827
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "When did dogs arrive and depart?.",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.owner_id, Dogs.date_departed",
            "select Dogs.weight, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9934998750686646,
            8.802137745078653e-05,
            0.0003701763926073909,
            8.942255954025313e-05,
            0.00035091181052848697,
            9.406100434716791e-05,
            0.0005858120857737958,
            0.00013677812239620835
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What day came and left each dog?",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_adopted, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9910059571266174,
            8.88789800228551e-05,
            0.0011251710820943117,
            8.561223512515426e-05,
            0.00046689820010215044,
            0.00010738919081632048,
            0.004159268923103809,
            9.202169894706458e-05
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "When did each dog arrive and depart?",
        "gold_select": "select Dogs.date_arrived, Dogs.date_departed",
        "select_candidates": [
            "select Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_arrived, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_departed",
            "select Dogs.dog_id, Dogs.date_adopted, Dogs.date_departed"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9940711855888367,
            0.002175836591050029,
            0.019696511328220367,
            0.0010728586930781603,
            0.000489530386403203,
            0.0013183722039684653,
            0.004018895793706179,
            0.005188575945794582
        ],
        "align_select": "select Dogs.date_arrived, Dogs.date_departed",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What breed have the most dogs",
        "gold_select": "select Breeds.breed_name",
        "select_candidates": [
            "select Breeds.breed_name",
            "select Breeds.breed_name, Dogs.breed_code",
            "select Breeds.breed_code, Breeds.breed_name",
            "select Breeds.breed_name, Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs"
        ],
        "align_scores": [
            0.9913101196289062,
            8.677500591147691e-05,
            0.015578578226268291,
            7.417987217195332e-05,
            0.011789325624704361,
            7.130985613912344e-05,
            0.015578578226268291,
            7.417987217195332e-05
        ],
        "align_select": "select Breeds.breed_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the most popular dog breed?",
        "gold_select": "select Breeds.breed_name",
        "select_candidates": [
            "select Breeds.breed_name",
            "select Breeds.breed_name, Dogs.breed_code",
            "select Breeds.breed_code, Breeds.breed_name",
            "select Breeds.breed_name (Dogs.breed_code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs",
            "Breeds Charges Dogs",
            "Charges Dogs"
        ],
        "align_scores": [
            0.9953868985176086,
            8.028528100112453e-05,
            0.004455480258911848,
            7.15216519893147e-05,
            0.004756603855639696,
            6.860006396891549e-05,
            0.0054040164686739445,
            7.238482066895813e-05
        ],
        "align_select": "select Breeds.breed_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For what breed most dogs have?",
        "gold_select": "select Breeds.breed_name",
        "select_candidates": [
            "select Breeds.breed_name",
            "select Breeds.breed_name, Dogs.breed_code",
            "select Breeds.breed_code, Breeds.breed_name",
            "select Breeds.breed_name, Dogs.breed_code, Dogs.size_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs",
            "Breeds Charges Dogs",
            "Breeds Treatment_Types Dogs"
        ],
        "align_scores": [
            0.9904961585998535,
            7.626375736435875e-05,
            0.007148719392716885,
            6.790687621105462e-05,
            0.004687896929681301,
            6.437746924348176e-05,
            0.00013887826935388148,
            5.867099389433861e-05
        ],
        "align_select": "select Breeds.breed_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Please show the IDs, last names and cell phone numbers for the professional living in Indiana who does treatment with more than two treatments: -.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select t8.c2, Professionals.last_name, Professionals.cell_number",
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Treatments.dog_id, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.0469406358897686,
            8.077129314187914e-05,
            0.0006121110636740923,
            6.974821008043364e-05,
            0.5826761722564697,
            8.628774230601266e-05,
            0.0005042008124291897,
            7.403401104966179e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Which professional lives in the state of Indiana or has treated more than two patients or had their treatments performed on them? List his or her identification number, last name and cellular telephone.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select t8.c2, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.07180793583393097,
            0.7437133193016052,
            0.08000796288251877,
            0.5847604870796204,
            0.0006328041781671345,
            0.0017032372998073697,
            0.00027149065863341093,
            0.00043607616680674255
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which professionals live in Indiana and did more than two treatments? List his or her ID, last name and cell phone.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select t8.c2, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.16431984305381775,
            0.0004059478233102709,
            0.00042761655640788376,
            0.0002131651999661699,
            0.056773241609334946,
            0.0003912873798981309,
            0.0007620175601914525,
            0.00021966647182125598
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Find people with Indiana or performed procedures on two procedures. List their identification, last name and telephone number.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.home_phone",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select t8.c2, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Owners Professionals Treatments",
            "Treatment_Types Owners Professionals Treatments",
            "Sizes Owners Professionals Treatments",
            "Dogs Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.0004597796651069075,
            8.691853145137429e-05,
            0.0004665033193305135,
            8.061333210207522e-05,
            0.015911154448986053,
            0.00032072915928438306,
            0.0005179775762371719,
            8.136989345075563e-05
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the last name and cell phone of the different professionals who live in the state of Indiana did treatment on more than two treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.last_name, Professionals.cell_number",
            "select Professionals.last_name, t66.c10",
            "select Professionals.last_name, Professionals.home_phone",
            "select Professionals.last_name, t06.c10"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9173634648323059,
            0.00014479042147286236,
            0.0008917081286199391,
            0.0001013355577015318,
            0.002214632462710142,
            8.420126687269658e-05,
            0.0009879390709102154,
            0.00011450018791947514
        ],
        "align_select": "select Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What's the name of the highest-paid singer in the world?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name (or singer.Birth_Year)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9743313193321228,
            6.169811240397394e-05,
            0.0006003155140206218,
            6.130635301815346e-05,
            0.0003831261128652841,
            5.515472003025934e-05,
            0.0008133042138069868,
            6.506836507469416e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who is the richest singer?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9715149402618408,
            6.103230407461524e-05,
            0.0009661397198215127,
            5.631676685879938e-05,
            0.0004716821713373065,
            5.944117219769396e-05,
            0.00021115687559358776,
            5.5772696214262396e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who is the singer that has the largest net worth?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9176703095436096,
            6.604861846426502e-05,
            0.0005140395369380713,
            6.614121230086312e-05,
            0.0014027869328856468,
            6.435003888327628e-05,
            0.00043312847265042365,
            6.349154864437878e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who is the richest singer at present?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9730377197265625,
            6.264528201427311e-05,
            0.0004812795959878713,
            5.962676368653774e-05,
            0.001107861171476543,
            5.837136632180773e-05,
            0.0004812795959878713,
            5.962676368653774e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find all the citizenships that have been held by singers born not between 1945 and 1955.",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select distinct singer.Citizenship",
            "select singer.Citizenship",
            "select count(*)",
            "select all singer.Citizenship"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9272616505622864,
            0.009760058484971523,
            0.8056725859642029,
            0.06101808696985245,
            0.02042968012392521,
            0.0003858969430439174,
            0.002809501253068447,
            0.0007255161763168871
        ],
        "align_select": "select distinct singer.Citizenship",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the singer nationality that has the largest number?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship the SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship (GROUP BY-ORDER BY-LIMIT)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9216845631599426,
            6.413182563846931e-05,
            0.0007150188321247697,
            9.183630027109757e-05,
            0.010631624609231949,
            6.020555883878842e-05,
            0.002411958295851946,
            6.27923000138253e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the country of origin for the most singers?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year",
            "select singer.Citizenship, t0.c5",
            "select singer.Citizenship, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9915552735328674,
            6.371839117491618e-05,
            0.00019025780784431845,
            5.3138686780584976e-05,
            0.000394481816329062,
            6.20413848082535e-05,
            0.0004596166836563498,
            5.745741873397492e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which is the most common passport for singers?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship de facto-dominance-gROUP BY-ORDER BY-LIMIT",
            "select singer.Citizenship de facto-dominance-GROUP BY-ORDER BY-LIMIT",
            "select singer.Citizenship, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9946000576019287,
            6.790635961806402e-05,
            0.0008676382130943239,
            0.00011646768689388409,
            0.0008676382130943239,
            0.00011646768689388409,
            0.0003824127488769591,
            6.545358337461948e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the country with the most singers?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship, singer.Net_Worth_Millions",
            "select singer.Citizenship, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9885163307189941,
            6.719327939208597e-05,
            0.24098874628543854,
            5.8447461924515665e-05,
            0.0007104140240699053,
            6.080527600715868e-05,
            0.0005062145064584911,
            6.665274850092828e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me all the singers whose songs sold more than 300,000 copies.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select song.Singer_ID",
            "select song.Singer_ID, song.Title",
            "select song.Singer_ID, song.Sales",
            "select distinct song.Singer_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "song",
            "singer song",
            "song singer song",
            "song singer"
        ],
        "align_scores": [
            0.14358322322368622,
            0.0010630706092342734,
            0.00018035221728496253,
            7.760978769510984e-05,
            0.0002623438776936382,
            7.420540350722149e-05,
            0.8038842678070068,
            0.00032590061891824007
        ],
        "align_select": "select distinct song.Singer_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "I would like to see different names of singers that had songs which sold over 300 000 copies.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select different singer.Name",
            "select singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9922139048576355,
            0.009033170528709888,
            0.00033923788578249514,
            0.0002132839144906029,
            0.9062600135803223,
            0.024170901626348495,
            0.3304302990436554,
            0.8907610774040222
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the names of singers that have recorded songs with sales over 300,000.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID",
            "select singer.Name, song.Singer_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.8490511178970337,
            0.9569441676139832,
            0.0002566557959653437,
            0.0006430785870179534,
            0.03938663750886917,
            0.22700241208076477,
            0.0002566557959653437,
            0.0006430785870179534
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of singers that have songs that have sold more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Birth_Year",
            "select song.Singer_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.8197168111801147,
            0.9852033853530884,
            0.00024673438747413456,
            0.00070410524494946,
            0.00014102138811722398,
            0.0002326151734450832,
            0.026407543569803238,
            0.41778644919395447
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list singers whose songs have sold more than 300000.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select song.Singer_ID",
            "select singer.Name",
            "select song.Singer_ID, singer.Name",
            "select singer.Name, song.Singer_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "song",
            "singer song",
            "song singer song"
        ],
        "align_scores": [
            0.19294492900371552,
            0.895710289478302,
            0.782891571521759,
            0.9353221654891968,
            0.00036585427005775273,
            0.0008488560561090708,
            0.00036293486482463777,
            0.0005676509463228285
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show distinct names of the singers who have sold songs more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.Birth_Year",
            "select singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9918718338012695,
            0.003330145264044404,
            0.0001957730419235304,
            0.00018015215755440295,
            0.00017078335804399103,
            0.00016514761955477297,
            0.7006561756134033,
            0.8831850290298462
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show distinct name of singer that has song sales greater than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select singer.Name, song.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9936908483505249,
            9.832595242187381e-05,
            0.8972675204277039,
            0.0002214083360740915,
            0.0001518241042504087,
            6.966445653233677e-05,
            0.00016818640870042145,
            6.973990093683824e-05
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What singer has songs sold more than 300000?",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.8037203550338745,
            0.9841893315315247,
            0.00034222262911498547,
            0.0005584849859587848,
            0.37789589166641235,
            0.9727072715759277,
            0.00015955095295794308,
            0.00022209447342902422
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the names of singers who had their songs sold more than 300,000 copies.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.7697784304618835,
            0.8894518613815308,
            0.0002923657011706382,
            0.0007729904027655721,
            0.05820293352007866,
            0.23417583107948303,
            0.00020530539040919393,
            0.00036809645825996995
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show distinct names of singers that sell more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select singer.Name",
            "select distinct singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9952024221420288,
            0.0020972364582121372,
            0.00015150452964007854,
            7.45184879633598e-05,
            0.8915569186210632,
            0.01822023093700409,
            0.00013330251385923475,
            8.780106145422906e-05
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Distinct names of singers with song sales above 300k.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.Birth_Year",
            "select singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9964577555656433,
            0.00012235459871590137,
            0.00013746983313467354,
            6.666075205430388e-05,
            0.00013704693992622197,
            6.369561742758378e-05,
            0.8049026727676392,
            0.00021978357108309865
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of the singers that have sold more than 300k.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID, singer.Name",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.8694643974304199,
            0.8401033282279968,
            0.000166743848240003,
            0.00025772687513381243,
            0.00024032348301261663,
            0.00046626993571408093,
            0.0001302924647461623,
            0.00016203205450437963
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all the names of singers with increasing net worth.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name (or singer.Birth_Year)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9664050936698914,
            0.0005671229446306825,
            0.00033169612288475037,
            0.00011795631144195795,
            0.0001781161845428869,
            0.00013003034109715372,
            0.0006970356917008758,
            0.00019659385725390166
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Order all singers in increasing net worth.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9872347712516785,
            0.0005199869628995657,
            0.0003295310598332435,
            0.00017426679551135749,
            0.0034866337664425373,
            0.0001880238705780357,
            0.000393182534025982,
            0.0001273644738830626
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show singers list in increasing order of net work.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name",
            "select singer.Singer_ID, singer.Name",
            "select singer.Singer_ID, singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.0003157158207613975,
            0.0003157158207613975,
            0.9919192790985107,
            0.9919192790985107,
            0.000163169446750544,
            0.000163169446750544,
            0.00019581167725846171,
            0.00019581167725846171
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Please enter singers according to their wealth.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID",
            "select singer.Name",
            "select singer.Singer_ID, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.0005366923287510872,
            0.0003790629853028804,
            0.022330179810523987,
            0.0046358490362763405,
            0.9915708303451538,
            0.9161630868911743,
            0.00020887490245513618,
            0.0003600975906010717
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Who sings? Their nationality is not France.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Singer_ID, singer.Name",
            "select distinct singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9716346859931946,
            0.0024031924549490213,
            0.00022490731498692185,
            0.00010351312084821984,
            0.0004783207841683179,
            0.00014539835683535784,
            0.08392202854156494,
            0.011052560992538929
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers are not French Citizens?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select singer.Name",
            "select distinct singer.Name, singer.Birth_Year",
            "select distinct singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.1412864476442337,
            0.11590893566608429,
            0.8718038201332092,
            0.44080013036727905,
            0.0006843901355750859,
            0.0002731686981860548,
            0.0007628465536981821,
            0.00015167478704825044
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singer do not have the French nationality.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID",
            "select distinct singer.Name",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.4493757486343384,
            0.6824446320533752,
            0.05920026823878288,
            0.008693630807101727,
            0.06706306338310242,
            0.05362614989280701,
            0.00014196718984749168,
            0.0003095990978181362
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list the names of singers who are not French.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select distinct singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9866321682929993,
            9.634337766328827e-05,
            0.040481556206941605,
            0.00011152283695992082,
            0.00015494586841668934,
            6.037505590938963e-05,
            0.0001656491367612034,
            6.342129199765623e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who is not French and has been a singer?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select distinct singer.Name",
            "select singer.Name, singer.Citizenship",
            "select distinct singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8177675604820251,
            0.9869492650032043,
            0.188374862074852,
            0.001531977322883904,
            0.0003196811012458056,
            0.00025174158508889377,
            0.0010143452091142535,
            9.720712841954082e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are singers that do not have French citizenship?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select distinct singer.Name",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9235391020774841,
            0.02228134498000145,
            0.000180923510924913,
            0.00013877700257580727,
            0.0653623417019844,
            0.12949471175670624,
            0.00040759818512015045,
            0.000138106377562508
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the list of singers who are not French.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select distinct singer.Name",
            "select distinct singer.Name, singer.Citizenship",
            "select singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9421853423118591,
            8.098933903966099e-05,
            0.03143686056137085,
            0.00010595759522402659,
            0.00016429665265604854,
            6.30046270089224e-05,
            0.0001737840793794021,
            6.59459110465832e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the singers whose citizenship is not French.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Singer_ID",
            "select singer.Name",
            "select distinct singer.Name",
            "select distinct singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.004916185047477484,
            0.0001052750667440705,
            0.9455516338348389,
            0.00011889018787769601,
            0.027785688638687134,
            0.00011144673044327646,
            0.00029134892974980175,
            6.772723281756043e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the singer that are not French citizen.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID",
            "select singer.Name, singer.Citizenship",
            "select distinct singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.822913408279419,
            0.05977749079465866,
            0.002197530120611191,
            0.015848560258746147,
            0.00016003166092559695,
            0.00011685136269079521,
            0.013810916803777218,
            0.020933547988533974
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please enter singers whose passport is not French below.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Singer_ID",
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.0017750306287780404,
            0.0001315859699388966,
            0.780567467212677,
            0.00013080783537589014,
            0.00023712193069513887,
            7.783287583151832e-05,
            0.00017811193538364023,
            7.126593845896423e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of singers who aren't French.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select distinct singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9822266101837158,
            0.00010390017268946394,
            0.04418114572763443,
            0.00010643140558386222,
            0.00017461823881603777,
            6.068490256438963e-05,
            0.00016906623204704374,
            6.538147863466293e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the singers who are not French.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select singer.Name",
            "select distinct singer.Name, singer.Citizenship",
            "select distinct singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.10006186366081238,
            0.0001531637681182474,
            0.9688674211502075,
            0.0001335210690740496,
            0.0002752862055785954,
            6.273460166994482e-05,
            0.0004489134589675814,
            5.795349716208875e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all singers who are not French.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select singer.Name",
            "select distinct singer.Name, singer.Citizenship",
            "select distinct singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.07349714636802673,
            0.00015467529010493308,
            0.978179395198822,
            0.00012418378901202232,
            0.00023352117568720132,
            6.300499080680311e-05,
            0.00033202924532815814,
            6.112456321716309e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show singers whose country isn't France",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.978839099407196,
            7.955230103107169e-05,
            0.004207924474030733,
            8.946400339482352e-05,
            0.00020840980869252235,
            6.488434155471623e-05,
            0.00020035474153701216,
            6.859214045107365e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the singers who aren't from France?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8831751942634583,
            0.00013778542052023113,
            0.00021056861442048103,
            6.921694875927642e-05,
            0.00041201573912985623,
            7.863561040721834e-05,
            0.00022982423251960427,
            7.784824265399948e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Please tell me the singers of which nationality are the most common.",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship, singer.Name",
            "select singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9909441471099854,
            6.472539098467678e-05,
            0.06436178833246231,
            5.7827190175885335e-05,
            0.0006555222789756954,
            6.0129248595330864e-05,
            0.000562950735911727,
            6.281505920924246e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the nationality of the majority of singers?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, t0.c5",
            "select singer.Citizenship, singer.Net_Worth_Millions",
            "select singer.Citizenship, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9948915243148804,
            7.389583333861083e-05,
            0.000410700507927686,
            5.877347575733438e-05,
            0.0004061437211930752,
            5.6580152886454016e-05,
            0.00019959242490585893,
            5.59846666874364e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me information about the most common citizen of singers.",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, singer.Name",
            "select singer.Citizenship, t0.c5",
            "select singer.Citizenship, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9952003955841064,
            6.611427670577541e-05,
            0.0002060242841253057,
            5.907701779506169e-05,
            0.00030784786213189363,
            7.046448445180431e-05,
            0.006035933271050453,
            6.133651186246425e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the different names of the singers who have sold more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, singer.Birth_Year",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9910874962806702,
            0.00017562246648594737,
            0.0001236501702805981,
            7.634241774212569e-05,
            0.00018492061644792557,
            8.03948423708789e-05,
            0.00017313291027676314,
            7.142582762753591e-05
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you tell me about the different names of those singers whose songs sold more than 300 000.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select count(distinct singer.Name)",
            "select distinct singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9835890531539917,
            0.00016983530076686293,
            0.00034066246007569134,
            8.771486318437383e-05,
            0.008695405907928944,
            8.549891936127096e-05,
            0.00021653475414495915,
            8.219060691772029e-05
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Names of the singers who have sold more than 300,000.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, song.Sales"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.7597806453704834,
            0.8658643364906311,
            0.00020795801538042724,
            0.0002476353256497532,
            0.00016626057913526893,
            0.00021504903270397335,
            0.0003931042447220534,
            0.0007728968630544841
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "A list for the names of the singers who have sold more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Birth_Year",
            "select song.Singer_ID, singer.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.48181915283203125,
            0.6579756736755371,
            0.00020155574020463973,
            0.0002782993542496115,
            0.0001438601320842281,
            0.000207662204047665,
            0.0002715703740250319,
            0.00048370540025644004
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The different names of the singers who have sold more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.Birth_Year",
            "select count(distinct singer.Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9928601384162903,
            0.00014490009925793856,
            0.00017664910410530865,
            7.56392182665877e-05,
            0.00013355747796595097,
            7.112770981620997e-05,
            0.000924431427847594,
            8.1005557149183e-05
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What singers are known as \"sellers more than 300000\"?",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Singer_ID",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song",
            "singer"
        ],
        "align_scores": [
            0.7578063607215881,
            0.00010103103704750538,
            0.00019636847719084471,
            7.49069222365506e-05,
            0.0002367528504692018,
            8.68037313921377e-05,
            0.0001959409419214353,
            6.14917153143324e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Names of the singers who have sold more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.7540052533149719,
            0.8799730539321899,
            0.0001795471616787836,
            0.0002372151502640918,
            0.00013717834372073412,
            0.00017931738693732768,
            0.00015225775132421404,
            0.0001959650544449687
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the names of the singers with sales over 30000.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID, singer.Name",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.967037558555603,
            0.7718343138694763,
            0.0001708529016468674,
            0.0002216633001808077,
            0.0002644351916387677,
            0.0004071422736160457,
            0.00014297818415798247,
            0.00015858614642638713
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Names of the singers that have sold more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID, singer.Name",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.7595893144607544,
            0.8840969204902649,
            0.0001649935293244198,
            0.0002346925757592544,
            0.000250889512244612,
            0.00048808622523210943,
            0.0001277020783163607,
            0.00016656935622449964
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the singers with sales exceeding 300,000?",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Singer_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9684761166572571,
            0.45647114515304565,
            0.00018614994769450277,
            0.00024084854521788657,
            0.00015058464487083256,
            0.00016107421834021807,
            0.00016925687668845057,
            0.00021105182531755418
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the singers who had sales above $300,000?",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song",
            "singer"
        ],
        "align_scores": [
            0.8801884651184082,
            0.820257842540741,
            0.00022098298359196633,
            0.00036900414852425456,
            0.00018530416127759963,
            0.00031522978679277003,
            0.0001961082307389006,
            0.0002024998248089105
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the singers that have at least 2 songs.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Title, singer.Name",
            "select singer.Name, song.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9890538454055786,
            7.818936137482524e-05,
            0.0008861383539624512,
            7.412245031446218e-05,
            0.03405274450778961,
            6.959924940019846e-05,
            0.0716240331530571,
            7.254056981764734e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who are singers that have more than one song?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Singer_ID",
            "select singer.Name, song.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.992183268070221,
            0.00010203992133028805,
            0.0006377565441653132,
            7.498596824007109e-05,
            0.0007715975516475737,
            7.924021338112652e-05,
            0.18265216052532196,
            7.68433092162013e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What's the name of the highest-paid musician?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.9864935874938965,
            6.304285489022732e-05,
            0.0005979656707495451,
            5.91437092225533e-05,
            0.00032429146813228726,
            5.3392457630252466e-05,
            0.0005979656707495451,
            5.91437092225533e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which singer has the most money?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9668483138084412,
            6.384276639437303e-05,
            0.0022550250869244337,
            5.992865771986544e-05,
            0.00038500805385410786,
            6.17287223576568e-05,
            0.00027491585933603346,
            5.9118217905052006e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which singer has the highest net worth",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID, singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9456192255020142,
            6.297820073086768e-05,
            0.003030360909178853,
            5.944650183664635e-05,
            0.0005016218638047576,
            6.427600601455197e-05,
            0.000389430089853704,
            6.19662314420566e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which is the richest of all singers?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID, singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.6878437995910645,
            6.392350042006001e-05,
            0.00045294908341020346,
            5.706746378564276e-05,
            0.0004437168827280402,
            5.91256030020304e-05,
            0.00029996587545610964,
            5.8632569562178105e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which is the singer with the most money?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9742937684059143,
            6.968265370232984e-05,
            0.003344613593071699,
            6.364248838508502e-05,
            0.0004966325359418988,
            6.306287104962394e-05,
            0.0003660311340354383,
            6.306401337496936e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the singer with the most net worth.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID, singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9472296237945557,
            5.7467168517177925e-05,
            0.0013181656831875443,
            5.8700545196188614e-05,
            0.00045266415691003203,
            6.088116788305342e-05,
            0.00030975264962762594,
            6.357849633786827e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which singer has the highest net worth?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID, singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9364436864852905,
            6.289477460086346e-05,
            0.0028241323307156563,
            6.03073785896413e-05,
            0.0004935595788992941,
            6.364060391206294e-05,
            0.0003445416805334389,
            6.338084494927898e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the different nationalities, and their numbers of singers of each.",
        "gold_select": "select singer.Citizenship, count(*)",
        "select_candidates": [
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship., count(*)",
            "select singer.Citizenship, t0.c5, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9928856492042542,
            0.00020320946350693703,
            0.9928856492042542,
            0.00020320946350693703,
            0.0023619451094418764,
            0.00026420888025313616,
            0.00029003722011111677,
            0.00021364253188949078
        ],
        "align_select": "select singer.Citizenship, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me different nationalities and their numbers of singers in each.",
        "gold_select": "select singer.Citizenship, count(*)",
        "select_candidates": [
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship, count(*), singer.Citizenship",
            "select singer.Citizenship., count(*)",
            "select singer.Citizenship, count(*), t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9939938187599182,
            0.00023726849758531898,
            0.0003591155691538006,
            0.00015448883641511202,
            0.00330886198207736,
            0.0002905797155108303,
            0.00022648469894193113,
            0.00012297007197048515
        ],
        "align_select": "select singer.Citizenship, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What non-French citizens were singers",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select distinct singer.Singer_ID",
            "select distinct singer.Name",
            "select distinct singer.Name, singer.Birth_Year",
            "select count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.010801189579069614,
            0.00019348420028109103,
            0.11926127970218658,
            0.00032611380447633564,
            0.0006378754042088985,
            7.726663170615211e-05,
            0.015837838873267174,
            7.193766941782087e-05
        ],
        "align_select": "select distinct singer.Singer_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers don\u2019t have French citizenship?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID",
            "select distinct singer.Name",
            "select singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8121795058250427,
            0.6500029563903809,
            0.04763403907418251,
            0.00681248540058732,
            0.1492561548948288,
            0.1236719861626625,
            0.00019095496099907905,
            0.00021408178145065904
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers do not hold French citizenship?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select distinct singer.Name",
            "select singer.Singer_ID",
            "select distinct singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.7981411814689636,
            0.4053378999233246,
            0.11825083196163177,
            0.16253039240837097,
            0.009017645381391048,
            0.022152617573738098,
            0.00048133626114577055,
            0.00018623925279825926
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Can you list the singers who do not hold French citizenship here?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select distinct singer.Name",
            "select distinct singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.7988384962081909,
            0.00926889292895794,
            0.0002817451604641974,
            0.00017692589608486742,
            0.10713957995176315,
            0.0608120933175087,
            0.00045964273158460855,
            0.00015626968524884433
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For each nationality, how many singers originate from that country?",
        "gold_select": "select singer.Citizenship, count(*)",
        "select_candidates": [
            "select singer.Citizenship, count(*)",
            "select count(*), singer.Citizenship",
            "select singer.Citizenship.c4, count(*)",
            "select singer.Citizenship, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9949624538421631,
            0.0003165500529576093,
            0.994648277759552,
            0.0002707854437176138,
            0.0011643115431070328,
            0.0002635426935739815,
            0.9949624538421631,
            0.0003165500529576093
        ],
        "align_select": "select singer.Citizenship, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me the maximum wealth for each category according to their nationality.",
        "gold_select": "select singer.Citizenship, max(singer.Net_Worth_Millions)",
        "select_candidates": [
            "select max(singer.Net_Worth_Millions), singer.Citizenship",
            "select singer.Citizenship, max(singer.Net_Worth_Millions)",
            "select maximum(singer.Net_Worth_Millions), singer.Citizenship",
            "select min(singer.Net_Worth_Millions), singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9884496927261353,
            0.00016022771887946874,
            0.9916439652442932,
            0.00023164620506577194,
            0.000684232625644654,
            0.00010787978681037202,
            0.000257296982454136,
            0.00011565149907255545
        ],
        "align_select": "select max(singer.Net_Worth_Millions), singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show singers and the sales of songs belonging to each singer.",
        "gold_select": "select singer.Name, sum(song.Sales)",
        "select_candidates": [
            "select song.Singer_ID, sum(song.Sales)",
            "select singer.Name, sum(song.Sales)",
            "select song.Singer_ID, song.Sales",
            "select t2.c2, sum(song.Sales)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "song",
            "singer song"
        ],
        "align_scores": [
            0.9951537847518921,
            0.00027396524092182517,
            0.9959763884544373,
            0.0002004072885029018,
            0.9897022247314453,
            0.0004943927633576095,
            0.0005268902750685811,
            0.00016441920888610184
        ],
        "align_select": "select song.Singer_ID, sum(song.Sales)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "How much did songs sell for singers?",
        "gold_select": "select singer.Name, sum(song.Sales)",
        "select_candidates": [
            "select sum(song.Sales), song.Singer_ID",
            "select sum(song.Sales)",
            "select song.Sales",
            "select amount(song.Sales), song.Singer_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "song"
        ],
        "align_scores": [
            0.9745790362358093,
            0.0010306867770850658,
            0.0038274892140179873,
            0.0019558288622647524,
            0.006587381474673748,
            0.0015613760333508253,
            0.0006620125495828688,
            0.00024154646962415427
        ],
        "align_select": "select sum(song.Sales), song.Singer_ID",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Which songs and singers are?",
        "gold_select": "select song.Title, singer.Name",
        "select_candidates": [
            "select song.Title, song.Singer_ID",
            "select song.Title, singer.Name",
            "select song.Title, t01.c2",
            "select song.Title, song.Singer_ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song",
            "song singer",
            "song",
            "song singer song"
        ],
        "align_scores": [
            0.013352648355066776,
            0.00018965068738907576,
            0.9767922759056091,
            0.00017417674825992435,
            0.000882645370438695,
            0.00013741489965468645,
            0.013352648355066776,
            0.00018965068738907576
        ],
        "align_select": "select song.Title, singer.Name",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What songs do they sing, and who are they?",
        "gold_select": "select song.Title, singer.Name",
        "select_candidates": [
            "select song.Title, singer.Name",
            "select t2.c1, singer.Name",
            "select song.Title, singer.Name",
            "select t01.c1, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song",
            "song singer song",
            "song singer"
        ],
        "align_scores": [
            0.9957805871963501,
            0.9935006499290466,
            0.004795813467353582,
            0.016106879338622093,
            0.9957805871963501,
            0.9935006499290466,
            0.0014842700911685824,
            0.001772546675056219
        ],
        "align_select": "select song.Title, singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What singers were born in the year 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID",
            "select distinct singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9604690670967102,
            0.0002535720996093005,
            0.00018504109175410122,
            6.84899787302129e-05,
            0.01892795041203499,
            0.00036239431938156486,
            0.1108914166688919,
            0.0001751196541590616
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What singers were born in 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9648511409759521,
            0.0001711687509668991,
            0.00018358632223680615,
            6.717725773341954e-05,
            0.02331562526524067,
            0.0003611502470448613,
            0.00017194313113577664,
            6.917775317560881e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of which singers were born either 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select count(*)",
            "select singer.Name",
            "select singer.Singer_ID",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.03462663292884827,
            7.470447599189356e-05,
            0.6315727233886719,
            0.00020396613399498165,
            0.008929628878831863,
            0.0005323031218722463,
            0.00016291184874717146,
            6.459109135903418e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers were born in 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9703128933906555,
            0.00020224356558173895,
            0.00018753689073491842,
            7.119285874068737e-05,
            0.020232893526554108,
            0.00046525007928721607,
            0.00018972049292642623,
            7.621745317010209e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers were born in either 1949 or 1948?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID",
            "select singer.Name, singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9491309523582458,
            0.0002413802722003311,
            0.0001873563596745953,
            6.78591022733599e-05,
            0.017146194353699684,
            0.0004654905351344496,
            0.00024428381584584713,
            0.00010495369497220963
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers were born in 1948 or 1949?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9703128933906555,
            0.00020224356558173895,
            0.00018753689073491842,
            7.119285874068737e-05,
            0.020232893526554108,
            0.00046525007928721607,
            0.00018972049292642623,
            7.621745317010209e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who were the singers whose birthyear is either 1948 or 1949?.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9927536845207214,
            0.0003195034805685282,
            0.00019560418149922043,
            6.570160621777177e-05,
            0.00026594032533466816,
            0.0001057330155163072,
            0.00022561910736840218,
            9.411483188159764e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the list of the singer's birth years in either '48' or '49'.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Birth_Year",
            "select distinct singer.Birth_Year",
            "select count(*)",
            "select singer.Singer_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9388493895530701,
            0.0003377106331754476,
            0.028176039457321167,
            0.00017182546434924006,
            0.010874703526496887,
            0.0001307678030570969,
            0.0008410805021412671,
            0.00021682048100046813
        ],
        "align_select": "select singer.Birth_Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singers have more than one song?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Singer_ID, singer.Name",
            "select song.Title, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9938656687736511,
            9.063984180102125e-05,
            0.0005900163669139147,
            7.888623076723889e-05,
            0.0012061616871505976,
            8.149119094014168e-05,
            0.013026644475758076,
            7.293844828382134e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names of houses or apartments that have multiple rooms.",
        "gold_select": "select Properties.property_name",
        "select_candidates": [
            "select Properties.property_name",
            "select Properties.property_name, Properties.property_address",
            "select Properties.property_name, Properties.property_address, Properties.room_count",
            "select Properties.property_name, Properties.room_count"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties",
            "Other_Available_Features Properties"
        ],
        "align_scores": [
            0.8442309498786926,
            0.0029136601369827986,
            0.0002436854992993176,
            7.184251444414258e-05,
            0.0001872869033832103,
            7.319696305785328e-05,
            0.0002002877154154703,
            6.604352529393509e-05
        ],
        "align_select": "select Properties.property_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What houses or apartments are there with more than one room?",
        "gold_select": "select Properties.property_name",
        "select_candidates": [
            "select Properties.property_name",
            "select Properties.property_name, Properties.property_address",
            "select Properties.property_name ou Properties.property_address",
            "select Properties.property_address, Properties.room_count"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties",
            "Other_Available_Features Properties"
        ],
        "align_scores": [
            0.33803436160087585,
            0.0135670630261302,
            0.005424586124718189,
            0.0002738088369369507,
            0.12966427206993103,
            0.00040976214222609997,
            0.00022596311464440078,
            7.808727968949825e-05
        ],
        "align_select": "select Properties.property_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of properties that are either houses or apartments with two or more rooms.",
        "gold_select": "select Properties.property_name",
        "select_candidates": [
            "select Properties.property_name",
            "select Properties.property_name, Properties.room_count",
            "select Properties.property_name, Properties.property_address",
            "select Properties.property_name, Properties.vendor_requested_price"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties"
        ],
        "align_scores": [
            0.9769913554191589,
            0.8658148050308228,
            0.00019999210780952126,
            0.00010396896686870605,
            0.0002463230339344591,
            0.000122423458378762,
            0.00023846939438953996,
            0.00011515365622472018
        ],
        "align_select": "select Properties.property_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Locate the names of properties that are either houses or apartments with two or more rooms.",
        "gold_select": "select Properties.property_name",
        "select_candidates": [
            "select Properties.property_name",
            "select Properties.property_name, Properties.room_count",
            "select Properties.property_name, Properties.property_address",
            "select Properties.property_name - Properties.room_count"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties"
        ],
        "align_scores": [
            0.9750367999076843,
            0.9384371638298035,
            0.00019158123177476227,
            0.00011776525934692472,
            0.0003030889783985913,
            0.000123272038763389,
            0.000376615091226995,
            0.0001747651695040986
        ],
        "align_select": "select Properties.property_name",
        "align_structure": "SELECT-FROM-WHERE"
    }
]