[
    {
        "question": "The average age, minimum age, and maximum age of all French singers.",
        "gold_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "select_candidates": [
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Is_male)",
            "select avg(singer.Age), min(singer.Age) and max(singer.Age)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9950174689292908,
            0.9950174689292908,
            0.9950174689292908,
            0.9950174689292908,
            0.00017269649833906442,
            0.00017269649833906442,
            0.9647443294525146,
            0.9647443294525146
        ],
        "align_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average, minimum, and maximum ages of all French singers.",
        "gold_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "select_candidates": [
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Is_male)",
            "select avg(singer.Is_male), min(singer.Age), max(singer.Age)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9949830770492554,
            0.9949830770492554,
            0.9949830770492554,
            0.9949830770492554,
            0.0001752619573380798,
            0.0001752619573380798,
            0.00018742747488431633,
            0.00018742747488431633
        ],
        "align_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the average age, minimum age, and maximum age of all French Singers.",
        "gold_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "select_candidates": [
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select avg(singer.Age), min(singer.Age), max(singer.Is_male)",
            "select avg(singer.Age), min(singer.Age) and max(singer.Age)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9950188398361206,
            0.9950188398361206,
            0.9950188398361206,
            0.9950188398361206,
            0.00017334072617813945,
            0.00017334072617813945,
            0.9636328220367432,
            0.9636328220367432
        ],
        "align_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all the countries with singers above twenty years old.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select distinct singer.Country",
            "select singer.Country, singer.Age",
            "select singer.Country, singer.Is_male"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.881000816822052,
            0.9840011596679688,
            0.38356339931488037,
            0.0001833272399380803,
            0.000168482685694471,
            0.00011962742428295314,
            0.00015846792666707188,
            0.00030777943902648985
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The different countries with singers that exceed twenty years old.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select distinct singer.Country",
            "select count(distinct singer.Country)",
            "select distinct singer.Country, singer.Song_Name",
            "select distinct singer.Country, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9883848428726196,
            0.0007340312586165965,
            0.003170147305354476,
            9.44718049140647e-05,
            0.00010984282562276348,
            8.413768955506384e-05,
            0.00014128304610494524,
            8.641704334877431e-05
        ],
        "align_select": "select distinct singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the location and names of all stadiums between 5,000 and 10,000 seats.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0, stadium.Location, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9942008256912231,
            0.0002527001197449863,
            0.00018997826555278152,
            8.872715261531994e-05,
            0.030778322368860245,
            0.00011406863632146269,
            0.0003800577251240611,
            7.129448931664228e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the locations and names of all arenas whose size is from 5k to 10k",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0, stadium.Location, stadium.Name",
            "select stadium.Location, stadium.Name, stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9952344298362732,
            0.00023944930580910295,
            0.026994718238711357,
            0.00012103474728064612,
            0.00039739167550578713,
            7.145089330151677e-05,
            0.00021044616005383432,
            7.487335824407637e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all stations that can fit 5-10k passengers and their locations and names.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location, stadium.Name",
            "select stadium.Location, stadium.Name, stadium.Capacity",
            "select stadium.Capacity, stadium.Location, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.652880072593689,
            0.0006495090783573687,
            0.0024281113874167204,
            0.0002226457290817052,
            0.00400110287591815,
            0.00012042206071782857,
            0.028826501220464706,
            0.00014045668649487197
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all stations between 5,000 and 10,000 in size and show me their locations and names.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select concert.concert_Name, stadium.Name",
            "select stadium.Name, stadium.Location",
            "select stadium.Location., stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium",
            "stadium concert"
        ],
        "align_scores": [
            0.99297696352005,
            0.00020976386440452188,
            0.0002621325838845223,
            8.261563925771043e-05,
            0.9929555654525757,
            0.0001756119163474068,
            0.018721316009759903,
            9.686605335446075e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the location and name of all stations with capacity between 5,000 and 10,000.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Stadium_ID, stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0.c 1, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9750531911849976,
            0.00024630094412714243,
            0.0001885432720882818,
            9.262423554901034e-05,
            0.015152822248637676,
            0.00011414174514357,
            0.0004726692277472466,
            8.174911636160687e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Determine the number of pets in which weighs over 10Kg.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*) dependant on Pets.PetID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets",
            "Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.9918010830879211,
            0.0003799127880483866,
            0.00029729929519817233,
            0.004708187188953161,
            0.00029729929519817233,
            0.004708187188953161,
            0.0007566686836071312,
            0.0004902560031041503
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of pets owned by students who are over twenty years old.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9639849066734314,
            0.0022270288318395615,
            0.0003062220639549196,
            0.0004017293395008892,
            0.00010667729657143354,
            0.0001347944198641926,
            0.0005442273104563355,
            0.04793596640229225
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets are owned by older than twenty years old students.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(distinct Has_Pet.PetID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9906745553016663,
            0.000701068842317909,
            0.00027285609394311905,
            0.0005616088164970279,
            0.00011346460087224841,
            0.00015021963918115944,
            0.09436170756816864,
            0.001143571105785668
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many pets are owned by students that are over twenty years old.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.StuID, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9583025574684143,
            0.009484325535595417,
            0.0003241205122321844,
            0.0005426660645753145,
            0.00010998515790561214,
            0.00014900775568094105,
            0.000132323955767788,
            0.0001461568899685517
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets are owned by students over the age of twenty?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9824580550193787,
            0.004332674201577902,
            0.0002819445508066565,
            0.00017072474292945117,
            0.00011604763130890206,
            9.554811549605802e-05,
            0.00029563024872913957,
            0.0006752106128260493
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the numbers of pets owned by students that have an age greater than twenty.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9747406244277954,
            0.021640991792082787,
            0.0002597556740511209,
            0.002364897634834051,
            0.00011614417599048465,
            0.0003716633073054254,
            0.0003083345654886216,
            0.027902986854314804
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of student dogs owned by females.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(*), Student.StuID",
            "select count(distinct Has_Pet.StuID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.992367684841156,
            0.013278135098516941,
            0.00026330663240514696,
            0.004209313075989485,
            0.000259368127444759,
            0.00018094750703312457,
            0.0031254072673618793,
            0.00025318434927612543
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "show me the number of dogs being owned by females student.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.Sex",
            "select count(*), Student.StuID",
            "select count(distinct Pets.PetType)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9901150465011597,
            0.017501849681138992,
            0.0004400131874717772,
            0.05578075721859932,
            0.0002058911632047966,
            0.0006781061529181898,
            0.007330709602683783,
            0.0005565002793446183
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the identification and the weight of all pets whose age is more than one.",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.pet_age",
            "select Pets.PetType, Pets.weight",
            "select Pets.PetID-, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9815835356712341,
            0.0002112567744916305,
            0.0011346234241500497,
            8.401110244449228e-05,
            0.010037034749984741,
            0.00025463858037255704,
            0.004232214763760567,
            0.00013071169087197632
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return all the IDs and weights of pets who are over one years old.",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetID, Pets.weight,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.5331424474716187,
            9.60708930506371e-05,
            0.002578996354714036,
            7.544716936536133e-05,
            0.0016281629214063287,
            7.026506500551477e-05,
            0.0015382715500891209,
            6.548849341925234e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the last name of the student that has a cat aged three years old.",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname, Student.Age",
            "select Student.LName, Student.Fname",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9354103207588196,
            0.002714409725740552,
            0.00013987754937261343,
            7.608412852277979e-05,
            0.00016353485989384353,
            9.752858022693545e-05,
            0.00022442042245529592,
            9.976027649827302e-05
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the last name of the student who has a cat that is three years old.",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname, Student.Age",
            "select Student.LName, Student.Fname",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9099586009979248,
            0.003389138961210847,
            0.00012663639790844172,
            7.575660129077733e-05,
            0.00017365305393468589,
            0.00010395547724328935,
            0.00021047827613074332,
            0.00010499614290893078
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the last name of the student who has a cat age three.",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname, Student.Age",
            "select Student.LName, Student.Fname",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.8935917615890503,
            0.0022946663666516542,
            0.0001373897393932566,
            7.547091081505641e-05,
            0.00017168873455375433,
            0.00010776330600492656,
            0.0002207658690167591,
            9.718822548165917e-05
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the last name of the student whose cat is three years old?",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname, Student.Age",
            "select Student.LName, Student.Fname",
            "select Student.LName, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9749829173088074,
            0.0002842620015144348,
            0.0001277305418625474,
            5.809958383906633e-05,
            0.00016809246153570712,
            6.107935769250616e-05,
            0.0002027500158874318,
            6.026127448421903e-05
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The last name of the student who has a cat age is three years).",
        "gold_select": "select Student.LName",
        "select_candidates": [
            "select Student.LName",
            "select Student.LName, Student.Fname, Student.Age",
            "select Student.LName, Student.Age",
            "select Student.LName Student.Fname, Student.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet Pets",
        "table_candidates": [
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9295701384544373,
            0.0006190062849782407,
            0.00011537018144736066,
            6.833914085291326e-05,
            0.00022445019567385316,
            9.344218415208161e-05,
            0.0002448642044328153,
            9.652305016061291e-05
        ],
        "align_select": "select Student.LName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The name of the different car maker who produced a car in 70'.",
        "gold_select": "select distinct car_makers.Maker",
        "select_candidates": [
            "select distinct car_makers.FullName",
            "select distinct car_makers.FullName, car_makers.Maker",
            "select distinct car_makers.Maker, car_makers.FullName",
            "select distinct car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_names cars_data",
            "continents car_makers car_names",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9040148854255676,
            0.00024821754777804017,
            0.00033579033333808184,
            8.10073979664594e-05,
            0.0002980485442094505,
            7.89239420555532e-05,
            0.9895609617233276,
            0.00022508967958856374
        ],
        "align_select": "select distinct car_makers.FullName",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of French automobile manufacturers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Country",
            "select count(*), car_makers.Id",
            "select count(*) dependant on car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "car_makers"
        ],
        "align_scores": [
            0.9952235817909241,
            0.00022036858717910945,
            0.00025448837550356984,
            0.00035813471185974777,
            0.00030919266282580793,
            0.00024186799419112504,
            0.0007223791908472776,
            0.00016899594629649073
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of car models made in the United States.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(*), car_makers.Maker",
            "select count(*), car_makers.Maker, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "car_makers model_list car_makers car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9920713305473328,
            0.00638094637542963,
            0.05137607455253601,
            9.764452261151746e-05,
            0.00030166946817189455,
            0.0028709592297673225,
            0.00013033136201556772,
            9.27801665966399e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the statistics about how many cars were produced in the US.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select car_makers.Country, count(*)",
            "select sum(car_makers.Country)",
            "select sum(t2.c4)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers",
            "car_makers car_names",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9861783981323242,
            0.00037737019010819495,
            0.0004977186908945441,
            0.0020380117930471897,
            0.00047658904804848135,
            0.00014743275824002922,
            0.0007082184893079102,
            0.0001322853349847719
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "show me how many car models are produced in the United States.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(*), car_makers.Maker",
            "select count(distinct car_names.Model)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list",
            "car_makers car_names",
            "car_makers model_list car_makers car_names"
        ],
        "align_scores": [
            0.9920885562896729,
            0.012059555388987064,
            0.14278726279735565,
            0.00014937906234990805,
            0.00032869959250092506,
            0.0015217447653412819,
            0.14884737133979797,
            0.00020071747712790966
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of car models that are produced in the U.S..",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(distinct car_names.Model)",
            "select count(*), car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list car_makers car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9890138506889343,
            0.003166820155456662,
            0.15228486061096191,
            0.00013631940237246454,
            0.18944424390792847,
            0.00015655365132261068,
            0.0003256338241044432,
            0.0005492757190950215
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car models are produced in the United States?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(*), car_makers.Maker",
            "select count(model_list.Model)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list",
            "countries car_makers model_list car_names",
            "car_makers car_names",
            "car_makers model_list car_makers car_names"
        ],
        "align_scores": [
            0.992180585861206,
            8.559206617064774e-05,
            0.14203445613384247,
            5.915199653827585e-05,
            0.0002963939623441547,
            8.04397786851041e-05,
            0.9879504442214966,
            7.315745460800827e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many car models are manufactured in the United States?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(distinct car_names.Model)",
            "select count(distinct model_list.Maker)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list",
            "car_makers model_list car_makers car_names"
        ],
        "align_scores": [
            0.9918569326400757,
            8.758297190070152e-05,
            0.17845186591148376,
            5.904159479541704e-05,
            0.17368949949741364,
            6.106770888436586e-05,
            0.005153661593794823,
            6.0659906012006104e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of car models produced in the United States.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(*), car_makers.Maker",
            "select count(*), car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9930889010429382,
            0.005236111581325531,
            0.0857679471373558,
            9.951210086001083e-05,
            0.00026689207879826427,
            0.0006998255266807973,
            0.00025810531224124134,
            0.0004009484255220741
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Number of car manufacturers produced in the U.S.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Id",
            "select count(*), car_makers.Maker",
            "select count(distinct car_makers.Maker)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers",
            "car_makers model_list",
            "countries car_makers",
            "continents car_makers",
            "car_makers model_list car_names",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9809066653251648,
            7.938103954074904e-05,
            0.0002926794404629618,
            6.182503420859575e-05,
            0.000290930358460173,
            6.683222454739735e-05,
            0.5318708419799805,
            6.442279845941812e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the average miles per gallon of the cars with four cylinders.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9959253072738647,
            0.000433151435572654,
            0.0003871812950819731,
            0.00011717392771970481,
            0.00037702603731304407,
            0.00013223251153249294,
            0.9959253072738647,
            0.000433151435572654
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average miles per gallon for four-cylinder cars.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9960269927978516,
            0.0001168092421721667,
            0.0003731534816324711,
            0.000115349939733278,
            0.0004412163107190281,
            9.419780690222979e-05,
            0.9960269927978516,
            0.0001168092421721667
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average mpg (miles per gallon) for four-cylinder cars.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9960541725158691,
            0.00010081200889544562,
            0.0004246713942848146,
            0.00010377966827945784,
            0.9960541725158691,
            0.00010081200889544562,
            0.9960541725158691,
            0.00010081200889544562
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The average miles per gallon of all the cars with four cylinders.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9955984354019165,
            0.00028300780104473233,
            0.0003923687618225813,
            0.0001120926026487723,
            0.00047189785982482135,
            0.00011257699225097895,
            0.9955984354019165,
            0.00028300780104473233
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The average mpg of cars with four cylinders.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9965419173240662,
            8.913938654586673e-05,
            0.00036028423346579075,
            9.423516894457862e-05,
            0.9965419173240662,
            8.913938654586673e-05,
            0.9965419173240662,
            8.913938654586673e-05
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the mileage averages on the four-cylinder cars.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select avg(cars_data.MPG), cars_data.Cylinders",
            "select an avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9961535334587097,
            0.00015781742695253342,
            0.00013307110930327326,
            0.0003015018592122942,
            0.0003859981370624155,
            0.00013075844617560506,
            0.0004849653341807425,
            0.00011236163118155673
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the averages of all cars that have four cylinders in terms of MPG.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select cars_data.Id, avg(cars_data.MPG)",
            "select cars_data.MPG, avg(cars_data.MPG)",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9963392019271851,
            0.0002779620699584484,
            0.00023937215155456215,
            0.013246572576463223,
            0.00013288027548696846,
            0.00010317499254597351,
            0.9963392019271851,
            0.0002779620699584484
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all cars that have four cylinders and their MPG.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select cars_data.Id, cars_data.MPG",
            "select cars_data.MPG, cars_data.Id",
            "select cars_data.MPG, cars_data.Cylinders",
            "select cars_data.Id, cars_data.MPG"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.0027815676294267178,
            0.00011458911467343569,
            0.0009905635379254818,
            9.561757906340063e-05,
            0.00026852969313040376,
            7.549941801698878e-05,
            0.0027815676294267178,
            0.00011458911467343569
        ],
        "align_select": "select cars_data.Id, cars_data.MPG",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the average MPG of all cars that have four cylinders and return this value.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)",
            "select Avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.992486834526062,
            0.0001482086954638362,
            0.0003924849152099341,
            0.00014182536688167602,
            0.992486834526062,
            0.0001482086954638362,
            0.992486834526062,
            0.0001482086954638362
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "show the average miles per gallon of all cars with four cylinders.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.996275782585144,
            0.00016793416580185294,
            0.0004202339332550764,
            9.920560842147097e-05,
            0.00036514727980829775,
            0.0001069557765731588,
            0.996275782585144,
            0.00016793416580185294
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Calculate the average miles per gallon of all the cars with four cylinders.",
        "gold_select": "select avg(cars_data.MPG)",
        "select_candidates": [
            "select avg(cars_data.MPG)",
            "select an avg(cars_data.MPG)",
            "select avg(avg(cars_data.MPG)",
            "select  avg(cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.994540274143219,
            0.0003477883292362094,
            0.00041148607851937413,
            0.00012227015395183116,
            0.0005231796531006694,
            0.00012165075895609334,
            0.994540274143219,
            0.0003477883292362094
        ],
        "align_select": "select avg(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The lightest weight of eight-cylinder vehicle made in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select max(cars_data.Weight)",
            "select min(cars_data.Weight)",
            "select cars_data.Weight",
            "select minima(cars_data.Weight)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "countries cars_data",
            "cars_data car_names cars_data"
        ],
        "align_scores": [
            0.007883144542574883,
            6.247610144782811e-05,
            0.995044469833374,
            8.770918066147715e-05,
            0.6945539712905884,
            9.515886631561443e-05,
            0.25501391291618347,
            8.68065471877344e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the smallest weight of cars with eight engines manufactured in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9928049445152283,
            0.00010904986993409693,
            0.0001441462809452787,
            6.036181002855301e-05,
            0.00018348761659581214,
            5.773484008386731e-05,
            0.00014075552462600172,
            6.073087206459604e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The minimum weight of the car with eight cylinders from 1974 was what?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), t5.dcars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9934777021408081,
            7.888735854066908e-05,
            0.0001407018571626395,
            6.37568737147376e-05,
            0.00014135177480056882,
            6.643812957918271e-05,
            0.00012902765593025833,
            7.58140449761413e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Display the minimum weight of 1974 cars with eight cylinder.",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Cylinders",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), t5.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9968045949935913,
            9.525546192890033e-05,
            0.00014445107080973685,
            6.900736480019987e-05,
            0.00014626633492298424,
            6.109274545451626e-05,
            0.00025458738673478365,
            7.576150528620929e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much is the minimum weight of the car with eight cylinders produced in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9913056492805481,
            9.135755681199953e-05,
            0.00014305005606729537,
            6.636390753556043e-05,
            0.00016950380813796073,
            6.47760316496715e-05,
            0.00019886621157638729,
            6.622950604651123e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the European countries that have 3 or more car manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2",
            "select countries.CountryName, continents.ContId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9667044878005981,
            0.0001184487555292435,
            0.0003308165760245174,
            6.144553481135517e-05,
            0.00019999478536192328,
            7.085380639182404e-05,
            0.0013736396795138717,
            7.307295163627714e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me the list of countries in Europe where there is at least three car manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9287208318710327,
            0.0001879002375062555,
            0.0003233470779377967,
            6.571113772224635e-05,
            0.0016275444068014622,
            7.63598145567812e-05,
            0.0002525532036088407,
            7.43857235647738e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me the European countries that have at least three car manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2",
            "select countries.CountryName, continents.ContId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9491698145866394,
            0.00011926920706173405,
            0.0003841717552859336,
            5.9278259868733585e-05,
            0.00021372568153310567,
            6.764499994460493e-05,
            0.0019327005138620734,
            7.271336653502658e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me all European countries with 3 or more car manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9687409400939941,
            0.00012413998774718493,
            0.00040482249460183084,
            5.721001070924103e-05,
            0.0019061393104493618,
            6.933387339813635e-05,
            0.00020132084318902344,
            6.107515946496278e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me the list of all European countries where there is at least three manufactures.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9061464071273804,
            0.7917190194129944,
            0.00031583386589773,
            0.0003502286854200065,
            0.0008404339896515012,
            0.001037299050949514,
            0.00023746542865410447,
            0.000287048052996397
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of all European countries that have at least three manufactures.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2",
            "select countries.CountryName, continents.ContId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.9298355579376221,
            0.8084107041358948,
            0.00032911254675127566,
            0.0003236246411688626,
            0.0002279748150613159,
            0.00029128952883183956,
            0.0007268068147823215,
            0.0008700001635588706
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the list of all European countries with three or more manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.9684208631515503,
            9.141420014202595e-05,
            0.0003928743826691061,
            5.611814049188979e-05,
            0.0011005621636286378,
            6.002898226142861e-05,
            0.00025410333182662725,
            5.9870337281608954e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show all of Europe's nations with no less than three makers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.9704915881156921,
            0.00015953529509715736,
            0.001953544095158577,
            0.0001448136317776516,
            0.0003118175081908703,
            9.590850822860375e-05,
            0.0002466741425450891,
            0.00012996142322663218
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me all country names in Europe with three or more manufacturer.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents countries",
            "countries car_makers",
            "continents countries car_makers model_list"
        ],
        "align_scores": [
            0.9902817010879517,
            0.0002201883908128366,
            0.0002780500508379191,
            0.00010933516750810668,
            0.0007418568129651248,
            0.00014117600221652538,
            0.00028234400087967515,
            8.650376548757777e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "List the name of all European countries with three or more manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.9519170522689819,
            9.558238525642082e-05,
            0.00037231703754514456,
            5.5856897233752534e-05,
            0.0008880019886419177,
            6.0129073972348124e-05,
            0.00026984064606949687,
            6.116048461990431e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of all European countries that have three or more manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.9393143653869629,
            9.893503738567233e-05,
            0.0004337845020927489,
            5.7095450756605715e-05,
            0.0011140757706016302,
            6.138514436315745e-05,
            0.00028577883495017886,
            6.533896521432325e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Give me the maximum horse power and the make of cars with three cylinders.",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), cars_data.Cylinders",
            "select max(cars_data.Accelerate), car_names.Make",
            "select max(cars_data.Horsepower), car_names.Make)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9952437281608582,
            0.00010847986413864419,
            0.00039767439011484385,
            8.003502443898469e-05,
            0.014234491623938084,
            9.885393228614703e-05,
            0.0008178868447430432,
            8.952596544986591e-05
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the maximum horsepower and the make of the car models with three cylinders.",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), cars_data.Cylinders",
            "select max(cars_data.Accelerate), car_names.Make",
            "select max(cars_data.Horsepower), car_names.Make)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9916371703147888,
            0.00010499704512767494,
            0.00042411594768054783,
            8.014408376766369e-05,
            0.9852111339569092,
            0.00012495349801611155,
            0.001080656424164772,
            8.678419544594362e-05
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the maximum horsepower for cars with three cylinders and what makes they are.",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), cars_data.Cylinders",
            "select Max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Accelerate), car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9936491847038269,
            0.00012261948722880334,
            0.0003190931456629187,
            8.549671474611387e-05,
            0.9936491847038269,
            0.00012261948722880334,
            0.9749762415885925,
            0.00013819280138704926
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the largest amount of horsepower for the models with three cylinders and what make is it?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select cars_data.Horsepower, car_names.Make",
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "model_list cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.000209813064429909,
            9.104411583393812e-05,
            0.9930940866470337,
            0.00023589460761286318,
            0.000209813064429909,
            9.104411583393812e-05,
            0.00019804442126769572,
            9.589725959813222e-05
        ],
        "align_select": "select cars_data.Horsepower, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show the number of cars that have more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9902247786521912,
            0.00013234477955847979,
            0.0002472585765644908,
            0.0007878164760768414,
            0.0002844832488335669,
            0.005734635982662439,
            0.0002992989029735327,
            0.00013561670493800193
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many vehicles have more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9894238114356995,
            0.00020004285033792257,
            0.00025934758014045656,
            0.0026903885882347822,
            0.0002977307594846934,
            0.014357712119817734,
            0.00031384077738039196,
            0.0001384741481160745
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of cars with more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.MPG, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9926112294197083,
            0.00012207584222778678,
            0.0002447225560899824,
            0.0004312891105655581,
            0.00026501217507757246,
            0.005984923802316189,
            0.00010719469719333574,
            7.258839468704537e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of cars that have more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9891863465309143,
            0.00014554483641404659,
            0.0002464056888129562,
            0.0009812681237235665,
            0.0002959099947474897,
            0.005569676402956247,
            0.00031191090238280594,
            0.00013780014705844223
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many cars have more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9895377159118652,
            0.0002100188285112381,
            0.00024123670300468802,
            0.0032914301846176386,
            0.0002945305604953319,
            0.0188919510692358,
            0.0003012963570654392,
            0.00014008645666763186
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of cars that have more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9902247786521912,
            0.00013234477955847979,
            0.0002472585765644908,
            0.0007878164760768414,
            0.0002844832488335669,
            0.005734635982662439,
            0.0002992989029735327,
            0.00013561670493800193
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars have a cylinder count greater than four?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.MPG, cars_data.Cylinders",
            "select count(*), cars_data.Id, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.992327868938446,
            0.00022883940255269408,
            0.00027328566648066044,
            0.012035157531499863,
            0.00011407842976041138,
            7.817370351403952e-05,
            0.00012347612937446684,
            0.00015817479288671166
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars were produced for having more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) dependant on cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "cars_data car_names",
            "car_names cars_data",
            "cars_data car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9750222563743591,
            0.0009974444983527064,
            0.00025962619110941887,
            0.0002209865633631125,
            0.00027166775544174016,
            0.000386480096494779,
            0.003877913812175393,
            0.00015512680693063885
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count how many cars have more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9902642965316772,
            0.0001627076999284327,
            0.0002312249707756564,
            0.004189498722553253,
            0.00027950736694037914,
            0.045425593852996826,
            0.00019741134019568563,
            0.0005904106656089425
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the numbers of cars with more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.MPG, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9917689561843872,
            0.00018290731532033533,
            0.00022184474801179022,
            0.0004633544886019081,
            0.0002928722824435681,
            0.014834248460829258,
            0.00010076376929646358,
            7.01018943800591e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of cars with more than four cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.MPG, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9926112294197083,
            0.00012207584222778678,
            0.0002447225560899824,
            0.0004312891105655581,
            0.00026501217507757246,
            0.005984923802316189,
            0.00010719469719333574,
            7.258839468704537e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many cars were made by the producer called American Motor Corporation.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.FullName, car_makers.Maker",
            "select count(*), car_makers.Maker, car_makers.FullName",
            "select count(*), car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "continents car_makers car_names",
            "countries car_makers car_names",
            "car_makers car_makers car_names"
        ],
        "align_scores": [
            0.9928796887397766,
            0.0016286977333948016,
            0.00013856780424248427,
            9.255112672690302e-05,
            0.00013569043949246407,
            9.489888179814443e-05,
            0.00031001941533759236,
            0.0009381053387187421
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all car models from the car-maker American Motors Corporation.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_makers.FullName",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "model_list car_names",
            "car_makers model_list car_makers car_names",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.9933778643608093,
            9.852717630565166e-05,
            0.9917226433753967,
            0.0001079881694749929,
            0.00018391638877801597,
            6.762229168089107e-05,
            0.00018710769654717296,
            6.141495396150276e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of car models made by the company American Motors.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct model_list.Model)",
            "select count(distinct car_names.Model)",
            "select count(*), car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "continents car_makers model_list car_names",
            "car_makers model_list car_names",
            "continents countries car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "continents car_makers model_list"
        ],
        "align_scores": [
            0.9952671527862549,
            0.0005586345214396715,
            0.17772245407104492,
            9.707004210213199e-05,
            0.21845732629299164,
            0.00010775631380965933,
            0.00034545338712632656,
            0.000993772642686963
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of brands built by American Motors.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct car_names.Make)",
            "select count(car_names.Make)",
            "select count(distinct car_names.Make), continents.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "continents car_makers car_names",
            "car_makers car_names",
            "continents countries car_makers car_names",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.9938231706619263,
            8.562252332922071e-05,
            0.9814597368240356,
            6.287462747422978e-05,
            0.99281245470047,
            9.01219536899589e-05,
            0.00012472209346015006,
            5.6468634284101427e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the manufacturers that have created more than three car model.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.Maker",
            "select car_makers.Maker, car_makers.FullName",
            "select car_makers.Maker, car_makers.FullName, car_makers.Country",
            "select car_makers.FullName, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list",
            "countries car_makers model_list car_names",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.9832770824432373,
            8.940072439145297e-05,
            0.000412620633142069,
            6.409097841242328e-05,
            0.000214941639569588,
            6.319495150819421e-05,
            0.0005474028876051307,
            6.710631714668125e-05
        ],
        "align_select": "select car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show full name of designers that made more than three car models and return their IDs.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, car_makers.FullName, car_makers.Id",
            "select car_makers.FullName, car_names.Model, car_makers.Id",
            "select car_makers.FullName, model_list.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.8981972336769104,
            8.483562851324677e-05,
            0.0003481768071651459,
            7.15121059329249e-05,
            0.00024816172663122416,
            5.937891182838939e-05,
            0.003882925258949399,
            6.84675105731003e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which designers designed more than three car models? List full name and the ID.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, car_makers.FullName, car_makers.Id",
            "select t2.c4, car_makers.FullName, car_makers.Id",
            "select car_makers.FullName, car_makers.Maker, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9486194849014282,
            0.00011864193947985768,
            0.0005069061880931258,
            7.973183528520167e-05,
            0.0003232663148082793,
            6.687780114589259e-05,
            0.000500949623528868,
            9.37207878450863e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the full names and IDs of car designers that have designed more than three models.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, car_makers.FullName, car_makers.Id",
            "select car_makers.FullName, car_makers.Id, car_makers.Country",
            "select t2.c5, car_makers.FullName, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list",
            "car_makers car_names",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.9794960618019104,
            8.780055941315368e-05,
            0.0005243226187303662,
            6.759534153388813e-05,
            0.0002149321953766048,
            6.343169661704451e-05,
            0.00030975116533227265,
            5.8517613069852814e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the name and id of all manufacturers that have made more than three models?",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, car_makers.Id",
            "select car_makers.FullName, model_list.Maker",
            "select car_makers.Id, car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9076476693153381,
            0.00011258278391323984,
            0.9803464412689209,
            0.00010577537614153698,
            0.22786405682563782,
            8.183429599739611e-05,
            0.9813736081123352,
            0.00011374562018318102
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all makers who have more than three models and show their names and IDs.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, car_makers.Id",
            "select car_makers.Maker, model_list.ModelId",
            "select car_makers.FullName, model_list.Maker, model_list.ModelId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9563618898391724,
            8.3417326095514e-05,
            0.8304137587547302,
            7.719246059423313e-05,
            0.0006594339502044022,
            6.6645625338424e-05,
            0.00021574566198978573,
            5.7018896768568084e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all makers who have more than three models and return their ids and names.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.Id, car_makers.FullName",
            "select model_list.Maker, car_makers.FullName",
            "select model_list.Maker, car_makers.Id, car_makers.FullName",
            "select model_list.Maker, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list",
            "car_makers model_list car_names",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.9803182482719421,
            7.363338227150962e-05,
            0.0033413819037377834,
            6.319850945146754e-05,
            0.0006477540591731668,
            6.16826000623405e-05,
            0.0015030340291559696,
            7.069062121445313e-05
        ],
        "align_select": "select car_makers.Id, car_makers.FullName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all manufacturers with more than three models and return their names and ids.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, model_list.ModelId",
            "select car_makers.FullName, model_list.Maker, model_list.ModelId",
            "select car_makers.Maker, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list",
            "continents car_makers model_list car_names",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.9491361975669861,
            7.69556500017643e-05,
            0.0007520620711147785,
            7.002559868851677e-05,
            0.00016126263653859496,
            5.647789657814428e-05,
            0.9699018001556396,
            7.34245841158554e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all the makers that have more than three models and return their names and identifiers.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, car_makers.Id",
            "select car_makers.FullName, model_list.Maker, model_list.ModelId",
            "select car_makers.Maker, car_makers.FullName, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9437428116798401,
            7.532869494752958e-05,
            0.9126247763633728,
            7.298047421500087e-05,
            0.00020912718900945038,
            6.000677967676893e-05,
            0.0005229049711488187,
            7.259054109454155e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names and ids of all makers with more than three models.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, model_list.Maker",
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, model_list.Maker",
            "select car_makers.Maker, model_list.ModelId"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.1559716761112213,
            9.920324373524636e-05,
            0.9516595005989075,
            8.797521877568215e-05,
            0.0007772790268063545,
            5.845135819981806e-05,
            0.001525683095678687,
            7.219606777653098e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the distinct models that can be manufactured by General Motors company and weigh more than 3,500 kg.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct model_list.Model, car_makers.Maker",
            "select distinct model_list.Model, car_makers.FullName",
            "select model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.9810983538627625,
            0.21781891584396362,
            0.0001977625215658918,
            0.00021517270943149924,
            0.0003038782742805779,
            0.00021970899251755327,
            0.846011221408844,
            0.0334978885948658
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the cars made by the company General Motors and weighing over 3,500 lbs.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.MakeId",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_makers car_names cars_data",
            "countries car_makers car_names cars_data"
        ],
        "align_scores": [
            0.48944732546806335,
            0.007666890975087881,
            0.002878804923966527,
            0.009263784624636173,
            0.00023867751588113606,
            0.00010856833978323266,
            0.0002414046466583386,
            0.0001179237078758888
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which distinctive models are made by the manufacturer General Motors or weigh more than 3,500?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct model_list.Model, car_makers.Maker",
            "select distinct car_names.Model",
            "select distinct car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers model_list car_makers car_names",
            "countries car_makers model_list cars_data"
        ],
        "align_scores": [
            0.7620340585708618,
            0.030829893425107002,
            0.0003901068994309753,
            0.0002692957641556859,
            0.8262431025505066,
            0.21050713956356049,
            0.00018413572979625314,
            0.0001484308741055429
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the models made by either GM or weighing more than 3500.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_makers.Maker, model_list.Model",
            "select car_makers.Maker, car_makers.FullName",
            "select model_list.Model, car_makers.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "countries car_makers model_list cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers model_list car_names",
            "continents car_makers model_list cars_data",
            "model_list car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9810762405395508,
            0.005168415140360594,
            0.002672947710379958,
            0.0001757810969138518,
            0.0002572067314758897,
            0.00012061443703714758,
            0.00023955504002515227,
            0.0001168150338344276
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which years cars weights no less than 3 thousand and no more than 4 thousand?.",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select cars_data.Year, cars_data.Accelerate",
            "select cars_data.Year, t5.c8"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9907565712928772,
            0.000494329840876162,
            0.07951164990663528,
            0.00016095754108391702,
            0.00014870284940116107,
            7.160600216593593e-05,
            0.000288080278551206,
            0.00010524775279918686
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Cars that weigh no less than 3,000 but no more than 4,000 were manufactured in what years?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select specific cars_data.Year",
            "select cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "cars_data car_names cars_data"
        ],
        "align_scores": [
            0.922179102897644,
            0.0020906962454319,
            0.1271105855703354,
            0.00045589375076815486,
            0.0032216054387390614,
            0.0001935583568410948,
            0.922179102897644,
            0.0020906962454319
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What year was it when cars were produced weighing no less than 3,000 and no more than 4,000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select cars_data.Year",
            "select cars_data.Year (or t5.c8)",
            "select cars_data.Year (cars_data.Accelerate)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9865308403968811,
            0.7317009568214417,
            0.9865308403968811,
            0.7317009568214417,
            0.0008713989518582821,
            0.00043614584137685597,
            0.002240532310679555,
            0.0002893508644774556
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How about in which years the cars were produced weighting no less than 3,000 and no less than 4,000 kgs?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select avg(cars_data.Year)",
            "select cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "car_makers cars_data",
            "cars_data car_names"
        ],
        "align_scores": [
            0.919096827507019,
            0.0013525767717510462,
            0.055143311619758606,
            0.0005115637904964387,
            0.0016580036608502269,
            8.929652540246025e-05,
            0.919096827507019,
            0.0013525767717510462
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What years had cars manufactured weighed no less than 3000 pounds and no more than 4,000 pounds?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select specific cars_data.Year",
            "select only cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9241914749145508,
            0.972650408744812,
            0.04824112355709076,
            0.0007481423672288656,
            0.002643721643835306,
            0.0010960689978674054,
            0.023268871009349823,
            0.005150062497705221
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the years when there were cars produced that weighed less than 4,000 and also cars that weighed more than 3,000.",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select cars_data.Year, cars_data.Accelerate",
            "select cars_data.Year, t5.c8",
            "select cars_data.Year, cars_data.MPG"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9871521592140198,
            0.9607840180397034,
            0.0001295166730415076,
            0.00011378791532479227,
            0.00025208070292137563,
            0.00018496011034585536,
            0.00011232382530579343,
            9.184373629977927e-05
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the years when there was production of cars that weighed less than 4,000 and also cars that weight more than 3,000.",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select cars_data.Year, cars_data.Accelerate",
            "select cars_data.Year, t5.c8",
            "select cars_data.Year, cars_data.MPG"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "cars_data car_names",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9842841625213623,
            0.9842841625213623,
            0.00015791466285008937,
            0.00015791466285008937,
            0.00024869179469533265,
            0.00024869179469533265,
            0.00012149821122875437,
            0.00012149821122875437
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "In which years were cars produced that weigh less than 4000 and those that weight more than 3,000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select cars_data.Year, t5.c8",
            "select cars_data.Year, cars_data.Accelerate"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9551089406013489,
            0.05322365090250969,
            0.0007064052624627948,
            0.0003248571010772139,
            0.00022850320965517312,
            0.00014935227227397263,
            0.00013589994341600686,
            0.000112369772978127
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "show how many countries have more than two car manufacturers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.8773249387741089,
            0.008525608107447624,
            0.002739843213930726,
            0.03801552578806877,
            0.0014234120026230812,
            0.026448484510183334,
            0.003312394255772233,
            0.020566625520586967
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show how many countries have more than two carmakers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.8037724494934082,
            0.04890963435173035,
            0.0023124050348997116,
            0.607375979423523,
            0.001720884582027793,
            0.20728181302547455,
            0.003219024743884802,
            0.23683443665504456
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show how many countries has more than two car makers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryName",
            "select count(*), countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.7987610697746277,
            0.014652924612164497,
            0.0011727861128747463,
            0.031498003751039505,
            0.002056915545836091,
            0.05722278729081154,
            0.002352695679292083,
            0.021883314475417137
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the number of countries whose is more than two car manufacturers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.6483887434005737,
            0.4929262399673462,
            0.0009332302142865956,
            0.639003336429596,
            0.00065321329748258,
            0.48095259070396423,
            0.0006886772462166846,
            0.022731997072696686
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the number of nations with more than two car manufacturers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), car_makers.Country",
            "select count(*) dependant on car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.7055959105491638,
            0.031115630641579628,
            0.001200686558149755,
            0.5742416381835938,
            0.00093257607659325,
            0.4021937847137451,
            0.06109311804175377,
            0.00042435372597537935
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the number of countries where there are more than two car manufacturers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), car_makers.Country",
            "select count(distinct countries.CountryName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.8030166029930115,
            0.021481819450855255,
            0.002177322516217828,
            0.7676999568939209,
            0.0015403814613819122,
            0.865864634513855,
            0.33737173676490784,
            0.0018764971755445004
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the number of countries that have more than two car manufacturers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.68642657995224,
            0.03504723682999611,
            0.0022581815719604492,
            0.7775720357894897,
            0.0014749004039913416,
            0.7371156215667725,
            0.0030325716361403465,
            0.4550512433052063
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the number of countries where there are more than two car makers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryName",
            "select count(distinct car_makers.Country)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "car_makers",
            "continents countries car_makers"
        ],
        "align_scores": [
            0.7894636392593384,
            0.00745656993240118,
            0.0011143988231197,
            0.6075853705406189,
            0.0014504824066534638,
            0.33569929003715515,
            0.6204379200935364,
            0.0005409896257333457
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What are the numbers of countries with more than two car manufacturers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.7842583656311035,
            0.010623001493513584,
            0.0014679142041131854,
            0.314869225025177,
            0.001226196764037013,
            0.6207025647163391,
            0.00018526214989833534,
            0.0002675616415217519
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many countries have more than two car manufacturers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countries.CountryName",
            "select count(*), car_makers.Country",
            "select count(distinct countries.CountryName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.8767827153205872,
            0.013441527262330055,
            0.0024274762254208326,
            0.0555279403924942,
            0.001235053758136928,
            0.027685370296239853,
            0.15029411017894745,
            0.002134379232302308
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Identify the number of car models that have over six cylinder engines.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct car_names.Model)",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.97682124376297,
            0.001788683352060616,
            0.7242116928100586,
            0.0001854443398769945,
            0.0002849297598004341,
            0.004125688690692186,
            0.0003260908415541053,
            0.07042303681373596
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me how many cars were over six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9950289130210876,
            0.0003030603693332523,
            0.00027312859310768545,
            0.026242809370160103,
            0.00027111402596347034,
            0.0027285446412861347,
            0.0003101719485130161,
            0.0001311305386479944
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many cars have more than six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9926948547363281,
            0.00020198475976940244,
            0.000252088881097734,
            0.0033920039422810078,
            0.0003004221071023494,
            0.017095467075705528,
            0.0003099324821960181,
            0.00013573726755566895
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "show the number of cars that have over six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.Id",
            "select count(*) dependant on cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9933074116706848,
            0.00016700751439202577,
            0.00027442508144304156,
            0.004711880348622799,
            0.00026998011162504554,
            0.0009693159954622388,
            0.0011284053325653076,
            0.0001362237671855837
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of cars with more than six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.MPG, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9936748147010803,
            0.0001153954872279428,
            0.000250617420533672,
            0.0003461540618445724,
            0.0002672350383363664,
            0.005283483769744635,
            0.00010686268797144294,
            7.371474930550903e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of vehicles with over six cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.MPG, cars_data.Cylinders",
            "select count(*), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9947254061698914,
            0.00013139340444467962,
            0.0003058305592276156,
            0.0004998873337171972,
            0.00011310099944239482,
            7.919639756437391e-05,
            0.0002583047316875309,
            0.007548194844275713
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of vehicles with more than six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9940435290336609,
            0.00011172050290042534,
            0.0002717055904213339,
            0.00033046919270418584,
            0.00030078148120082915,
            0.00011905831343028694,
            0.00021697847114410251,
            0.0001790622918633744
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many cars have over six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*) (cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9944636225700378,
            0.0003511721733957529,
            0.00026708858786150813,
            0.0032640935387462378,
            0.00029800046468153596,
            0.0123289218172431,
            0.00031692147604189813,
            0.00014557399845216423
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The number of cars that have more than six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)",
            "select count(*), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9925180673599243,
            0.00014150213974062353,
            0.00027285353280603886,
            0.0009309182059951127,
            0.0002787401608657092,
            0.0001340075396001339,
            0.0002619269653223455,
            0.011374544352293015
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the four-cylinder cars, what model is the largest horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9914293885231018,
            0.00026544660795480013,
            0.00040171228465624154,
            7.91212878539227e-05,
            0.0004491764702834189,
            8.099459228105843e-05,
            0.0004203958378639072,
            9.526981739327312e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For cars with four cylinders, show me the car models that have the most horsepower.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.8886111974716187,
            0.00024120588204823434,
            0.0006866807234473526,
            8.831462037051097e-05,
            0.0006039292202331126,
            8.107371832011268e-05,
            0.00039656198350712657,
            9.09710579435341e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which car model with four cylinder engines has the largest power.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model",
            "select car_names.Model, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents model_list car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9901993870735168,
            0.00016416824655607343,
            0.0005738416803069413,
            8.513093780493364e-05,
            0.0003720424138009548,
            8.77850761753507e-05,
            0.0006380486884154379,
            8.284877549158409e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For all four-cylinder cars, what model has the most horsepower.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9582618474960327,
            0.00012694144970737398,
            0.0007528192945756018,
            6.982121703913435e-05,
            0.00046432766248472035,
            6.881009903736413e-05,
            0.0003342412819620222,
            7.933403685456142e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show the models of four cylinder cars that have the highest horsepower.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list cars_data",
            "continents model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9875673055648804,
            0.0005933223874308169,
            0.9876888394355774,
            0.0006808553589507937,
            0.0006738205556757748,
            9.905596380122006e-05,
            0.00037435637204907835,
            9.372508066007867e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For the four-cylinder cars show which models have the greatest horsepower.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries cars_data",
            "model_list cars_data",
            "continents cars_data"
        ],
        "align_scores": [
            0.6345304250717163,
            0.9926608800888062,
            0.0006227828562259674,
            0.0009700717637315392,
            0.0006152396090328693,
            0.0022200404200702906,
            0.0004987454740330577,
            0.000734526664018631
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the models of four-cylinder cars with the most power.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, model_list.Model",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "countries car_names cars_data",
            "car_names cars_data",
            "car_makers car_names cars_data",
            "continents model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9857725501060486,
            0.0004065413086209446,
            0.9869791269302368,
            0.000398931180825457,
            0.0003718295192811638,
            8.822237577987835e-05,
            0.000711635104380548,
            9.773358033271506e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For all cars of the four-cylinder engine, show me the car model that has the greatest power.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.881556510925293,
            0.0002361968217883259,
            0.0004935400211252272,
            9.666444384492934e-05,
            0.0006732924957759678,
            9.997578308684751e-05,
            0.0013070276472717524,
            0.00013725146709475666
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Among the cars with more than the lowest horsepower, which ones do not have more than three cylinders? List the car make and make name.",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.Make, car_names.Make",
            "select car_names.Make, car_names.Model",
            "select car_names.Make, t4.c4",
            "select car_names.Make, t4.c3"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.025392714887857437,
            0.0009862816659733653,
            0.0012957592261955142,
            0.0013654291396960616,
            0.0007877174066379666,
            0.00036457687383517623,
            0.0009766521397978067,
            0.0003872593806590885
        ],
        "align_select": "select car_names.Make, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than three cylinders? Explain the makeid and make name.",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.MakeId, car_names.Make",
            "select car_names.Model, car_names.Make",
            "select car_makers.Id, car_names.Make",
            "select car_names.Make, car_names.MakeId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.8218613266944885,
            0.15522870421409607,
            0.0009008817723952234,
            0.0007499401108361781,
            0.47988054156303406,
            0.34386923909187317,
            0.578197717666626,
            0.0029157621320337057
        ],
        "align_select": "select car_names.MakeId, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Among the cars that do not have the minimum power, what are the make IDs and names of all those with less than four cylinders?",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.MakeId, car_names.Make",
            "select car_names.Make, car_names.Make",
            "select car_names.Make, car_names.Model",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9090090990066528,
            0.09356076270341873,
            0.001698993262834847,
            0.00046339223627001047,
            0.9079256057739258,
            0.16379696130752563,
            0.30538132786750793,
            0.018288543447852135
        ],
        "align_select": "select car_names.MakeId, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the mileage per gallon of the car produced in 1980 or earlier that have eight cylinders.",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select cars_data.MPG",
            "select cars_data.MPG, cars_data.Cylinders",
            "select avg(cars_data.MPG)",
            "select mpg(cars_data.MPG)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "cars_data car_names cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "cars_data car_names",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.8627159595489502,
            0.00014860760711599141,
            0.0002116458781529218,
            5.869713277206756e-05,
            0.4488510489463806,
            7.822023326298222e-05,
            0.0006818874971941113,
            8.981259452411905e-05
        ],
        "align_select": "select cars_data.MPG",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the maximum MPG of the car that has at least eight cylinders and was produced before 1980.",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Cylinders",
            "select max(cars_data.MPG), cars_data.Year",
            "select max(cars_data.MPG) delegated to cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "cars_data car_names cars_data"
        ],
        "align_scores": [
            0.9680088758468628,
            0.0031134644523262978,
            0.00017130198830273002,
            0.00021257314074318856,
            0.00015956084826029837,
            0.00013078315532766283,
            0.0015441080322489142,
            0.00038571798359043896
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the mileage per gallon of eight-cylinder cars or produced before 1980.",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select cars_data.MPG",
            "select cars_data.MPG, cars_data.Cylinders",
            "select avg(cars_data.MPG)",
            "select cars_data.MPG, t5.c8"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9641175270080566,
            0.00018820611876435578,
            0.0001926328259287402,
            5.5764077842468396e-05,
            0.8484156727790833,
            7.231265772134066e-05,
            0.00033736505429260433,
            6.52672242722474e-05
        ],
        "align_select": "select cars_data.MPG",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Determine the mpg of the cars that had eight cylinders or were produced before 1980.",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select cars_data.MPG",
            "select cars_data.MPG, cars_data.Cylinders, cars_data.Year",
            "select cars_data.MPG, cars_data.Cylinders",
            "select avg(cars_data.MPG)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.736847996711731,
            0.707892656326294,
            0.00010365474736317992,
            0.00011503929272294044,
            0.00017326700617559254,
            9.78408133960329e-05,
            0.9068506360054016,
            0.11837032437324524
        ],
        "align_select": "select cars_data.MPG",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the mileage of the cars that had eight cylinders or were produced before 1980.",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select cars_data.MPG",
            "select cars_data.MPG, cars_data.Cylinders, cars_data.Year",
            "select cars_data.MPG, cars_data.Cylinders",
            "select cars_data.MPG, cars_data.Cylinders ou cars_data.Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.8390540480613708,
            0.9719569683074951,
            0.00010302821465302259,
            0.0001220785197801888,
            0.00012607734242919832,
            0.00010052690777229145,
            0.000144445410114713,
            9.973363194148988e-05
        ],
        "align_select": "select cars_data.MPG",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "show me the models that are lighter than 3.5K but not made by the 'Ford Corporation'.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Make",
            "select car_names.Model, model_list.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names",
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "continents car_makers model_list car_names",
            "countries model_list car_names",
            "continents car_makers model_list cars_data",
            "countries model_list cars_data"
        ],
        "align_scores": [
            0.9433879256248474,
            0.845954954624176,
            0.965251088142395,
            0.4073045551776886,
            0.9714300036430359,
            0.8773753643035889,
            0.000336645869538188,
            0.0003990905825048685
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which cars are lighter than 3500 pounds but not made by Ford?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.MakeId",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_makers car_names cars_data",
            "model_list car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9242458939552307,
            0.9242458939552307,
            0.7066323757171631,
            0.7066323757171631,
            0.00035352568374946713,
            0.00035352568374946713,
            0.0005507376044988632,
            0.0005507376044988632
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show model cars that weigh less than 3500 and are NOT manufactured by Ford.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model",
            "select cars_data.Weight, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "model_list car_names",
            "car_makers model_list car_names",
            "countries model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9884556531906128,
            0.9392108917236328,
            0.0006933431141078472,
            0.0014518267707899213,
            0.00019953117589466274,
            0.00021295736951287836,
            0.000379013130441308,
            0.0009690384613350034
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which are the auto-makers which produce two or more models and more three auto makers? List the ids along with the makes.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_names.MakeId, car_names.Make",
            "select car_names.Model, car_names.Make",
            "select car_names.Make, car_names.Model",
            "select car_names.Make, car_names.MakeId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "model_list car_names",
            "car_names",
            "car_makers model_list car_names",
            "car_makers car_names",
            "continents model_list car_names",
            "countries car_names"
        ],
        "align_scores": [
            0.5504317879676819,
            0.32001447677612305,
            0.0013227805029600859,
            0.0003302456170786172,
            0.002825910924002528,
            0.0004873807483818382,
            0.33205974102020264,
            0.19895371794700623
        ],
        "align_select": "select car_names.MakeId, car_names.Make",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the ids and makers of all car manufacturers that produce at least two models and make more than three cars.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.Maker",
            "select car_names.Model, car_makers.Maker",
            "select model_list.Maker, car_makers.Maker",
            "select car_names.Make, car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "countries model_list car_names",
            "model_list car_names"
        ],
        "align_scores": [
            0.9131066799163818,
            0.05713476240634918,
            0.00017754678265191615,
            0.00015155092114582658,
            0.00021281547378748655,
            0.00012535783753264695,
            0.0003869965730700642,
            0.00016153010074049234
        ],
        "align_select": "select car_makers.Id, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the id's and manufactures of all car makers that have two or more models and makes three or more cars?",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.Maker",
            "select car_names.Model, car_makers.Maker",
            "select model_list.ModelId, car_makers.Maker",
            "select car_names.Model, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "model_list car_names",
            "countries car_makers model_list car_names",
            "countries model_list car_names",
            "continents car_makers model_list car_names",
            "car_makers car_names",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.9575721621513367,
            0.0721622034907341,
            0.0005626691272482276,
            0.00021715399634558707,
            0.0006045842892490327,
            0.0003975921426899731,
            0.0003175699384883046,
            0.000175730514456518
        ],
        "align_select": "select car_makers.Id, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the ids and names of the countries that make more than three cars or produce Fiat vehicles.",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryId, countries.CountryName",
            "select car_makers.Id, countries.CountryName",
            "select countries.CountryName, countries.CountryId",
            "select car_makers.Maker, countries.CountryName"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.971424400806427,
            0.8439183831214905,
            0.23318612575531006,
            0.07056555151939392,
            0.9774280190467834,
            0.8725003004074097,
            0.0003588640538509935,
            0.0005129312048666179
        ],
        "align_select": "select countries.CountryId, countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the ids and names of all countries that either have more than three car makers or produce Fiat models?",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryId, countries.CountryName",
            "select car_makers.Id, countries.CountryName",
            "select countries.CountryId, countries.CountryName, car_makers.Country",
            "select t1, car_makers.Id, countries.CountryName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.9849809408187866,
            0.892470121383667,
            0.10035167634487152,
            0.01207400020211935,
            0.0004270425997674465,
            0.00101734499912709,
            0.0003080013848375529,
            0.0004457968461792916
        ],
        "align_select": "select countries.CountryId, countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the country which is the home of airline \"JetBlue Airlines\".",
        "gold_select": "select airlines.Country",
        "select_candidates": [
            "select airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select airlines.Country (https://airlines.Country)",
            "select t0, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9933295845985413,
            0.00011729992547770962,
            0.0002622093306854367,
            7.508499402320012e-05,
            0.5938698649406433,
            8.401350351050496e-05,
            0.0010532406158745289,
            8.412421448156238e-05
        ],
        "align_select": "select airlines.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "which country is jetblue associated with?",
        "gold_select": "select airlines.Country",
        "select_candidates": [
            "select airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select airlines.Country, airlines.Abbreviation, airlines.Country",
            "select airlines.Country, airlines.Abbreviation, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9908177852630615,
            0.00014668492076452821,
            0.0003054357075598091,
            7.91941347415559e-05,
            0.00017138253315351903,
            7.441324851242825e-05,
            0.00015094720583874732,
            7.04885387676768e-05
        ],
        "align_select": "select airlines.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "show me the countries that JetBlue is affiliated with.",
        "gold_select": "select airlines.Country",
        "select_candidates": [
            "select airlines.Country",
            "select distinct airlines.Country",
            "select affiliated airlines.Country",
            "select airlines.Country, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports"
        ],
        "align_scores": [
            0.989450991153717,
            0.00225708051584661,
            0.1378844827413559,
            0.0007960704388096929,
            0.6454881429672241,
            0.0003171584685333073,
            0.0003951095277443528,
            0.00012720475206151605
        ],
        "align_select": "select airlines.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me which countries JetBlue Airlines is affiliated with.",
        "gold_select": "select airlines.Country",
        "select_candidates": [
            "select airlines.Country",
            "select distinct airlines.Country",
            "select airlines.Country, airlines.Abbreviation",
            "select affiliated airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9876169562339783,
            0.005327383987605572,
            0.14642302691936493,
            0.0007021764758974314,
            0.00038774291169829667,
            0.0001240612764377147,
            0.04141296446323395,
            0.0005436287028715014
        ],
        "align_select": "select airlines.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the abbreviated name of Airline Jet Blue?",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9908403754234314,
            0.00013525199028663337,
            0.00022086016542743891,
            7.415766594931483e-05,
            0.00017277077131439,
            7.223353895824403e-05,
            0.0002855419006664306,
            7.32053376850672e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Identify JetBLueAirways using abbreviations.",
        "gold_select": "select airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports"
        ],
        "align_scores": [
            0.9603585600852966,
            0.00013504736125469208,
            0.0002937960671260953,
            8.64162138896063e-05,
            0.00016126201080624014,
            8.707184315426275e-05,
            0.0005336679168976843,
            6.850303907413036e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all airline name and their abbreviations in United States of America.",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation2",
            "select airlines.Airline, airlines.uid2",
            "select airlines.Airline, airlines.Abbreviation,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9939515590667725,
            0.0003288697625976056,
            0.039917077869176865,
            0.00027589788078330457,
            0.0009638916235417128,
            7.902184006525204e-05,
            0.002155788242816925,
            8.277604501927271e-05
        ],
        "align_select": "select airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list the all airline names and its abbreviation from US.",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation2",
            "select airlines.Airline, airlines.Abbreviation,",
            "select airlines.Airline, airlines.uid2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9878149032592773,
            0.0002106184110743925,
            0.027664784342050552,
            0.000222531525650993,
            0.0009724361007101834,
            9.9013457656838e-05,
            0.0009236046462319791,
            8.9998371549882e-05
        ],
        "align_select": "select airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names and the abbreviations for the United States' Airlines in the United States.",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select t0, airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9918741583824158,
            0.0001540055382065475,
            0.00040974083822220564,
            0.00010565178672550246,
            0.00024264382955152541,
            5.8062472817255184e-05,
            0.0004309206851758063,
            7.243494474096224e-05
        ],
        "align_select": "select airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all airline names in United States and their abbreviations.",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation2",
            "select airlines.Airline, airlines.Abbreviation,",
            "select airlines.Airline, airlines.uid2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9948794841766357,
            0.0002582658489700407,
            0.045996006578207016,
            0.00024282667436636984,
            0.001904656644910574,
            7.98414766904898e-05,
            0.003398437052965164,
            8.600475121056661e-05
        ],
        "align_select": "select airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all airline names and their abbreviations in the United States of America.",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation2",
            "select airlines.Airline, airlines.uid2",
            "select airlines.Airline, airlines.Abbreviation,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9924682974815369,
            0.0002531003556214273,
            0.022624000906944275,
            0.00022297455871012062,
            0.0012455432442948222,
            7.846661901567131e-05,
            0.003161962144076824,
            7.604640268255025e-05
        ],
        "align_select": "select airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the airline name abbreviation for airlines from United States.",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline",
            "select airlines.uid, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9945958256721497,
            0.0001257152616744861,
            0.00026349822292104363,
            7.242307037813589e-05,
            0.947044312953949,
            0.00010921013017650694,
            0.00015454702952411026,
            6.411683716578409e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For the United States airline names and abbreviations.",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select distinct airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9943645000457764,
            0.00011284783249720931,
            0.0002517799730412662,
            6.925564230186865e-05,
            0.00023712172696832567,
            5.930443512625061e-05,
            0.0008604188333265483,
            7.861619087634608e-05
        ],
        "align_select": "select airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show an airline abbreviations for airlines in the US.",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Country, airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9831603169441223,
            6.450898217735812e-05,
            0.000244096401729621,
            5.928572500124574e-05,
            0.00015724319382570684,
            5.961897477391176e-05,
            0.0002028234739555046,
            5.7212797401007265e-05
        ],
        "align_select": "select airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the airline names and abbreviations for airlines in the United States.",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Abbreviation,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9934834837913513,
            0.0002408786240266636,
            0.00022338783310260624,
            6.702465907437727e-05,
            0.00025343120796605945,
            5.860210148966871e-05,
            0.0031931339763104916,
            7.07982835592702e-05
        ],
        "align_select": "select airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different airline companies and abbreviations in the United States?",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select distinct airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select different airlines.Airline, airlines.Abbreviation",
            "select count(distinct airlines.Airline), airlines.Abbreviation"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9855416417121887,
            0.0001895172754302621,
            0.9608418941497803,
            0.00027657844475470483,
            0.001082800910808146,
            9.804740693653002e-05,
            0.0004534234176389873,
            8.767271356191486e-05
        ],
        "align_select": "select distinct airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the list of the airlines and their abbreviations used in the United States.",
        "gold_select": "select airlines.Airline, airlines.Abbreviation",
        "select_candidates": [
            "select airlines.Airline, airlines.Abbreviation",
            "select distinct airlines.Airline, airlines.Abbreviation",
            "select airlines.uid, airlines.Abbreviation",
            "select airlines.Airline.c1, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9936943650245667,
            0.00027540221344679594,
            0.003482571803033352,
            7.423633360303938e-05,
            0.000602355576120317,
            0.00015026304754428566,
            0.00019468707614578307,
            9.29797170101665e-05
        ],
        "align_select": "select airlines.Airline, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of American airlines.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airlines.Abbreviation",
            "select count(*) dependant on airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9959839582443237,
            0.00023347641399595886,
            0.00020662310998886824,
            0.051850710064172745,
            0.00011735384032363072,
            0.0001693702070042491,
            0.0005241125472821295,
            0.00017698325973469764
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of airline companies from United States of America.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Country",
            "select count(*), airlines.Abbreviation",
            "select count(*), airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9958934783935547,
            0.00013643878628499806,
            0.0002995837712660432,
            0.0010990797309204936,
            0.00022730806085746735,
            0.0013864889042451978,
            0.0002807691053021699,
            0.03784991800785065
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of airlines originating in the United States of America.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Country",
            "select count(*), airlines.Abbreviation",
            "select count(*), airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9943835735321045,
            0.00011114342487417161,
            0.00029363558860495687,
            0.0008850582526065409,
            0.00020717628649435937,
            0.0006690075970254838,
            0.0002512507780920714,
            0.0017620769795030355
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return how many airlines there are in the US.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Country",
            "select count(*), airlines.Country, airports.CountryAbbrev",
            "select count(*), airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports"
        ],
        "align_scores": [
            0.9947556257247925,
            0.0008824958349578083,
            0.00025141341029666364,
            0.00011357090261299163,
            0.00011098815593868494,
            7.212904893094674e-05,
            0.00021239141642581671,
            0.0005692859995178878
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many airlines there is in the US.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Country",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines",
            "airlines airports"
        ],
        "align_scores": [
            0.9933629035949707,
            6.333203054964542e-05,
            0.0002431755856378004,
            5.394848631112836e-05,
            0.00025167869171127677,
            5.3597330406773835e-05,
            0.0002431755856378004,
            5.394848631112836e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the number of airlines in the United States.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Country",
            "select count(*) dependant on airlines.Airline",
            "select count(*) dependant on airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines",
        "table_candidates": [
            "airlines"
        ],
        "align_scores": [
            0.9951451420783997,
            0.0005176039412617683,
            0.00029927375726401806,
            0.00012279923248570412,
            0.0005124207236804068,
            0.000131853754282929,
            0.0004014724399894476,
            0.00013814140402246267
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return how many times were there flights into Atlanta Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportName",
            "select count(*), airports.AirportName, airports.City",
            "select count(*), airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9944185018539429,
            0.0002091227943310514,
            0.00032576799276284873,
            0.0013299823040142655,
            0.00013658797251991928,
            7.987353455973789e-05,
            0.00046888712677173316,
            0.001971330028027296
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights went in to Atlanta?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportName",
            "select count(*), airports.City",
            "select count(*) descended on airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.994873583316803,
            0.00017037737416103482,
            0.00023325970687437803,
            0.00027442825376056135,
            0.00023589278862345964,
            0.0004955458571203053,
            0.000415664108004421,
            0.00011664962221402675
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of flights that have entered Atlanta.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportName",
            "select count(*), airports.City",
            "select count(*), airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9938923120498657,
            0.0008042445406317711,
            0.00023130103363655508,
            0.0002001355605898425,
            0.0002583158202469349,
            0.0006904618348926306,
            0.00023130103363655508,
            0.0002001355605898425
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me how many flights Jetblue has.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Abbreviation",
            "select count(*), airlines.Airline",
            "select count(*) dependant on airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9954357743263245,
            0.00023434108879882842,
            0.00025405874475836754,
            0.0005913542700000107,
            0.00023574686201754957,
            0.0030249273404479027,
            0.0004928983398713171,
            0.0001529861183371395
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many flights does airline JetBlue has?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Abbreviation",
            "select count(*), airlines.Airline, flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9955044388771057,
            0.00021160674805287272,
            0.00025073837605305016,
            0.001413698773831129,
            0.0002761784417089075,
            0.0002603743050713092,
            0.00014622924209106714,
            8.728382817935199e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the count of the jet blue airways flights?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Abbreviation",
            "select count(*), airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9952867031097412,
            0.00020074867643415928,
            0.00021524062321987003,
            0.3731263279914856,
            0.0002363549720030278,
            0.0018074371619150043,
            0.00012675444304477423,
            0.00012190717097837478
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Provide the number of Jet blue flights.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(distinct flights.FlightNo)",
            "select count(*), flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights",
            "airports flights"
        ],
        "align_scores": [
            0.9956532716751099,
            0.00017750497499946505,
            0.0002329756534891203,
            0.011499679647386074,
            0.0007461975328624249,
            8.829912985675037e-05,
            0.000260480068391189,
            0.1637769639492035
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Count the number of planes of Air United flying in ASY airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), airlines.Airline",
            "select count(*), airports.AirportCode, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9730494618415833,
            0.0001413395075360313,
            0.00023942693951539695,
            0.0013527069240808487,
            0.00022785204055253416,
            0.2058267742395401,
            0.00014519192336592823,
            0.00022094124869909137
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of United flights arriving in ASY airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), flights.Airline",
            "select count(*), flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights",
            "flights",
            "airlines flights",
            "airports flights"
        ],
        "align_scores": [
            0.9841975569725037,
            0.00016893571591936052,
            0.0002596793929114938,
            0.0665765106678009,
            0.00029386021196842194,
            0.17672190070152283,
            0.00024740901426412165,
            0.0003095669380854815
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the total count of United flights departing from airport AHD.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), flights.SourceAirport",
            "select flights.Airline, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "flights",
            "airlines airports flights",
            "airports flights",
            "airlines flights"
        ],
        "align_scores": [
            0.9951763153076172,
            0.00019602145766839385,
            0.0001189505128422752,
            0.0001769476366462186,
            0.00024207998649217188,
            0.0019753812812268734,
            0.0010610182071104646,
            0.43893319368362427
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of UA-flights to Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City, flights.FlightNo",
            "select count(*), flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9958641529083252,
            0.0001673462538747117,
            0.0003140745684504509,
            0.001314454129897058,
            0.00014814143651165068,
            9.514933481113985e-05,
            0.00036351176095195115,
            0.0058242762461304665
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "show the flights that United Airline goes to Aberdeen city.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select flights.FlightNo",
            "select flights.Airline",
            "select flights.Airline, flights.FlightNo",
            "select flights.FlightNo, airlines.Airline"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.8943669199943542,
            0.0012119561433792114,
            0.6630348563194275,
            0.0005943083087913692,
            0.00026179265114478767,
            0.00011984197772108018,
            0.0002597662969492376,
            0.00010761357407318428
        ],
        "align_select": "select flights.FlightNo",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "show the number of United airplanes that get to Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(distinct flights.Airline)",
            "select count(*), airports.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9896596074104309,
            0.00024907811894081533,
            0.0002575573744252324,
            0.010591425932943821,
            0.0005253884592093527,
            0.0001347172074019909,
            0.0003107606607954949,
            0.0005281163030304015
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many United flights arrive in Aberdeen?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airports.City",
            "select count(*), flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9954743981361389,
            6.925934576429427e-05,
            0.0002857594517990947,
            6.891057273605838e-05,
            0.00027716337353922427,
            6.67657150188461e-05,
            0.00033742791856639087,
            6.703545659547672e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all aircraft (United) that arrive in Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select flights.Airline",
            "select flights.FlightNo",
            "select flights.Airline, flights.FlightNo",
            "select flights.Airline, airports.AirportName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.09529008716344833,
            0.0010995666962116957,
            0.07216572761535645,
            0.005701245274394751,
            0.0003437997947912663,
            0.00011900406389031559,
            0.00024863157887011766,
            9.905066690407693e-05
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of airlines that have at least ten flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select count(*)",
            "select count(distinct flights.Airline)",
            "select count(*), flights.Airline",
            "select count(*), airlines.Airline"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "flights",
            "airlines flights",
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.10507477819919586,
            0.9795669913291931,
            0.0010396204888820648,
            0.9859090447425842,
            0.7442175149917603,
            0.003366569522768259,
            0.40750136971473694,
            0.0016274097142741084
        ],
        "align_select": "select count(distinct flights.Airline)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me all airlines that have at least ten flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9918479919433594,
            0.00012543340562842786,
            0.0005651359097100794,
            6.069624942028895e-05,
            0.0028933039866387844,
            6.557016604347154e-05,
            0.00027780202799476683,
            6.073342228773981e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all the airlines that have at least ten flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9863957166671753,
            0.00011782950605265796,
            0.0005437362706288695,
            5.978350600344129e-05,
            0.0023070648312568665,
            6.505347118945792e-05,
            0.0002665198117028922,
            6.0155627579661086e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the air carriers who have between zero and two hundred flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9869821667671204,
            0.00023924712149892002,
            0.0013911713613197207,
            7.901158824097365e-05,
            0.0005301216151565313,
            6.561276677530259e-05,
            0.0003737008373718709,
            6.802185816923156e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the numbers of flights that land in Aberdeen or Abilene",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City-UNION-SELECT-FROM-WHERE",
            "select count(*), airports.City, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9947551488876343,
            0.0003422751906327903,
            0.00026444930699653924,
            0.02999599277973175,
            0.0001545312552480027,
            0.00012609525583684444,
            0.0001170994364656508,
            8.669701492181048e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the locations where there is more than one city where an employee under the age of thirty comes from.",
        "gold_select": "select employee.City",
        "select_candidates": [
            "select employee.City",
            "select employee.City, count(distinct employee.City)",
            "select employee.City, count(*)",
            "select employee.City, employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9471349716186523,
            0.0002518875407986343,
            0.00023302852059714496,
            6.77152129355818e-05,
            0.005467674694955349,
            0.0001054440435837023,
            0.00022670267208013684,
            7.580371311632916e-05
        ],
        "align_select": "select employee.City",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show all cities in which there are more than one employees under the age of thirty.",
        "gold_select": "select employee.City",
        "select_candidates": [
            "select employee.City",
            "select employee.City the SELECT-FROM-WHERE-GROUP BY-HAVING",
            "select employee.City, count(*)",
            "select employee.City the SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9838648438453674,
            6.67712592985481e-05,
            0.0005955472006462514,
            0.0001010042687994428,
            0.014102240093052387,
            6.31051734671928e-05,
            0.00016138645878527313,
            0.00022370774240698665
        ],
        "align_select": "select employee.City",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me all cities that have two or more employees under the age of thirty.",
        "gold_select": "select employee.City",
        "select_candidates": [
            "select employee.City",
            "select employee.City, count(*)",
            "select employee.City for employee.Age",
            "select employee.City as the employee.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9763957262039185,
            6.583563663298264e-05,
            0.0037586153484880924,
            6.52771195746027e-05,
            0.00020504719577729702,
            6.123074126662686e-05,
            0.0008666888461448252,
            5.334899469744414e-05
        ],
        "align_select": "select employee.City",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Which district in the dataset has both stores with less than 3,000 products and stores with more than 10,000 products?",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, shop.Location",
            "select shop.District,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9925521612167358,
            0.9925521612167358,
            0.0001580089592607692,
            0.0001580089592607692,
            0.0002265243965666741,
            0.0002265243965666741,
            0.015274155884981155,
            0.015274155884981155
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "show the districts that have stores with less than 10 000 products and more than 100 000.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, shop.Location",
            "select shop.District,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9907644987106323,
            0.7839179635047913,
            0.00014501978876069188,
            0.00022896839072927833,
            0.00022880229516886175,
            0.00028115560417063534,
            0.021449876949191093,
            0.28816184401512146
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of districts that have both stores with less than 3,000 products and stores with more than 10,000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select count(distinct shop.District)",
            "select count(*)",
            "select count(distinct shop.District),",
            "select count(distinct shop.Location)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.00039028696483001113,
            0.0011154902167618275,
            0.009770465083420277,
            0.23648710548877716,
            0.00017293443670496345,
            0.0002981269499287009,
            0.000355882802978158,
            0.0013426047516986728
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the districts where there is both shops selling less than 3000 products and shops selling more than 10,000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, shop.Location",
            "select shop.District Then shop.Number_products"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9923851490020752,
            0.9923851490020752,
            0.00014927583106327802,
            0.00014927583106327802,
            0.00021652916620951146,
            0.00021652916620951146,
            0.0004555073392111808,
            0.0004555073392111808
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the districts that have both shops selling less than 3,000 products and shops selling more than 10,000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District Then-intersect shop.District",
            "select shop.District Then-intersect-shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9924299120903015,
            0.9924299120903015,
            0.00014142321015242487,
            0.00014142321015242487,
            0.00021589321841020137,
            0.00021589321841020137,
            0.0002587780181784183,
            0.0002587780181784183
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all districts where there is both shops selling less than 3,000 products and shops selling more than 10000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District Then I'll see if there's a shop selling less than 3,000 products AND a shop selling more than 10000 products",
            "select shop.District Then I'll see if there's a shop selling less than 3,000 products, a shop selling more than 10000 products",
            "select shop.District Then I'll see if there's a shop selling less than 3,000 products and a shop selling more than 10000 products"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9868263006210327,
            0.9868263006210327,
            0.0989362969994545,
            0.0989362969994545,
            0.04176328703761101,
            0.04176328703761101,
            0.0989362969994545,
            0.0989362969994545
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Document ID, Template ID, and Document Description for the document named \"RobbinCV\"",
        "gold_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description.",
            "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Name",
            "select Documents.Document_ID-, Documents.Template_ID, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9954764246940613,
            0.0001397477026330307,
            0.001186417881399393,
            7.750387885607779e-05,
            0.5394371747970581,
            0.00011884076229762286,
            0.0007093597087077796,
            8.915910439100116e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Template_ID, Documents.Document_Description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of documents that use the PowerPoint template.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Template_ID",
            "select count(*), Templates.Template_Details",
            "select count(*), Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Documents",
            "Ref_Template_Types Templates Documents",
            "Paragraphs Documents"
        ],
        "align_scores": [
            0.9932706952095032,
            7.46475052437745e-05,
            0.0002947238099295646,
            7.573882612632588e-05,
            0.00030723915551789105,
            6.689700967399403e-05,
            0.00022683045244775712,
            6.711074092891067e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the version number and template type code for the template with version number later than five.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Version_Number.c2, Templates.Version_Number",
            "select Templates.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9934044480323792,
            0.00015388356405310333,
            0.00029810593696311116,
            7.388146332232282e-05,
            0.0008104770095087588,
            7.382898911600932e-05,
            0.0004618948441930115,
            9.950697858585045e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the version numbers and template type codes of templates with version greater than five.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Version_Number.c2, Templates.Version_Number",
            "select Templates.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9954531192779541,
            0.00017594594100955874,
            0.0002273193240398541,
            6.580356421181932e-05,
            0.00047489930875599384,
            6.907578062964603e-05,
            0.00031876840512268245,
            9.751369361765683e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the versions and template types of templates with version numbers higher than five.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Version_Number",
            "select Templates.Template_Details, Templates.Template_Type_Code",
            "select version(Templates.Version_Number), Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9947124719619751,
            0.00016408653755206615,
            0.9952048063278198,
            0.00018005493620876223,
            0.0005245968932285905,
            8.524458098690957e-05,
            0.00024677577312104404,
            6.98336007189937e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all templates where version number is greater than five and return the version number and the template type code.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number.c1, Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9927003979682922,
            0.00010898979235207662,
            0.000254687387496233,
            7.993669714778662e-05,
            0.00018823143909685314,
            7.099528738763183e-05,
            0.00021179991017561406,
            6.645302346441895e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the versions and template types of templates with a version number greater than five.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Version_Number",
            "select Templates.Template_Details, Templates.Template_Type_Code",
            "select version(Templates.Version_Number), Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9950591325759888,
            0.00016971325385384262,
            0.9955678582191467,
            0.00019868844537995756,
            0.0007918541086837649,
            9.01810999494046e-05,
            0.00023868911375757307,
            7.126798300305381e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the version numbers and template type codes of templates that have a version number greater than five.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number.c2, Templates.Version_Number",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Documents.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9936659932136536,
            0.00016926252283155918,
            0.0006789137842133641,
            7.102264498826116e-05,
            0.0003805499873124063,
            9.737125219544396e-05,
            0.0003251548623666167,
            8.501444244757295e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all versions and template type codes for any version number equal to or greater than five.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number.c2, Templates.Version_Number",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select t1.c 1, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9940385818481445,
            0.00015718246868345886,
            0.0006495802663266659,
            7.888510299380869e-05,
            0.00045729565317742527,
            9.97458046185784e-05,
            0.0003159009793307632,
            0.0001101940797525458
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the codes of template types that have fewer than three templates.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code (or Templates.Date_Effective_From)",
            "select Templates.Template_Type_Code,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9944432377815247,
            0.00016666867304593325,
            0.0003155217273160815,
            7.041436765575781e-05,
            0.0026738974265754223,
            0.00011722299677785486,
            0.0013747494667768478,
            7.391873805318028e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the codes of template types that have fewer than three templates.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code (or Templates.Date_Effective_From)",
            "select Templates.Template_Type_Code, Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9946069121360779,
            0.00020854217291343957,
            0.0003284806152805686,
            7.128415745683014e-05,
            0.0015718754148110747,
            0.00011641005403362215,
            0.00017126671446021646,
            5.915487781749107e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all paragraph ids and texts for the document with the name 'Welcome to New York.'",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9950199127197266,
            0.00013811928511131555,
            0.0004753789398819208,
            8.944729779614136e-05,
            0.0003059472073800862,
            8.53694582474418e-05,
            0.0007771649397909641,
            8.871437603374943e-05
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the id and text of each paragraph in the document titled \"Welcome to New York.\"",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9942672848701477,
            0.00012864707969129086,
            0.0003926553763449192,
            9.547216177452356e-05,
            0.0006619740161113441,
            8.651580719742924e-05,
            0.000289438059553504,
            7.37607988412492e-05
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which paragraphs (ids or texts) in the document named Welcome To New York?",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Paragraphs.Paragraph_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9886771440505981,
            0.00026921258540824056,
            0.0007789232768118382,
            9.40317622735165e-05,
            0.0010587747674435377,
            0.00010392266267444938,
            0.9898472428321838,
            0.00021939913858659565
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The ids and texts of paragraphs in the document titled \"Welcome to New York\".",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Paragraphs.Paragraph_Text",
            "select param_Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9942071437835693,
            0.00017012380703818053,
            0.00042739894706755877,
            0.00012188553955638781,
            0.000544557988177985,
            8.428151340922341e-05,
            0.0005299336626194417,
            6.761803524568677e-05
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the ids and texts of paragraphs in the document titled Welcome to New York.",
        "gold_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9951497912406921,
            0.00014926913718227297,
            0.0005157098639756441,
            0.0001334022090304643,
            0.0009772665798664093,
            0.0001361575414193794,
            0.00039909742190502584,
            0.00013675217633135617
        ],
        "align_select": "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the paragraphs of the customer review documents.",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Paragraphs.Other_Details",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description",
            "select Paragraphs.Paragraph_Text, Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9957737326622009,
            0.00010941694199573249,
            0.00021906346955802292,
            6.378532998496667e-05,
            0.00016877727466635406,
            5.794332901132293e-05,
            0.00012216992035973817,
            5.883071935386397e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the text in the paragraphs for the document named customer review?",
        "gold_select": "select Paragraphs.Paragraph_Text",
        "select_candidates": [
            "select Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_Text, Documents.Document_Description",
            "select Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9957917928695679,
            0.00010469942208146676,
            0.00015216310566756874,
            6.249480065889657e-05,
            0.00023997199605219066,
            6.374945223797113e-05,
            0.00014286547957453877,
            6.201121868798509e-05
        ],
        "align_select": "select Paragraphs.Paragraph_Text",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Ids of documents that contain two or more paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9963961243629456,
            9.646287799114361e-05,
            0.00023232217063196003,
            5.872064139111899e-05,
            0.993860125541687,
            8.660875027999282e-05,
            0.0007900079363025725,
            6.501403549918905e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "show the ids of documents that have two or more paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID (paragraph_Paragraphs.Paragraph_ID)",
            "select Documents.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9964441657066345,
            8.698685269337147e-05,
            0.0002234466082882136,
            5.6935921747935936e-05,
            0.00020379679335746914,
            6.706230487907305e-05,
            0.9939281940460205,
            7.636476948391646e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Identify the document ids that have two or more paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID (Paragraphs.Paragraph_ID)",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.995862603187561,
            7.825381180737168e-05,
            0.00017997206305153668,
            5.5229669669643044e-05,
            0.000434829416917637,
            5.9369511291151866e-05,
            0.0005460797110572457,
            5.8623787481337786e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List ids of documents that have two or multiples paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9847984910011292,
            0.0004369589441921562,
            0.9785671234130859,
            0.00043570820707827806,
            0.0002592568635009229,
            9.74989088717848e-05,
            0.0005827916320413351,
            8.594253449700773e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the ID of the documents that have two or more paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Paragraph_ID",
            "select Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9960395097732544,
            8.920997788663954e-05,
            0.9899681806564331,
            7.725285831838846e-05,
            0.0055170911364257336,
            7.643259596079588e-05,
            0.9960395097732544,
            8.920997788663954e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Identify the documents where there are two or fewer paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description, Documents.Other_Details"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9906308054924011,
            0.00016040212358348072,
            0.0007769857184030116,
            6.0236801800783724e-05,
            0.0006081915344111621,
            7.25714344298467e-05,
            0.002505226293578744,
            6.692559691146016e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "show the names of teachers whose hometown is a place other than Little Lever.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Hometown, teacher.Teacher_ID",
            "select teacher.Name, teacher.Hometown, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9892153143882751,
            0.00010266349272569641,
            0.0002712321584112942,
            6.393033254425973e-05,
            0.00014881434617564082,
            6.446366023737937e-05,
            0.00014156420365907252,
            5.6542889069532976e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all names of instructors that fall within age range 32-33.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9928366541862488,
            0.0006644808454439044,
            0.0001673794467933476,
            9.168832912109792e-05,
            0.000168698446941562,
            8.542206342099234e-05,
            0.00015612789138685912,
            8.246719517046586e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of teachers who are aged between 32-33.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Teacher_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.989535391330719,
            0.0001266147883143276,
            0.00016870550462044775,
            6.492246029665694e-05,
            0.00016138369392137975,
            6.570373807335272e-05,
            0.00014407756680157036,
            5.974822852294892e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The names of persons who teach mathematics.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select distinct teacher.Name",
            "select unique teacher.Name",
            "select specific teacher.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9930782914161682,
            0.00021956616546958685,
            0.09987787902355194,
            0.015343066304922104,
            0.0034049111418426037,
            0.00020541661069728434,
            0.0029575766529887915,
            0.0002877835067920387
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name some teachers of mathematics.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select distinct teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Hometown"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "course teacher course_arrange",
        "table_candidates": [
            "teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9935382008552551,
            0.0001043871816364117,
            0.0892142727971077,
            9.527662768959999e-05,
            0.00013938797928858548,
            5.8067511417903006e-05,
            0.00022477484890259802,
            6.345547444652766e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The average age of the visitors whose membership level is four or lower.",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select avg(visitor.Age)",
            "select an avg(visitor.Age)",
            "select  avg(visitor.Age)",
            "select the avg(visitor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9949365854263306,
            0.00011359451309544966,
            0.0004882926004938781,
            9.902932652039453e-05,
            0.9949365854263306,
            0.00011359451309544966,
            0.0005209592636674643,
            0.0001258781849173829
        ],
        "align_select": "select avg(visitor.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the average age of the visitors whose membership level is not higher than four.",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select avg(visitor.Age)",
            "select an avg(visitor.Age)",
            "select  avg(visitor.Age)",
            "select the avg(visitor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9946531057357788,
            0.00013993731408845633,
            0.000521817768458277,
            0.00011613930109888315,
            0.9946531057357788,
            0.00013993731408845633,
            0.0005286748637445271,
            0.00014069864118937403
        ],
        "align_select": "select avg(visitor.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the first names and birth date for players born in the US.",
        "gold_select": "select players.first_name, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.birth_date",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name",
            "select distinct players.first_name, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9852026104927063,
            9.004430467030033e-05,
            0.00027230719570070505,
            5.4035972425481305e-05,
            0.0002202473842771724,
            6.931549432920292e-05,
            0.004950952250510454,
            5.854384653503075e-05
        ],
        "align_select": "select players.first_name, players.birth_date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The names and birth dates of American players.",
        "gold_select": "select players.first_name, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.last_name, players.birth_date",
            "select distinct players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name, players.hand, players.birth_date",
            "select players.first_name.c1, players.last_name, players.birth_date"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9405476450920105,
            7.764517795294523e-05,
            0.0004968025023117661,
            6.846307951491326e-05,
            0.0002159609430236742,
            6.914141704328358e-05,
            0.00015086027269717306,
            5.6869612308219075e-05
        ],
        "align_select": "select players.first_name, players.last_name, players.birth_date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the first name and birth date of players from the United States of America.",
        "gold_select": "select players.first_name, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.birth_date",
            "select distinct players.first_name, players.birth_date",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9946027398109436,
            0.00010021325579145923,
            0.0010681061539798975,
            5.4043441195972264e-05,
            0.0001802414917619899,
            5.8997920859837905e-05,
            0.00022990840079728514,
            9.169724944513291e-05
        ],
        "align_select": "select players.first_name, players.birth_date",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the name of tournament that has more than ten matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.991990864276886,
            9.340119868284091e-05,
            0.00015419830742757767,
            5.5358010285999626e-05,
            0.00016092852456495166,
            6.0565460444195196e-05,
            0.00011562116560526192,
            6.146790838101879e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the tournament name that has more than ten matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9891461133956909,
            9.387963655171916e-05,
            0.0001485381944803521,
            6.061503154342063e-05,
            0.0001604393037268892,
            5.724221409764141e-05,
            0.00013712314830627292,
            6.09088056080509e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the tournament whose number of matches is greater than ten.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.match_num",
            "select matches.tourney_name, matches.minutes",
            "select matches.tourney_name (https://matches.match_num"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9215098023414612,
            7.939027273096144e-05,
            0.00013251624477561563,
            5.8971087128156796e-05,
            0.00015669132699258626,
            5.787909685750492e-05,
            0.000259188876952976,
            6.64434555801563e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of Tournaments that have more tha ten matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.best_of, matches.tourney_name",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.tourney_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9907594919204712,
            0.00010013826977228746,
            0.00029242646996863186,
            6.0703136114170775e-05,
            0.00015574574354104698,
            5.3513933380600065e-05,
            0.00015705272380728275,
            5.263154162093997e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the name of the tournaments that have more than ten matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9847131371498108,
            0.00012438952398952097,
            0.00016198355297092348,
            5.6653043429832906e-05,
            0.00015774926578160375,
            5.978732224320993e-05,
            0.00012505397899076343,
            6.19327329332009e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of the tournaments that have more than ten matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.989937424659729,
            0.00010063202353194356,
            0.0001524054678156972,
            5.488116585183889e-05,
            0.00016092484293039888,
            5.8140201872447506e-05,
            0.0001227261673193425,
            5.9444402722874656e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "The first name or last name of all players who are left handed in the order of birthday.",
        "gold_select": "select players.first_name, players.last_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name ou players.last_name",
            "select players.first_name, players.last_name, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9601380228996277,
            0.9601380228996277,
            0.00014383791130967438,
            0.00014383791130967438,
            0.9889046549797058,
            0.9889046549797058,
            0.00014383791130967438,
            0.00014383791130967438
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Show the list of the first and last name of all players who are left handed in the order of birth date.",
        "gold_select": "select players.first_name, players.last_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name (Date, Last)",
            "select players.first_name, players.last_name, players.hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9931350946426392,
            0.00016776738630142063,
            0.0002082044375129044,
            0.00010155862401006743,
            0.00034038262674584985,
            0.00024751847377046943,
            0.00016639538807794452,
            0.0001089930156012997
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "List the first and last name of all players (Left-Handed) in their birth order.",
        "gold_select": "select players.first_name, players.last_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name in players.birth_date",
            "select players.first_name, players.last_name, players.hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.99517422914505,
            0.00019213258929084986,
            0.00014466622087638825,
            8.63585519255139e-05,
            0.00029431720031425357,
            0.00012889388017356396,
            0.00011579439888009802,
            8.751184941502288e-05
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Show the name of the code of the country with more than fifty players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, t0.c6",
            "select players.country_code (symbol players.country_code)",
            "select players.country_code (symbol t0.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9827718138694763,
            0.00011718980385921896,
            0.00043105846270918846,
            6.462744931923226e-05,
            0.00033336301567032933,
            6.621397915296257e-05,
            0.0006780660478398204,
            7.619578536832705e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Display the name and ranking of the three youngest winners in across all games.",
        "gold_select": "select distinct matches.winner_name, matches.winner_rank",
        "select_candidates": [
            "select matches.winner_name, matches.winner_rank",
            "select matches.loser_ioc, matches.winner_rank",
            "select matches.loser_age, matches.winner_rank",
            "select matches.winner_ioc, matches.winner_rank"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9625491499900818,
            6.28679190413095e-05,
            0.00036100897705182433,
            8.320902270497754e-05,
            0.00033843680284917355,
            8.36388353491202e-05,
            0.0023026352282613516,
            6.0661754105240107e-05
        ],
        "align_select": "select matches.winner_name, matches.winner_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the names and ranks of the three youngest winners across all matches.",
        "gold_select": "select distinct matches.winner_name, matches.winner_rank",
        "select_candidates": [
            "select matches.winner_name, matches.winner_rank",
            "select matches.loser_ioc, matches.winner_rank",
            "select matches.loser_age, matches.winner_rank",
            "select matches.winner_rank, matches.winner_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9952613711357117,
            5.570104985963553e-05,
            0.0002493704087100923,
            7.611466571688652e-05,
            0.00022775496472604573,
            7.946374535094947e-05,
            0.9953814744949341,
            5.613826579065062e-05
        ],
        "align_select": "select matches.winner_name, matches.winner_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name and rank of the three youngest winners in all matches.",
        "gold_select": "select distinct matches.winner_name, matches.winner_rank",
        "select_candidates": [
            "select matches.winner_name, matches.winner_rank",
            "select matches.loser_ioc, matches.winner_rank",
            "select matches.loser_age, matches.winner_rank",
            "select matches.winner_ioc, matches.winner_rank"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9935740828514099,
            5.598568532150239e-05,
            0.00033531078952364624,
            7.476611790480092e-05,
            0.00034865140332840383,
            8.024992712307721e-05,
            0.0004549634177237749,
            6.331686745397747e-05
        ],
        "align_select": "select matches.winner_name, matches.winner_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name and rank of the three youngest winners in each match.",
        "gold_select": "select distinct matches.winner_name, matches.winner_rank",
        "select_candidates": [
            "select matches.winner_name, matches.winner_rank",
            "select matches.winner_name, matches.winner_rank, matches.match_num",
            "select matches.winner_name, matches.winner_rank, matches.minutes",
            "select matches.winner_name, matches.winner_rank, matches.loser_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9944064617156982,
            5.617087663267739e-05,
            0.0021238592453300953,
            5.8622837968869135e-05,
            0.00019351499213371426,
            5.705919465981424e-05,
            0.00011629088839981705,
            5.160868386155926e-05
        ],
        "align_select": "select matches.winner_name, matches.winner_rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the number of left-handed WTA Championship winners.",
        "gold_select": "select count(distinct matches.winner_name)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.winner_hand",
            "select count(*), matches.winner_entry",
            "select count(*), matches.tourney_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches",
            "players matches rankings"
        ],
        "align_scores": [
            0.9930316209793091,
            0.000958491291385144,
            0.00027561234310269356,
            0.0021440426353365183,
            0.00027368072187528014,
            0.0005065026343800128,
            0.0003147457027807832,
            0.0029019240755587816
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Shows the ids and names of battles that lead to more than ten people dead in total.",
        "gold_select": "select battle.id, battle.name",
        "select_candidates": [
            "select battle.id, battle.name",
            "select battle.name, battle.id",
            "select battle.date, battle.name",
            "select death.id, battle.name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "battle ship death",
        "table_candidates": [
            "battle death"
        ],
        "align_scores": [
            0.9304000735282898,
            0.000114603535621427,
            0.9516103267669678,
            0.0001217183016706258,
            0.000407715531764552,
            6.291769386734813e-05,
            0.002588646486401558,
            0.000101118566817604
        ],
        "align_select": "select battle.id, battle.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "This course describes the mathematics.",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select Courses.course_description",
            "select Courses.course_name, Courses.course_description",
            "select Courses.course_name",
            "select Courses.course_id, Courses.course_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Transcript_Contents"
        ],
        "align_scores": [
            0.9909951090812683,
            0.05146901682019234,
            0.00014827131235506386,
            0.0002060197584796697,
            0.9092828631401062,
            0.2468971312046051,
            0.00012991804396733642,
            0.00018578078015707433
        ],
        "align_select": "select Courses.course_description",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Display all the classifications for all mathematical classes.",
        "gold_select": "select Courses.course_description",
        "select_candidates": [
            "select distinct Transcripts.other_details",
            "select distinct t10.c2",
            "select distinct Student_Enrolment_Courses.student_enrolment_id",
            "select distinct Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Courses",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Transcripts",
            "Courses Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.22977571189403534,
            0.0004994063638150692,
            0.0008014526683837175,
            0.00027079679421149194,
            0.000201832692255266,
            9.856035467237234e-05,
            0.00010664210276445374,
            7.505807298002765e-05
        ],
        "align_select": "select distinct Transcripts.other_details",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Return the ZIP for PortChelsea.",
        "gold_select": "select Addresses.zip_postcode",
        "select_candidates": [
            "select Addresses.zip_postcode",
            "select Addresses.zip_postcode, Addresses.city",
            "select Addresses.zip_postcode, Addresses.state_province_county",
            "select Addresses.zip_postcode, Addresses.country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses",
        "table_candidates": [
            "Addresses",
            "Addresses Transcripts"
        ],
        "align_scores": [
            0.9429087042808533,
            0.0001177515514427796,
            0.0001681934663793072,
            5.4566167818848044e-05,
            0.0002155433758161962,
            5.918737224419601e-05,
            0.00017549909534864128,
            5.367001358536072e-05
        ],
        "align_select": "select Addresses.zip_postcode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names and ids of courses with at most two sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.9945898056030273,
            8.670734678162262e-05,
            0.056170783936977386,
            8.165524923242629e-05,
            0.995492696762085,
            0.00010665105219231918,
            0.00038104515988379717,
            9.356380178360268e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names and ID of courses with at most two sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.9930431842803955,
            8.386030094698071e-05,
            0.011881889775395393,
            7.84489675424993e-05,
            0.9957654476165771,
            9.858479461399838e-05,
            0.000399973796447739,
            8.270384569186717e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of courses with no more than two sections and return their IDs",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Departments.department_id",
            "select Courses.course_name, Courses.course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections"
        ],
        "align_scores": [
            0.9836452007293701,
            9.607162792235613e-05,
            0.1858137547969818,
            9.494485129835084e-05,
            0.0002946299791801721,
            9.234130993718281e-05,
            0.9799976944923401,
            9.453272650716826e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the name and id of courses in which there are two or less sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections"
        ],
        "align_scores": [
            0.9786979556083679,
            9.552734991302714e-05,
            0.0016994713805615902,
            8.386637637158856e-05,
            0.9939872026443481,
            9.36695869313553e-05,
            0.0003974443825427443,
            8.195330883609131e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names and ID for the courses with at most two sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.9878056049346924,
            9.781991684576496e-05,
            0.0015228179981932044,
            8.671074465382844e-05,
            0.9953117370605469,
            0.00011363958765286952,
            0.0004031428543385118,
            8.66092523210682e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of each course with less than two sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.course_id, Sections.section_name",
            "select Courses.course_name, Sections.section_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.9951634407043457,
            0.00013349381333682686,
            0.00022880600590724498,
            6.0687911172863096e-05,
            0.0001276470284210518,
            5.464141577249393e-05,
            0.0005196604761295021,
            6.737177318427712e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Names and IDs of all courses with less than two sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.9310271739959717,
            8.913208148442209e-05,
            0.0007285376777872443,
            8.486442675348371e-05,
            0.9951228499412537,
            9.511540702078491e-05,
            0.00031793469679541886,
            9.150062396656722e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of every course where there is fewer than two section.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_name",
            "select Courses.course_name, Sections.course_id, Sections.section_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.9943245053291321,
            0.00015348012675531209,
            0.0003224023967050016,
            6.762132397852838e-05,
            0.0011823039967566729,
            7.215477671707049e-05,
            0.00015905471809674054,
            5.801011138828471e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names and IDs of all courses with less then two sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.9710022807121277,
            8.792296284809709e-05,
            0.0008461851393803954,
            8.436264033662155e-05,
            0.9933578372001648,
            9.398013935424387e-05,
            0.0003034526889678091,
            9.109154780162498e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all students with two degrees in one semester and list their names, first name, middle name and last name and the id.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name and Students.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Departments Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.7156750559806824,
            0.20765133202075958,
            0.003272315487265587,
            0.0017299337778240442,
            0.27705198526382446,
            0.16819517314434052,
            0.7623917460441589,
            0.19488966464996338
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which students were enrolled in two degrees courses in the same semester (first name, middle name, last name and ID).",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name and Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Departments Students Student_Enrolment",
            "Addresses Students Student_Enrolment"
        ],
        "align_scores": [
            0.9904258847236633,
            0.0007600106182508171,
            0.2125641405582428,
            0.00018782427650876343,
            0.9892771244049072,
            0.0009602837963029742,
            0.9904258847236633,
            0.0007600106182508171
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me students enrolled in two degree programs during one semester and list their first, middle and last names and the IDs.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name and Students.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Departments Students Student_Enrolment",
            "Addresses Students Student_Enrolment"
        ],
        "align_scores": [
            0.004382758866995573,
            0.9486801028251648,
            0.0004312455130275339,
            0.021918566897511482,
            0.004382758866995573,
            0.9486801028251648,
            0.005922191776335239,
            0.9455838203430176
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "The list the first name, middle name, last name and ID of students enrolled in two degrees in one semester.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select distinct Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Departments Students Student_Enrolment",
            "Addresses Students Student_Enrolment"
        ],
        "align_scores": [
            0.0006810302147641778,
            0.9911978840827942,
            0.00014436637866310775,
            0.7680978775024414,
            9.342338307760656e-05,
            0.0003052959218621254,
            0.0006810302147641778,
            0.9911978840827942
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names (first, middle, last), along with IDs (id) of all students enrolled in two degrees in one semester.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name + Students.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Semesters Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Departments Degree_Programs Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.7533172369003296,
            0.0012879843125119805,
            0.41694074869155884,
            0.0008460592944175005,
            0.0019798476714640856,
            0.0005454736528918147,
            0.8485472798347473,
            0.0015239908825606108
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "align_structure": "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show all students who enrolled for two degree programs in one semester, their first, middle and last name, along with their IDs.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name plus Students.student_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Transcripts Students Student_Enrolment",
            "Departments Students Student_Enrolment",
            "Students Student_Enrolment Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9798313975334167,
            0.3553549349308014,
            0.9798313975334167,
            0.3553549349308014,
            0.9407491087913513,
            0.05496523901820183,
            0.9812424182891846,
            0.7695774435997009
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the first, middle, and last name, along with the ID of all students who enrolled in two degree programs in one semester.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name ainsi, Students.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Sections Students Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Degree_Programs Students Student_Enrolment Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.002093274611979723,
            0.002738839015364647,
            0.0005572171066887677,
            0.0005291160196065903,
            0.002093274611979723,
            0.002738839015364647,
            0.0002567157498560846,
            0.0002348602283746004
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Identify all first, middle, and last names along with the IDs of all students that enrolled in two degree programs in one semester.",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name, Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name as well as Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name along with Students.student_id",
            "select Students.first_name, Students.middle_name, Students.last_name plus Students.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Students Student_Enrolment",
        "table_candidates": [
            "Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Degree_Programs Students Student_Enrolment",
            "Students Student_Enrolment_Courses",
            "Sections Students Student_Enrolment",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Courses Students Student_Enrolment"
        ],
        "align_scores": [
            0.4432459771633148,
            0.9207702279090881,
            0.6763895750045776,
            0.9270352125167847,
            0.5793651938438416,
            0.8385037779808044,
            0.8272024393081665,
            0.9342221617698669
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name plus Students.student_id",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the date and ID of the transcript with two or more course results.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t12.c5, t12.c0",
            "select t9.c5, Transcripts.transcript_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.0002748718543443829,
            9.900704026222229e-05,
            0.00038380787009373307,
            9.130006947088987e-05,
            0.0003602296346798539,
            5.7926310546463355e-05,
            0.0005076622474007308,
            9.016631520353258e-05
        ],
        "align_select": "select t10.c5, Transcript_Contents.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the dates and identification numbers of transcripts with at least two grades.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t9.c5, Transcripts.transcript_id",
            "select t8.c5, t8.c6",
            "select t12.c5, t12.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.00021476503752637655,
            8.449653250863776e-05,
            0.000505940755829215,
            8.199912554118782e-05,
            0.0019495291635394096,
            5.395816333475523e-05,
            0.0005126461619511247,
            5.5715870985295624e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the date and ID of the transcript with minimum two course results.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t9.c5, Transcripts.transcript_id",
            "select t12.c5, t12.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses Transcripts",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.00040495124994777143,
            7.668593025300652e-05,
            0.0002938977559097111,
            8.468578744214028e-05,
            0.0005678888410329819,
            8.517900278093293e-05,
            0.00031939020846039057,
            5.7169214414898306e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the date and ID of the transcript which has at least two course results.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t12.c5, t12.c0",
            "select t9.c5, Transcripts.transcript_id",
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t14.c5, t14.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Semesters Student_Enrolment_Courses",
            "Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.00031160085927695036,
            5.4102943977341056e-05,
            0.00046558643225580454,
            8.664131019031629e-05,
            0.0002658219600562006,
            8.947782771429047e-05,
            0.00033975462429225445,
            5.444329508463852e-05
        ],
        "align_select": "select t12.c5, t12.c0",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the date and ID of the transcript with at least two courses listed.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t12.c5, t12.c0",
            "select t14.c5, t14.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Courses Student_Enrolment_Courses",
            "Courses Transcripts",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment",
            "Semesters Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "align_scores": [
            0.00029726471984758973,
            9.377209789818153e-05,
            0.0004026959650218487,
            9.372757631354034e-05,
            0.00020014263282064348,
            6.42401646473445e-05,
            0.0002262369089294225,
            6.456967093981802e-05
        ],
        "align_select": "select t10.c5, Transcript_Contents.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Return the date and ID of transcript having at least two courses.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t14.c5, t14.c0",
            "select t14.c3, t14.c0",
            "select t8.c5, Student_Enrolment_Courses.student_course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcript_Contents",
            "Transcripts",
            "Student_Enrolment_Courses",
            "Courses Student_Enrolment_Courses",
            "Courses Transcripts"
        ],
        "align_scores": [
            0.00024527055211365223,
            8.397809870075434e-05,
            0.00017502749687992036,
            5.442605834105052e-05,
            0.00015708956925664097,
            5.6544828112237155e-05,
            0.0002796198532450944,
            8.465832070214674e-05
        ],
        "align_select": "select t10.c5, Transcript_Contents.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the first first name of student(s) with permanent Haitian address or who's mobile has number 09700166582",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select Students.first_name, Students.last_name",
            "select Students.student_id, Students.first_name",
            "select Students.first_name, Students.middle_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Courses Students",
            "Addresses Semesters Students"
        ],
        "align_scores": [
            0.5184049606323242,
            0.49342143535614014,
            0.00016824092017486691,
            0.0001723259047139436,
            0.00018845753220375627,
            0.00011298026947770268,
            0.0002248790260637179,
            0.00015300435188692063
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The content of the radio program Sky.",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Country",
            "select TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.06008011847734451,
            6.622962973779067e-05,
            0.0013165440177544951,
            7.434317376464605e-05,
            0.0009082664619199932,
            7.861806079745293e-05,
            0.0043893493711948395,
            7.225241279229522e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The content of the series radio Sky.",
        "gold_select": "select TV_Channel.Content",
        "select_candidates": [
            "select TV_Channel.Content",
            "select TV_Channel.Content, TV_Channel.series_name",
            "select TV_Channel.Content, TV_Channel.Country",
            "select TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series"
        ],
        "align_scores": [
            0.30844980478286743,
            6.496717833215371e-05,
            0.0001416645391145721,
            6.016738552716561e-05,
            0.00015677996270824224,
            5.8515772252576426e-05,
            0.00014712744450662285,
            6.002331792842597e-05
        ],
        "align_select": "select TV_Channel.Content",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list the top three highest rated TV shows, their episode number, and their rating.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.id, TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Episode, TV_series.Rating",
            "select TV_series.id-, TV_series.Episode, TV_series.Rating"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.009870625101029873,
            6.339752144413069e-05,
            0.7848715782165527,
            5.85454108659178e-05,
            0.00021988879598211497,
            7.396583532681689e-05,
            0.00031292354105971754,
            7.016127347014844e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the Top three highest rated TV series and list their episode and rating.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating, TV_series.Air_Date",
            "select t1, TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Air_Date, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9730121493339539,
            5.912374399485998e-05,
            0.0004679159901570529,
            6.648134149145335e-05,
            0.0003632552397903055,
            6.370078335748985e-05,
            0.0008330607670359313,
            6.336947990348563e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the top three TV shows' ratings and list their episodes.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Rating, TV_series.Episode",
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Rating, TV_series.Episode",
            "select TV_series.Air_Date, TV_series.Rating"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9947156310081482,
            6.809181650169194e-05,
            0.11184507608413696,
            6.59578581689857e-05,
            0.0002186365454690531,
            7.059832569211721e-05,
            0.0022939404007047415,
            6.77423449815251e-05
        ],
        "align_select": "select TV_series.Rating, TV_series.Episode",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Top Three Highest Rated TV Series. Episode and rating.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating, TV_series.Air_Date",
            "select TV_series.Episode.c1, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating, TV_series.Share"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9955240488052368,
            7.142568938434124e-05,
            0.0002607354545034468,
            6.859246786916628e-05,
            0.0007251400966197252,
            7.567602006020024e-05,
            0.00020075959037058055,
            6.953981937840581e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the Top three television programs and their episode ratings.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.id, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Episode",
            "select TV_series.Rating, TV_series.Air_Date"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.0014758361503481865,
            6.759430834790692e-05,
            0.6414051055908203,
            6.395275704562664e-05,
            0.0009926420170813799,
            7.536174962297082e-05,
            0.0003044948389288038,
            6.580838817171752e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the three highest rated episodes in the TV series table and what were their ratings?",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Episode, TV_series.Rating",
            "select top-TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Rating",
            "select TV_series.Episode, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9942843317985535,
            6.0909158491995186e-05,
            0.0004429472901392728,
            7.03814803273417e-05,
            0.0006209005368873477,
            5.692766353604384e-05,
            0.0004503383534029126,
            6.929739174665883e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the three highest rated episodes in the TV series table and what were their ratings.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, sum(TV_series.Rating)",
            "select TV_series.id, TV_series.Rating",
            "select TV_series.Episode, max(TV_series.Rating)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9948451519012451,
            6.366671004798263e-05,
            0.005459891166538,
            5.46922892681323e-05,
            0.000378547643776983,
            6.040096195647493e-05,
            0.0026827917899936438,
            6.279212539084256e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the ids of all tv channels that have more than two TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Hight_definition_TV",
            "select TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.id, TV_Channel.Pay_per_view_PPV"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9597141742706299,
            0.00013576110359281301,
            0.00043440680019557476,
            0.00011052830086555332,
            0.0002957692486234009,
            7.632305641891435e-05,
            0.0005198496510274708,
            9.541955660097301e-05
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Display the ids of all tv channels that have more than two TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Hight_definition_TV",
            "select TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR",
            "select tv0.c0"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9560520052909851,
            0.00013561696687247604,
            0.00044799241004511714,
            0.00011151635408168659,
            0.00029739117599092424,
            7.636265218025073e-05,
            0.0131059056147933,
            0.00013573003525380045
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the IDs of all TV channels that have more than two TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Hight_definition_TV",
            "select TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.id, TV_Channel.Pay_per_view_PPV"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9597141742706299,
            0.00013576110359281301,
            0.00043440680019557476,
            0.00011052830086555332,
            0.0002957692486234009,
            7.632305641891435e-05,
            0.0005198496510274708,
            9.541955660097301e-05
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the IDs of all TVs channels which have more than two TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select tv0.c0",
            "select tv.c0",
            "select tTV_Channel.id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9478596448898315,
            0.00014875065244268626,
            0.020510680973529816,
            0.000144468285725452,
            0.05540698021650314,
            0.00031565921381115913,
            0.10184138268232346,
            0.0001422334462404251
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Identify the IDs of all television channels having more than two TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Hight_definition_TV",
            "select TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR",
            "select TV_Channel.id, TV_Channel.Pay_per_view_PPV"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9648444056510925,
            0.00010867615492315963,
            0.00043525343062356114,
            9.997149027185515e-05,
            0.00025511535932309926,
            6.50135989417322e-05,
            0.0004711627261713147,
            8.171569061232731e-05
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Maximum number of final tables made among poker players with less than 200K earnings.",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.Earnings",
            "select max(poker_player.Final_Table_Made) (poker_player.Poker_Player_ID)",
            "select max(poker_player.Final_Table_Made), poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9959506988525391,
            6.0381553339539096e-05,
            0.00014732734416611493,
            5.205909110372886e-05,
            8.806822006590664e-05,
            5.7837336498778313e-05,
            0.00012710629380308092,
            6.153061258373782e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The maximum number of final tables made among poker players with earnings less than 200K.",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.Earnings",
            "select max(poker_player.Final_Table_Made) (poker_player.Poker_Player_ID)",
            "select max(poker_player.Final_Table_Made), poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9957713484764099,
            6.226418190635741e-05,
            0.0001517695636721328,
            4.969756628270261e-05,
            9.010287612909451e-05,
            5.658986992784776e-05,
            0.00012785239960066974,
            5.880688695469871e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Determine the maximum number of Final Tables made among poker players with Earnings under 200K.",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.Earnings",
            "select max(poker_player.Final_Table_Made) dependant on poker_player.Earnings",
            "select max(poker_player.Final_Table_Made) dependant on poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.995508074760437,
            6.616157770622522e-05,
            0.00014739070320501924,
            5.277281525195576e-05,
            0.0003779649268835783,
            7.269464549608529e-05,
            0.00013905596279073507,
            6.344567373162135e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the maximum final tables made across all poker players who have earned less than 200K.",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select max(poker_player.Final_Table_Made), poker_player.Earnings",
            "select max(poker_player.Final_Table_Made), poker_player.Best_Finish",
            "select max(poker_player.Final_Table_Made) de poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9945840239524841,
            0.00010082604421768337,
            0.0001471789291827008,
            6.477782153524458e-05,
            0.0001376088330289349,
            6.532002589665353e-05,
            0.00013962970115244389,
            6.60341393086128e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the highest final table made for all poker players that have earnings under 200K.",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select max(poker_player.Final_Table_Made)",
            "select poker_player.Final_Table_Made",
            "select max(poker_player.Final_Table_Made), poker_player.Best_Finish",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9960930943489075,
            8.582451118854806e-05,
            0.9326879978179932,
            0.00010280740389134735,
            0.00014139949053060263,
            6.25250831944868e-05,
            0.00020849767315667123,
            6.778336683055386e-05
        ],
        "align_select": "select max(poker_player.Final_Table_Made)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The name of the poker players whose earnings are more than 300K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.990528404712677,
            0.0003807078755926341,
            0.00012951926328241825,
            7.884292426751927e-05,
            0.00014493020717054605,
            7.464764348696917e-05,
            0.0001420658954884857,
            8.31809375085868e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name of poker player with more than 300K in their accounts.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.984826922416687,
            0.0005109407939016819,
            0.0001553586480440572,
            8.92172974999994e-05,
            0.0001371107209706679,
            8.09629273135215e-05,
            0.000190527003724128,
            9.918204887071624e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of poker players whose earnings exceeds $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9885162115097046,
            0.0006876611150801182,
            0.00015023384185042232,
            8.400877413805574e-05,
            0.00015041156439110637,
            7.801946776453406e-05,
            0.00014692218974232674,
            8.371895819436759e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Names of poker players whose earnings are higher than 300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.Poker_Player_ID",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9925202131271362,
            0.00025991915026679635,
            0.00014887411089148372,
            7.386504876194522e-05,
            0.00014847559214103967,
            7.335760892601684e-05,
            0.00014755511074326932,
            6.941478932276368e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name of Poker players whose earnings are over 300K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9931167364120483,
            0.00022816423734184355,
            0.00014128330803941935,
            7.621178519912064e-05,
            0.00014405653928406537,
            7.318285497603938e-05,
            0.00013868717360310256,
            7.810693932697177e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the poker players whose earnings is more than 300k dollars?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select poker_player.People_ID",
            "select poker_player.People_ID, poker_player.Poker_Player_ID",
            "select poker_player.People_ID, poker_player.Final_Table_Made",
            "select poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.006846737116575241,
            0.0018762542167678475,
            0.00023136723029892892,
            9.068938379641622e-05,
            0.00020214004325680435,
            9.102380863623694e-05,
            0.0023240125738084316,
            0.0018352929037064314
        ],
        "align_select": "select poker_player.People_ID",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of poker players that have made more than $300K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9731354117393494,
            0.0006862881709821522,
            0.00015129636449273676,
            9.216643229592592e-05,
            0.00014508150343317538,
            7.680837734369561e-05,
            0.0001795106945792213,
            9.407418838236481e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give names of poker players who have exceeded $300,000 earnings.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9830318689346313,
            0.0006382488645613194,
            0.0001701075816527009,
            0.0001036178000504151,
            0.0001551540190121159,
            8.409126166952774e-05,
            0.00020080877584405243,
            0.00010674221266526729
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "give the names of the poker players who have revenues above 300K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9794988036155701,
            0.0004840283072553575,
            0.00015374172653537244,
            8.6904939962551e-05,
            0.0001610431936569512,
            8.087934838840738e-05,
            0.00015889039786998183,
            9.106608922593296e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of poker players whose earnings exceed $300K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9865289926528931,
            0.0004829010576941073,
            0.00014586742327082902,
            8.494636858813465e-05,
            0.000146611244417727,
            7.499175990233198e-05,
            0.00015231147699523717,
            8.277864981209859e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of the poker players who have earned more than $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9614564776420593,
            0.0015627110842615366,
            0.00018394833023194224,
            0.00011129401536891237,
            0.00018441793508827686,
            8.655394049128518e-05,
            0.00018074420222546905,
            9.78501484496519e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of poker players who have earned more than $300K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9640000462532043,
            0.0007189685711637139,
            0.00017211554222740233,
            0.00010298105917172506,
            0.0001689659693511203,
            8.267167140729725e-05,
            0.00020655557455029339,
            0.00010478770855115727
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "give the names of poker players who have earned more than 30 K.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9486925601959229,
            0.0004807740915566683,
            0.00016321396105922759,
            9.267935820389539e-05,
            0.00016278807015623897,
            7.82861970947124e-05,
            0.00014677840226795524,
            8.737459575058892e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Calculate the average earning for poker players who are taller than 200cm.",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select an avg(poker_player.Earnings)",
            "select the avg(poker_player.Earnings)",
            "select  avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9959393739700317,
            0.00011302295024506748,
            0.0004149661399424076,
            0.00011379182251403108,
            0.0003896433918271214,
            0.00014074666250962764,
            0.9959393739700317,
            0.00011302295024506748
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show names of people who do not have Russian nationality.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Height"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.989294171333313,
            0.00012960450840182602,
            0.0001646526507101953,
            6.224156095413491e-05,
            0.00019905345106963068,
            7.414365973090753e-05,
            0.00015912539674900472,
            6.104918429628015e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the people who do not have Russian citizenship and return their names.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.People_ID",
            "select people.People_ID, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.6205919981002808,
            0.00022587481362279505,
            0.0001916104374686256,
            8.376454934477806e-05,
            0.00017082066915463656,
            6.689796282444149e-05,
            0.00025470732362009585,
            8.663882181281224e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of the persons who are NOT Russian citizens.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.Birth_Date",
            "select people.Nationality, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people",
            "poker_player people"
        ],
        "align_scores": [
            0.9769203662872314,
            0.02235053852200508,
            0.00014940895198378712,
            0.00012166468513896689,
            0.00017833607853390276,
            0.00028668183949775994,
            0.0002701062767300755,
            0.00015381387493107468
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "All the people not considered Russians (name them).",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.People_ID",
            "select people.People_ID, people.Name",
            "select people.Name, people.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9605485796928406,
            0.00019582046661525965,
            0.00019521013018675148,
            7.17746588634327e-05,
            0.0003161381173413247,
            8.704428182682022e-05,
            0.0001863296638475731,
            7.004081271588802e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of people who are not Russian.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Height"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9892423748970032,
            9.107920777751133e-05,
            0.00014960256521590054,
            6.0443486290751025e-05,
            0.00015993205306585878,
            5.930963743594475e-05,
            0.00014616413682233542,
            5.6053373555187136e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the last date when a vote was created from California.",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select max(VOTES.created), AREA_CODE_STATE.state",
            "select max(VOTES.created), VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.8711898922920227,
            0.00026252298266626894,
            0.32701802253723145,
            0.994358241558075,
            0.00016853251145221293,
            0.00010755327093647793,
            0.00011177292617503554,
            7.88311954238452e-05
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the latest date created of votes in the state of California.",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select max(VOTES.created), AREA_CODE_STATE.state",
            "select max(VOTES.created), VOTES.state",
            "select max(VOTES.created), VOTES.phone_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9957150816917419,
            0.00011258385347900912,
            0.0001380510802846402,
            8.136678661685437e-05,
            0.00012275087647140026,
            6.79080476402305e-05,
            0.00011226899368921295,
            6.726001447532326e-05
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the last date created for votes from the state California.",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select min(VOTES.created)",
            "select the max(VOTES.created)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.770263671875,
            0.0001542580284876749,
            0.5377134680747986,
            0.9954890608787537,
            0.0051215640269219875,
            0.00013189461606089026,
            0.00035713298711925745,
            0.0001477547484682873
        ],
        "align_select": "select VOTES.created",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the last date of votes from California.",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select t2.c5",
            "select VOTES.vote_id, max(VOTES.created)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.3395671844482422,
            0.00019734301895368844,
            0.0018497910350561142,
            0.9958881735801697,
            0.0005291838897392154,
            0.0004573231271933764,
            0.00014610352809540927,
            0.00011765670933527872
        ],
        "align_select": "select VOTES.created",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What was the last date that votes were created in the state of California?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select max(VOTES.created), AREA_CODE_STATE.state",
            "select min(VOTES.created)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.3066433072090149,
            0.00032351139816455543,
            0.2282356470823288,
            0.9939475059509277,
            0.0001708182244328782,
            0.000105466773675289,
            0.0714685320854187,
            0.0002214833366451785
        ],
        "align_select": "select VOTES.created",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Determine when last votes were posted for the State of California.",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select t2.c5",
            "select max(VOTES.created)",
            "select VOTES.created",
            "select VOTES.vote_id, max(VOTES.created)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.0007743443129584193,
            0.0008192166569642723,
            0.9478830695152283,
            0.0005217482103034854,
            0.8453227877616882,
            0.99553382396698,
            0.00019813585095107555,
            0.0001478959748055786
        ],
        "align_select": "select VOTES.created",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the last date for the creation of the votes in the State of California?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select VOTES.created",
            "select min(VOTES.created)",
            "select the max(VOTES.created)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9934346675872803,
            0.0002110538334818557,
            0.018932785838842392,
            0.9940071105957031,
            0.06428094953298569,
            0.0001556807110318914,
            0.0005597653798758984,
            0.00021585801732726395
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The total number of voters for New York (or California).",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), AREA_CODE_STATE.state",
            "select VOTES.state, count(*)",
            "select count(*), AREA_CODE_STATE.state, VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES"
        ],
        "align_scores": [
            0.9953085780143738,
            8.358168270206079e-05,
            0.0001948255958268419,
            9.309318556915969e-05,
            0.0009321137331426144,
            6.95087801432237e-05,
            0.00012001853610854596,
            6.064694753149524e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of votes in either NY or California.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), VOTES.state",
            "select count(*), AREA_CODE_STATE.state",
            "select count(*) in VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9957091808319092,
            6.726822903146967e-05,
            0.0002502363931853324,
            9.702543320599943e-05,
            0.0001965076371561736,
            8.030243043322116e-05,
            0.0009389673941768706,
            8.572317165089771e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of vote from state New York (or California).",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), AREA_CODE_STATE.state",
            "select VOTES.state, count(*)",
            "select count(*), VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES"
        ],
        "align_scores": [
            0.9949871301651001,
            8.28648844617419e-05,
            0.00020238786237314343,
            9.294415940530598e-05,
            0.0027973304968327284,
            8.651936514070258e-05,
            0.00032319300225935876,
            8.296514715766534e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of vote count in New York or California?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select VOTES.state, count(*)",
            "select count(*), AREA_CODE_STATE.state",
            "select sum(VOTES.vote_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9954314231872559,
            0.0001169461029348895,
            0.0015321960672736168,
            9.659663191996515e-05,
            0.0001858431496657431,
            0.00012368860188871622,
            0.0015424172161146998,
            0.00011279641330474988
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of countries having a Republican Government.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.GovernmentForm"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9935166835784912,
            0.00021136357099749148,
            0.00029963950510136783,
            0.0035242338199168444,
            0.0003158088366035372,
            0.005704706069082022,
            0.0003475708654150367,
            0.0022538022603839636
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Brazilian Population & Life Expectancy",
        "gold_select": "select country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Code, country.Population, country.LifeExpectancy",
            "select country.Code, country.Name, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.995591402053833,
            0.00010475632734596729,
            0.00016587783466093242,
            0.00010067232506116852,
            0.00017772021237760782,
            9.159604087471962e-05,
            0.00018504039326217026,
            7.74777217884548e-05
        ],
        "align_select": "select country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many years a human being lives on average in the Central African region.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select Avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9958106279373169,
            7.938013004604727e-05,
            0.0005232469411566854,
            0.00010053993901237845,
            0.9958106279373169,
            7.938013004604727e-05,
            0.9958106279373169,
            7.938013004604727e-05
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me how long the average life expectancy is for Central Africans.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy)."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9934260845184326,
            0.002103745238855481,
            0.00042304268572479486,
            0.00016228994354605675,
            0.9934260845184326,
            0.002103745238855481,
            0.00036526130861602724,
            0.00012559354945551604
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the name of Asian country whose life expectancy is the lowest.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9926319122314453,
            0.9926319122314453,
            0.00024041607684921473,
            0.00024041607684921473,
            0.0001609223836567253,
            0.0001609223836567253,
            0.00019656594668049365,
            0.00019656594668049365
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show the name of Asian countries that has a short average life expectancy.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9557684659957886,
            0.6233885288238525,
            0.0001939711073646322,
            0.00025245232973247766,
            0.00018283879035152495,
            0.00019708764739334583,
            0.00018897629342973232,
            0.0002483022981323302
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the country that has the shortest life expectation in the Asian region.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Region",
            "select country.Name, country.Continent",
            "select country.Name, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9925670623779297,
            0.0002762653457466513,
            0.00029276456916704774,
            0.00010803782060975209,
            0.0002510469639673829,
            0.00011083669232903048,
            0.0008017049403861165,
            9.789979958441108e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Give the name of the Asian country with the lowest life expectancy.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9935712814331055,
            0.9935712814331055,
            0.00024962611496448517,
            0.00024962611496448517,
            0.00017431829473935068,
            0.00017431829473935068,
            0.0002034547069342807,
            0.0002034547069342807
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me all Asians' population and maximum GNP.",
        "gold_select": "select sum(country.Population), max(country.GNP)",
        "select_candidates": [
            "select country.Population, max(country.GNP)",
            "select country.Code, country.Population, max(country.GNP)",
            "select country.Name, max(country.GNP)",
            "select country.Code, max(country.GNP)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9962942004203796,
            0.001436986611224711,
            0.0002935919037554413,
            0.00031309964833781123,
            0.00033348315628245473,
            0.0006354022189043462,
            0.00028923340141773224,
            0.0004293840320315212
        ],
        "align_select": "select country.Population, max(country.GNP)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Average life span for African countries that are republics.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy)."
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9964105486869812,
            0.00019733341468963772,
            0.00039440920227207243,
            0.00012973359844181687,
            0.9964105486869812,
            0.00019733341468963772,
            0.0002843400579877198,
            9.7399388323538e-05
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average life expectancy for African countries that are republics.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.GovernmentForm",
            "select avg(country.LifeExpectancy), country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9949665665626526,
            0.0001541680539958179,
            0.0004119843360967934,
            0.00011571348295547068,
            0.00020913635671604425,
            0.0016532123554497957,
            0.00012914066610392183,
            8.246758807217702e-05
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the average life expectancy for African countries that are republics.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.GovernmentForm",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9952373504638672,
            0.00015396058734040707,
            0.0002130707143805921,
            0.002020269865170121,
            0.00039474264485761523,
            0.00010819058661581948,
            0.00012744392734020948,
            8.407978748437017e-05
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the average lifespan of all African Republics.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select an avg(country.LifeExpectancy)",
            "select  avg(country.LifeExpectancy)",
            "select Avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9961692690849304,
            0.0003498857840895653,
            0.00037559037446044385,
            0.00013316074910108,
            0.9961692690849304,
            0.0003498857840895653,
            0.9961692690849304,
            0.0003498857840895653
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out the area of the continent Asia and the European continent.",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select country.SurfaceArea",
            "select sum(country.SurfaceArea)",
            "select country.SurfaceArea, country.IndepYear",
            "select country.SurfaceArea, country.Population"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.023398257791996002,
            0.9951909780502319,
            0.00020823183876927942,
            0.00026905915001407266,
            9.630626300349832e-05,
            0.00013301681610755622,
            8.667718066135421e-05,
            0.00010854587162612006
        ],
        "align_select": "select country.SurfaceArea",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show Total surfaces areas covered by the Asian or European countries",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Continent",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9954551458358765,
            0.10608317703008652,
            0.00016381203022319824,
            0.00028914184076711535,
            0.00013478053733706474,
            0.0008405428379774094,
            0.00016381203022319824,
            0.00028914184076711535
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "give the total surface area covered by Asian countries or European ones.",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Continent",
            "select sum(country.SurfaceArea) dependant on whether country.Name, country.Continent",
            "select sum(country.SurfaceArea) dependant on whether country.SurfaceArea is country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9958800077438354,
            0.0002292182616656646,
            0.00011508647003211081,
            7.701255526626483e-05,
            0.00016303818847518414,
            0.00010361285967519507,
            0.00017948586901184171,
            0.00010984764958266169
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the average GNP and total population of all nations whose government is territories under the United States.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.GNP), avg(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select avg(country.LifeExpectancy), sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9952093958854675,
            0.0014015709748491645,
            0.9678294062614441,
            0.00041721592424437404,
            0.9935832619667053,
            0.001178136677481234,
            0.002425797749310732,
            0.0010434486903250217
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the average GNP and total population in all nations whose government is United States' territory.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.GNP), avg(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select avg(country.IndepYear), avg(country.GNP)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9921042919158936,
            0.0015441728755831718,
            0.9774927496910095,
            0.000719843665137887,
            0.9905548691749573,
            0.001907731988467276,
            0.00023765613150317222,
            0.00011499190441099927
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "give me the mean GDP and population for countries considered to be part of the US.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), avg(country.Population)",
            "select avg(country.SurfaceArea), avg(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select avg(country.IndepYear), avg(country.Population)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9935613870620728,
            0.0003792643256019801,
            0.0002448436862323433,
            0.00012415867240633816,
            0.9947645664215088,
            0.000582230684813112,
            0.0004198259557597339,
            0.00015783774142619222
        ],
        "align_select": "select avg(country.GNP), avg(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Calculate the average GDP and the total population for those nations who consider themselves part of the United States' Territory.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.SurfaceArea), sum(country.Population)",
            "select avg(country.Population), sum(country.Population)",
            "select avg(country.IndepYear), sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9901571273803711,
            0.00443353783339262,
            0.0002421411481918767,
            0.0001383939088555053,
            0.0002303463261341676,
            0.00012394173245411366,
            0.00035853948793374,
            0.00020302239863667637
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the average Gross National Product (GNP) and total population of countries that are considered U.S. territory.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.GNP), avg(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select sum(country.GNP), avg(country.GNP)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9936195015907288,
            0.0022246376611292362,
            0.32478615641593933,
            0.0009535136632621288,
            0.9924650192260742,
            0.0036451672203838825,
            0.0005135645042173564,
            0.0005206277128309011
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Estimate the average income and total population for countries in which they are classified as U.S.Territory:.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.SurfaceArea), sum(country.Population)",
            "select avg(country.Population), sum(country.Population)",
            "select avg(country.IndepYear), sum(country.Population)",
            "select avg(country.GNP), sum(country.Population)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "country countrylanguage",
            "city country"
        ],
        "align_scores": [
            0.0003179944178555161,
            0.00012913683895021677,
            0.00035457100602798164,
            0.00016537329065613449,
            0.0006451609078794718,
            0.00026524675195105374,
            0.9675822257995605,
            0.0011995489476248622
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Determine the mean gross national product (GNP) and total population of the countries listed as US territories.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.GNP), avg(country.Population)",
            "select avg(country.Population), avg(country.GNP)",
            "select avg(country.LifeExpectancy), sum(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9941887855529785,
            0.0016721721040084958,
            0.029322272166609764,
            0.0001723285240586847,
            0.9840277433395386,
            0.0007506529800593853,
            0.0003104669158346951,
            0.00014879733498673886
        ],
        "align_select": "select avg(country.GNP), sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of types of government on African countries.",
        "gold_select": "select count(distinct country.GovernmentForm)",
        "select_candidates": [
            "select count(distinct country.GovernmentForm)",
            "select count(distinct country.Name)",
            "select count(distinct country.GovernmentForm",
            "select count(distinct country.LocalName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.992764413356781,
            0.00013849885726813227,
            0.000953596259932965,
            0.00010919430496869609,
            0.10421252995729446,
            0.00013288749323692173,
            0.0007549990550614893,
            0.00010342292807763442
        ],
        "align_select": "select count(distinct country.GovernmentForm)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of African governments types.",
        "gold_select": "select count(distinct country.GovernmentForm)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct country.GovernmentForm)",
            "select count(distinct country.Name)",
            "select count(distinct country.GovernmentForm"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9963290095329285,
            0.01163232047110796,
            0.036501914262771606,
            0.00013349979417398572,
            0.001436722814105451,
            0.0002696025185286999,
            0.007861517369747162,
            0.00011377587361494079
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Total numbers of language spoken on Aruban islands.",
        "gold_select": "select count(countrylanguage.Language)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.Language)",
            "select count(speechcount(distinct countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9936997890472412,
            0.026726556941866875,
            0.9956743121147156,
            0.0002182564203394577,
            0.9933180809020996,
            0.001844170968979597,
            0.0009260235237888992,
            0.00014566397294402122
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For how many official languages does Afghan speak.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.IsOfficial)",
            "select count(count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.6089843511581421,
            0.00017330139235127717,
            0.9915314316749573,
            0.000253055477514863,
            0.0443892627954483,
            0.003241483122110367,
            0.0005926904268562794,
            0.00013327148917596787
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which languages is the spoken only one country in republican government?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.GovernmentForm"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9724478125572205,
            0.009096067398786545,
            0.00023850053548812866,
            0.00011182548041688278,
            0.00017131227650679648,
            8.413568866671994e-05,
            0.00016930467972997576,
            8.57113191159442e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the languages that are only used by one country with a republican form of government.",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.GovernmentForm",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.984363853931427,
            0.3010633587837219,
            0.0005517611280083656,
            9.444082388654351e-05,
            0.0005718244938179851,
            0.00022482113854493946,
            0.00033893180079758167,
            0.00011847485438920557
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "The languages that are only used by a single country with a republican government.",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.GovernmentForm",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.987812340259552,
            0.22848376631736755,
            0.0003532918344717473,
            0.00017504832067061216,
            0.00029792464920319617,
            0.00010845730867004022,
            0.00022697195527143776,
            0.0001295639667659998
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show all the countries whose surface areas are larger than that of any European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Continent",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7552630305290222,
            0.0003952924453187734,
            0.0007087221601977944,
            0.00015934708062559366,
            0.00030355193302966654,
            9.492875688010827e-05,
            0.0002398308861302212,
            0.00011314091534586623
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many countries have a greater surface area than European countries?.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Name",
            "select count(*), country.Name, country.SurfaceArea",
            "select count(*), country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9891419410705566,
            0.0011782437795773149,
            0.0007996860658749938,
            0.0027960659936070442,
            0.00016688239702489227,
            0.00011485021241242066,
            0.0006520377937704325,
            0.0025669168680906296
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which nations have an land area bigger than that of any European nation?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Region",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.5587770342826843,
            0.00042233674321323633,
            0.00046743988059461117,
            8.2104277680628e-05,
            0.0002905605942942202,
            8.880544919520617e-05,
            0.00034815885010175407,
            0.0001035071982187219
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the countries which have bigger area tham that of any European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Region",
            "select country.Name, country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6586474776268005,
            0.0006748861051164567,
            0.0002210107777500525,
            9.977055015042424e-05,
            0.0002087116736220196,
            9.869578934740275e-05,
            0.000358114717528224,
            0.00012681380030699074
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries have an area larger than that of any European country?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Region",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7716646790504456,
            0.0003345020522829145,
            0.0003022296878043562,
            8.441552199656144e-05,
            0.0005063537391833961,
            7.436245505232364e-05,
            0.00032697117421776056,
            9.583318751538172e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the countries whose landmass is larger than that of any European nation.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Continent",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8340148329734802,
            0.0001350441452814266,
            0.0005551428184844553,
            7.526708941441029e-05,
            0.00035812260466627777,
            8.791717846179381e-05,
            0.0002495475928299129,
            8.082469139480963e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the countries which are larger than the biggest European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Code",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.645351231098175,
            0.0009508513612672687,
            0.0002328961418243125,
            0.00010418908641440794,
            0.0013365860795602202,
            0.0001732055825414136,
            0.0002134878159267828,
            9.739668894326314e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the countries whose area exceeds that of any European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Continent",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8825326561927795,
            0.0008729725377634168,
            0.0004009679250884801,
            0.00011729320976883173,
            0.00024276948533952236,
            9.36259311856702e-05,
            0.00021296122577041388,
            9.332605986855924e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the name of the country greater than the European countries in size.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Region",
            "select country.Name, country.Continent",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country",
            "sqlite_sequence country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.978329062461853,
            0.00014263733464758843,
            0.00014885976270306855,
            6.707893044222146e-05,
            0.00016426501679234207,
            6.603451038245112e-05,
            0.00015524342597927898,
            6.839442357886583e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the countries from which an area is larger than all that of all European nations?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Region",
            "select country.Name, country.Continent",
            "select country.Name, country.SurfaceArea"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7161496877670288,
            0.0005106836906634271,
            0.00027565230266191065,
            8.772574074100703e-05,
            0.00028573928284458816,
            8.98786456673406e-05,
            0.00037516007432714105,
            8.617903949925676e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the list of African countries with less population than any Asian country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Code, country.Name",
            "select country.Name, country.Continent, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7926132678985596,
            0.0003893697285093367,
            0.0002369723515585065,
            9.639841300668195e-05,
            0.0008101498824544251,
            0.00011927706509595737,
            0.00013887866225559264,
            6.921839667484164e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the African nations whose populations total less than the populations of all Asian nations.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Continent, sum(country.Population)",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8198341131210327,
            0.928281843662262,
            0.00027331121964380145,
            0.0005843630060553551,
            0.0003008167550433427,
            0.0002873996563721448,
            0.0004791435494553298,
            0.0008065358852036297
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the African countries whose populations are less than any Asian country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Code, country.Name",
            "select country.Name, country.Continent, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7973349094390869,
            0.0004646765592042357,
            0.0003083683259319514,
            9.906908962875605e-05,
            0.0017811295110732317,
            0.00013128318823873997,
            0.00016349181532859802,
            6.636131729464978e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the African countries that have a population less than any Asian country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7954786419868469,
            0.0725288912653923,
            0.00029445195104926825,
            0.00013629329623654485,
            0.0003559078904800117,
            0.00013006532390136272,
            0.001857549650594592,
            0.0003877214330714196
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the name of African countries that have lesser population than any Asian country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8711138963699341,
            0.0002985894971061498,
            0.00019371714734006673,
            7.940739305922762e-05,
            0.00020741979824379086,
            6.687761197099462e-05,
            0.00017594410746823996,
            7.994866609806195e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the list of African countries with smaller populations than that of any Asian country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Code, country.Name",
            "select country.Name, country.Continent, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7299079298973083,
            0.0005977451801300049,
            0.0002767731202766299,
            0.00010397926962468773,
            0.0008041042601689696,
            0.00013807661889586598,
            0.00016302558651659638,
            6.844009476481006e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all Asian countries whose populations are larger than all African ones.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8964772820472717,
            0.014397998340427876,
            0.00030889242771081626,
            0.0001293384557357058,
            0.00041371339466422796,
            0.000108704662125092,
            0.0025659059174358845,
            0.0002691658737603575
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the list of Asian countries whose populations are larger than those of any African countries.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Code, country.Name",
            "select country.Name, country.Continent, max(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8305597901344299,
            0.0005790361319668591,
            0.0002647207584232092,
            0.00010881687194341794,
            0.0013934855815023184,
            0.00014432617172133178,
            0.00026468944270163774,
            7.70974947954528e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the different countries from Asia that have a larger population than any African country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select distinct country.Name",
            "select country.Name",
            "select distinct country.Name, country.Continent",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9289589524269104,
            0.0013825471978634596,
            0.6134282350540161,
            0.007222533226013184,
            0.0010530083673074841,
            0.00012835617235396057,
            0.00038908873102627695,
            0.00014012532483320683
        ],
        "align_select": "select distinct country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In terms of population show me which Asian country is larger than any African country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6278393268585205,
            0.5478553175926208,
            0.00022737849212717265,
            0.00039819255471229553,
            0.00026796857127919793,
            0.0002782054361887276,
            0.0015969633823260665,
            0.002516097854822874
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the Asian countries whose populations are larger than that of any African country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select distinct country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8430057764053345,
            0.007404261268675327,
            0.00034529363620094955,
            0.000124532773043029,
            0.00039228645619004965,
            0.00010266378376400098,
            0.17073370516300201,
            0.00039458635728806257
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of the Asian countries whose populations are larger than those of any African country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.918109118938446,
            0.00022982072550803423,
            0.00025043688947334886,
            8.516732486896217e-05,
            0.0002744659432210028,
            6.391350325429812e-05,
            0.00022194035409484059,
            7.874681614339352e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out which Asian countries have more than any African country's population size.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.5255629420280457,
            0.0001956415071617812,
            0.0003542466729413718,
            8.805981633486226e-05,
            0.0002403081307420507,
            6.348942406475544e-05,
            0.002332722069695592,
            0.00011134602391393855
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of Asian nations that surpass African nations in population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.9535061717033386,
            0.4813132584095001,
            0.0001788026129361242,
            0.0002409431617707014,
            0.00021291172015480697,
            0.00028614606708288193,
            0.00016148881695698947,
            0.00022740126587450504
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me cities in European countries where English is not an official language.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, country.Continent",
            "select city.ID, city.Name",
            "select city.Name, country.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.0036488426849246025,
            0.9790710210800171,
            0.00013115780893713236,
            0.00033370641176588833,
            0.00021345441928133368,
            0.0004029278934467584,
            0.0001689975761109963,
            0.00025962074869312346
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show different names of Asian cities with Chinese as an official language.",
        "gold_select": "select distinct city.Name",
        "select_candidates": [
            "select distinct city.Name",
            "select distinct city.Name, country.Capital",
            "select distinct city.Name, countrylanguage.IsOfficial",
            "select city.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city country countrylanguage",
        "table_candidates": [
            "city country countrylanguage",
            "city sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9945377707481384,
            0.0003182682557962835,
            0.00019029459508601576,
            8.002578397281468e-05,
            0.0003972547419834882,
            9.954873530659825e-05,
            0.04584048315882683,
            0.8512982726097107
        ],
        "align_select": "select distinct city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show names of countries who speak two or more languages and their number.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(*)",
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(distinct countrylanguage.CountryCode)",
            "select country.Name, count(distinct country.Code)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9922928810119629,
            0.00015917654673103243,
            0.03167501091957092,
            0.00011354793969076127,
            0.012891540303826332,
            0.00012521445751190186,
            0.0015101302415132523,
            0.00010356384882470593
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of countries that can speak two or more languages and how many languages they can speak?",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(distinct country.Name)",
            "select country.Name, count(countrylanguage.Language)",
            "select country.Name, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.44526100158691406,
            0.2141442745923996,
            0.00029061100212857127,
            0.0001897306356113404,
            0.051447898149490356,
            0.03987661376595497,
            0.9097274541854858,
            0.8778350353240967
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of countries that speak two or more languages, as well as how many languages they speak.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(distinct country.Name)",
            "select country.Name, count(*)",
            "select country.Name, count(countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.27710816264152527,
            9.536243305774406e-05,
            0.00026040058583021164,
            7.252646901179105e-05,
            0.97206050157547,
            9.708855213830248e-05,
            0.02615753747522831,
            7.814492710167542e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of the countries that speak two or more languages and how many language they speak?",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(*)",
            "select country.Name, count(distinct country.Name)",
            "select country.Name, count(countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.4035819172859192,
            0.00011540341074578464,
            0.9250346422195435,
            0.00011988401820417494,
            0.0002441839314997196,
            7.513112359447405e-05,
            0.08636549115180969,
            8.993598748929799e-05
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names and the areas of the countries that have the top five largest areas.",
        "gold_select": "select country.Name, country.SurfaceArea",
        "select_candidates": [
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Region",
            "select country.Name, country.SurfaceArea\"",
            "select country.Name, country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9880820512771606,
            7.10691383574158e-05,
            0.0033062731381505728,
            7.005343650234863e-05,
            0.002705938182771206,
            7.072238076943904e-05,
            0.0043710581958293915,
            6.482552271336317e-05
        ],
        "align_select": "select country.Name, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show all names and areas of countries with the list of five largest in terms of area.",
        "gold_select": "select country.Name, country.SurfaceArea",
        "select_candidates": [
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.SurfaceArea, country.Capital",
            "select country.Name, country.SurfaceArea, country.IndepYear",
            "select country.Name, country.SurfaceArea, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7441779971122742,
            6.147928797872737e-05,
            0.00021779825328849256,
            5.488870374392718e-05,
            0.00022209741291590035,
            5.609293657471426e-05,
            0.00015970453387126327,
            5.308844265528023e-05
        ],
        "align_select": "select country.Name, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the names and sizes of the five largest countries.",
        "gold_select": "select country.Name, country.SurfaceArea",
        "select_candidates": [
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.SurfaceArea, country.Population",
            "select country.Name, country.SurfaceArea, country.IndepYear",
            "select country.Name, country.SurfaceArea,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9956578016281128,
            6.979332101764157e-05,
            0.0004762552271131426,
            5.265478102955967e-05,
            0.00016536162002012134,
            5.1098792027914897e-05,
            0.0023077719379216433,
            6.997759192017838e-05
        ],
        "align_select": "select country.Name, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the name of countries that have the top three populations.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9863877296447754,
            5.1139886636519805e-05,
            0.0004443660145625472,
            5.5272237659664825e-05,
            0.0017412613378837705,
            5.8601097407517955e-05,
            0.0005767892580479383,
            5.466752190841362e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List three countries with the largest populations.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Name, country.Population",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9887621998786926,
            5.42913367098663e-05,
            0.0067290738224983215,
            5.810202128486708e-05,
            0.0007983301184140146,
            5.907572267460637e-05,
            0.0003600071358960122,
            5.9133217291673645e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Name the top three most populous countries.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.HeadOfState",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9938150644302368,
            5.404566036304459e-05,
            0.00027883474831469357,
            5.8569650718709454e-05,
            0.00018988302326761186,
            5.471957410918549e-05,
            0.0045270672999322414,
            5.6710498029133305e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the names of countries whose populations are the top three in the world.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Population",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9869322180747986,
            5.5187865655170754e-05,
            0.000324640073813498,
            5.520765625988133e-05,
            0.0005467369919642806,
            5.5908218200784177e-05,
            0.0018128935480490327,
            5.7299170293845236e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of the countries with the top three largest populations.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9878145456314087,
            5.780121864518151e-05,
            0.0005698269233107567,
            5.4944626754149795e-05,
            0.0031580403447151184,
            5.7842851674649864e-05,
            0.007475438993424177,
            5.7316821767017245e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "The top three most populous countries.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.HeadOfState",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9941593408584595,
            4.84030315419659e-05,
            0.00033724604872986674,
            5.3630203183274716e-05,
            0.0001956049381988123,
            4.9598002078710124e-05,
            0.0005238724988885224,
            5.540977144846693e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the names of the three largest countries.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.HeadOfState",
            "select country.Name (country.Code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9954896569252014,
            5.337189577403478e-05,
            0.0004070747527293861,
            5.065380173618905e-05,
            0.00023345681256614625,
            5.06640353705734e-05,
            0.018065383657813072,
            5.6153632613131776e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find names of the three countries with the highest population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9726142287254333,
            5.5082287872210145e-05,
            0.00030784844420850277,
            5.723751746700145e-05,
            0.002667620312422514,
            6.0147936892462894e-05,
            0.00017200906586367637,
            5.9352187236072496e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the top three countries in order of population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Population",
            "select country.Code, country.Name",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9925416707992554,
            0.9925416707992554,
            0.00041793682612478733,
            0.00041793682612478733,
            0.004804182332009077,
            0.004804182332009077,
            0.00395931676030159,
            0.00395931676030159
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "The top three countries in population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Population",
            "select country.Name, country.Code",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9920487999916077,
            4.6919620217522606e-05,
            0.00037448309012688696,
            5.6778684665914625e-05,
            0.007074803579598665,
            5.3315739933168516e-05,
            0.0002328361733816564,
            5.636350397253409e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the three most populated countries and return their names.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Name, country.Capital",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.994366466999054,
            5.766935646533966e-05,
            0.0005277510499581695,
            5.687514567398466e-05,
            0.00020016974303871393,
            5.3898609621683136e-05,
            0.00016638047236483544,
            5.613762550638057e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "The names of the three most populated countries.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.HeadOfState",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9953482747077942,
            5.247352601145394e-05,
            0.00029779798933304846,
            5.0498972996138036e-05,
            0.0001599784300196916,
            5.1264840294606984e-05,
            0.018805351108312607,
            5.309178595780395e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the most populated three countries.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Population",
            "select country.Name, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.994484007358551,
            4.7790810640435666e-05,
            0.00046425045002251863,
            5.2129635150777176e-05,
            0.0006953607080504298,
            5.335428795660846e-05,
            0.00025250788894481957,
            5.02622096973937e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the names of the nations with the three lowest population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.LocalName",
            "select country.Name, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9908080697059631,
            5.035327194491401e-05,
            0.00026322173653170466,
            4.871379132964648e-05,
            0.007787865120917559,
            4.9854734243126586e-05,
            0.0002497134846635163,
            4.862732384935953e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Names of the nations with the three lowest population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.LocalName",
            "select country.Name, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9925332069396973,
            4.880563210463151e-05,
            0.00023671852250117809,
            4.89582926093135e-05,
            0.009671047329902649,
            4.999280281481333e-05,
            0.00020876301277894527,
            4.731187073048204e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the names of the countries that have the three lowest population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9901869297027588,
            5.0372094847261906e-05,
            0.00042169145308434963,
            4.854351209360175e-05,
            0.0018531723180785775,
            5.211497045820579e-05,
            0.0008324755472131073,
            5.0512269808677956e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the names of the three countries with the fewest citizens in them.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.HeadOfState",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.990571916103363,
            4.9718284572009e-05,
            0.0003169658884871751,
            5.022446202929132e-05,
            0.00023462298850063235,
            5.0921629735967144e-05,
            0.005338524468243122,
            4.957274722983129e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How many Asian countries are there?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Name",
            "select count(*), country.Code",
            "select count(*) dependant on country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9953173398971558,
            0.0002736955648288131,
            0.00038665367173962295,
            0.002906526206061244,
            0.0005258895107544959,
            0.002010856056585908,
            0.0005937709356658161,
            0.00012812945351470262
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different Asian countries there are?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct country.Name)",
            "select count(count(distinct country.Name)",
            "select count(distinct country.Code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9952697157859802,
            0.9833811521530151,
            0.7417380809783936,
            0.00011032106704078615,
            0.0004924141685478389,
            9.382576536154374e-05,
            0.3889060318470001,
            0.0001331142702838406
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the list of countries located on European continent that have a population equal to 80000.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Code, country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Continent, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8337610363960266,
            0.0002682963095139712,
            0.00048068974865600467,
            0.0001188874666695483,
            0.00019797949062194675,
            0.00010078335617436096,
            0.0001410739787388593,
            7.06505888956599e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the total populations (and average areas) of countries in the continent of North America whose area is bigger than 3,000 km2.",
        "gold_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.Population), avg(country.Population)",
            "select sum(country.Population), avg(country.SurfaceArea)",
            "select country.Population, avg(country.SurfaceArea)",
            "select total(country.Population), avg(country.Population)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.007039572112262249,
            0.0002635547425597906,
            0.9920891523361206,
            0.0010558862704783678,
            0.9825031757354736,
            0.0004768093931488693,
            0.0005848014843650162,
            0.00017579183622729033
        ],
        "align_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Determine the total population and average surface area for countries in North America that have a surface area greater than 3,000.",
        "gold_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.Population), avg(country.SurfaceArea)",
            "select avg(country.Population), sum(country.Population)",
            "select country.Population, avg(country.SurfaceArea)",
            "select total(country.Population), avg(country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9713104367256165,
            0.000444913370301947,
            0.009237799793481827,
            0.00023099339159671217,
            0.36776432394981384,
            0.000345230451785028,
            0.0008723019273020327,
            0.0001451567659387365
        ],
        "align_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the total population and average surface area corresponding to countries in the North America that have a surface area larger than 3K.",
        "gold_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.Population), avg(country.SurfaceArea)",
            "select sum(country.Population), avg(country.Population)",
            "select avg(country.Population), sum(country.Population)",
            "select country.Population, avg(country.SurfaceArea)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.986182689666748,
            0.0009385992889292538,
            0.005571210756897926,
            0.0004245163581799716,
            0.028523588553071022,
            0.00047594166244380176,
            0.45814943313598633,
            0.0005955619853921235
        ],
        "align_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all cities whose population is between 160,000 and 900,000.",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, city.ID",
            "select city.Name, city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9584673643112183,
            0.000178469781531021,
            0.0003879826981574297,
            0.0001033015942084603,
            0.00032106199068948627,
            9.429900092072785e-05,
            0.00020496937213465571,
            8.547991455998272e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of cities in the range 160,000 and 900,000.",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, city.District",
            "select city.ID, city.Name",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9887534379959106,
            0.00021432808716781437,
            0.000141690339660272,
            5.9273006627336144e-05,
            0.0001387980446452275,
            7.193499914137647e-05,
            0.00014923923299647868,
            6.112222763476893e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of cities which have a population of 160,000-900,000.",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, city.District",
            "select city.ID, city.Name",
            "select city.Name, city.District, city.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.9856454730033875,
            0.0003220024227630347,
            0.0002122448495356366,
            7.00006858096458e-05,
            0.00020304095232859254,
            8.040020475164056e-05,
            0.00020589426276274025,
            7.135542546166107e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Names of conductors whose nationalities are not US.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor performance"
        ],
        "align_scores": [
            0.994592010974884,
            0.0001355629210593179,
            0.00017726598889566958,
            5.565018000197597e-05,
            0.00018469206406734884,
            6.695922638755292e-05,
            0.00013838795712217689,
            6.343024142552167e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of conductors who are non-US nationalities?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9949135780334473,
            0.00011306390661047772,
            0.0001952832972165197,
            6.118539749877527e-05,
            0.0001761267049005255,
            6.815222150180489e-05,
            0.00013693694199901074,
            5.882713230676018e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name the Conductors from countries other than the United States.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.995274007320404,
            9.623640653444454e-05,
            0.00020643368770834059,
            6.38764540781267e-05,
            0.00015792340855114162,
            6.099250458646566e-05,
            0.0001435780868632719,
            5.6632252380950376e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which are the conductors whose nationalities are not from US?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Conductor_ID",
            "select conductor.Conductor_ID, conductor.Nationality",
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.007899963296949863,
            9.732261241879314e-05,
            0.00023090971808414906,
            6.835452222730964e-05,
            0.9376072287559509,
            0.00011293998250039294,
            0.0002371721639065072,
            6.72549576847814e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of conductors whose nationalities are not from the United States (US).",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name (or conductor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9886081218719482,
            0.00011088405881309882,
            0.00021408872271422297,
            6.494091940112412e-05,
            0.0001652733189985156,
            7.030137930996716e-05,
            0.0010334354592487216,
            7.103823736542836e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of conductors who do not have US nationality and return them.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Name - conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra"
        ],
        "align_scores": [
            0.8789289593696594,
            0.00011895448551513255,
            0.00028603343525901437,
            6.422540172934532e-05,
            0.0001925914839375764,
            6.60665100440383e-05,
            0.0006987995584495366,
            6.69395667500794e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of conductors who do not have US nationality and return these names.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Name - conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor performance"
        ],
        "align_scores": [
            0.9812170267105103,
            0.00012128103844588622,
            0.0001956685446202755,
            5.963307557976805e-05,
            0.0001797880104277283,
            6.494574336102232e-05,
            0.0006073840195313096,
            6.990856491029263e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the conductors who do not have US nationality and return these names.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9725604057312012,
            0.00014050021127332002,
            0.00027009958284907043,
            6.604824011446908e-05,
            0.0001953303872141987,
            6.387553730746731e-05,
            0.0001776970166247338,
            7.828776142559946e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of conductors that have not the US nationality and return these names.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor orchestra performance"
        ],
        "align_scores": [
            0.9785595536231995,
            9.010863141156733e-05,
            0.00013187338481657207,
            5.5785883887438104e-05,
            0.00018077486311085522,
            5.9504185628611594e-05,
            0.00012502430763561279,
            6.0555004893103614e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of conductors who do not have US nationality and return these names.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID, conductor.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor performance",
            "conductor show"
        ],
        "align_scores": [
            0.9905649423599243,
            0.000127683553728275,
            0.00018055386317428201,
            5.7771238061832264e-05,
            0.00017563316214364022,
            6.076875433791429e-05,
            0.00012336728104855865,
            6.266404670896009e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return names of conductors who does not have US nationality.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work",
            "select conductor.Name, conductor.Nationality, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor orchestra performance"
        ],
        "align_scores": [
            0.9940100908279419,
            9.565569780534133e-05,
            0.00018052304221782833,
            5.867978325113654e-05,
            0.00011765615636250004,
            5.400098962127231e-05,
            0.00013553901226259768,
            5.304300066200085e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the list containing all students in grade ten.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select distinct Highschooler.name",
            "select distinct Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name, Highschooler.ID",
            "select distinct Highschooler.name, t0.c3"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.13468067348003387,
            9.209175186697394e-05,
            0.0001923176896525547,
            7.041295611998066e-05,
            0.00029123565764166415,
            5.977878026897088e-05,
            0.00035410988493822515,
            7.738195563433692e-05
        ],
        "align_select": "select distinct Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of all high schoolers in grade ten.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name",
            "select Highschooler.name (distinct Highschooler.grade)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.980475127696991,
            8.779804920777678e-05,
            0.00017119618132710457,
            6.238179048523307e-05,
            0.022975219413638115,
            9.086320642381907e-05,
            0.0004431174893397838,
            8.39907443150878e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of students in the 9th or 10th grade.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.ID",
            "select count(*), Highschooler.grade",
            "select count(*), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9960904717445374,
            0.00018423267465550452,
            0.00034068289096467197,
            0.000525728682987392,
            0.0002988215710502118,
            0.22225262224674225,
            0.000253140926361084,
            0.0014645535266026855
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Determine the number of high schoolers in ninth grade and tenth grade.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.grade",
            "select count(*), t0.c9, Highschooler.name0",
            "select Highschooler.grade, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.10221704840660095,
            0.12352898716926575,
            0.008461462333798409,
            0.807978093624115,
            0.00010165241110371426,
            0.00012235624308232218,
            0.23392482101917267,
            0.9815147519111633
        ],
        "align_select": "select Highschooler.grade, count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Show me all grades that have four or more students in them.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, count(*)",
            "select Highschooler.grade, max(Highschooler.ID)",
            "select Highschooler.grade, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Likes",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9826958179473877,
            9.709318692330271e-05,
            0.002742339391261339,
            7.33165506972e-05,
            0.0001611172192497179,
            5.8972491387976333e-05,
            0.0005532516515813768,
            6.360541738104075e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all grade levels that have four or more students in them.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade the SELECT-FROM-GROUP BY-HAVING",
            "select Highschooler.grade, count(*)",
            "select Highschooler.grade, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Likes",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.8947449326515198,
            9.669588325778022e-05,
            0.00034385392791591585,
            7.781320164212957e-05,
            0.00224889675155282,
            7.543205720139667e-05,
            0.0005573738599196076,
            6.852002115920186e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all grades in which there are at least four students.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, count(*)",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.grade, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9839170575141907,
            0.0001158256345661357,
            0.01899963617324829,
            8.140326826833189e-05,
            0.00021613645367324352,
            6.815105734858662e-05,
            0.0006483278120867908,
            6.601688073715195e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show how many grades have four high school students or more.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select count(distinct Highschooler.grade)",
            "select count(*)",
            "select count(*), Highschooler.grade",
            "select count(Highschooler.grade)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.0014623558381572366,
            0.9714342951774597,
            0.19101223349571228,
            0.9082435965538025,
            0.34865260124206543,
            0.001570396707393229,
            0.0016236703377217054,
            0.372182697057724
        ],
        "align_select": "select count(distinct Highschooler.grade)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the grades containing four or more high school students.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, t0.c3",
            "select Highschooler.grade, count(*)",
            "select Highschooler.grade, four-student-gROUP BY-HAVING"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9910123348236084,
            8.615011756774038e-05,
            0.0003860564320348203,
            6.131722329882905e-05,
            0.000865928188432008,
            6.533279520226642e-05,
            0.0002727806568145752,
            7.362980250036344e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the grades that have four or more high schoolers.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, count(*)",
            "select Highschooler.grade, t0.c3",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9905670285224915,
            8.807997801341116e-05,
            0.008375469595193863,
            6.903817120473832e-05,
            0.0005602513556368649,
            5.868151492904872e-05,
            0.00020249751105438918,
            6.41585502307862e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the grades where there are four or more high schoolers.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, t0.c3",
            "select Highschooler.grade, count(*)",
            "select Highschooler.grade, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9894959330558777,
            9.021240111906081e-05,
            0.0005050900508649647,
            6.111359834903851e-05,
            0.0014650680823251605,
            6.571489211637527e-05,
            0.0001618946116650477,
            5.319441333995201e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of high school students that have at least three friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9746025800704956,
            7.55128130549565e-05,
            0.001562096644192934,
            6.672581366728991e-05,
            0.0003121268528047949,
            5.773797965957783e-05,
            0.0004613859346136451,
            6.898993160575628e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of high school students who have at least three friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9672365188598633,
            7.750772056169808e-05,
            0.0018029516795650125,
            7.043425284791738e-05,
            0.0003632806474342942,
            6.021061199135147e-05,
            0.0005257521406747401,
            7.125778211047873e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of high schoolers who have three or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, t1.c2",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9840962886810303,
            7.51864499761723e-05,
            0.0017756475135684013,
            7.717230619164184e-05,
            0.00044089072616770864,
            7.369527884293348e-05,
            0.000310816103592515,
            6.264420517254621e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Tell us about the names of students from high schools that have at least three friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select distinct Highschooler.name",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.85761559009552,
            0.00012158118624938652,
            0.0025224678684026003,
            8.932778291637078e-05,
            0.069858618080616,
            6.533422856591642e-05,
            0.0006009693024680018,
            8.62862725625746e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of highschoolers that have 3+ friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.990253746509552,
            7.463042857125401e-05,
            0.0013015231816098094,
            6.44286919850856e-05,
            0.0002324577944818884,
            5.770869393018074e-05,
            0.0003340699477121234,
            6.811110506532714e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the names of the students that have at least two likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9251004457473755,
            0.00010543238022364676,
            0.000542396679520607,
            6.194666639203206e-05,
            0.0010285440366715193,
            6.778375973226503e-05,
            0.00023905695707071573,
            6.284525443334132e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all students who have liked twice or more.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Likes.student_id",
            "select Likes.student_id, Likes.liked_id",
            "select Likes.student_id, count(*)",
            "select Likes.student_id, Highschooler.name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Likes",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9848341941833496,
            0.00012664665700867772,
            0.0001745531480992213,
            5.867989602847956e-05,
            0.0013304227031767368,
            9.007348853629082e-05,
            0.006535987835377455,
            9.961226169252768e-05
        ],
        "align_select": "select Likes.student_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show students who has had two or more likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes",
            "Likes",
            "Friend Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9688832759857178,
            7.936316978884861e-05,
            0.003285240149125457,
            7.070774881867692e-05,
            0.0006278896471485496,
            5.904514546273276e-05,
            0.004445150028914213,
            9.329998283647001e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the list of students who have two or more likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes",
            "Friend Likes"
        ],
        "align_scores": [
            0.9513134956359863,
            8.341685315826908e-05,
            0.0053580403327941895,
            7.615627691848204e-05,
            0.000617050682194531,
            6.515242421301082e-05,
            0.0034655537456274033,
            8.742693898966536e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Names of students with at least two likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9918990135192871,
            9.099820454139262e-05,
            0.0004123469698242843,
            5.6654720538062975e-05,
            0.000904149143025279,
            6.369173206621781e-05,
            0.0002318123442819342,
            5.4280935728456825e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the name of students who have over two students.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID, max(Highschooler.name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend",
            "Highschooler Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9730556607246399,
            8.890118624549359e-05,
            0.000524558883626014,
            6.295135972322896e-05,
            0.00015434602391906083,
            5.552110815187916e-05,
            9.689525177236646e-05,
            5.845213672728278e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of students who have two or more likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9823068976402283,
            7.99347908468917e-05,
            0.0004366803914308548,
            5.7100078265648335e-05,
            0.0009088169317692518,
            6.71147063258104e-05,
            0.00023182320001069456,
            5.696764128515497e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of students who have at least two likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9598098993301392,
            7.69379039411433e-05,
            0.0004809450765606016,
            5.423094626166858e-05,
            0.0010020993649959564,
            6.13695738138631e-05,
            0.0002741306379903108,
            5.5813878134358674e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the names of students who have more than two likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9353911876678467,
            0.00010125075641553849,
            0.00044068272109143436,
            5.996330583002418e-05,
            0.0009119161404669285,
            6.841654249001294e-05,
            0.00023678918660152704,
            6.0222726460779086e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of students who have a grade higher than five and have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.22317931056022644,
            0.9703660607337952,
            0.0006944851484149694,
            0.00048665536451153457,
            0.0006337937666103244,
            0.000960993580520153,
            0.0002838254440575838,
            0.001537489821203053
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of students who have more than five grades and have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name (Highschooler.grade), Friend.friend_id",
            "select Highschooler.name, Highschooler.grade, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.27090322971343994,
            0.07839594036340714,
            0.00029133891803212464,
            0.00022707496827933937,
            0.00020757608581334352,
            0.00014689768431708217,
            0.00019053244614042342,
            0.00016006219084374607
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of students who have at least two friends and have grades higher than five.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9876168370246887,
            0.9858204126358032,
            0.00038478203350678086,
            0.000490986742079258,
            0.00038478203350678086,
            0.000490986742079258,
            0.00033764465479180217,
            0.0004368269583210349
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show all students who have GPA above 5 and have at least two friend, and display their names.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.02594699338078499,
            0.0062163034453988075,
            0.00014399434439837933,
            0.00012090785457985476,
            0.0005197926657274365,
            0.00025260564871132374,
            0.00144514802377671,
            0.0004902782384306192
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the names of the students who have a grade better than five and have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.22981463372707367,
            0.07955548912286758,
            0.0005481484113261104,
            0.00026370605337433517,
            0.00033652951242402196,
            0.00022759646526537836,
            0.00045624046470038593,
            0.00023374527518171817
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the list of students who has a grade above five and have at least two friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.09370152652263641,
            0.8752239942550659,
            0.0005655006971210241,
            0.0006045137997716665,
            0.0006409749039448798,
            0.020025331526994705,
            0.0009285348933190107,
            0.012001825496554375
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show all the student names whose grade is higher than 5 and have at least two friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.grade, Friend.friend_id",
            "select Highschooler.name, Highschooler.grade, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.13988502323627472,
            0.01329029817134142,
            0.0006454535759985447,
            0.00024191662669181824,
            0.00021664028463419527,
            0.0001238022232428193,
            0.00021664028463419527,
            0.0001238022232428193
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of students who have received grades higher than 5 and have at least two friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.07548816502094269,
            0.9072640538215637,
            0.0005209252703934908,
            0.0005657231085933745,
            0.00030524475732818246,
            0.0017030402086675167,
            0.0006789484177716076,
            0.0013151993043720722
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Names of highschoolers for whom there is a grade of more than five and they have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.14346085488796234,
            0.025693342089653015,
            0.0015496728010475636,
            0.0005550134228542447,
            0.0002454630739521235,
            0.00021591481345240027,
            0.0002222393377451226,
            0.00013179115194361657
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "The list of highschoolers who have a grade over five and have two or more friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.24791261553764343,
            0.9765010476112366,
            0.0007577582728117704,
            0.0004281786677893251,
            0.0005022495752200484,
            0.004531637765467167,
            0.0006049443036317825,
            0.0015908910427242517
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of high schoolers whose grades are higher than 5 and they have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.0167992040514946,
            0.00225052353926003,
            0.0004690556088462472,
            0.00023541443806607276,
            0.00019850231183227152,
            0.00015121370961423963,
            0.0003324799763504416,
            0.00016806744679342955
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me the names of those highschool students who get higher grades than over 5 and have more than two mates.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend Likes",
            "Highschooler Friend",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.4113928973674774,
            0.016817957162857056,
            0.0009393588989041746,
            0.0004396924050524831,
            0.0003280049713794142,
            0.00022650326718576252,
            0.0009393588989041746,
            0.0004396924050524831
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Return the names of high schoolers that have a grade of over 5 with two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9815678000450134,
            0.0004101388913113624,
            0.00036780358641408384,
            0.00013013998977839947,
            0.0005238059093244374,
            0.00011908124724868685,
            0.0006903025787323713,
            0.00010936269245576113
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the names of high schoolers who have a grade of over 5 and have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.0944451317191124,
            0.03526562452316284,
            0.0004535340704023838,
            0.00024278175260405988,
            0.00023578711261507124,
            0.00019166490528732538,
            0.0005139249260537326,
            0.0002427743311272934
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the number of Kyle's likes?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.name",
            "select count(Kyle's Likes.liked_id)",
            "select count(Kyle's likes)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9952966570854187,
            0.00022273531067185104,
            0.0002711104170884937,
            0.0012137334560975432,
            0.00016558817878831178,
            0.00010065947572002187,
            0.0013873721472918987,
            8.783472731010988e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the professional living in the State of Indiana or has done more than two treatments? List their ID, Last Name and Cell Phone.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Professionals.role_code, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.013369299471378326,
            0.0003842313017230481,
            0.00016329053323715925,
            8.826755947666243e-05,
            0.005366932600736618,
            0.0003783957799896598,
            0.0022895706351846457,
            0.0002355208562221378
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Please show the IDs, last names and cell phone numbers for the professional living in Indiana who does treatment with more than two treatments: -.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select t8.c2, Professionals.last_name, Professionals.cell_number",
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Treatments.dog_id, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.0469406358897686,
            8.077129314187914e-05,
            0.0006121110636740923,
            6.974821008043364e-05,
            0.5826761722564697,
            8.628774230601266e-05,
            0.0005042008124291897,
            7.403401104966179e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Which professional lives in the state of Indiana or has treated more than two patients or had their treatments performed on them? List his or her identification number, last name and cellular telephone.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select t8.c2, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.07180793583393097,
            0.7437133193016052,
            0.08000796288251877,
            0.5847604870796204,
            0.0006328041781671345,
            0.0017032372998073697,
            0.00027149065863341093,
            0.00043607616680674255
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find people with Indiana or performed procedures on two procedures. List their identification, last name and telephone number.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.home_phone",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select t8.c2, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Owners Professionals Treatments",
            "Treatment_Types Owners Professionals Treatments",
            "Sizes Owners Professionals Treatments",
            "Dogs Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.0004597796651069075,
            8.691853145137429e-05,
            0.0004665033193305135,
            8.061333210207522e-05,
            0.015911154448986053,
            0.00032072915928438306,
            0.0005179775762371719,
            8.136989345075563e-05
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show the last name and cell phone of the different professionals who live in the state of Indiana did treatment on more than two treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.last_name, Professionals.cell_number",
            "select Professionals.last_name, t66.c10",
            "select Professionals.last_name, Professionals.home_phone",
            "select Professionals.last_name, t06.c10"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9173634648323059,
            0.00014479042147286236,
            0.0008917081286199391,
            0.0001013355577015318,
            0.002214632462710142,
            8.420126687269658e-05,
            0.0009879390709102154,
            0.00011450018791947514
        ],
        "align_select": "select Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show all the dog names that have not been over $1000 for treating.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.cost_of_treatment",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Treatments.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Breeds Charges Sizes Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Owners Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.5706162452697754,
            0.8092443943023682,
            0.00024757988285273314,
            0.0014016506029292941,
            0.0003855799150187522,
            0.000540688110049814,
            0.0004163094563409686,
            0.000888095935806632
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "show the list of dogs whose treatments did not cost more than $1000 and give the names of these animals.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Treatments.professional_id",
            "select Dogs.name",
            "select Dogs.name, Treatments.treatment_type_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments"
        ],
        "align_scores": [
            0.0002903307613451034,
            0.00011147414625156671,
            0.0002688637760002166,
            9.846434841165319e-05,
            0.37878015637397766,
            0.0005953321233391762,
            0.00040693351184017956,
            0.00013249072071630508
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of dogs that have not cost more than $1000 in treatments.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Treatments.dog_id, Treatments.professional_id",
            "select Dogs.name, Treatments.dog_id, Dogs.abandoned_yn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments"
        ],
        "align_scores": [
            0.8743776679039001,
            0.5083763599395752,
            0.0002580182335805148,
            0.0006673609022982419,
            0.00013451270933728665,
            0.00011542454012669623,
            0.00013092988228891045,
            0.000134171437821351
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the name of the dog for which the owner has not spent more than $1000 for treatment.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Dogs.owner_id",
            "select Dogs.name, Dogs.age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Owners Dogs Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.01776244305074215,
            0.21585869789123535,
            0.0003725544083863497,
            0.001109947683289647,
            0.00017858808860182762,
            0.0006977368611842394,
            0.00014302931958809495,
            0.00020070884784217924
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the name of the dogs whose owners have not spent more than $1000 on treating their pets.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Dogs.owner_id",
            "select Dogs.name, Owners.first_name, Owners.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Owners Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Breeds Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.4670369327068329,
            0.6216303706169128,
            0.0005173104582354426,
            0.0006658390630036592,
            0.00025032804114744067,
            0.00059748679632321,
            0.00031250680331140757,
            0.0005590607761405408
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Name the dogs for which the owner has not spent more than $1000 on treatment.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Dogs.owner_id",
            "select Dogs.dog_id, Dogs.name",
            "select Dogs.name, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Owners Dogs Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.8417890667915344,
            0.027256937697529793,
            0.00026802605134435,
            0.00016875875007826835,
            0.0003147649113088846,
            0.0002189452643506229,
            0.0005120864952914417,
            0.0005851432797499001
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of the dogs whose owners have not spent more than $1000 on their care.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Dogs.owner_id",
            "select Dogs.name, Charges.charge_amount",
            "select Dogs.name, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Charges Dogs Treatments",
            "Charges Sizes Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Charges Dogs Professionals Treatments",
            "Charges Dogs"
        ],
        "align_scores": [
            0.6665733456611633,
            0.8950676321983337,
            0.0008629263029433787,
            0.00020913257321808487,
            0.0002514681254979223,
            0.00017925872816704214,
            0.000597654317971319,
            0.0003165778471156955
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name of the dogs for which the owner has not spent more than $1000 for treatment.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Dogs.breed_code",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Dogs.owner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Owners Dogs Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.8849595189094543,
            0.010564484633505344,
            0.00048071591299958527,
            0.00024558810400776565,
            0.0003784311411436647,
            0.0003836831310763955,
            0.0002195318229496479,
            0.00015038345009088516
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me owners of dogs from VA, their first names and dogs' names.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Dogs.name",
            "select Owners.first_name, Owners.last_name, Owners.state",
            "select Owners.first_name, Owners.last_name",
            "select Owners.first_name, Owners.last_name, Dogs.name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs",
            "Breeds Owners Dogs",
            "Dogs Owners Dogs"
        ],
        "align_scores": [
            0.0042354268953204155,
            0.00019652357150334865,
            0.00042667126399464905,
            0.0001508418790763244,
            0.0013728967169299722,
            0.00034721451811492443,
            0.0042354268953204155,
            0.00019652357150334865
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the first names of owners living in VA and the name of their dog.",
        "gold_select": "select Owners.first_name, Dogs.name",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name",
            "select Owners.first_name, Dogs.name",
            "select Owners.first_name, Owners.state",
            "select Owners.first_name, Owners.last_name, Dogs.name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.0004996795323677361,
            8.822262316243723e-05,
            0.9914605617523193,
            8.585087198298424e-05,
            0.00038909833529032767,
            8.391565643250942e-05,
            0.0001529139408376068,
            5.894820060348138e-05
        ],
        "align_select": "select Owners.first_name, Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all singers who are not French.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select singer.Name",
            "select distinct singer.Name, singer.Citizenship",
            "select distinct singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.07349714636802673,
            0.00015467529010493308,
            0.978179395198822,
            0.00012418378901202232,
            0.00023352117568720132,
            6.300499080680311e-05,
            0.00033202924532815814,
            6.112456321716309e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the list of singers who are not French.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select distinct singer.Name",
            "select distinct singer.Name, singer.Citizenship",
            "select singer.Name, singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9421853423118591,
            8.098933903966099e-05,
            0.03143686056137085,
            0.00010595759522402659,
            0.00016429665265604854,
            6.30046270089224e-05,
            0.0001737840793794021,
            6.59459110465832e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the singer that are not French citizen.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID",
            "select singer.Name, singer.Citizenship",
            "select distinct singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.822913408279419,
            0.05977749079465866,
            0.002197530120611191,
            0.015848560258746147,
            0.00016003166092559695,
            0.00011685136269079521,
            0.013810916803777218,
            0.020933547988533974
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "list the names of singers who are not French.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select distinct singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9866321682929993,
            9.634337766328827e-05,
            0.040481556206941605,
            0.00011152283695992082,
            0.00015494586841668934,
            6.037505590938963e-05,
            0.0001656491367612034,
            6.342129199765623e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which singer do not have the French nationality.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID",
            "select distinct singer.Name",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.4493757486343384,
            0.6824446320533752,
            0.05920026823878288,
            0.008693630807101727,
            0.06706306338310242,
            0.05362614989280701,
            0.00014196718984749168,
            0.0003095990978181362
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the singers whose citizenship is not French.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Singer_ID",
            "select singer.Name",
            "select distinct singer.Name",
            "select distinct singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.004916185047477484,
            0.0001052750667440705,
            0.9455516338348389,
            0.00011889018787769601,
            0.027785688638687134,
            0.00011144673044327646,
            0.00029134892974980175,
            6.772723281756043e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the list of the singer's birth years in either '48' or '49'.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Birth_Year",
            "select distinct singer.Birth_Year",
            "select count(*)",
            "select singer.Singer_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9388493895530701,
            0.0003377106331754476,
            0.028176039457321167,
            0.00017182546434924006,
            0.010874703526496887,
            0.0001307678030570969,
            0.0008410805021412671,
            0.00021682048100046813
        ],
        "align_select": "select singer.Birth_Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show distinct name of singer that has song sales greater than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select singer.Name, song.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9936908483505249,
            9.832595242187381e-05,
            0.8972675204277039,
            0.0002214083360740915,
            0.0001518241042504087,
            6.966445653233677e-05,
            0.00016818640870042145,
            6.973990093683824e-05
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of singer who have had more than 300K in song sales.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.7380333542823792,
            0.6185502409934998,
            0.00021826932788826525,
            0.00031963115907274187,
            0.00019003209308721125,
            0.00019333517411723733,
            0.0002720274787861854,
            0.0004754981491714716
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Distinct names of singers with song sales above 300k.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.Birth_Year",
            "select singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9964577555656433,
            0.00012235459871590137,
            0.00013746983313467354,
            6.666075205430388e-05,
            0.00013704693992622197,
            6.369561742758378e-05,
            0.8049026727676392,
            0.00021978357108309865
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show distinct names of the singers who have sold songs more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.Birth_Year",
            "select singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9918718338012695,
            0.003330145264044404,
            0.0001957730419235304,
            0.00018015215755440295,
            0.00017078335804399103,
            0.00016514761955477297,
            0.7006561756134033,
            0.8831850290298462
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show distinct names of singers that sell more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select singer.Name",
            "select distinct singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9952024221420288,
            0.0020972364582121372,
            0.00015150452964007854,
            7.45184879633598e-05,
            0.8915569186210632,
            0.01822023093700409,
            0.00013330251385923475,
            8.780106145422906e-05
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of the singers that have sold more than 300k.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID, singer.Name",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.8694643974304199,
            0.8401033282279968,
            0.000166743848240003,
            0.00025772687513381243,
            0.00024032348301261663,
            0.00046626993571408093,
            0.0001302924647461623,
            0.00016203205450437963
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of singers that have songs that have sold more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Birth_Year",
            "select song.Singer_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.8197168111801147,
            0.9852033853530884,
            0.00024673438747413456,
            0.00070410524494946,
            0.00014102138811722398,
            0.0002326151734450832,
            0.026407543569803238,
            0.41778644919395447
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show distinct names of singers whose songs have had sales more than 300k.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct song.Singer_ID",
            "select distinct singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9919397234916687,
            0.003041894407942891,
            0.00020509312162175775,
            0.0001555169146740809,
            0.013097853399813175,
            0.00178599136415869,
            0.00017051973554771394,
            0.00016397926083300263
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Names of the singers that have sold more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID, singer.Name",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.7595893144607544,
            0.8840969204902649,
            0.0001649935293244198,
            0.0002346925757592544,
            0.000250889512244612,
            0.00048808622523210943,
            0.0001277020783163607,
            0.00016656935622449964
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different names of the singers who have sold more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, singer.Birth_Year",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9910874962806702,
            0.00017562246648594737,
            0.0001236501702805981,
            7.634241774212569e-05,
            0.00018492061644792557,
            8.03948423708789e-05,
            0.00017313291027676314,
            7.142582762753591e-05
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Names of the singers who have sold more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.7540052533149719,
            0.8799730539321899,
            0.0001795471616787836,
            0.0002372151502640918,
            0.00013717834372073412,
            0.00017931738693732768,
            0.00015225775132421404,
            0.0001959650544449687
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different names of the singers who have a sales of more than 300k.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.Birth_Year",
            "select count(distinct singer.Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9901413321495056,
            0.00019729054474737495,
            0.00019442364282440394,
            8.033905032789335e-05,
            0.00013172419858165085,
            7.737833948340267e-05,
            0.002516081091016531,
            8.724396320758387e-05
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The different names of the singers who have sold more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select distinct singer.Name",
            "select distinct singer.Name, song.Singer_ID",
            "select distinct singer.Name, singer.Birth_Year",
            "select count(distinct singer.Name)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9928601384162903,
            0.00014490009925793856,
            0.00017664910410530865,
            7.56392182665877e-05,
            0.00013355747796595097,
            7.112770981620997e-05,
            0.000924431427847594,
            8.1005557149183e-05
        ],
        "align_select": "select distinct singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "A list for the names of the singers who have sold more than 300K.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Birth_Year",
            "select song.Singer_ID, singer.Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.48181915283203125,
            0.6579756736755371,
            0.00020155574020463973,
            0.0002782993542496115,
            0.0001438601320842281,
            0.000207662204047665,
            0.0002715703740250319,
            0.00048370540025644004
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Names of the singers who have sold more than 300,000.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, song.Sales"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.7597806453704834,
            0.8658643364906311,
            0.00020795801538042724,
            0.0002476353256497532,
            0.00016626057913526893,
            0.00021504903270397335,
            0.0003931042447220534,
            0.0007728968630544841
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The name of the feature type used to describe Air Conditioner.",
        "gold_select": "select Ref_Feature_Types.feature_type_name",
        "select_candidates": [
            "select Ref_Feature_Types.feature_type_name",
            "select Ref_Feature_Types.feature_type_name, Other_Available_Features.feature_name",
            "select Ref_Feature_Types.feature_type_name, Other_Available_Features.feature_name, Other_Available_Features.feature_description",
            "select Ref_Feature_Types.feature_type_code, Ref_Feature_Types.feature_type_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Feature_Types Other_Available_Features",
        "table_candidates": [
            "Ref_Feature_Types Other_Available_Features",
            "Ref_Feature_Types Other_Available_Features Other_Property_Features",
            "Ref_Feature_Types Other_Available_Features Properties",
            "Ref_Feature_Types Other_Available_Features Properties Other_Property_Features"
        ],
        "align_scores": [
            0.9954742789268494,
            8.934847573982552e-05,
            0.00015665996761526912,
            6.312526966212317e-05,
            0.00011248685041209683,
            6.340513937175274e-05,
            0.00018166008521802723,
            7.138877117540687e-05
        ],
        "align_select": "select Ref_Feature_Types.feature_type_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the feature type name of air condition.",
        "gold_select": "select Ref_Feature_Types.feature_type_name",
        "select_candidates": [
            "select Ref_Feature_Types.feature_type_name",
            "select Ref_Feature_Types.feature_type_code, Ref_Feature_Types.feature_type_name",
            "select Ref_Feature_Types.feature_type_name, Other_Available_Features.feature_name",
            "select Ref_Feature_Types.feature_type_name, Other_Available_Features.feature_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Feature_Types Other_Available_Features",
        "table_candidates": [
            "Ref_Feature_Types Other_Available_Features",
            "Ref_Feature_Types Ref_Property_Types Other_Available_Features"
        ],
        "align_scores": [
            0.9965014457702637,
            9.607254469301552e-05,
            0.00016204935673158616,
            7.629292667843401e-05,
            0.00016445698565803468,
            6.356539961416274e-05,
            0.00015031234943307936,
            6.625161040574312e-05
        ],
        "align_select": "select Ref_Feature_Types.feature_type_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What's the named feature type of Feature Air Conditioning.",
        "gold_select": "select Ref_Feature_Types.feature_type_name",
        "select_candidates": [
            "select Ref_Feature_Types.feature_type_name",
            "select Ref_Feature_Types.feature_type_code, Ref_Feature_Types.feature_type_name",
            "select Ref_Feature_Types.feature_type_name, Other_Available_Features.feature_name",
            "select Ref_Feature_Types.feature_type_code_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Ref_Feature_Types Other_Available_Features",
        "table_candidates": [
            "Ref_Feature_Types Other_Available_Features"
        ],
        "align_scores": [
            0.9961090683937073,
            0.00010145370470127091,
            0.0001912647276185453,
            7.332186214625835e-05,
            0.00018938648281618953,
            6.80631201248616e-05,
            0.9855257868766785,
            8.036150393309072e-05
        ],
        "align_select": "select Ref_Feature_Types.feature_type_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Property whose name is whether a house or apartment with rooms of more than one.",
        "gold_select": "select Properties.property_name",
        "select_candidates": [
            "select Properties.property_name",
            "select Properties.property_name--depending-on-whether-it's-an-apartment-or-a-house",
            "select Properties.property_name--depending-on-whether-it's-apartment-or-house",
            "select distinct Properties.property_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties"
        ],
        "align_scores": [
            0.9564521908760071,
            0.00780738890171051,
            0.005273501388728619,
            0.00014165387256070971,
            0.004798399284482002,
            0.0001622342533664778,
            0.016271980479359627,
            0.00015148358943406492
        ],
        "align_select": "select Properties.property_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Properties whose name is either house or apartment, have more than one room.",
        "gold_select": "select Properties.property_name",
        "select_candidates": [
            "select Properties.property_name",
            "select Properties.property_name, Properties.room_count",
            "select Properties.property_name, Properties.property_type_code",
            "select Properties.property_name, Properties.property_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties"
        ],
        "align_scores": [
            0.336225688457489,
            0.0005162612069398165,
            0.0003101338224951178,
            0.00010028410179074854,
            0.00034210944431833923,
            9.798721293918788e-05,
            0.00040614797035232186,
            0.00012670320575125515
        ],
        "align_select": "select Properties.property_name",
        "align_structure": "SELECT-FROM-WHERE"
    }
]