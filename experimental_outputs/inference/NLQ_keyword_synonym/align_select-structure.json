[
    {
        "question": "Give me the name of every singer, country and age starting from the oldest.",
        "gold_select": "select singer.Name, singer.Country, singer.Age",
        "select_candidates": [
            "select singer.Name, singer.Country, singer.Age",
            "select singer.Name, singer.Country & singer.Age",
            "select singer.Name, singer.Country., singer.Age",
            "select singer.Name, singer.Country, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9928874373435974,
            0.9928874373435974,
            0.9843971133232117,
            0.9843971133232117,
            0.15360917150974274,
            0.15360917150974274,
            0.9928874373435974,
            0.9928874373435974
        ],
        "align_select": "select singer.Name, singer.Country, singer.Age",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all the songs by singer who have been around longer than the average age.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Age",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8791131973266602,
            0.0001894654124043882,
            0.00028234050842002034,
            7.750195800326765e-05,
            0.00021469706553034484,
            7.000195910222828e-05,
            0.00021515446132980287,
            7.16442518751137e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me all the locations and names for stadiums with capacities from 5000 to 10000.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0, stadium.Location, stadium.Name",
            "select stadium.Location, stadium.Name, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9944739937782288,
            0.00015967528452165425,
            0.035470690578222275,
            9.80771510512568e-05,
            0.0003719278611242771,
            6.274513725657016e-05,
            0.00017034246411640197,
            6.324046989902854e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the location and name for all stadiums with a capacity of 5000 to 10000.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0, stadium.Location, stadium.Name",
            "select t0.c 1, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9944341778755188,
            0.00018707913113757968,
            0.02233428880572319,
            0.00010852828563656658,
            0.0003735498175956309,
            6.653399032074958e-05,
            0.0005502267740666866,
            8.491429616697133e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the median, minimum, and maximum age of all singers from France.",
        "gold_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "select_candidates": [
            "select avg(singer.Age), min(singer.Age), max(singer.Age)",
            "select singer.Age, min(singer.Age), max(singer.Age)",
            "select median(singer.Age), min(singer.Age), max(singer.Age)",
            "select singer.Song_Name, min(singer.Age), max(singer.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.00042062572902068496,
            7.017412281129509e-05,
            0.0003149266995023936,
            8.125699241645634e-05,
            0.002233542036265135,
            8.081251144176349e-05,
            0.00044273154344409704,
            8.909588359529153e-05
        ],
        "align_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the year that had the largest number of concerts?",
        "gold_select": "select concert.Year",
        "select_candidates": [
            "select concert.Year",
            "select concert.Year, concert.Stadium_ID",
            "select concert.Stadium_ID, concert.Year",
            "select concert.Year, t2.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert"
        ],
        "align_scores": [
            0.991961658000946,
            5.7286437368020415e-05,
            0.00014166398614179343,
            5.36176776222419e-05,
            0.00019890641851816326,
            6.144167127786204e-05,
            0.0006024870672263205,
            6.227195990504697e-05
        ],
        "align_select": "select concert.Year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the list of years that have the greatest number of concerts.",
        "gold_select": "select concert.Year",
        "select_candidates": [
            "select concert.Year",
            "select concert.Year, concert.Stadium_ID",
            "select concert.Year, t2.c5",
            "select concert.Year, t2.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert"
        ],
        "align_scores": [
            0.983726441860199,
            9.374626097269356e-05,
            0.00013222784036770463,
            5.338543633115478e-05,
            0.0006278707878664136,
            6.133745046099648e-05,
            0.0006447312189266086,
            6.0759364714613184e-05
        ],
        "align_select": "select concert.Year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the stadium name and capacity with the largest number of concerts in 2014 or later.",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, stadium.Highest",
            "select stadium.Name.c2, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, stadium.Average"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9891276955604553,
            0.00019611907191574574,
            0.00024880276760086417,
            6.762642442481592e-05,
            0.0005141019937582314,
            7.697180262766778e-05,
            0.0002596761623863131,
            7.206956797745079e-05
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the stadium name and capacity with the highest number of concerts since 2014.",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, stadium.Highest",
            "select stadium.Location, stadium.Capacity",
            "select stadium.Name.c3, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9864382743835449,
            0.9857082366943359,
            0.0002732184366323054,
            0.00023452455934602767,
            0.0011124670272693038,
            0.001211963128298521,
            0.007287269923835993,
            0.0070132967084646225
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the stadium name and capacity with the most concerts since 2014?",
        "gold_select": "select stadium.Name, stadium.Capacity",
        "select_candidates": [
            "select stadium.Name, stadium.Capacity",
            "select stadium.Name, stadium.Capacity, stadium.Average",
            "select stadium.Name.c2, stadium.Capacity",
            "select stadium.Name.c3, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert"
        ],
        "align_scores": [
            0.9882075190544128,
            0.00022243142302613705,
            0.00022976922628004104,
            7.502058724639937e-05,
            0.0005438046646304429,
            8.738142787478864e-05,
            0.014405743218958378,
            0.00011188072676304728
        ],
        "align_select": "select stadium.Name, stadium.Capacity",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the largest capacity and the average capacity of all stadiums?",
        "gold_select": "select max(stadium.Capacity), stadium.Average",
        "select_candidates": [
            "select max(stadium.Capacity), avg(stadium.Capacity)",
            "select stadium.Highest, stadium.Average",
            "select stadium.Capacity, stadium.Highest, stadium.Average",
            "select stadium.Capacity, stadium.Highest"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9949753284454346,
            9.706097625894472e-05,
            0.9748230576515198,
            0.002513311104848981,
            0.00026322423946112394,
            0.00014796596951782703,
            0.0008915212820284069,
            0.00018571349210105836
        ],
        "align_select": "select max(stadium.Capacity), avg(stadium.Capacity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the largest capacity and average of all stadiums?",
        "gold_select": "select max(stadium.Capacity), stadium.Average",
        "select_candidates": [
            "select max(stadium.Capacity), avg(stadium.Capacity)",
            "select max(stadium.Capacity), avg(stadium.Average)",
            "select stadium.Capacity, avg(stadium.Average)",
            "select stadium.Capacity, stadium.Average"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9945571422576904,
            0.0007809258531779051,
            0.002544594230130315,
            0.00017233741527888924,
            0.00032334771822206676,
            0.00012712858733721077,
            0.004741946700960398,
            0.00021118266158737242
        ],
        "align_select": "select max(stadium.Capacity), avg(stadium.Capacity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What was the year that had the largest number of concerts?",
        "gold_select": "select concert.Year",
        "select_candidates": [
            "select concert.Year",
            "select concert.Year, concert.Stadium_ID",
            "select concert.Stadium_ID, concert.Year",
            "select concert.Year, concert.concert_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert"
        ],
        "align_scores": [
            0.990247905254364,
            5.670649989042431e-05,
            0.00013833754928782582,
            5.35521685378626e-05,
            0.000191672399523668,
            6.15272656432353e-05,
            0.00019093201262876391,
            5.57872663193848e-05
        ],
        "align_select": "select concert.Year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What year has the most concerts?",
        "gold_select": "select concert.Year",
        "select_candidates": [
            "select concert.Year",
            "select concert.Year, concert.Stadium_ID",
            "select concert.Stadium_ID, concert.Year",
            "select concert.Year, concert.concert_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert"
        ],
        "align_scores": [
            0.9951171875,
            5.227125438977964e-05,
            0.00012277558562345803,
            5.111009886604734e-05,
            0.0001717951672617346,
            5.7782206567935646e-05,
            0.00016929708363022655,
            5.309746120474301e-05
        ],
        "align_select": "select concert.Year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "In which year did most concerts take place?",
        "gold_select": "select concert.Year",
        "select_candidates": [
            "select concert.Year",
            "select concert.Year, concert.Stadium_ID",
            "select concert.Stadium_ID, concert.Year",
            "select concert.Year, concert.concert_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert"
        ],
        "align_scores": [
            0.9918993711471558,
            6.799111724831164e-05,
            0.0001543302641948685,
            5.259421595837921e-05,
            0.000316052814014256,
            5.4462816478917375e-05,
            0.000302661006571725,
            5.2451767260208726e-05
        ],
        "align_select": "select concert.Year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "which has the most concerts in a given year?",
        "gold_select": "select concert.Year",
        "select_candidates": [
            "select concert.Year",
            "select concert.concert_Name, concert.Year",
            "select concert.Year, concert.concert_Name",
            "select concert.concert_ID, concert.concert_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "concert",
        "table_candidates": [
            "concert"
        ],
        "align_scores": [
            0.9906983971595764,
            8.330905984621495e-05,
            0.00022776256082579494,
            5.836897616973147e-05,
            0.0001735828845994547,
            5.6446770031470805e-05,
            0.0004710928478743881,
            6.984984793234617e-05
        ],
        "align_select": "select concert.Year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which countries have singers who are over 40 years old, and have singers who are under 30 years old?",
        "gold_select": "select singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select singer.Country, singer.Song_Name",
            "select singer.Country, singer.Age",
            "select singer.Country (singer.Age), singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9300857782363892,
            0.9929446578025818,
            0.0001136970313382335,
            0.00020085208234377205,
            0.00018959860608447343,
            0.00024579447926953435,
            0.00014454888878390193,
            0.00017029648006428033
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the countries where singers over age 40 and under 30 are from.",
        "gold_select": "select singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select singer.Country, singer.Age",
            "select singer.Country for both (singer.Age), (singer.Is_male)",
            "select singer.Country for both singer.Age, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9948352575302124,
            0.9558867812156677,
            0.00021996554278302938,
            0.0001461667998228222,
            0.00016002097981981933,
            0.00015284119581338018,
            0.0001577798102516681,
            0.00017508691234979779
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the countries where a singer who is over 40 and another who is under 30 are from.",
        "gold_select": "select singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select singer.Country, singer.Age",
            "select singer.Country, singer.Song_Name",
            "select singer.Country, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9937923550605774,
            0.9937923550605774,
            0.0002983089361805469,
            0.0002983089361805469,
            0.00015521958994213492,
            0.00015521958994213492,
            0.00021542827016673982,
            0.00021542827016673982
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of concerts that have taken place at the stadium with the biggest capacity.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Name, stadium.Capacity",
            "select count(*), stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.8670327067375183,
            0.9311365485191345,
            0.17019805312156677,
            0.001939816283993423,
            0.00041949652950279415,
            0.00020365597447380424,
            0.0031945626251399517,
            0.0003461141895968467
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many concerts occurred in the stadium with the highest capacity?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select count(*), stadium.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.9649505019187927,
            0.8723227381706238,
            0.001409111195243895,
            0.0171648059040308,
            0.0003338375245220959,
            0.0016276186797767878,
            0.0003894970868714154,
            0.002886115340515971
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find all songs sung by a singer older than the average age.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Is_male",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9589861631393433,
            0.00014140245912130922,
            0.00021833238133694977,
            6.406079774023965e-05,
            0.000174831657204777,
            6.751855107722804e-05,
            0.0002063364809146151,
            6.452621164498851e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the song by singers that are older than the average?",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Age",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9734013080596924,
            8.991919457912445e-05,
            0.00017895986093208194,
            6.40378930256702e-05,
            0.00013823706831317395,
            5.7612745877122506e-05,
            0.00017597766418475658,
            5.616321868728846e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all songs named after singers whose average age is greater than average.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Age",
            "select singer.Name, singer.Song_Name",
            "select singer.Song_Name, avg(singer.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9274724721908569,
            9.079131268663332e-05,
            0.0005900846445001662,
            6.615526945097372e-05,
            0.0016848271479830146,
            6.412295624613762e-05,
            0.0035393103025853634,
            7.780481973895803e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Display all songs by singers over the average age.",
        "gold_select": "select singer.Song_Name",
        "select_candidates": [
            "select singer.Song_Name",
            "select singer.Song_Name, singer.Song_release_year",
            "select singer.Song_Name, singer.Age",
            "select singer.Song_Name, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9827699661254883,
            9.487264469498768e-05,
            0.00013739602582063526,
            5.888314626645297e-05,
            0.0002610215451568365,
            6.481976743089035e-05,
            0.0001808529777918011,
            5.9831243561347947e-05
        ],
        "align_select": "select singer.Song_Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the different countries with singers over 20 years old.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select distinct singer.Country",
            "select count(distinct singer.Country)",
            "select distinct singer.Country, singer.Age",
            "select distinct singer.Country, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9764639139175415,
            0.001834418741054833,
            0.0017614647513255477,
            9.227627015206963e-05,
            0.00014189181092660874,
            7.542731327703223e-05,
            0.00021591089898720384,
            8.786673424765468e-05
        ],
        "align_select": "select distinct singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out what the different countries have singers older than twenty years old.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select distinct singer.Country",
            "select count(distinct singer.Country)",
            "select singer.Country",
            "select distinct singer.Country, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9610679745674133,
            0.003014638554304838,
            0.00841742567718029,
            0.00016940510249696672,
            0.6513855457305908,
            0.9507554173469543,
            0.000151707194163464,
            0.00011224447371205315
        ],
        "align_select": "select distinct singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the countries with singers older than 20.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select distinct singer.Country",
            "select singer.Country, singer.Age",
            "select singer.Country, singer.Is_male"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9455218315124512,
            0.9849389791488647,
            0.0650288313627243,
            0.0002104742598021403,
            0.00015554093988612294,
            0.00010891310375882313,
            0.00013841369946021587,
            0.0002530024212319404
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the list of countries with singers older than twenty?",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select distinct singer.Country",
            "select list(singer.Country)",
            "select the singer.Country"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8754620552062988,
            0.9903054237365723,
            0.15470245480537415,
            0.00040568551048636436,
            0.003983720671385527,
            0.000829256430733949,
            0.0012914201943203807,
            0.0014525590231642127
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the countries that have singers older than twenty years old.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select distinct singer.Country",
            "select count(distinct singer.Country)",
            "select singer.Country, singer.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8141002655029297,
            0.980930745601654,
            0.17216643691062927,
            0.0006058929138816893,
            0.007867508567869663,
            0.00010885860683629289,
            0.00021452599321492016,
            0.00012706338020507246
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all countries and show me the total count of singers in each country.",
        "gold_select": "select singer.Country, count(*)",
        "select_candidates": [
            "select singer.Country, count(*)",
            "select singer.Country, count(*), singer.Singer_ID",
            "select count(*), singer.Country",
            "select singer.Country, count(*), singer.Song_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9956086277961731,
            0.0002177236892748624,
            0.00014239191659726202,
            8.883221744326875e-05,
            0.9951217770576477,
            0.00025004177587106824,
            0.0001279516873182729,
            0.00010087827104143798
        ],
        "align_select": "select singer.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are all countries where singers over the age of 20 are from?",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select distinct singer.Country",
            "select singer.Country",
            "select distinct singer.Country, singer.Age",
            "select distinct singer.Country, singer.Is_male"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9513158202171326,
            0.0005807793349958956,
            0.7588502168655396,
            0.00029480530065484345,
            0.00014626006304752082,
            7.240567356348038e-05,
            0.0002303454530192539,
            7.598217780468985e-05
        ],
        "align_select": "select distinct singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are all the countries in which singers over 20 years old are from?.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select distinct singer.Country",
            "select singer.Country",
            "select count(distinct singer.Country)",
            "select distinct singer.Country, singer.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8579990863800049,
            0.00031136092729866505,
            0.6553952097892761,
            0.00021339685190469027,
            0.022626079618930817,
            7.334935071412474e-05,
            0.00014391638978850096,
            6.372173083946109e-05
        ],
        "align_select": "select distinct singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the countries where singers are over 20 years old.",
        "gold_select": "select distinct singer.Country",
        "select_candidates": [
            "select singer.Country",
            "select distinct singer.Country",
            "select count(distinct singer.Country)",
            "select singer.Country, singer.Age"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.7984845638275146,
            0.8627076148986816,
            0.7232193350791931,
            0.00022775061370339245,
            0.009985596872866154,
            0.0001223818981088698,
            0.00015893705131020397,
            0.00011607242049649358
        ],
        "align_select": "select singer.Country",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the numbers of concerts that occurred in the stadium with the largest capacity.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Stadium_ID",
            "select concert.Stadium_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.774137556552887,
            0.9549137353897095,
            0.17308859527111053,
            0.0035773166455328465,
            0.004295629449188709,
            0.00044637470273301005,
            0.9691804051399231,
            0.07617206126451492
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the number of concerts held in the largest stadium.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select avg(concert.concert_Name)",
            "select count(*), stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.5210747122764587,
            0.9868513941764832,
            0.012176524847745895,
            0.0014171305811032653,
            0.00032213967642746866,
            0.0005473368219099939,
            0.0008834266918711364,
            0.00022812616953160614
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the number of concerts that happened in the stadium with the largest capacity.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Name, stadium.Capacity",
            "select concert.Stadium_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.8309733867645264,
            0.9691455364227295,
            0.03399398922920227,
            0.0018246050458401442,
            0.00033958832500502467,
            0.0001802590413717553,
            0.8493444919586182,
            0.010572195053100586
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the number of concerts that have taken place in the stadium with the largest capacity.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), stadium.Name",
            "select count(*), stadium.Name, stadium.Capacity",
            "select count(*), stadium.Stadium_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "stadium concert",
        "table_candidates": [
            "stadium concert",
            "stadium singer concert"
        ],
        "align_scores": [
            0.8815292119979858,
            0.951793372631073,
            0.020397255197167397,
            0.002473079366609454,
            0.0004299705906305462,
            0.00022959208581596613,
            0.0025097893085330725,
            0.00043009311775676906
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the names and count of concerts performed by each singer.",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select singer.Name, count(*), concert.concert_Name",
            "select singer.Name, count(*)",
            "select singer.Name, count(*), singer_in_concert.Singer_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer concert singer_in_concert",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9921408891677856,
            0.00015291772433556616,
            0.991293728351593,
            0.00015843955043237656,
            0.9921408891677856,
            0.00015291772433556616,
            0.0004820300091523677,
            9.08956935745664e-05
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List singers and their concert count for each.",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select singer_in_concert.Singer_ID, count(*)",
            "select concert.concert_Name, count(*)",
            "select singer.Singer_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer singer_in_concert",
            "singer concert singer_in_concert",
            "concert singer_in_concert"
        ],
        "align_scores": [
            0.9952512979507446,
            0.0001503338571637869,
            0.7332478761672974,
            0.00018616292800288647,
            0.0007319796131923795,
            0.00020394552848301828,
            0.019118651747703552,
            0.00024013014626689255
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the list of singer names and total concerts for each singer.",
        "gold_select": "select singer.Name, count(*)",
        "select_candidates": [
            "select singer.Name, count(*)",
            "select singer.Name, sum(concert.concert_Name)",
            "select singer.Name, sum(concert.concert_ID)",
            "select singer.Name, count(*), concert.concert_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer singer_in_concert",
        "table_candidates": [
            "singer concert singer_in_concert",
            "singer singer_in_concert"
        ],
        "align_scores": [
            0.9895128607749939,
            0.0002080651029245928,
            0.006174043286591768,
            0.00014539349649567157,
            0.04281293973326683,
            0.00018570994143374264,
            0.0011958656832575798,
            0.00012078478903276846
        ],
        "align_select": "select singer.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the youngest, the oldest, and the middle age of a group of French singers?",
        "gold_select": "select avg(singer.Age), min(singer.Age), max(singer.Age)",
        "select_candidates": [
            "select min(singer.Age), max(singer.Age), min(singer.Age)",
            "select singer.Singer_ID, singer.Country, singer.Age",
            "select singer.Singer_ID, singer.Age, singer.Is_male",
            "select singer.Singer_ID, singer.Name, singer.Age"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.00021880523127038032,
            0.0009653547895140946,
            0.0005575192044489086,
            0.00020858514471910894,
            0.0002649838861543685,
            0.00011751274723792449,
            0.0003323440032545477,
            0.00018204451771453023
        ],
        "align_select": "select min(singer.Age), max(singer.Age), min(singer.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average capacity and the largest capacity for all stadiums?",
        "gold_select": "select avg(stadium.Capacity), max(stadium.Capacity)",
        "select_candidates": [
            "select avg(stadium.Capacity), max(stadium.Capacity)",
            "select avg(stadium.Average), max(stadium.Capacity)",
            "select stadium.Average, stadium.Capacity",
            "select stadium.Average, stadium.Highest"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9950843453407288,
            8.834764594212174e-05,
            0.0005589150241576135,
            9.109779784921557e-05,
            0.005434324033558369,
            0.036898910999298096,
            0.9920920133590698,
            0.0005360277718864381
        ],
        "align_select": "select avg(stadium.Capacity), max(stadium.Capacity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the average capacity and the largest capacity for all the stadiums?",
        "gold_select": "select avg(stadium.Capacity), max(stadium.Capacity)",
        "select_candidates": [
            "select avg(stadium.Capacity), max(stadium.Capacity)",
            "select avg(stadium.Average), max(stadium.Capacity)",
            "select stadium.Average, stadium.Highest",
            "select stadium.Average, stadium.Capacity"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9939985275268555,
            8.874550258042291e-05,
            0.0005837528733536601,
            9.424163727089763e-05,
            0.9837892651557922,
            0.0003190551360603422,
            0.017508327960968018,
            0.12923815846443176
        ],
        "align_select": "select avg(stadium.Capacity), max(stadium.Capacity)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the locations and names of stations with capacity of 5000 to 10,000.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select t0.c 1, stadium.Name",
            "select stadium.Location, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9880727529525757,
            0.0003318627714179456,
            0.012689420022070408,
            0.00011330653069308028,
            0.00040085980435833335,
            7.380281022051349e-05,
            0.9880727529525757,
            0.0003318627714179456
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the locations and names of all stations in range from 5000-10,000 capacity.",
        "gold_select": "select stadium.Location, stadium.Name",
        "select_candidates": [
            "select stadium.Location, stadium.Name",
            "select stadium.Location., stadium.Name",
            "select stadium.Location, stadium.Name",
            "select t0.c 1, stadium.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "stadium",
        "table_candidates": [
            "stadium"
        ],
        "align_scores": [
            0.9912312626838684,
            0.00017790943093132228,
            0.010725894011557102,
            0.00010774850670713931,
            0.9912312626838684,
            0.00017790943093132228,
            0.00041367931407876313,
            8.475954382447526e-05
        ],
        "align_select": "select stadium.Location, stadium.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id and weight of every pet that has more than 1 year of age?",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetType, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.585671067237854,
            0.00020205140754114836,
            0.003548848209902644,
            0.00011005483247572556,
            0.000965489074587822,
            0.00011727911623893306,
            0.0006085362401790917,
            0.00011609035573201254
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id and weight of all pets that are more than 1 year old?",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetID, Pets.weight,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.6207160949707031,
            0.00025409559020772576,
            0.0030833506025373936,
            0.00012179004988865927,
            0.001378396525979042,
            0.0001354639243800193,
            0.0029907110147178173,
            8.097899262793362e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets weigh more than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9937345385551453,
            0.0007522592204622924,
            0.00032509624725207686,
            0.012522849254310131,
            0.00032509624725207686,
            0.012522849254310131,
            0.00022847486252430826,
            0.16462647914886475
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of pet animals above 10 pounds.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType",
            "select count(*) denoted by Pets.PetID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9905885457992554,
            0.0002969460329040885,
            0.0002945991000160575,
            0.0013918590266257524,
            0.00028462702175602317,
            0.07732287794351578,
            0.0009166555246338248,
            0.00018079037545248866
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets are larger than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9937242865562439,
            0.00033379803062416613,
            0.00023877335479483008,
            0.00014644076873082668,
            0.00023877335479483008,
            0.00014644076873082668,
            0.00020751592819578946,
            0.0006639478378929198
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets have a weight larger than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9910716414451599,
            0.0008228284423239529,
            0.0003572821442503482,
            0.0004069193673785776,
            0.0003572821442503482,
            0.0004069193673785776,
            0.00026647659251466393,
            0.0031081761699169874
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the first name and gender of all students who have two or more pets.",
        "gold_select": "select Student.Fname, Student.Sex",
        "select_candidates": [
            "select Student.Fname, Student.Sex",
            "select Student.StuID, Student.Fname, Student.Sex",
            "select distinct Student.Fname, Student.Sex",
            "select Student.LName, Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Student Has_Pet",
            "Student Pets"
        ],
        "align_scores": [
            0.9938375353813171,
            9.308484004577622e-05,
            0.00019598354992922395,
            6.473415851360187e-05,
            0.0031477175652980804,
            6.625053356401622e-05,
            0.000701225595548749,
            7.175310020102188e-05
        ],
        "align_select": "select Student.Fname, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the name and gender of every student who has two or more pets.",
        "gold_select": "select Student.Fname, Student.Sex",
        "select_candidates": [
            "select Student.Fname, Student.Sex",
            "select Student.LName, Student.Fname, Student.Sex",
            "select Student.Fname, Student.Age, Student.Sex",
            "select Student.StuID, Student.Fname, Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Student Has_Pet",
            "Student Pets"
        ],
        "align_scores": [
            0.9246309399604797,
            9.767665324034169e-05,
            0.9681697487831116,
            8.222156611736864e-05,
            0.0001478949998272583,
            5.384666656027548e-05,
            0.0002643384214024991,
            6.571150879608467e-05
        ],
        "align_select": "select Student.Fname, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the first name and gender of students who have at least two pets.",
        "gold_select": "select Student.Fname, Student.Sex",
        "select_candidates": [
            "select Student.Fname, Student.Sex",
            "select Student.StuID, Student.Fname, Student.Sex",
            "select distinct Student.Fname, Student.Sex",
            "select Student.LName, Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Student Has_Pet",
            "Student Pets"
        ],
        "align_scores": [
            0.9941803216934204,
            8.637773134978488e-05,
            0.0001885180827230215,
            6.226210825843737e-05,
            0.00262687960639596,
            5.863905607839115e-05,
            0.0007755683618597686,
            7.16592840035446e-05
        ],
        "align_select": "select Student.Fname, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the first name and gender of students that own two or more pets?",
        "gold_select": "select Student.Fname, Student.Sex",
        "select_candidates": [
            "select Student.Fname, Student.Sex",
            "select Student.StuID, Student.Fname, Student.Sex",
            "select Student.LName, Student.Sex",
            "select Student.Sex, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.9912828207015991,
            0.00011364565580151975,
            0.00019618788792286068,
            6.755589856766164e-05,
            0.0007739109569229186,
            9.231799049302936e-05,
            0.9915968775749207,
            0.0001327714853687212
        ],
        "align_select": "select Student.Fname, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the first name and gender of students who own at least two pets.",
        "gold_select": "select Student.Fname, Student.Sex",
        "select_candidates": [
            "select Student.Fname, Student.Sex",
            "select Student.StuID, Student.Fname, Student.Sex",
            "select distinct Student.Fname, Student.Sex",
            "select Student.LName, Student.Sex"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet",
            "Student Has_Pet Pets",
            "Student Pets"
        ],
        "align_scores": [
            0.9880651831626892,
            9.95528171188198e-05,
            0.00016727030742913485,
            6.288757867878303e-05,
            0.0018220830243080854,
            6.931602547410876e-05,
            0.0009074636618606746,
            8.456376963295043e-05
        ],
        "align_select": "select Student.Fname, Student.Sex",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the number of pets owned by students who are aged greater than 20.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9564723968505859,
            0.0006454422255046666,
            0.0003302125260233879,
            0.00045832301839254797,
            0.00011022118997061625,
            0.0003258649376221001,
            0.00031779767596162856,
            0.0056882575154304504
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of pets owned by students who are at least 21 years old.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(distinct Has_Pet.PetID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9674347043037415,
            0.0005073968204669654,
            0.00030532825621776283,
            0.00041313961264677346,
            0.00011580476711969823,
            0.00021758423827122897,
            0.2408013641834259,
            0.0016345327021554112
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of pets owned by students aged over 20 years old.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9768650531768799,
            0.002891609678044915,
            0.00028987217228859663,
            0.0003281588142272085,
            0.00010012996062869206,
            0.0001192678464576602,
            0.00026989722391590476,
            0.00403260625898838
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the total count of pets owned by older-than-20 students.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9844762682914734,
            0.0006471376400440931,
            0.000278778956271708,
            0.0002521602436900139,
            0.00011161753354826942,
            0.00011544885637704283,
            0.0002974946692120284,
            0.0021958204451948404
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the total number of pets owned by students who are at least 21 years old.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9678970575332642,
            0.0023861692752689123,
            0.00033897426328621805,
            0.000547310512047261,
            0.00012081242311978713,
            0.00018707200069911778,
            0.0003126378869637847,
            0.005397425033152103
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the total count of pets for each student who has pet and student id.",
        "gold_select": "select count(*), Student.StuID",
        "select_candidates": [
            "select count(*), Has_Pet.StuID",
            "select Has_Pet.StuID, count(*)",
            "select sum(Has_Pet.PetID), Has_Pet.StuID",
            "select counts(*), Has_Pet.StuID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Has_Pet",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9363304376602173,
            0.0002903346612583846,
            0.9785118699073792,
            0.00029642388108186424,
            0.0008118288242258132,
            0.00011788075062213466,
            0.0014231449458748102,
            0.0001411288685631007
        ],
        "align_select": "select count(*), Has_Pet.StuID",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the largest weight for each type of pet? Find the weight and pet type.",
        "gold_select": "select max(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select max(Pets.weight), Pets.PetType",
            "select Pets.weight, Pets.PetType",
            "select max(Pets.weight), max(Pets.PetType), Pets.PetType",
            "select maximum(Pets.weight), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.982839047908783,
            0.0001508835848653689,
            0.9676177501678467,
            0.9860178232192993,
            0.00046767809544689953,
            9.624035010347143e-05,
            0.0013639007229357958,
            0.00010283269512001425
        ],
        "align_select": "select max(Pets.weight), Pets.PetType",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the largest weight and the type for each pet type?",
        "gold_select": "select max(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select max(Pets.weight), Pets.PetType",
            "select max(Pets.weight), Pets.PetType, min(Pets.weight)",
            "select min(Pets.weight), Pets.PetType",
            "select max(Pets.weight), Pets.PetType, Pets.pet_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9907692074775696,
            0.0002432442270219326,
            0.00014991727948654443,
            0.00017785992531571537,
            0.0006295252242125571,
            0.00014730458497069776,
            0.00013193677295930684,
            9.53255221247673e-05
        ],
        "align_select": "select max(Pets.weight), Pets.PetType",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the heaviest weight for each type of pet.",
        "gold_select": "select max(Pets.weight), Pets.PetType",
        "select_candidates": [
            "select Pets.PetType, max(Pets.weight)",
            "select Pets.PetType, min(Pets.weight)",
            "select Pets.PetType.c1, max(Pets.weight)",
            "select max(Pets.weight), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9949157238006592,
            0.00022950387210585177,
            0.9562657475471497,
            0.00016740815772209316,
            0.0030057691037654877,
            0.00018160224135499448,
            0.9934762120246887,
            0.000186834906344302
        ],
        "align_select": "select Pets.PetType, max(Pets.weight)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the ids and weights of all pets whose age is greater than 1?",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetID, Pets.weight,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9366320967674255,
            0.0002311976277269423,
            0.0027466278988868,
            0.0001148138617281802,
            0.0013656034134328365,
            0.00011102214193670079,
            0.002381624188274145,
            7.987116987351328e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id and weight of all pets whose age is greater than 1?",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetType, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9756592512130737,
            0.00018861859280150384,
            0.0028061794582754374,
            0.00010518866474740207,
            0.0011684575583785772,
            0.00010538876813370734,
            0.0004104400868527591,
            9.418927220394835e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the id and weight of all pets whose age is greater than or equal to 2?",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetID, Pets.weight,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9569954872131348,
            0.0002914428187068552,
            0.0031366110779345036,
            0.00012331917241681367,
            0.0011341284262016416,
            0.00014288973761722445,
            0.0025735129602253437,
            8.322107896674424e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the id and weight of all pets that have an age greater than one.",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetType, Pets.weight"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.8668131232261658,
            0.0001754199474817142,
            0.0036487735342234373,
            9.553464042255655e-05,
            0.0014148455811664462,
            9.495119593339041e-05,
            0.0007934747263789177,
            8.546801109332591e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the id and weight of all pets, the age of which is greater than 1.",
        "gold_select": "select Pets.PetID, Pets.weight",
        "select_candidates": [
            "select Pets.PetID, Pets.weight",
            "select Pets.PetID, Pets.weight.",
            "select Pets.PetID, Pets.weight)",
            "select Pets.PetID, Pets.weight,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9817306995391846,
            0.00011062995326938108,
            0.0034203447867184877,
            8.618495485279709e-05,
            0.0012378459796309471,
            7.508943235734478e-05,
            0.003058129223063588,
            7.044701487757266e-05
        ],
        "align_select": "select Pets.PetID, Pets.weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of pets whose weight is larger than 10.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9924012422561646,
            0.0001316537382081151,
            0.0002131562796421349,
            0.0008205922204069793,
            0.0002131562796421349,
            0.0008205922204069793,
            0.00019333904492668808,
            0.02446160279214382
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets have a weight greater than 10?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets"
        ],
        "align_scores": [
            0.9897740483283997,
            0.0009561445913277566,
            0.00032377277966588736,
            0.0004058716003783047,
            0.00032377277966588736,
            0.0004058716003783047,
            0.00024589666281826794,
            0.0029481512028723955
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of pets whose weight is more than ten?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetID",
            "select count(*), Pets.PetType"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Pets",
        "table_candidates": [
            "Pets",
            "Has_Pet Pets"
        ],
        "align_scores": [
            0.9898154735565186,
            0.0004129134176764637,
            0.0002096550742862746,
            0.00013878308527637273,
            0.0002096550742862746,
            0.00013878308527637273,
            0.0002044213324552402,
            0.0007529070717282593
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the mean age of students without pets?",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select avg(Student.Age), Student.StuID",
            "select avg(Student.Age), Has_Pet.StuID",
            "select an avg(Student.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student Has_Pet",
            "Student",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9964951872825623,
            0.00012895656982436776,
            0.00015335401985794306,
            9.343344572698697e-05,
            0.0001478497579228133,
            0.0002604475594125688,
            0.0004294789978303015,
            0.00011157900735270232
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the mean age of students without pets.",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select avg(Student.Age), Student.StuID",
            "select an avg(Student.Age)",
            "select avg(Student.Age), Has_Pet.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student",
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9964481592178345,
            0.000139281022711657,
            0.00015117594739422202,
            8.872299804352224e-05,
            0.0004160985990893096,
            0.00011135813838336617,
            0.00014378552441485226,
            0.00036967717460356653
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the mean age of students who have no pets.",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select an avg(Student.Age)",
            "select avg(Student.Age), Student.StuID",
            "select avg(Student.Age), Has_Pet.StuID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student",
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9950916767120361,
            0.00014502090925816447,
            0.0005659792805090547,
            0.00012400440755300224,
            0.00013799211592413485,
            8.669436647323892e-05,
            0.00015737443754915148,
            0.0002580792352091521
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of pets owned by students that are older than 20.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9798080325126648,
            0.0012280867667868733,
            0.0002567265182733536,
            0.00029483874095603824,
            0.00010054895392386243,
            0.0001862817007349804,
            0.0005884632701054215,
            0.04330725595355034
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of pets owned by students who are over 20 years old?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.LName, Student.Fname"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9665800333023071,
            0.0007201802218332887,
            0.0004112783935852349,
            0.00035040287184529006,
            0.00011609123612288386,
            0.00019480609626043588,
            0.0004810468526557088,
            0.11852765828371048
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets do students who are over the age of 20 own?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(*), Student.LName, Student.Age",
            "select count(distinct Has_Pet.PetID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.974492609500885,
            0.00304880877956748,
            0.00033797332434915006,
            0.00014689165982417762,
            0.0001107192292693071,
            9.355282236356288e-05,
            0.02518502250313759,
            0.0004093012830708176
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of students with pets that have an age of 21 or greater?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.LName, Student.Age",
            "select count(*), Student.StuID",
            "select count(distinct Has_Pet.StuID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9721716046333313,
            0.3413164019584656,
            0.00014322831702884287,
            0.00014174790703691542,
            0.0002535854000598192,
            0.0005848245928063989,
            0.5607230067253113,
            0.00013453015708364546
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many pets are owned by students that have at least 21 years?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Student.StuID",
            "select count(distinct Has_Pet.PetID)",
            "select count(*), Student.LName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student Has_Pet",
        "table_candidates": [
            "Student Has_Pet Pets",
            "Student Has_Pet"
        ],
        "align_scores": [
            0.9783922433853149,
            0.0602322593331337,
            0.0003348951577208936,
            0.0005711790290661156,
            0.15674670040607452,
            0.001902909716591239,
            0.0003900570736732334,
            0.004633569624274969
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How old are all students on average who do not own any pets?",
        "gold_select": "select avg(Student.Age)",
        "select_candidates": [
            "select avg(Student.Age)",
            "select an avg(Student.Age)",
            "select avg(Student.Age), Student.StuID",
            "select  avg(Student.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Student",
        "table_candidates": [
            "Student",
            "Student Has_Pet",
            "Student Has_Pet Pets"
        ],
        "align_scores": [
            0.9934145212173462,
            0.0002964354935102165,
            0.0005283101927489042,
            0.00017083092825487256,
            0.000154631954501383,
            8.043579146033153e-05,
            0.9934145212173462,
            0.0002964354935102165
        ],
        "align_select": "select avg(Student.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model of the car with the lowest horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9912179112434387,
            7.504969835281372e-05,
            0.9898563623428345,
            7.295931573025882e-05,
            0.000476084096590057,
            5.830478039570153e-05,
            0.00039884945726953447,
            5.954119478701614e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the model of the car that has the least amount of horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents model_list car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9825779795646667,
            8.023431291803718e-05,
            0.98039311170578,
            8.10976853244938e-05,
            0.0005133787635713816,
            5.891128967050463e-05,
            0.00037349906051531434,
            5.9712911024689674e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the model of the car with the least amount of horsepower.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9881673455238342,
            6.516958092106506e-05,
            0.9874743223190308,
            6.204031524248421e-05,
            0.0003569388354662806,
            5.802084706374444e-05,
            0.0003397841064725071,
            5.6348675570916384e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which model in the car category has the least horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9663569331169128,
            0.9569927453994751,
            0.0004006135568488389,
            0.0004324892070144415,
            0.0005742221837863326,
            0.00044624603469856083,
            0.0002936776145361364,
            0.00024289984139613807
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the model of the car with the least horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9913551211357117,
            7.688487676205114e-05,
            0.9902521371841431,
            7.257205288624391e-05,
            0.00042006332660093904,
            5.7386121625313535e-05,
            0.00038751011015847325,
            5.944780059508048e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the model of the car with the lowest horsepower.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Make",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers model_list cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9922744631767273,
            6.879730790387839e-05,
            0.9910406470298767,
            6.608315015910193e-05,
            0.9796375632286072,
            7.052787259453908e-05,
            0.00038328961818479,
            5.817675628350116e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What was the average horsepower in all cars manufactured prior to 1980?",
        "gold_select": "select avg(cars_data.Horsepower)",
        "select_candidates": [
            "select avg(cars_data.Horsepower)",
            "select an avg(cars_data.Horsepower)",
            "select avg(avg(cars_data.Horsepower)",
            "select  avg(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9950293898582458,
            9.469070209888741e-05,
            0.0003882017044816166,
            0.00011389559949748218,
            0.00048196985153481364,
            7.94854131527245e-05,
            0.9950293898582458,
            9.469070209888741e-05
        ],
        "align_select": "select avg(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the smallest weight of the car produced in 1974 with eight cylinders?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Cylinders",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9932531714439392,
            0.00010386342910351232,
            0.00019546174735296518,
            6.468368519563228e-05,
            0.00014697697770316154,
            6.002233931212686e-05,
            0.0001567650178913027,
            5.818535646540113e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the minimum weight of the car produced in 1974 with eight cylinders?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Cylinders",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9923526644706726,
            8.862769755069166e-05,
            0.00017832315643317997,
            6.379275146173313e-05,
            0.00015293406613636762,
            6.149893306428567e-05,
            0.00014063493290450424,
            6.16963516222313e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the minimum weight of the car with 8 cylinders made in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9935158491134644,
            9.571865666657686e-05,
            0.00013002513151150197,
            6.161451165098697e-05,
            0.0001405736547894776,
            5.998554843245074e-05,
            0.0001822901249397546,
            6.275990745052695e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the minimum weight of cars made with 8 cylinders in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9951393604278564,
            0.00010327687778044492,
            0.00012556240835692734,
            6.106898217694834e-05,
            0.00013269935152493417,
            5.567964763031341e-05,
            0.00014415179612115026,
            6.445658800657839e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the lowest weight of a car made with eight cylinders in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries cars_data",
            "cars_data car_names cars_data"
        ],
        "align_scores": [
            0.9943552017211914,
            0.00011572871153475717,
            0.00013923933147452772,
            5.924514334765263e-05,
            0.0001256418036064133,
            5.727661482524127e-05,
            0.00018180166080128402,
            6.518126610899344e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the horsepower of the car which accelerates the quickest?",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select cars_data.Id, cars_data.Horsepower",
            "select cars_data.Horsepower, t5.diff(cars_data.Accelerate)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.990559995174408,
            8.653339318698272e-05,
            0.0006171365384943783,
            6.439496792154387e-05,
            0.00023501433315686882,
            7.120426744222641e-05,
            0.00016772214439697564,
            9.099361341213807e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the horsepower of the car with the best acceleration.",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select cars_data.Horsepower, t5.diff(cars_data.Accelerate)",
            "select cars_data.Horsepower, cars_data.Accelerate, cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9927438497543335,
            8.18186963442713e-05,
            0.0007100627408362925,
            6.124259380158037e-05,
            0.0001417062885593623,
            8.185669867089018e-05,
            0.00017924779967870563,
            5.638920629280619e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the horsepower of the car that can accelerate the fastest?",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select cars_data.Horsepower, t5.diff(cars_data.Accelerate)",
            "select cars_data.Horsepower, cars_data.Accelerate, cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9892827272415161,
            9.251539449905977e-05,
            0.0006635651225224137,
            6.447171472245827e-05,
            0.00019280829292256385,
            9.603233047528192e-05,
            0.0001923938252730295,
            5.624237746815197e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the horsepower of the car that has the most acceleration.",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select cars_data.Id, cars_data.Horsepower",
            "select cars_data.Horsepower, t5.diff(cars_data.Accelerate)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9912170171737671,
            7.137707143556327e-05,
            0.0005193455144762993,
            6.0646481870207936e-05,
            0.00022550555877387524,
            6.905793270561844e-05,
            0.0001420999033143744,
            8.845031698001549e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the horsepower of the car that has the highest acceleration.",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select cars_data.Id, cars_data.Horsepower",
            "select cars_data.Id, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.991008460521698,
            7.151954196160659e-05,
            0.0007012148853391409,
            6.0924496210645884e-05,
            0.00023907472495920956,
            6.812500214437023e-05,
            0.00019348565547261387,
            6.697513163089752e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the year ranges in which there were cars manufactured lighter than 4,000 lbs. and vehicles heavier than 3,000 lbs?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select cars_data.Year, t5.c8",
            "select cars_data.Year, cars_data.Accelerate",
            "select cars_data.Year-, t5.c8"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.7006925940513611,
            0.7006925940513611,
            0.00024292716989293694,
            0.00024292716989293694,
            0.00013886913075111806,
            0.00013886913075111806,
            0.0002957435790449381,
            0.0002957435790449381
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the years in which cars had a weight below 4000 and those above 3000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select cars_data.Year, t5.c8",
            "select cars_data.Year, cars_data.Accelerate"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9750611186027527,
            0.24878953397274017,
            0.0008112604264169931,
            0.0004490150895435363,
            0.00021868218027520925,
            0.00013469472469296306,
            0.00010043739894172177,
            8.532241190550849e-05
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "List the make ids and names of all cars that does not have the minimum horsepower, and show me the ones with fewer than four cylinders.",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.MakeId, car_names.Make",
            "select car_names.Make, car_names.MakeId",
            "select car_names.MakeId, car_names.Make, t4.c3",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.5712882280349731,
            0.27927377820014954,
            0.1635153591632843,
            0.2156718373298645,
            0.000361337122740224,
            0.00018676510080695152,
            0.5237342715263367,
            0.7699983716011047
        ],
        "align_select": "select car_names.MakeId, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Among the cars that do not have the minimum horsepower, show me the maker IDs and car names with fewer than 4 cylinders.",
        "gold_select": "select car_names.MakeId, car_names.Make",
        "select_candidates": [
            "select car_names.MakeId, car_names.Model",
            "select car_names.MakeId, car_names.Make",
            "select car_names.Model, car_names.Make",
            "select car_names.Make, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.4291831851005554,
            0.0006591244600713253,
            0.6965494751930237,
            0.0003285256971139461,
            0.640521228313446,
            0.00016234414943028241,
            0.5336753726005554,
            0.0009435361134819686
        ],
        "align_select": "select car_names.MakeId, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of cars with a larger acceleration than the one with the most horsepower.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Horsepower",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Accelerate"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9793004393577576,
            0.00032735642162151635,
            0.00027627297095023096,
            0.0001165066787507385,
            0.0003583912330213934,
            0.00011258309677941725,
            0.0005594237591139972,
            0.00020460851374082267
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cars that has a larger acceleration than the one with the most horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Horsepower",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.MPG"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9740671515464783,
            0.0016302786534652114,
            0.0003842153528239578,
            0.00014794424350839108,
            0.0003860220604110509,
            0.00013037461030762643,
            0.00024109368678182364,
            9.54995775828138e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest accelerating power for different number of cylinders?",
        "gold_select": "select max(cars_data.Accelerate), cars_data.Cylinders",
        "select_candidates": [
            "select max(cars_data.Accelerate), cars_data.Cylinders",
            "select cars_data.Cylinders, max(cars_data.Accelerate)",
            "select min(cars_data.Accelerate), cars_data.Cylinders",
            "select maxima cars_data.Cylinders, max(cars_data.Accelerate)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9937123656272888,
            7.23191405995749e-05,
            0.9952373504638672,
            8.71406082296744e-05,
            0.0008146255277097225,
            0.00012695463374257088,
            0.0005823391256853938,
            0.00011313098366372287
        ],
        "align_select": "select max(cars_data.Accelerate), cars_data.Cylinders",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the model for cars with less than the average weight?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model",
            "select model_list.Model (refers to car_names.Model)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9909499287605286,
            8.387389971176162e-05,
            0.00016671395860612392,
            6.203771044965833e-05,
            0.00020220615260768682,
            6.14859745837748e-05,
            0.036456312984228134,
            8.213701948989183e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model for the car that has a weight less than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "model_list cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list cars_data"
        ],
        "align_scores": [
            0.9829984307289124,
            6.648425915045664e-05,
            0.9861980080604553,
            6.56824340694584e-05,
            0.00020232205861248076,
            5.819029320264235e-05,
            0.00021526546333916485,
            5.785631583421491e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model for the car whose weight is less than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select model_list.ModelId, model_list.Model",
            "select car_names.Model",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "car_makers model_list cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9876580834388733,
            6.291883619269356e-05,
            0.0001683844020590186,
            6.145818042568862e-05,
            0.9900231957435608,
            6.376331293722615e-05,
            0.00018713694589678198,
            6.103893974795938e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the car model that weighs less than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9826605916023254,
            0.05938456952571869,
            0.9784812927246094,
            0.12036047875881195,
            0.0002281178894918412,
            0.00019587371207308024,
            0.0002817078202497214,
            0.0003238443750888109
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the car model with a weight less than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents model_list car_names cars_data",
            "car_makers model_list cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9926642775535583,
            5.941221388638951e-05,
            0.9919751286506653,
            5.888011583010666e-05,
            0.00027815267094410956,
            5.797898120363243e-05,
            0.0002585891052149236,
            5.6219581892946735e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of cars with more than 6 cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9927167296409607,
            0.0008737872121855617,
            0.00022985709074418992,
            0.0003507514775265008,
            0.00021231509163044393,
            0.0042469012551009655,
            0.00022940147027838975,
            0.00018329909653402865
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many vehicles have more than six cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) (cars_data.Id)",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.993314802646637,
            0.00021148471569176763,
            0.0002837661886587739,
            0.003942411858588457,
            0.0003330872568767518,
            0.00015279091894626617,
            0.00023348131799139082,
            0.0005346046527847648
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of cars with 7 or more cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Cylinders",
            "select count(*), cars_data.MPG, cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.993064820766449,
            0.00011697376612573862,
            0.00022834245464764535,
            0.00042970135109499097,
            0.0002489503822289407,
            0.003982407972216606,
            0.0001101744273910299,
            7.279766577994451e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find out how many vehicles have more than six cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.MPG, cars_data.Cylinders",
            "select count(*), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9922116994857788,
            0.00018941682355944067,
            0.00027842517010867596,
            0.0022202644031494856,
            0.00011469218588899821,
            8.126202737912536e-05,
            0.00030689575942233205,
            0.016360007226467133
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names and ids of all countries that either have four or more car makers or produce Fiat model.",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_makers.Id",
            "select countries.CountryName, model_list.ModelId",
            "select countries.CountryName, car_names.MakeId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.9719973206520081,
            0.9833943843841553,
            0.06328828632831573,
            0.09564004093408585,
            0.0008337366161867976,
            0.0010471382411196828,
            0.0037623043172061443,
            0.002809389028698206
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "List the ids and names of all countries that have four or more carmakers or make fiat models.",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryId, countries.CountryName",
            "select car_makers.Id, countries.CountryName",
            "select car_names.Model, countries.CountryId, countries.CountryName",
            "select countries.CountryId, countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers car_names",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.969881534576416,
            0.15954354405403137,
            0.17684270441532135,
            0.010892705991864204,
            0.0002418299118289724,
            0.0001531462330603972,
            0.00043988105608150363,
            0.0002216147113358602
        ],
        "align_select": "select countries.CountryId, countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the ids and names of all countries that have more than three car makers or produce fiat model?",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryId, countries.CountryName",
            "select car_makers.Id, countries.CountryName",
            "select car_names.Model, countries.CountryId, countries.CountryName",
            "select countries.CountryId, countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list"
        ],
        "align_scores": [
            0.26407390832901,
            0.978931188583374,
            0.018770795315504074,
            0.15854619443416595,
            0.00020554375078063458,
            0.00030169793171808124,
            0.00032020543585531414,
            0.0005369842983782291
        ],
        "align_select": "select countries.CountryId, countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "list the ids and names of countries with more than three car makers, or produce a Fiat model.",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryId, countries.CountryName",
            "select car_makers.Id, countries.CountryName",
            "select t1, car_makers.Id, countries.CountryName",
            "select countries.CountryId, countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries car_makers",
            "countries car_makers car_names"
        ],
        "align_scores": [
            0.9533384442329407,
            0.9622323513031006,
            0.09649653732776642,
            0.0422835610806942,
            0.0002272807469125837,
            0.0002620990853756666,
            0.000249207834713161,
            0.00022144551621749997
        ],
        "align_select": "select countries.CountryId, countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Which of the countries has the largest number of car makers? List the country name.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, car_makers.Country",
            "select countries.CountryName (countries.CountryId)",
            "select countries.CountryName, countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.7838793396949768,
            0.00010048731928691268,
            0.001118917134590447,
            8.134065137710422e-05,
            0.007467535324394703,
            7.043008372420445e-05,
            0.0022895268630236387,
            7.164644193835557e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the maker of the earliest made car and what year was it?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_makers.Maker, cars_data.Year",
            "select car_names.Model, cars_data.Year",
            "select model_list.Maker, cars_data.Year",
            "select car_makers.Maker, t4.c7"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_makers car_names cars_data",
            "continents car_makers car_names cars_data",
            "model_list car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9949021339416504,
            7.339615694945678e-05,
            0.000998923322185874,
            6.611270509893075e-05,
            0.989449143409729,
            7.774808182148263e-05,
            0.0005541705177165568,
            8.900603279471397e-05
        ],
        "align_select": "select car_makers.Maker, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What was the maker of the first car ever made and when was it manufactured?",
        "gold_select": "select car_names.Make, cars_data.Year",
        "select_candidates": [
            "select car_makers.Maker, t4.c7",
            "select car_makers.Maker, cars_data.Year",
            "select car_makers.Maker, t2.c7",
            "select car_names.Model, t4.c7"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_makers car_names",
            "countries car_makers car_names",
            "car_makers car_names cars_data",
            "continents car_makers car_names",
            "model_list car_makers car_names",
            "countries car_names",
            "car_names cars_data",
            "model_list car_names"
        ],
        "align_scores": [
            0.0006232727901078761,
            8.881145913619548e-05,
            0.9929977655410767,
            8.390589209739119e-05,
            0.0006095553399063647,
            8.73730969033204e-05,
            0.0006028282805345953,
            9.394268272444606e-05
        ],
        "align_select": "select car_makers.Maker, cars_data.Year",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the countries in Europe with more than 2 car manufacturers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers"
        ],
        "align_scores": [
            0.9658008217811584,
            0.00019702810095623136,
            0.0016083568334579468,
            0.00011690161773003638,
            0.00042528516496531665,
            8.737542520975694e-05,
            0.0002837407519109547,
            8.981789142126217e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Are there any European countries that have 3 or more vehicle manufacturers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers"
        ],
        "align_scores": [
            0.9217424988746643,
            0.00011705410724971443,
            0.0016815916169434786,
            7.17363363946788e-05,
            0.0005809908616356552,
            6.596471212105826e-05,
            0.00021706830011680722,
            6.555028085131198e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me which of these European countries have three or more car manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.888839602470398,
            0.00010479010234121233,
            0.00037776140379719436,
            5.489278555614874e-05,
            0.0021613158751279116,
            6.646055408054963e-05,
            0.00023410681751556695,
            5.751174467150122e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the countries in Europe that have three or more car manufacturers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9378911256790161,
            0.0003440548898652196,
            0.00052623450756073,
            9.576603770256042e-05,
            0.001955886837095022,
            0.00012385538138914853,
            0.00028200342785567045,
            8.499093382852152e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Which countries in Europe have three or more car manufacturers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.9700953960418701,
            0.00021220116468612105,
            0.0003890734806191176,
            9.05445558601059e-05,
            0.002206766977906227,
            0.00011694365093717352,
            0.00023527666053269058,
            7.407793600577861e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Find the number of countries that have 3 or more car manufacturers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryName",
            "select count(distinct car_makers.Country)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "car_makers"
        ],
        "align_scores": [
            0.6323767304420471,
            0.01177392527461052,
            0.0010948267299681902,
            0.3055255115032196,
            0.0019647213630378246,
            0.3762975335121155,
            0.9227577447891235,
            0.0009653326706029475
        ],
        "align_select": "select count(distinct car_makers.Country)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "How many countries have 3 or more car manufacturers?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct car_makers.Country)",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "car_makers",
            "countries car_makers",
            "model_list car_makers",
            "car_makers model_list"
        ],
        "align_scores": [
            0.9055834412574768,
            0.01432577520608902,
            0.9549113512039185,
            0.0009567368542775512,
            0.0008887656731531024,
            0.027929745614528656,
            0.0018419165862724185,
            0.056146904826164246
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of countries with three or more car makers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Country",
            "select count(*), countries.CountryName",
            "select count(distinct car_makers.Country)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers",
            "car_makers"
        ],
        "align_scores": [
            0.8889110088348389,
            0.013233862817287445,
            0.000765077187679708,
            0.3091530501842499,
            0.00184067920781672,
            0.5122528076171875,
            0.9764235615730286,
            0.0003338279784657061
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the total count of cars manufactured by American Motor Company?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Id",
            "select count(*), car_makers.Maker",
            "select count(*), car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers car_makers car_names"
        ],
        "align_scores": [
            0.9933608770370483,
            0.00030700929346494377,
            0.00031097998726181686,
            0.0008540208218619227,
            0.00023489785962738097,
            0.48139315843582153,
            0.00023025806876830757,
            0.04607647284865379
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which car model with four cylinders has the greatest power output?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9873226284980774,
            0.00022031542903278023,
            0.0007321338634938002,
            9.088962542591617e-05,
            0.0005740861524827778,
            8.882255497155711e-05,
            0.0008139105630107224,
            0.0001158088562078774
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For cars with 4 cylinders, what model has the greatest power output?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Edispl"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "continents car_names cars_data",
            "countries cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.987266480922699,
            0.0001244260638486594,
            0.00044005265226587653,
            7.044633821351454e-05,
            0.0004496031906455755,
            7.571932655991986e-05,
            0.0007925211102701724,
            9.605431841919199e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which car model with 4 cylinders has the most horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.975730299949646,
            0.00022279714175965637,
            0.0008673299453221262,
            8.641176100354642e-05,
            0.0008598127751611173,
            8.490718028042465e-05,
            0.0004128667642362416,
            8.975146192824468e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For the four-cylinder cars, which model has the most horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9030898213386536,
            0.00010471638233866543,
            0.0008032259647734463,
            6.951925752218813e-05,
            0.00045692792627960443,
            6.701615347992629e-05,
            0.00044934454490430653,
            8.293745486298576e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "List the numbers of cars with more than 6 cylinders.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), t5.dcars_data.Id",
            "select count(*), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9910627603530884,
            0.00013462385686580092,
            0.00021857733372598886,
            0.0004841164336539805,
            0.0001721833396004513,
            0.00019274710211902857,
            0.00025677887606434524,
            0.009729311801493168
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "There are different models made by either General Motors or which weighs in excess of 3500?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct model_list.Model, car_makers.Maker",
            "select distinct model_list.Model.c2",
            "select distinct model_list.Model, model_list.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "car_makers model_list car_names cars_data",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "continents car_makers model_list car_names",
            "countries car_makers model_list car_names"
        ],
        "align_scores": [
            0.9919533133506775,
            0.0011280907783657312,
            0.0010933235753327608,
            0.0001030533603625372,
            0.0006934507982805371,
            0.00013571268937084824,
            0.0005234858836047351,
            8.755357703194022e-05
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the different models made by General Motors in which there is a weight of greater than 3500 pounds.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select model_list.Model",
            "select count(distinct model_list.Model)",
            "select distinct car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data"
        ],
        "align_scores": [
            0.9614429473876953,
            0.02364763244986534,
            0.6021033525466919,
            0.002005114918574691,
            0.0014078946551308036,
            8.72533637448214e-05,
            0.9646574258804321,
            0.08931481838226318
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many vehicles have 5 or more cylinders?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(distinct cars_data.Id)",
            "select count(*), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9938190579414368,
            0.00044692924711853266,
            0.0002750107378233224,
            0.00030955186230130494,
            0.002058952348306775,
            0.0001189579998026602,
            0.0002621683233883232,
            0.00024983874754980206
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Identify the distinctive models manufactured by the manufacturer named General Motors or over 3500 pounds.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct model_list.Model, model_list.Maker",
            "select distinctive model_list.Model",
            "select distinct model_list.Model, car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "car_makers model_list car_makers model_list car_names",
            "car_makers model_list car_makers car_names",
            "car_makers model_list car_makers model_list cars_data",
            "countries car_makers model_list car_names",
            "car_makers model_list car_makers cars_data",
            "countries car_makers model_list cars_data"
        ],
        "align_scores": [
            0.19249950349330902,
            0.00017829169519245625,
            0.0001383589260512963,
            6.500833842437714e-05,
            0.01612008549273014,
            0.0002154999820049852,
            0.00019993548630736768,
            7.226302841445431e-05
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which of these models has the greatest fuel economy? That is to say, has the largest miles per gallon?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select model_list.ModelId, model_list.Model",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers model_list cars_data",
            "countries model_list car_names cars_data",
            "countries model_list cars_data",
            "continents model_list cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9030925631523132,
            5.8439094573259354e-05,
            0.8590642809867859,
            6.134728027973324e-05,
            0.0005877991789020598,
            5.484108260134235e-05,
            0.0003775439690798521,
            5.54764992557466e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which model has the highest MPGe?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers model_list cars_data",
            "countries car_names cars_data",
            "car_names cars_data",
            "car_makers car_names cars_data",
            "continents model_list cars_data"
        ],
        "align_scores": [
            0.9903435707092285,
            7.351593376370147e-05,
            0.9931384921073914,
            6.011703590047546e-05,
            0.0004977096687071025,
            5.68230461794883e-05,
            0.0003346666635479778,
            5.903630153625272e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which car has the highest fuel economy?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model-, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9770744442939758,
            6.774047506041825e-05,
            0.0017380326753482223,
            5.785929170087911e-05,
            0.006409118417650461,
            6.151465640868992e-05,
            0.00046893313992768526,
            5.2587492973543704e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which vehicle gets the best gas mileage?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model-, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.970409631729126,
            7.147487485781312e-05,
            0.0023237387649714947,
            5.990934369037859e-05,
            0.008765840902924538,
            6.328191375359893e-05,
            0.0005240889731794596,
            5.315085218171589e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the number of cars with horsepower greater than 150.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) dependant on cars_data.Id",
            "select count(*) descripted in cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9941608309745789,
            0.00010809675586642697,
            0.00023501522082369775,
            0.0008912069606594741,
            0.0003695110499393195,
            0.0003790113260038197,
            0.00044896843610331416,
            0.00011798633931903169
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the total number of cars with horsepower over 150.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select cars_data.Id, count(*)",
            "select t5.c count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9939941763877869,
            0.005692671984434128,
            0.0002522355644032359,
            0.0007758980500511825,
            0.0003342718700878322,
            0.0021963154431432486,
            0.0005723293870687485,
            0.0003441677545197308
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of vehicles with horsepower over 150?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.MPG, cars_data.Cylinders",
            "select count(*) dependant on cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9946051239967346,
            0.00013597226643469185,
            0.00028958989423699677,
            0.0010436070151627064,
            0.00011818857456091791,
            8.702651393832639e-05,
            0.00043424495379440486,
            0.0002796318440232426
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model with the largest number of different versions?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select model_list.Model, model_list.ModelId",
            "select model_list.Model, count(distinct model_list.ModelId)",
            "select model_list.Model (distinct model_list.ModelId)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names",
        "table_candidates": [
            "model_list",
            "car_makers model_list",
            "model_list car_names"
        ],
        "align_scores": [
            0.9928082227706909,
            6.059925726731308e-05,
            0.00046911960816942155,
            6.48376953904517e-05,
            0.0006654530297964811,
            5.8247365814168006e-05,
            0.0016830908134579659,
            6.873637903481722e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the model names with the most versions.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select model_list.Model, model_list.ModelId",
            "select model_list.Model (model_list.ModelId)",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names",
        "table_candidates": [
            "model_list car_names",
            "model_list",
            "car_makers model_list car_names",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9934624433517456,
            5.716523446608335e-05,
            0.0001988220465136692,
            5.366105688153766e-05,
            0.0004989884910173714,
            5.067824895377271e-05,
            0.0005030473112128675,
            5.353603046387434e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List all European countries where there are at least three manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "countries car_makers"
        ],
        "align_scores": [
            0.922935426235199,
            0.00014578289119526744,
            0.00039239382022060454,
            6.32708179182373e-05,
            0.0014222913887351751,
            7.604900747537613e-05,
            0.0015538380248472095,
            7.060829375404865e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show all the names of all European countries with three or more manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers",
            "continents countries",
            "continents countries car_makers model_list"
        ],
        "align_scores": [
            0.960748016834259,
            8.894613711163402e-05,
            0.0003370964259374887,
            5.328106999513693e-05,
            0.0007765534683130682,
            5.768558185081929e-05,
            0.0002728134277276695,
            6.073445183574222e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of all European countries with three or more manufacturers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.958929717540741,
            0.00015998132585082203,
            0.0005352234002202749,
            9.814713121159002e-05,
            0.0014590590726584196,
            0.00012125192006351426,
            0.00027261374634690583,
            9.476504783378914e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "List the names of all European countries with three or more manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "countries car_makers",
            "continents countries"
        ],
        "align_scores": [
            0.9476281404495239,
            0.0001033792577800341,
            0.00039563197060488164,
            5.541346763493493e-05,
            0.000996086630038917,
            6.0080987168475986e-05,
            0.00026173677179031074,
            6.155485607450828e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of all European countries with more or equal to 3 manufactures?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, continents.Continent",
            "select countries.CountryName, t0.c2",
            "select countries.CountryName, continents.ContId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "continents countries car_makers",
        "table_candidates": [
            "continents countries car_makers",
            "continents car_makers",
            "continents countries",
            "countries car_makers",
            "continents countries car_makers model_list"
        ],
        "align_scores": [
            0.9804971218109131,
            0.00014940810797270387,
            0.00043000088771805167,
            8.48432318889536e-05,
            0.00025150456349365413,
            9.252341988030821e-05,
            0.0008681795443408191,
            0.00010640501568559557
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What is the mean EDISPL for all volvos?",
        "gold_select": "select avg(cars_data.Edispl)",
        "select_candidates": [
            "select avg(cars_data.Edispl)",
            "select an avg(cars_data.Edispl)",
            "select avg(cars_data.Edispl)",
            "select  avg(cars_data.Edispl)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "cars_data",
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9968010187149048,
            8.243809861596674e-05,
            0.00039497585385106504,
            0.0001136760984081775,
            0.9968010187149048,
            8.243809861596674e-05,
            0.9968010187149048,
            8.243809861596674e-05
        ],
        "align_select": "select avg(cars_data.Edispl)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the makers and their ids of car brands that produce two or more models and produce four or more car models.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_names.Make, car_names.MakeId",
            "select car_makers.Maker, car_names.MakeId",
            "select car_makers.Maker, car_makers.Id",
            "select car_names.Model, car_names.MakeId"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "model_list car_names",
            "car_makers model_list car_names",
            "continents car_makers model_list car_names",
            "countries model_list car_names",
            "car_makers car_names",
            "countries car_names",
            "car_names"
        ],
        "align_scores": [
            0.2763783633708954,
            0.978576123714447,
            0.057498782873153687,
            0.9140533804893494,
            0.10592225939035416,
            0.956976056098938,
            0.0003124632639810443,
            0.0005038734525442123
        ],
        "align_select": "select car_names.Make, car_names.MakeId",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the ids and makers of the car manufacturers that have produced two or more models and manufactured more than three cars.",
        "gold_select": "select car_makers.Id, car_makers.Maker",
        "select_candidates": [
            "select car_makers.Id, car_makers.Maker",
            "select model_list.ModelId, car_makers.Maker",
            "select car_names.Model, car_makers.Maker",
            "select car_names.Model, car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "model_list car_names",
            "continents car_makers model_list car_names",
            "countries model_list car_names",
            "continents model_list car_names"
        ],
        "align_scores": [
            0.9237993359565735,
            0.28579092025756836,
            0.00035149388713762164,
            0.00042326695984229445,
            0.0003476414713077247,
            0.0002322136570001021,
            0.00022921980416867882,
            0.00020345782104413956
        ],
        "align_select": "select car_makers.Id, car_makers.Maker",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the horsepower of the car that has the greatest acceleration?",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select cars_data.Id, cars_data.Horsepower",
            "select cars_data.Horsepower, t5.diff(cars_data.Accelerate)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9901956915855408,
            7.667379395570606e-05,
            0.0007874052971601486,
            6.198697519721463e-05,
            0.00024378611124120653,
            6.8863075284753e-05,
            0.00017427743296138942,
            9.06191926333122e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the horsepower of the car with the maximum acceleration.",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select cars_data.Id, cars_data.Horsepower",
            "select max(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9932116270065308,
            6.581058551091701e-05,
            0.0005273871938697994,
            6.025851325830445e-05,
            0.0002401727542746812,
            6.41331062070094e-05,
            0.0003238107019569725,
            6.547544035129249e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How much horse power does the car have that can accelerate the fastest?",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select cars_data.Horsepower, t5.diff(cars_data.Accelerate)",
            "select max(cars_data.Horsepower)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.978131890296936,
            0.00010140553786186501,
            0.0013806603383272886,
            6.644985114689916e-05,
            0.00020388173288665712,
            0.00010277740511810407,
            0.0005221767933107913,
            7.313952664844692e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the horsepower of the car that currently accelerates fastest?",
        "gold_select": "select cars_data.Horsepower",
        "select_candidates": [
            "select cars_data.Horsepower",
            "select cars_data.Horsepower, cars_data.Accelerate",
            "select cars_data.Horsepower, t5.diff(cars_data.Accelerate)",
            "select cars_data.Horsepower, cars_data.Accelerate, cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9878717660903931,
            8.85084446053952e-05,
            0.0006353183998726308,
            6.970785034354776e-05,
            0.00020400075300130993,
            9.209315612679347e-05,
            0.0001841072808019817,
            6.012431549606845e-05
        ],
        "align_select": "select cars_data.Horsepower",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the number of cars manufactured in the United States.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Country",
            "select car_makers.Country, count(*)",
            "select count(*), car_makers.Maker"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers",
            "car_makers car_names",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9922204613685608,
            0.00016110524302348495,
            0.0002247786906082183,
            0.00191438605543226,
            0.0004126855928916484,
            0.0009022553567774594,
            0.00021763694530818611,
            0.005636945832520723
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of cars produced in the United States.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), car_makers.Country",
            "select car_makers.Country, count(*)",
            "select sum(car_makers.Country)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "car_makers",
            "car_makers car_names",
            "countries car_makers car_names",
            "countries car_makers",
            "continents car_makers car_names",
            "car_makers cars_data",
            "continents car_makers",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9924761652946472,
            0.0001966992422239855,
            0.0002493171487003565,
            0.001597909489646554,
            0.0004451895656529814,
            0.0010093814926221967,
            0.0007992427563294768,
            0.00010513160668779165
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of cars that have a horsepower above 150.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) dependant on cars_data.Id",
            "select count(*), t5.dcars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9918451905250549,
            0.0001757288264343515,
            0.00024235851014964283,
            0.004210007376968861,
            0.0004024441877845675,
            0.001042193383909762,
            0.00023028705618344247,
            0.0009793274803087115
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of cars that have a horsepower of over 150.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*) dependant on cars_data.Id",
            "select count(*) depreciated(cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9874216318130493,
            0.00022176772472448647,
            0.0002887773734983057,
            0.012971901334822178,
            0.0004627502057701349,
            0.0019616626668721437,
            0.00022766161418985575,
            0.00023253689869306982
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the different models with the weight lower than 3500 but were not built by the Ford Motor Company?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select distinct model_list.Model",
            "select distinct car_names.Model",
            "select distinct car_names.Make",
            "select distinct car_makers.Maker, car_makers.FullName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list cars_data",
            "car_makers model_list car_names",
            "car_makers model_list"
        ],
        "align_scores": [
            0.03159323334693909,
            0.03159323334693909,
            0.051300402730703354,
            0.051300402730703354,
            0.06628170609474182,
            0.06628170609474182,
            0.00023287835938390344,
            0.00023287835938390344
        ],
        "align_select": "select distinct model_list.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What were all the cars weighing less than 3500, but built outside of the Ford company?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Make",
            "select car_names.Model, car_names.Make",
            "select car_makers.Maker, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers car_names cars_data",
            "countries car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "model_list car_names cars_data",
            "car_names cars_data",
            "continents car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9628016948699951,
            0.4135785400867462,
            0.8722623586654663,
            0.08373488485813141,
            0.000615501485299319,
            0.0014341992791742086,
            0.00021107013162691146,
            0.00022097391774877906
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "List the names and ids of all countries that has at least one car manufacturer.",
        "gold_select": "select countries.CountryName, countries.CountryId",
        "select_candidates": [
            "select countries.CountryName, countries.CountryId",
            "select distinct countries.CountryName, countries.CountryId",
            "select count(*), countries.CountryName, countries.CountryId",
            "select at least countries.CountryName, countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.8985456824302673,
            0.9185167551040649,
            0.740811288356781,
            0.0030111605301499367,
            0.0004513452877290547,
            0.00048480910481885076,
            0.6172425746917725,
            0.017377236858010292
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the names and IDs of all countries with two or more car makers.",
        "gold_select": "select countries.CountryName, countries.CountryId",
        "select_candidates": [
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_makers.Id",
            "select countries.CountryName, continents.ContId",
            "select countries.CountryName, car_makers.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9917137622833252,
            0.00017292865959461778,
            0.011254335753619671,
            0.00016023506759665906,
            0.246394082903862,
            0.0001697779807727784,
            0.08113434910774231,
            9.893607784761116e-05
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names and IDs of all countries that have at least one car manufacturer.",
        "gold_select": "select countries.CountryName, countries.CountryId",
        "select_candidates": [
            "select countries.CountryName, countries.CountryId",
            "select distinct countries.CountryName, countries.CountryId",
            "select count(*), countries.CountryName, countries.CountryId",
            "select at least countries.CountryName, countries.CountryId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9343185424804688,
            0.9308704733848572,
            0.7177329063415527,
            0.0033141514286398888,
            0.0004290284705348313,
            0.0005190361989662051,
            0.7114148139953613,
            0.02564607933163643
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the names and IDs of all countries with two or more car manufacturers.",
        "gold_select": "select countries.CountryName, countries.CountryId",
        "select_candidates": [
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_makers.Id",
            "select countries.CountryName, car_makers.Country",
            "select countries.CountryName, continents.ContId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9920624494552612,
            0.00016541585500817746,
            0.013540227897465229,
            0.00017260646563954651,
            0.09028185158967972,
            9.855801181402057e-05,
            0.15677358210086823,
            0.0001538616925245151
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which model of the car weighs less than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "continents model_list car_names cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9900306463241577,
            7.029367407085374e-05,
            0.9897210001945496,
            6.654211028944701e-05,
            0.00025387280038557947,
            6.090381430112757e-05,
            0.00023336247249972075,
            5.97470898355823e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the model of the car whose weight is smaller than the average?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select model_list.Model",
            "select car_names.Model",
            "select car_names.Model, model_list.Model",
            "select model_list.Model, car_names.Model"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9865054488182068,
            6.44392566755414e-05,
            0.9899453520774841,
            6.303864938672632e-05,
            0.00019840162713080645,
            6.47105771349743e-05,
            0.00021517455752473325,
            6.370637129293755e-05
        ],
        "align_select": "select model_list.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the make and model of the car whose weight is less than the average weight.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Make, car_names.Model",
            "select distinct car_names.Make, car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Make, car_names.Model, car_names.MakeId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9845877885818481,
            6.457693234551698e-05,
            0.010074181482195854,
            6.765479338355362e-05,
            0.9865449070930481,
            6.655931065324694e-05,
            0.00013553940516430885,
            5.9343019529478624e-05
        ],
        "align_select": "select car_names.Make, car_names.Model",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "In which years were cars produced weighing between 3000 and 4000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select specific cars_data.Year",
            "select cars_data.Year"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9859036803245544,
            0.00013429688988253474,
            0.15727673470973969,
            0.0002544262388255447,
            0.001881249132566154,
            9.256718476535752e-05,
            0.9859036803245544,
            0.00013429688988253474
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "When were cars produced that weighed exactly between 3000 and 4000 grams?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select t4.c7",
            "select t7.c7",
            "select cars_data.Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "cars_data car_names"
        ],
        "align_scores": [
            0.9816359281539917,
            0.000277148064924404,
            0.0015198709443211555,
            0.00012105758651159704,
            0.001391089055687189,
            9.747521107783541e-05,
            0.9816359281539917,
            0.000277148064924404
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the years that cars were produced weighing between 3000 and 4000?",
        "gold_select": "select distinct cars_data.Year",
        "select_candidates": [
            "select cars_data.Year",
            "select distinct cars_data.Year",
            "select avg(cars_data.Year)",
            "select cars_data.Year, t5.c8"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "model_list cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.9771142601966858,
            0.00011941328557441011,
            0.06348200887441635,
            0.0002251648111268878,
            0.0019767219200730324,
            6.79578588460572e-05,
            0.0004319354775361717,
            8.226447243941948e-05
        ],
        "align_select": "select cars_data.Year",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List all the countries that have one or moew car manufacturer, mention their names and ids.",
        "gold_select": "select countries.CountryName, countries.CountryId",
        "select_candidates": [
            "select countries.CountryName, car_makers.Id",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_makers.Country",
            "select countries.CountryName, continents.ContId"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.008750072680413723,
            0.000740571937058121,
            0.9504876732826233,
            0.001389901852235198,
            0.0017127810278907418,
            0.00023391246213577688,
            0.005562737118452787,
            0.0006007733754813671
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the countries that have car makers? Give the names and ids.",
        "gold_select": "select countries.CountryName, countries.CountryId",
        "select_candidates": [
            "select countries.CountryName, car_makers.Id",
            "select countries.CountryName, car_makers.Country",
            "select distinct countries.CountryName, car_makers.Id",
            "select countries.CountryName, countries.CountryId"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.017847994342446327,
            0.0004748739884234965,
            0.13099037110805511,
            0.00036394692142494023,
            0.005651981104165316,
            0.00031647036666981876,
            0.5335726141929626,
            0.0007964510004967451
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which car model is rated to have the best mpg rating?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model",
            "select car_names.Model (car_names.Make)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents model_list car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9664580225944519,
            7.092641317285597e-05,
            0.0009968526428565383,
            6.02730578975752e-05,
            0.00037869997322559357,
            6.441100413212553e-05,
            0.007679692469537258,
            6.196746835485101e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the car model with the best fuel efficiency.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model (car_names.Make)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9752992391586304,
            7.519885548390448e-05,
            0.0005458463565446436,
            6.143158680060878e-05,
            0.000613060430623591,
            6.681011291220784e-05,
            0.0028880948666483164,
            6.39105201116763e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the car model with the best gas mileage?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.MakeId, car_names.Model",
            "select car_names.Model (cars_data.MPG)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9873625040054321,
            8.129397610900924e-05,
            0.000766970741096884,
            6.276918429648504e-05,
            0.0008230083622038364,
            6.900380685692653e-05,
            0.010809787549078465,
            7.069965795380995e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the names and ids of the countries that have 4 or more car makers or produce the Fiat model.",
        "gold_select": "select countries.CountryId, countries.CountryName",
        "select_candidates": [
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_makers.Id",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, car_names.MakeId"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers model_list",
        "table_candidates": [
            "countries car_makers model_list car_names",
            "countries car_makers model_list",
            "countries model_list car_names"
        ],
        "align_scores": [
            0.9637100100517273,
            0.028190456330776215,
            0.03222271427512169,
            0.0029303226619958878,
            0.9637100100517273,
            0.028190456330776215,
            0.004521903581917286,
            0.001241017016582191
        ],
        "align_select": "select countries.CountryName, countries.CountryId",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Which car has the largest horsepower among the four-cylinder model.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.MakeId, car_names.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "car_makers car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.979469895362854,
            0.0004027179966215044,
            0.0005203912733122706,
            9.351937478641048e-05,
            0.0012476881965994835,
            0.00011131216160720214,
            0.0009155221632681787,
            0.00011910033208550885
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "For all of the 4 cylinder cars, which model has the largest amount of horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9531249403953552,
            0.00011169844947289675,
            0.0007986557320691645,
            7.567587454104796e-05,
            0.0005065975128673017,
            6.870284414617345e-05,
            0.0003705006674863398,
            8.182376768672839e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show the data for all 4-cylinder cars, listing the model with the largest horsepower.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model, cars_data.Cylinders",
            "select cars_data.MPG, max(cars_data.Horsepower)",
            "select cars_data.MPG, cars_data.Cylinders",
            "select car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "car_makers cars_data",
            "countries cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.0011136847315356135,
            8.867749420460314e-05,
            0.00011188830103492364,
            6.71438974677585e-05,
            0.0001486172404838726,
            7.202849519671872e-05,
            0.9439566135406494,
            0.00022308493498712778
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Which of the 4-cylinder models has the greatest power output?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, cars_data.Cylinders",
            "select car_names.MakeId, car_names.Model",
            "select car_names.MakeId, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "countries cars_data"
        ],
        "align_scores": [
            0.9726118445396423,
            0.00017922199913300574,
            0.0015837528044357896,
            9.385654993820935e-05,
            0.0009729670127853751,
            9.571445843903348e-05,
            0.0005347264814190567,
            8.299490582430735e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the country which has the largest number of car makers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, car_makers.Country",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, countries.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.6366972327232361,
            9.176634921459481e-05,
            0.0007960550137795508,
            7.359450682997704e-05,
            0.0011025355197489262,
            7.07561630406417e-05,
            0.0010665023000910878,
            7.35247740522027e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the country with the largest number of car makers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, car_makers.Country",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, countries.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.7208596467971802,
            9.339425014331937e-05,
            0.0008134759846143425,
            7.068839477142319e-05,
            0.0009239066275767982,
            6.748070154571906e-05,
            0.0010355751728639007,
            7.172580808401108e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the name of the country with the most car manufacturers.",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, car_makers.Country",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName (countries.Continent)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.9140426516532898,
            8.828405407257378e-05,
            0.001346874632872641,
            6.576001760549843e-05,
            0.0009492542594671249,
            6.0853421018691733e-05,
            0.0030315653420984745,
            5.921492265770212e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the country with the largest number of car manufacturers?",
        "gold_select": "select countries.CountryName",
        "select_candidates": [
            "select countries.CountryName",
            "select countries.CountryName, car_makers.Country",
            "select countries.CountryName, countries.CountryId",
            "select countries.CountryName, countries.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countries car_makers",
        "table_candidates": [
            "countries car_makers"
        ],
        "align_scores": [
            0.709730327129364,
            9.777963714441285e-05,
            0.0011206218041479588,
            7.493534940294921e-05,
            0.000970003311522305,
            6.76572453812696e-05,
            0.0010172679321840405,
            7.160272798500955e-05
        ],
        "align_select": "select countries.CountryName",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the best mpg value of all vehicles with eight cylinders that were made ahead of 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select cars_data.MPG",
            "select min(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9917661547660828,
            0.00048597416025586426,
            0.004901678301393986,
            0.36342787742614746,
            0.1582551896572113,
            0.00035418636980466545,
            0.00017948911408893764,
            9.03024265426211e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all the manufacturers with at least four car models and list their name and id.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, car_makers.Id",
            "select car_makers.FullName, model_list.Maker, model_list.ModelId",
            "select car_makers.FullName, model_list.Maker, car_names.MakeId"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers model_list car_names",
            "countries car_makers model_list car_names",
            "car_makers model_list",
            "car_makers car_names"
        ],
        "align_scores": [
            0.9485978484153748,
            9.56550647970289e-05,
            0.979176938533783,
            9.223042434314266e-05,
            0.00022341271687764674,
            5.888438317924738e-05,
            0.0004999113152734935,
            6.843330629635602e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Name the makers who have made 3 or more cars. List the full name and id.",
        "gold_select": "select car_makers.FullName, car_makers.Id",
        "select_candidates": [
            "select car_makers.FullName, car_makers.Id",
            "select car_makers.Maker, car_makers.FullName, car_makers.Id",
            "select t2.c4, car_makers.FullName, car_makers.Id",
            "select car_makers.FullName, car_makers.Maker, car_makers.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_makers model_list",
        "table_candidates": [
            "car_makers car_names",
            "car_makers model_list car_names"
        ],
        "align_scores": [
            0.9408445954322815,
            0.00011480040848255157,
            0.000611863739322871,
            7.633732457179576e-05,
            0.00028516590828076005,
            6.221283547347412e-05,
            0.0007589260931126773,
            8.569472993258387e-05
        ],
        "align_select": "select car_makers.FullName, car_makers.Id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the most horsepower for the models with three cylinders and what make is it?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select car_names.Model, car_names.Make",
            "select max(cars_data.Horsepower), car_names.Make",
            "select car_names.Make, max(cars_data.Horsepower)",
            "select car_names.Make, car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9658342003822327,
            0.00034368495107628405,
            0.0016472089337185025,
            8.30992721603252e-05,
            0.0042245052754879,
            9.431401849724352e-05,
            0.9897576570510864,
            0.0003737952501978725
        ],
        "align_select": "select car_names.Model, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the biggest amount of power for the three cylinder models, and what brand is it?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select car_names.Model, car_names.Make",
            "select max(cars_data.Horsepower), car_names.Make",
            "select cars_data.MPG, car_names.Make",
            "select car_makers.Maker, car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "model_list cars_data",
            "continents car_names cars_data",
            "car_makers car_names cars_data"
        ],
        "align_scores": [
            0.9830341339111328,
            0.5807724595069885,
            0.0006348665338009596,
            0.00013109979045111686,
            0.0009400666458532214,
            0.021162768825888634,
            0.16692392528057098,
            0.02307090535759926
        ],
        "align_select": "select car_names.Model, car_names.Make",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the most amount of horsepower for the models with three cylinders made by what manufacturer?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select car_names.Model, max(cars_data.Horsepower)",
            "select car_names.Make, max(cars_data.Horsepower)",
            "select cars_data.MPG, max(cars_data.Horsepower)",
            "select max(cars_data.Horsepower), car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "model_list cars_data",
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers model_list cars_data",
            "car_makers cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data"
        ],
        "align_scores": [
            0.00015904713654890656,
            0.0001055498723872006,
            0.0001226418389705941,
            0.00011032233305741102,
            0.00010705005115596578,
            7.169578748289496e-05,
            0.00012096411956008524,
            0.00013785454211756587
        ],
        "align_select": "select car_names.Model, max(cars_data.Horsepower)",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the model of the car which produces the least horsepower.",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "continents model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9857608675956726,
            6.597647734452039e-05,
            0.9846295714378357,
            6.24168969807215e-05,
            0.00043220072984695435,
            5.720553963328712e-05,
            0.9506446123123169,
            6.941863102838397e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "which model of the cars is lowest in terms of power?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list car_names cars_data",
            "car_names cars_data",
            "car_makers model_list car_names cars_data",
            "car_makers car_names cars_data",
            "countries car_names cars_data",
            "continents model_list car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9673718810081482,
            6.056719212210737e-05,
            0.950114905834198,
            5.8320456446381286e-05,
            0.00029015031759627163,
            5.005252023693174e-05,
            0.0002595900441519916,
            5.7270714023616165e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the model of the car with the lowest horsepower?",
        "gold_select": "select car_names.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers car_names cars_data",
            "car_makers model_list car_names cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data"
        ],
        "align_scores": [
            0.9912179112434387,
            7.504969835281372e-05,
            0.9898563623428345,
            7.295931573025882e-05,
            0.000476084096590057,
            5.830478039570153e-05,
            0.00039884945726953447,
            5.954119478701614e-05
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List all models that weighs less than 3,500 kg but were not produced by Ford Motors.",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, model_list.Model",
            "select model_list.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "model_list car_names",
            "model_list cars_data",
            "car_makers model_list car_names",
            "countries model_list car_names",
            "car_makers model_list cars_data",
            "continents model_list car_names",
            "countries model_list cars_data",
            "continents model_list cars_data"
        ],
        "align_scores": [
            0.965481162071228,
            0.6933983564376831,
            0.7286073565483093,
            0.5608522891998291,
            0.00030456564854830503,
            0.0002722108911257237,
            0.23904620110988617,
            0.7054814696311951
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which models have less than 3500 lb and are not made by the Ford Motor Company?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_makers.FullName",
            "select model_list.Model, car_makers.Maker",
            "select model_list.Maker, car_makers.FullName"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-INTERSECT-SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list car_names",
            "car_makers model_list cars_data",
            "countries car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "continents car_makers model_list car_names",
            "car_makers model_list car_makers car_names",
            "continents car_makers model_list cars_data"
        ],
        "align_scores": [
            0.9682361483573914,
            0.0030518234707415104,
            0.0005249509704299271,
            0.00023666796914767474,
            0.0006229705177247524,
            0.0002528755576349795,
            0.0003559294273145497,
            0.00019351222726982087
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Which models weigh less than 3500 pounds but are not made by the Ford Motor Company?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select car_names.Model, car_makers.FullName",
            "select model_list.Maker, car_makers.FullName",
            "select model_list.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "car_makers model_list cars_data",
            "car_makers model_list car_names",
            "countries car_makers model_list cars_data",
            "countries car_makers model_list car_names",
            "continents car_makers model_list cars_data",
            "continents car_makers model_list car_names"
        ],
        "align_scores": [
            0.9568497538566589,
            0.5582485795021057,
            0.0003939665330108255,
            0.0006760122487321496,
            0.0003095559950452298,
            0.00042364883120171726,
            0.951366126537323,
            0.5827470421791077
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What are the models that weighs less than 3500 kg but isn't a Ford?",
        "gold_select": "select distinct model_list.Model",
        "select_candidates": [
            "select car_names.Model",
            "select model_list.Model",
            "select car_names.Model, car_names.Make",
            "select car_names.Model, model_list.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "car_makers model_list car_names cars_data",
        "table_candidates": [
            "model_list car_names",
            "car_makers model_list car_names",
            "model_list cars_data",
            "countries model_list car_names",
            "continents model_list car_names",
            "car_names cars_data",
            "car_makers model_list cars_data"
        ],
        "align_scores": [
            0.9750806093215942,
            0.3412954807281494,
            0.946124255657196,
            0.5193307399749756,
            0.00036340916994959116,
            0.0004913660231977701,
            0.00020716898143291473,
            0.00023502262774854898
        ],
        "align_select": "select car_names.Model",
        "align_structure": "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest horsepower and the make of the cars with three cylinders?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select cars_data.Horsepower, car_names.Make",
            "select max(cars_data.Horsepower), max(car_names.Make)",
            "select max(cars_data.Accelerate), car_names.Make"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9943444728851318,
            0.00012057580170221627,
            0.8080648183822632,
            0.9911364316940308,
            0.03022903949022293,
            0.0002665436768438667,
            0.965821385383606,
            0.0001873344008345157
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest horsepower and the make of cars with three cylinders?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select cars_data.Horsepower, car_names.Make",
            "select max(cars_data.Accelerate), car_names.Make",
            "select max(cars_data.Horsepower), car_names.Make)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "car_makers cars_data",
            "countries car_names cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9942481517791748,
            0.00011638530850177631,
            0.8817226886749268,
            0.9880293011665344,
            0.9359923005104065,
            0.00016080412024166435,
            0.0009372361237183213,
            0.00010368579387431964
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest horsepower and the make of the car models with three cylinders?",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), max(car_names.Make)",
            "select cars_data.Horsepower, car_names.Make",
            "select max(cars_data.Accelerate), car_names.Make"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "car_names cars_data",
            "countries car_names cars_data",
            "car_makers cars_data",
            "model_list car_names cars_data",
            "continents car_names cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.991780698299408,
            0.00013093810412101448,
            0.04635879024863243,
            0.00038968579610809684,
            0.8140355348587036,
            0.9876063466072083,
            0.9633485674858093,
            0.0002954028605017811
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the largest horsepower and the manufacturer of the car models with 3 cylinders.",
        "gold_select": "select cars_data.Horsepower, car_names.Make",
        "select_candidates": [
            "select max(cars_data.Horsepower), car_names.Make",
            "select max(cars_data.Horsepower), car_names.Model",
            "select max(cars_data.Horsepower), cars_data.Cylinders",
            "select max(cars_data.Horsepower), model_list.Maker"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "car_names cars_data",
        "table_candidates": [
            "model_list cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "cars_data",
            "car_makers cars_data",
            "cars_data car_names",
            "cars_data car_names cars_data",
            "countries car_names cars_data"
        ],
        "align_scores": [
            0.9924142956733704,
            0.00018562072364147753,
            0.9891418218612671,
            0.00016627248260192573,
            0.0004094359464943409,
            0.0001052148436428979,
            0.9939162135124207,
            0.00038526725256815553
        ],
        "align_select": "select max(cars_data.Horsepower), car_names.Make",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the lightest car with 8 cylinders that was produced in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select cars_data.Weight",
            "select cars_data.Id",
            "select max(cars_data.Weight)",
            "select car_names.Model"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "cars_data car_names cars_data",
            "car_names cars_data",
            "cars_data car_names",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9620876908302307,
            0.9881667494773865,
            0.0015320559032261372,
            0.003077039960771799,
            0.4387147128582001,
            0.0006256080814637244,
            0.11375696212053299,
            0.9833717942237854
        ],
        "align_select": "select cars_data.Weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the lowest weight of the car with eight cylinders produced in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select min(cars_data.Weight)",
            "select min(cars_data.Weight), cars_data.Year",
            "select min(cars_data.Weight), cars_data.Accelerate",
            "select min(cars_data.Weight), cars_data.Cylinders"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9905975461006165,
            0.00010769795335363597,
            0.00015705391706433147,
            6.306244904408231e-05,
            0.00015083498146850616,
            5.933815555181354e-05,
            0.00019716905080713332,
            6.506755744339898e-05
        ],
        "align_select": "select min(cars_data.Weight)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the lightest weight car with 8 cylinders produced in 1974?",
        "gold_select": "select min(cars_data.Weight)",
        "select_candidates": [
            "select cars_data.Weight",
            "select max(cars_data.Weight)",
            "select car_names.Model",
            "select cars_data.Id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "cars_data car_names cars_data",
            "car_names cars_data",
            "cars_data car_names",
            "model_list cars_data"
        ],
        "align_scores": [
            0.9541508555412292,
            0.9920164346694946,
            0.12667781114578247,
            0.0004795522545464337,
            0.35449936985969543,
            0.990658164024353,
            0.0015677984338253736,
            0.0037993004079908133
        ],
        "align_select": "select cars_data.Weight",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the cars that have a higher accelerate than the car with the largest horsepower.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select cars_data.Id",
            "select car_names.Model",
            "select car_names.Model, car_names.Make",
            "select cars_data.MPG"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data"
        ],
        "align_scores": [
            0.0017748635727912188,
            0.00040698086377233267,
            0.05748491361737251,
            0.0013970833970233798,
            0.0003022648161277175,
            0.00012363579298835248,
            0.0016646215226501226,
            0.0002932828210759908
        ],
        "align_select": "select cars_data.Id",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars have an accelerate greater than the car with the biggest horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Id",
            "select count(*), cars_data.Accelerate",
            "select count(*), cars_data.Horsepower"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9631927013397217,
            0.0006842590519227087,
            0.0003759876708500087,
            0.00016514273011125624,
            0.0003461395390331745,
            0.00021555155399255455,
            0.00029195845127105713,
            0.0002366955013712868
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars have a higher acceleration than the car with the highest horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Horsepower",
            "select count(*), cars_data.Id",
            "select count(distinct cars_data.Id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9371839761734009,
            0.0005597173585556448,
            0.0003370885387994349,
            0.00017492302868049592,
            0.0003674758190754801,
            0.0001437619503121823,
            0.0007180407410487533,
            7.854964496800676e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many cars have acceleration larger than the car with the largest horsepower?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), cars_data.Accelerate",
            "select count(*), cars_data.Horsepower",
            "select count(*), cars_data.Id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data"
        ],
        "align_scores": [
            0.9181454181671143,
            0.0006970848189666867,
            0.00044378204620443285,
            0.0002848618314601481,
            0.0003042046446353197,
            0.00023358174075838178,
            0.0003298915980849415,
            0.00018133856065105647
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the highest mpg of the car with 8 cylinders or produced before 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Cylinders",
            "select max(cars_data.MPG), cars_data.Year",
            "select cars_data.MPG"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.9916205406188965,
            0.0006992779090069234,
            0.00013702784781344235,
            8.270352554973215e-05,
            0.00013920347555540502,
            7.879609620431438e-05,
            0.03509579226374626,
            0.05702558159828186
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the highest mileage per gallon of the car with 8 cylinders or made before 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), car_names.Make",
            "select max(cars_data.MPG), car_names.Model, car_names.Make",
            "select max(cars_data.MPG) def. car_names.Model, car_names.Make"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "car_makers cars_data",
            "countries cars_data",
            "model_list cars_data"
        ],
        "align_scores": [
            0.992051362991333,
            0.000736057001631707,
            0.00021949916845187545,
            0.00013347268395591527,
            0.0001429336261935532,
            9.6164207207039e-05,
            0.00018027174519374967,
            9.604689694242552e-05
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the greatest mileage per gallon of the car with 8 cylinders or produced before 1980.",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select max(cars_data.MPG)",
            "select max(cars_data.MPG), cars_data.Cylinders",
            "select cars_data.MPG",
            "select max(cars_data.MPG), cars_data.Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.00021762264077551663,
            0.9898372292518616,
            8.24408489279449e-05,
            0.00016522764053661376,
            0.25430700182914734,
            0.025542927905917168,
            8.336540486197919e-05,
            0.00015509725199081004
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the best mileage per gallon in a car with eight cylinders or made before 1980?",
        "gold_select": "select max(cars_data.MPG)",
        "select_candidates": [
            "select cars_data.MPG",
            "select max(cars_data.MPG)",
            "select cars_data.MPG, car_names.Model, car_names.Make",
            "select cars_data.MPG, car_names.Make"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "cars_data",
        "table_candidates": [
            "cars_data",
            "car_names cars_data",
            "model_list car_names cars_data",
            "cars_data car_names cars_data",
            "model_list cars_data",
            "car_makers cars_data"
        ],
        "align_scores": [
            0.1643330603837967,
            0.7652671933174133,
            0.9940915703773499,
            0.0011218724539503455,
            0.0001176506484625861,
            0.00022936997993383557,
            0.00019283367146272212,
            0.000735857873223722
        ],
        "align_select": "select max(cars_data.MPG)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the amount of flights that depart from Aberdeen?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City, flights.SourceAirport",
            "select count(*), airports.City, flights.DestAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9950640797615051,
            0.00013333720562513918,
            0.0002390952577115968,
            0.0006163655780255795,
            0.0001360708411084488,
            0.00010327983909519389,
            0.0001219199548359029,
            0.00010299176938133314
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the total count of airports.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.AirportCode",
            "select count(*), airports.AirportCode, airports.AirportName",
            "select count(*), airports.AirportCode - airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "airports",
        "table_candidates": [
            "airports"
        ],
        "align_scores": [
            0.9945665597915649,
            0.9945665597915649,
            0.00017352559370920062,
            0.00017352559370920062,
            0.00022062507923692465,
            0.00022062507923692465,
            0.00015265490219462663,
            0.00015265490219462663
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the code of airport that currently has the most flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode IATA-CONTROL-GROUP BY-ORDER BY-LIMIT",
            "select airports.AirportCode IATA-CONTROL-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.989876925945282,
            8.259381866082549e-05,
            0.008038482628762722,
            6.809974001953378e-05,
            0.003177684498950839,
            9.581134509062394e-05,
            0.000572661985643208,
            0.0001341727183898911
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code of the airport that has the most flights?",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9924374222755432,
            7.107415149221197e-05,
            0.007523516193032265,
            7.116007327567786e-05,
            0.00047019225894473493,
            7.799038576195017e-05,
            0.007523516193032265,
            7.116007327567786e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the code for the airport that currently has the most flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode-, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9911181330680847,
            7.0517577114515e-05,
            0.007549516391009092,
            6.714672053931281e-05,
            0.007549516391009092,
            6.714672053931281e-05,
            0.0017634999239817262,
            5.538271943805739e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the code for the airport that currently has the most flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode-, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9910467267036438,
            7.408556120935827e-05,
            0.0081024169921875,
            7.307156192837283e-05,
            0.0081024169921875,
            7.307156192837283e-05,
            0.0024380148388445377,
            5.790333671029657e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the code of airport that has the most flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode IATA-CONTROL-GROUP BY-ORDER BY-LIMIT",
            "select airports.AirportCode IATA-CONTROL-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.993178129196167,
            6.869550270494074e-05,
            0.005619047675281763,
            6.248861609492451e-05,
            0.0028527118265628815,
            8.141988655552268e-05,
            0.0004419966135174036,
            0.00011720130714820698
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which city is the one with the most departing flights?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, flights.SourceAirport",
            "select airports.City, flights.DestAirport",
            "select airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9927845001220703,
            6.654096796410158e-05,
            0.0031140893697738647,
            7.211501360870898e-05,
            0.0017138493712991476,
            6.73462200211361e-05,
            0.0002509201585780829,
            6.286174175329506e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show which city has the largest number of departures.",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, flights.DestAirport",
            "select airports.City, airports.AirportName",
            "select airports.City, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.992375910282135,
            5.8088004152523354e-05,
            0.000569536758121103,
            6.10623465036042e-05,
            0.00019774855172727257,
            5.618244904326275e-05,
            0.0022228157613426447,
            6.806610326748341e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which city has the largest number of outgoing flights?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, flights.SourceAirport",
            "select airports.City, airports.AirportName",
            "select airports.City, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9926674962043762,
            6.108052184572443e-05,
            0.002603421686217189,
            6.604610098293051e-05,
            0.00022308896586764604,
            5.8834088122239336e-05,
            0.002603421686217189,
            6.604610098293051e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What city has the largest number of arriving flights?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, flights.SourceAirport",
            "select airports.City, airports.AirportName",
            "select airports.City, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9928174018859863,
            6.205723184393719e-05,
            0.0006195528549142182,
            6.256379856495187e-05,
            0.00021792847837787122,
            5.888876330573112e-05,
            0.0006195528549142182,
            6.256379856495187e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find which city has the greatest number of arriving flights.",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, flights.SourceAirport",
            "select airports.City, airports.AirportName",
            "select airports.City, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9920179843902588,
            5.90574782108888e-05,
            0.0006563665810972452,
            5.710644836653955e-05,
            0.00022344298486132175,
            5.5284046538872644e-05,
            0.0006563665810972452,
            5.710644836653955e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the largest number of incoming flights in a city?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, max(flights.FlightNo)",
            "select airports.City, count(*)",
            "select airports.City, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9893752336502075,
            5.5470569350291044e-05,
            0.00044145763968117535,
            5.414919723989442e-05,
            0.9223745465278625,
            5.386115299188532e-05,
            0.0026291871909052134,
            5.821844024467282e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Where in which city do we find most arriving flights?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, flights.SourceAirport",
            "select airports.City, airports.AirportName",
            "select airports.City, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.968124270439148,
            5.6701690482441336e-05,
            0.00020173087250441313,
            5.412162499851547e-05,
            0.0001911403815029189,
            5.4986245231702924e-05,
            0.00020647876954171807,
            5.939023685641587e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the airlines with 10 or more scheduled flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9311058521270752,
            0.0003809721674770117,
            0.9760425090789795,
            0.00023956006043590605,
            0.002060235245153308,
            8.923055429477245e-05,
            0.00043418759014457464,
            7.847231609048322e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all airlines that have at least 10 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9909989833831787,
            0.00016220395627897233,
            0.0004607519367709756,
            6.620033673243597e-05,
            0.0024742677342146635,
            6.999327888479456e-05,
            0.00019372951646801084,
            6.071407915442251e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the airlines that have 10 or more flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9767146110534668,
            0.0001964653201866895,
            0.0004722647718153894,
            6.832617509644479e-05,
            0.0017670324305072427,
            7.783243199810386e-05,
            0.0002599169092718512,
            7.008264219621196e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all airlines that have at least 10 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9920614957809448,
            0.00010793730325531214,
            0.0005978220724500716,
            6.13737283856608e-05,
            0.002687569707632065,
            6.734326598234475e-05,
            0.0002717081515584141,
            5.687981320079416e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all the airlines with a total count of at least ten flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9571568965911865,
            5.994386083330028e-05,
            0.0004555718624033034,
            5.249910827842541e-05,
            0.002226980170235038,
            5.738645268138498e-05,
            0.0003496143326628953,
            5.408994547906332e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all the airlines that have 10 or more flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9724497199058533,
            0.00014730724797118455,
            0.0004196282534394413,
            6.622495857300237e-05,
            0.0019398375879973173,
            7.530735456384718e-05,
            0.00016385373601224273,
            6.340048275887966e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all airlines that have 10 or more flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9895764589309692,
            0.00013442436465993524,
            0.0004208805912639946,
            6.586024392163381e-05,
            0.0021935293916612864,
            7.63556599849835e-05,
            0.00031289548496715724,
            7.234383519971743e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all airlines that have ten or more flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9879171252250671,
            0.00012827517639379948,
            0.00040656497003510594,
            6.392014620359987e-05,
            0.002132927067577839,
            7.373836706392467e-05,
            0.00029031746089458466,
            6.922546162968501e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the total count of United Airlines flights that leave from AHD airport?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select flights.Airline count(*)",
            "select flights.SourceAirport, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9871484637260437,
            0.0003085786593146622,
            0.0003761005646083504,
            0.06572011858224869,
            0.003109612734988332,
            0.0003039669245481491,
            0.0019577117636799812,
            0.043773118406534195
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the total count of United Airlines flights leaving from AHD Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), airlines.Airline, airports.AirportCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9885407090187073,
            0.0004368190420791507,
            0.0002532568178139627,
            0.07899577915668488,
            0.00010135662159882486,
            0.00012387605966068804,
            0.00013048617984168231,
            0.00020536061492748559
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the airport code that currently has fewest flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode (airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9922782182693481,
            5.338227856555022e-05,
            0.003411742625758052,
            5.7991368521470577e-05,
            0.0002427990984870121,
            6.159442273201421e-05,
            0.013602742925286293,
            5.01496069773566e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the code of airport that has the least number of flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode (airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9905030727386475,
            6.478739669546485e-05,
            0.0039788708090782166,
            6.728048174409196e-05,
            0.0003876475675497204,
            6.882414891151711e-05,
            0.017311982810497284,
            5.543714723899029e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the code for the airport that currently has the fewest flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9900175929069519,
            7.27626247680746e-05,
            0.004634207580238581,
            6.625224341405556e-05,
            0.00033926975447684526,
            6.896776176290587e-05,
            0.004634207580238581,
            6.625224341405556e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the code for the airport that currently has the lowest number of flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9884640574455261,
            6.96498536854051e-05,
            0.004691387061029673,
            6.714319897582754e-05,
            0.0003450278309173882,
            6.94269037921913e-05,
            0.004691387061029673,
            6.714319897582754e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code for the airport with the highest number of flights?",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9927592277526855,
            7.324359467020258e-05,
            0.004260622896254063,
            7.031660061329603e-05,
            0.0003621641080826521,
            7.53622516640462e-05,
            0.004260622896254063,
            7.031660061329603e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the code for the airport with the largest number of flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9926682114601135,
            6.566865340573713e-05,
            0.0031363724265247583,
            6.408266199287027e-05,
            0.000298865168588236,
            6.673364259768277e-05,
            0.0031363724265247583,
            6.408266199287027e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code of the airport with the least number of flights?",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode IATA-CONTROL-GROUP BY-ORDER BY-LIMIT",
            "select airports.AirportCode IATA-CONTROLLED-GROUP BY-ORDER BY-LIMIT"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.992289125919342,
            7.229817128973082e-05,
            0.004010125994682312,
            6.85751365381293e-05,
            0.0007152775069698691,
            8.387133857468143e-05,
            0.0007683899602852762,
            0.00010125288099516183
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the code of the airport that currently has the fewest flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode (airports.AirportName)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9889137148857117,
            6.426245818147436e-05,
            0.004898694809526205,
            6.19545899098739e-05,
            0.00033124227775260806,
            6.561758345924318e-05,
            0.01918177120387554,
            5.351459913072176e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the code for the airport with the lowest number of flights.",
        "gold_select": "select airports.AirportCode",
        "select_candidates": [
            "select airports.AirportCode",
            "select airports.AirportCode, airports.AirportName",
            "select airports.AirportCode, airports.AirportName, airports.Country",
            "select airports.AirportCode, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9935710430145264,
            6.314104393823072e-05,
            0.002975309733301401,
            6.070203744457103e-05,
            0.00027456748648546636,
            6.277900683926418e-05,
            0.002975309733301401,
            6.070203744457103e-05
        ],
        "align_select": "select airports.AirportCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the total count of United Airlines flights to Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select flights.Airline, count(*)",
            "select count(*), airlines.Airline, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9958119988441467,
            0.0006205060053616762,
            0.0002743612858466804,
            0.03130535036325455,
            0.0009634317248128355,
            0.7932831645011902,
            0.00013711111387237906,
            9.621337085263804e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the total count of United Airlines flights that have arrived in Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select flights.Airline, count(*)",
            "select flights.FlightNo, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines airports flights",
        "table_candidates": [
            "airlines airports flights",
            "airlines airports airports flights"
        ],
        "align_scores": [
            0.9934138655662537,
            0.0008438813383691013,
            0.00035334579297341406,
            0.15299852192401886,
            0.0010123064275830984,
            0.48763734102249146,
            0.000414007983636111,
            0.0028567377012223005
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Where can I find the list of air lines having less than 200 flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.SourceAirport",
            "select airlines.Airline, flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9915394186973572,
            0.0006238382775336504,
            0.003317788941785693,
            0.00012273974425625056,
            0.0011440084781497717,
            0.00010431275586597621,
            0.0004807215591426939,
            0.00010197824303759262
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the airlines that have fewer than 200 flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9700924754142761,
            0.00036768571590073407,
            0.0004312054079491645,
            8.292053098557517e-05,
            0.0019341681618243456,
            0.00010097018093802035,
            0.00023446489649359137,
            7.720468420302495e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all the airlines with less than 200 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9699326753616333,
            0.0003342256532050669,
            0.00029817185713909566,
            7.328383799176663e-05,
            0.001560734584927559,
            9.299115481553599e-05,
            0.0001982358080567792,
            7.49029204598628e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Return the total count of flights.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.SourceAirport",
            "select count(*), flights.SourceAirport, flights.DestAirport",
            "select count(*), flights.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights",
            "airports flights",
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9950750470161438,
            8.206797065213323e-05,
            0.0003554428112693131,
            6.251352169783786e-05,
            0.00025971184368245304,
            5.521197454072535e-05,
            0.00016427064838353544,
            8.009434532141313e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the current flight count?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), flights.Airline",
            "select flights.Airline, count(*)",
            "select count(*), flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "flights",
        "table_candidates": [
            "flights"
        ],
        "align_scores": [
            0.9950237274169922,
            6.317609222605824e-05,
            0.0001863296638475731,
            6.793098145863041e-05,
            0.0005101952119730413,
            8.054600766627118e-05,
            0.00020817464974243194,
            6.605359521927312e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find all United Airlines flights that arrive in ASY Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select flights.Airline",
            "select flights.FlightNo",
            "select flights.Airline, flights.FlightNo",
            "select flights.FlightNo, airlines.Airline"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.15981009602546692,
            0.011756117455661297,
            0.31675851345062256,
            0.04613938927650452,
            0.00047445454401895404,
            0.00015072195674292743,
            0.00045325185055844486,
            0.00022368362988345325
        ],
        "align_select": "select flights.Airline",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the count of United Airlines flights that arrive in ASY Airport.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, airports.AirportCode",
            "select flights.Airline, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines airports flights"
        ],
        "align_scores": [
            0.9783089756965637,
            0.00015590547991450876,
            0.0002529177872929722,
            0.09539561718702316,
            0.0001330698432866484,
            0.0003637211339082569,
            0.0008965526358224452,
            0.040677767246961594
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List which airlines have under 200 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9932680726051331,
            0.0002021593099925667,
            0.00038257212145254016,
            7.133161852834746e-05,
            0.0014954268699511886,
            8.649040682939813e-05,
            0.00018007589096669108,
            6.657194899162278e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the airlines with fewer than 200 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9183406829833984,
            0.00038030341966077685,
            0.00023348598915617913,
            7.584434933960438e-05,
            0.001158502302132547,
            0.00010187502630287781,
            0.0001641347334953025,
            8.398522186325863e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me which airlines have fewer than 200 flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9905765056610107,
            0.0005859693046659231,
            0.00046016639680601656,
            9.046895138453692e-05,
            0.001485235639847815,
            0.00010400474275229499,
            0.00019246996089350432,
            8.157741831382737e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the total count of flights arriving in Aberdeen.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airports.City",
            "select count(*), airports.City, flights.SourceAirport",
            "select flights.DestAirport, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports flights"
        ],
        "align_scores": [
            0.9954460859298706,
            0.00028275346267037094,
            0.00027789370506070554,
            0.0009266077540814877,
            0.00010464830847922713,
            0.00011332402937114239,
            0.0004443835641723126,
            0.0010764325270429254
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the airline that has the highest number of flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9905493855476379,
            5.937160676694475e-05,
            0.0007043442456051707,
            5.841067832079716e-05,
            0.004637631122022867,
            7.229355833260342e-05,
            0.0006637434707954526,
            5.776914258603938e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the largest number of flights by an airline?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline, count(*)",
            "select airlines.Airline",
            "select airlines.Airline, max(flights.FlightNo)",
            "select airlines.Airline, count(*), flights.Airline"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.658445417881012,
            5.2785097068408504e-05,
            0.9936680197715759,
            5.450116441352293e-05,
            0.00054693449055776,
            5.204062472330406e-05,
            0.00017276385915465653,
            5.539740595850162e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the airline with most flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, flights.FlightNo",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9957000017166138,
            5.915318615734577e-05,
            0.00032592081697657704,
            5.4856776841916144e-05,
            0.000490075268317014,
            4.9391364882467315e-05,
            0.003974968567490578,
            5.6142387620639056e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the airline with the most flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, flights.FlightNo",
            "select airlines.Airline, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9954224228858948,
            6.361803389154375e-05,
            0.0005816113553009927,
            5.842026075697504e-05,
            0.0006377216195687652,
            5.314395821187645e-05,
            0.004351532552391291,
            6.27901463303715e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the airline with the greatest number of flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9906104207038879,
            6.300306267803535e-05,
            0.00039281914359889925,
            5.538572804653086e-05,
            0.003592428285628557,
            5.721601701225154e-05,
            0.0004600032407324761,
            5.0361726607661694e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What city has the highest frequency of destination airports?",
        "gold_select": "select airports.City",
        "select_candidates": [
            "select airports.City",
            "select airports.City, airports.AirportCode",
            "select airports.City, airports.AirportCode, airports.AirportName",
            "select airports.City, airports.AirportName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airports flights",
        "table_candidates": [
            "airports",
            "airports flights"
        ],
        "align_scores": [
            0.994550883769989,
            5.8883986639557406e-05,
            0.0005486758309416473,
            6.292585749179125e-05,
            0.00014895859931129962,
            6.020234286552295e-05,
            0.00023733096895739436,
            5.7588353229220957e-05
        ],
        "align_select": "select airports.City",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the airline that has the most number of flights.",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.FlightNo"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9906654357910156,
            5.9832382248714566e-05,
            0.0004166967992205173,
            5.475747093441896e-05,
            0.0032024788670241833,
            5.836524360347539e-05,
            0.000310935836751014,
            5.096379027236253e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which airlines has the highest number of flights?",
        "gold_select": "select airlines.Airline",
        "select_candidates": [
            "select airlines.Airline",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Airline, flights.Airline",
            "select airlines.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9935530424118042,
            5.390241858549416e-05,
            0.0032757276203483343,
            6.532999395858496e-05,
            0.0005921227275393903,
            5.492377749760635e-05,
            0.0013826302019879222,
            5.36748266313225e-05
        ],
        "align_select": "select airlines.Airline",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the abbreviation and country of the airline with the fewest flights?",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.uid, airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9941522479057312,
            7.5724528869614e-05,
            0.002225172007456422,
            8.09464036137797e-05,
            0.0004752376116812229,
            7.250945782288909e-05,
            0.9904402494430542,
            7.622355042258278e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the abbreviation and country of the airline which operates with fewer flights than all others.",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.uid, airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9866688251495361,
            8.180910663213581e-05,
            0.002123336773365736,
            8.531443745596334e-05,
            0.0006488562794402242,
            7.635689689777792e-05,
            0.9797836542129517,
            8.515871013514698e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the abbreviation and country of the airline that has the least number of flights?",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.uid, airlines.Abbreviation, airlines.Country",
            "select airlines.Country, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9922053217887878,
            7.906653627287596e-05,
            0.0025206184946000576,
            8.55244361446239e-05,
            0.0004836939333472401,
            7.775364792905748e-05,
            0.992771565914154,
            8.393102325499058e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the country name and abbreviation of the airline that has the lowest number of flights.",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Country, airlines.Abbreviation",
            "select airlines.Airline, airlines.Abbreviation",
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Country, airlines.Abbreviation, airlines.Airline"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights"
        ],
        "align_scores": [
            0.9919877052307129,
            7.8718745498918e-05,
            0.0007740352302789688,
            7.04609919921495e-05,
            0.985526442527771,
            8.531117782695219e-05,
            0.922910749912262,
            7.227956666611135e-05
        ],
        "align_select": "select airlines.Country, airlines.Abbreviation",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the abbreviation and country of the airline with the smallest count of flights.",
        "gold_select": "select airlines.Abbreviation, airlines.Country",
        "select_candidates": [
            "select airlines.Abbreviation, airlines.Country",
            "select airlines.Airline, airlines.Abbreviation, airlines.Country",
            "select flights.Airline, airlines.Abbreviation, airlines.Country",
            "select airlines.Country, airlines.Abbreviation"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9938173890113831,
            6.823807052569464e-05,
            0.002842162037268281,
            7.563193503301591e-05,
            0.0034348065964877605,
            7.79267429606989e-05,
            0.9941605925559998,
            7.059832569211721e-05
        ],
        "align_select": "select airlines.Abbreviation, airlines.Country",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the flight count for the airline called Jetblue Airways?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select flights.Airline, count(*)",
            "select count(*), airlines.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.99587482213974,
            0.00016801038873381913,
            0.0002592529053799808,
            0.023305779322981834,
            0.0010217352537438273,
            0.049874357879161835,
            0.00013163266703486443,
            0.00011469339369796216
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total count of Jetblue Airways flights?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select flights.Airline, count(*)",
            "select count(*), airlines.Airline, flights.SourceAirport"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9956468939781189,
            0.00040701418765820563,
            0.0002442542463541031,
            0.29796916246414185,
            0.0008242845651693642,
            0.9667083621025085,
            0.00012251523730810732,
            0.00018203878425993025
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the amount of flights from JetBlue Airways?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), airlines.Airline",
            "select count(*), airlines.Airline, flights.SourceAirport",
            "select flights.Airline, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "airlines flights",
        "table_candidates": [
            "airlines flights",
            "airlines airports flights"
        ],
        "align_scores": [
            0.9956777691841125,
            0.00013227977615315467,
            0.00022861434263177216,
            0.027699189260601997,
            0.0001312591484747827,
            0.00012373272329568863,
            0.0010118825593963265,
            0.25286808609962463
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which cities have more than one employee who are younger than 30 years old?",
        "gold_select": "select employee.City",
        "select_candidates": [
            "select employee.City",
            "select employee.City, count(*)",
            "select employee.City Is-GROUP BY-HAVING",
            "select employee.City for employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9879542589187622,
            0.00016436654550489038,
            0.03108644299209118,
            9.923143807100132e-05,
            0.0003537367738317698,
            0.00012371502816677094,
            0.00027379998937249184,
            7.443411595886573e-05
        ],
        "align_select": "select employee.City",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show all the cities with more than one employee that are younger than 30.",
        "gold_select": "select employee.City",
        "select_candidates": [
            "select employee.City",
            "select employee.City the SELECT-FROM-WHERE-GROUP BY-HAVING",
            "select employee.City, count(*)",
            "select employee.City the SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9839609861373901,
            7.244240987347439e-05,
            0.0004354134143795818,
            8.432299364358187e-05,
            0.009583181701600552,
            7.085765537340194e-05,
            0.00013943889643996954,
            0.00024305413535330445
        ],
        "align_select": "select employee.City",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me all districts where there is a shop with fewer than 3000 products or one with over 10,000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select distinct shop.District",
            "select distinct shop.District, shop.Number_products",
            "select shop.District, shop.Number_products"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9833744764328003,
            0.9756807088851929,
            0.0014660577289760113,
            0.10426987707614899,
            0.00014826537517365068,
            0.0004974465118721128,
            0.00013923428195994347,
            0.00016486756794620305
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "Show me where there are stores that sell 3000 products or less, and 10000 products or greater.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.Location",
            "select shop.Location, shop.District",
            "select shop.Location for both shop.Name, shop.Location",
            "select shop.Location for both shop.District, shop.Number_products"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9926504492759705,
            0.004205739591270685,
            0.00031158453202806413,
            9.624310041544959e-05,
            0.0001541177771287039,
            7.536994235124439e-05,
            0.00016874847642611712,
            8.718034951016307e-05
        ],
        "align_select": "select shop.Location",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "What is the sum bonus provided for each evaluation?",
        "gold_select": "select sum(evaluation.Bonus)",
        "select_candidates": [
            "select evaluation.Employee_ID, sum(evaluation.Bonus)",
            "select evaluation.Year_awarded, sum(evaluation.Bonus)",
            "select sum(evaluation.Bonus), evaluation.Employee_ID",
            "select sum(evaluation.Bonus), evaluation.Year_awarded"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "evaluation",
        "table_candidates": [
            "evaluation"
        ],
        "align_scores": [
            0.020014876499772072,
            0.00013045434025116265,
            0.16589538753032684,
            0.00011581116996239871,
            0.014350884594023228,
            0.0001345962518826127,
            0.009768204763531685,
            0.00013034514267928898
        ],
        "align_select": "select evaluation.Employee_ID, sum(evaluation.Bonus)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the name of the shop that is currently hiring the most number of employees?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Shop_ID",
            "select shop.Name, hiring.Start_from",
            "select shop.Name, hiring.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.981669545173645,
            7.509745773859322e-05,
            0.0011102008866146207,
            8.597974374424666e-05,
            0.003624813398346305,
            7.308354543056339e-05,
            0.0003291778266429901,
            6.949724775040522e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the shop that is hiring the most employees?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Shop_ID",
            "select shop.Name, hiring.Start_from",
            "select shop.Name, hiring.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.988226592540741,
            6.763041892554611e-05,
            0.0007197280647233129,
            7.096226181602105e-05,
            0.0021486282348632812,
            6.104557542130351e-05,
            0.00032553760684095323,
            6.353691424010321e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the shop that is currently hiring the most number of people?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Shop_ID",
            "select shop.Name, hiring.Start_from",
            "select shop.Name, hiring.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.9851319193840027,
            7.66895100241527e-05,
            0.0010095796314999461,
            8.140590944094583e-05,
            0.003386611584573984,
            6.978081364650279e-05,
            0.0002171678643207997,
            6.513833068311214e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the store that is hiring the most employees?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Start_from",
            "select shop.Name, hiring.Shop_ID",
            "select shop.Name, hiring.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.9866857528686523,
            8.289681863971055e-05,
            0.0026023981627076864,
            7.072285370668396e-05,
            0.0008835159242153168,
            7.490170537494123e-05,
            0.000351188937202096,
            6.71984744258225e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the count of the employees per city.",
        "gold_select": "select count(*), employee.City",
        "select_candidates": [
            "select employee.City, count(*)",
            "select count(*), employee.City",
            "select employee.City.c3, count(*)",
            "select employee.City, count(*), employee.Employee_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9966905117034912,
            0.0001459436898585409,
            0.9966141581535339,
            0.00016235483053606004,
            0.0013050197158008814,
            0.00011434917541919276,
            0.00011399448703741655,
            8.214626723201945e-05
        ],
        "align_select": "select employee.City, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the total count of shops in each location?",
        "gold_select": "select count(*), shop.Location",
        "select_candidates": [
            "select shop.Location, count(*)",
            "select count(*), shop.Location",
            "select shop.Location, count(*), shop.District",
            "select sum(shop.Location), shop.District"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9966071844100952,
            0.00014219437434803694,
            0.9963561296463013,
            0.00016325160686392337,
            0.0002459836541675031,
            8.03218936198391e-05,
            0.000175562352524139,
            0.00011144523887196556
        ],
        "align_select": "select shop.Location, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find the total count of shops in each location.",
        "gold_select": "select count(*), shop.Location",
        "select_candidates": [
            "select shop.Location, count(*)",
            "select count(*), shop.Location",
            "select shop.Location, count(*), shop.District",
            "select sum(shop.Location), shop.Location"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9967148303985596,
            0.00013973304885439575,
            0.996547281742096,
            0.00015754348714835942,
            0.00023032788885757327,
            7.75276857893914e-05,
            0.00020572396169882268,
            0.00010681847925297916
        ],
        "align_select": "select shop.Location, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the employee's name sorted by his/her age from the youngest to the oldest.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Age",
            "select employee.Name (ordered by employee.Age)",
            "select employee.Name-ordered"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9950641989707947,
            0.00014290907711256295,
            0.0002657289442140609,
            9.34320196392946e-05,
            0.008410153910517693,
            9.122854680754244e-05,
            0.9901621341705322,
            0.00014383172674570233
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What shops sell more products than average? Give me the shop names.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9378433227539062,
            8.693461859365925e-05,
            0.0002713089925237,
            7.781683962093666e-05,
            0.00025796680711209774,
            6.814533844590187e-05,
            0.0003715098719112575,
            8.100385457510129e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name any of the shops whose product numbers is larger than the average.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.Number_products"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9205946922302246,
            5.482450796989724e-05,
            0.00016404745110776275,
            5.4694271966582164e-05,
            0.00023800441704224795,
            6.369342736434191e-05,
            0.00023503406555391848,
            5.952053106739186e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which shops have a higher number of products than the average? List the names of the shops.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Number_products"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9473963379859924,
            7.941525836940855e-05,
            0.00029792977147735655,
            7.10448730387725e-05,
            0.0003123655915260315,
            8.572145452490076e-05,
            0.0002800902584567666,
            7.271621143445373e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total count of employees from each city?",
        "gold_select": "select count(*), employee.City",
        "select_candidates": [
            "select employee.City, count(*)",
            "select count(*), employee.City",
            "select sum(employee.City), employee.City",
            "select employee.City, count(*), employee.Employee_ID"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9968806505203247,
            0.00017942530394066125,
            0.9964781403541565,
            0.0002137582778232172,
            0.0002247662632726133,
            0.00014514016220346093,
            0.00013439373287837952,
            8.393438474740833e-05
        ],
        "align_select": "select employee.City, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the name of the shop with the largest number of employees?",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Shop_ID",
            "select shop.Name, hiring.Employee_ID",
            "select shop.Name, hiring.Start_from"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.9875923991203308,
            6.263585237320513e-05,
            0.0005921926931478083,
            6.27233530394733e-05,
            0.0005662058829329908,
            5.9040750784333795e-05,
            0.0012451232178136706,
            5.1415783673292026e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which shop has the largest employee count? Give me the shop name.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, hiring.Employee_ID",
            "select shop.Name, hiring.Shop_ID",
            "select shop.Name, hiring.Start_from"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop hiring",
        "table_candidates": [
            "shop hiring"
        ],
        "align_scores": [
            0.9900184869766235,
            8.16143729025498e-05,
            0.0006167154642753303,
            7.16562062734738e-05,
            0.0007644402794539928,
            6.990483234403655e-05,
            0.0008086262387223542,
            5.777647311333567e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which employee was given the largest bonus? Give me his/her name.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Employee_ID",
            "select employee.Name, employee.Age",
            "select employee.Name, evaluation.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation"
        ],
        "align_scores": [
            0.9559048414230347,
            6.915559060871601e-05,
            0.0005585164180956781,
            6.490018859039992e-05,
            0.0002700114855542779,
            7.109632133506238e-05,
            0.0007096244371496141,
            6.742138793924823e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who got the largest bonus, give me their name.",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Employee_ID",
            "select employee.Name, employee.Age",
            "select employee.Name, employee.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "employee shop evaluation"
        ],
        "align_scores": [
            0.9881711006164551,
            5.920938929193653e-05,
            0.00025008467491716146,
            5.604818579740822e-05,
            0.0001836552983149886,
            6.0538779507623985e-05,
            0.0002082397841149941,
            5.8682242524810135e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the stores whose number of products is larger than the average.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.Shop_ID",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.8766254782676697,
            6.426926847780123e-05,
            0.0002123537560692057,
            5.805472392239608e-05,
            0.00032161190756596625,
            7.487464608857408e-05,
            0.00020040634262841195,
            6.466444756370038e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of stores whose number of products is larger than the average.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.Location",
            "select shop.Name, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9853874444961548,
            5.9670503105735406e-05,
            0.0002675169671420008,
            6.537349690916017e-05,
            0.00020693917758762836,
            5.432193574961275e-05,
            0.00020932192273903638,
            6.228579150047153e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the store names whose total products is greater than the average products.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.41052520275115967,
            7.276172254933044e-05,
            0.00022165337577462196,
            5.101786882732995e-05,
            0.000163553879247047,
            6.362070416798815e-05,
            0.0001579074451001361,
            5.4179461585590616e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the names of stores which sell an above-average number of products.",
        "gold_select": "select shop.Name",
        "select_candidates": [
            "select shop.Name",
            "select shop.Name, shop.Manager_name",
            "select shop.Name, shop.District",
            "select shop.Name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.7243082523345947,
            8.419957885053009e-05,
            0.0002464615972712636,
            7.494107558159158e-05,
            0.00023250473896041512,
            6.963669875403866e-05,
            0.0002531892096158117,
            6.286239658948034e-05
        ],
        "align_select": "select shop.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the smallest and largest number of products across all shops?",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select max(shop.Number_products), min(shop.Number_products)",
            "select shop.Number_products, min(shop.Number_products), max(shop.Number_products)",
            "select min(shop.Location), max(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9931262731552124,
            0.0008717954042367637,
            0.9944596290588379,
            0.0016825043130666018,
            0.00020373854204081,
            9.292236063629389e-05,
            0.0007008109823800623,
            0.00013670016778632998
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find all cities where there are two or more employees under the age of thirty.",
        "gold_select": "select employee.City",
        "select_candidates": [
            "select employee.City",
            "select employee.City, count(*)",
            "select employee.City as a possible employee.City",
            "select employee.City as the employee.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.9644426107406616,
            6.465445039793849e-05,
            0.0029530897736549377,
            6.201571522979066e-05,
            0.001367530319839716,
            5.9326157497707754e-05,
            0.0007724568713456392,
            5.291977140586823e-05
        ],
        "align_select": "select employee.City",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me the cities that have two or more employees under the age of 30.",
        "gold_select": "select employee.City",
        "select_candidates": [
            "select employee.City",
            "select employee.City, count(*)",
            "select employee.City for employee.Age",
            "select employee.City, employee.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee",
        "table_candidates": [
            "employee"
        ],
        "align_scores": [
            0.973217785358429,
            6.738764932379127e-05,
            0.004062301479279995,
            6.861476867925376e-05,
            0.0001981596287805587,
            5.82813736400567e-05,
            0.00013356204726733267,
            5.5482214520452544e-05
        ],
        "align_select": "select employee.City",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "Show me the manager name and district of the shop that sells the most products.",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Manager_name, shop.District, shop.Location",
            "select shop.Manager_name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9915453791618347,
            0.9940066337585449,
            0.007267947308719158,
            0.15494924783706665,
            0.00023296341532841325,
            0.0002112674410454929,
            0.9749246835708618,
            0.9880653023719788
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the manager's name and district for the shop with the highest sales volume.",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Location, shop.Manager_name",
            "select shop.Manager_name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9933795928955078,
            7.964688120409846e-05,
            0.0026900277007371187,
            8.411250018980354e-05,
            0.8492156863212585,
            9.37200675252825e-05,
            0.9848484396934509,
            9.302255784859881e-05
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the manager's name and the district of the store that sells the most items?",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Location, shop.Manager_name",
            "select shop.Manager_name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9931789636611938,
            0.9890933036804199,
            0.0024004641454666853,
            0.0022553640883415937,
            0.9918820261955261,
            0.9786293506622314,
            0.9897925853729248,
            0.9788467288017273
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of employee that received the largest one-time bonus?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Employee_ID",
            "select employee.Name, employee.Age",
            "select employee.Name, evaluation.Employee_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "employee shop evaluation"
        ],
        "align_scores": [
            0.9865069389343262,
            6.189459963934496e-05,
            0.00039770922739990056,
            5.795758988824673e-05,
            0.0002657651493791491,
            6.10735296504572e-05,
            0.00046115487930364907,
            5.6973673054017127e-05
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Which employee got the biggest one time bonus?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select evaluation.Employee_ID",
            "select evaluation.Employee_ID, employee.Name",
            "select evaluation.Year_awarded"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "evaluation",
            "hiring evaluation",
            "shop evaluation",
            "employee shop evaluation"
        ],
        "align_scores": [
            0.9820597171783447,
            0.9939775466918945,
            0.6951079964637756,
            0.9912412166595459,
            0.0036400863900780678,
            0.003418323351070285,
            0.0011633880203589797,
            0.0007852438720874488
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What's the name of the individual that received a one-time bonus of the greatest amount?",
        "gold_select": "select employee.Name",
        "select_candidates": [
            "select employee.Name",
            "select employee.Name, employee.Employee_ID",
            "select employee.Name, employee.Age",
            "select employee.Name, employee.City"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "employee evaluation",
        "table_candidates": [
            "employee evaluation",
            "employee hiring evaluation",
            "employee shop evaluation"
        ],
        "align_scores": [
            0.9400078058242798,
            0.8620458841323853,
            0.0005405845586210489,
            0.0002372680464759469,
            0.0003269225708208978,
            0.0003147033858112991,
            0.0003455096739344299,
            0.00035946047864854336
        ],
        "align_select": "select employee.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the lowest and the highest numbers of products sold in all stores.",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select max(shop.Number_products), min(shop.Number_products)",
            "select min(shop.District), max(shop.Number_products)",
            "select minimum(shop.Number_products), max(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9921585321426392,
            0.003932933323085308,
            0.9936822652816772,
            0.011176218278706074,
            0.00046877539716660976,
            0.00012054706894559786,
            0.00103039073292166,
            0.0002271542325615883
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the smallest and largest number of products of all stores.",
        "gold_select": "select min(shop.Number_products), max(shop.Number_products)",
        "select_candidates": [
            "select min(shop.Number_products), max(shop.Number_products)",
            "select shop.Number_products, min(shop.Number_products), max(shop.Number_products)",
            "select max(shop.Number_products), min(shop.Number_products)",
            "select min(shop.District), max(shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9945436716079712,
            0.0009426604956388474,
            0.00018762882973533124,
            9.208016854245216e-05,
            0.9952563643455505,
            0.0012243541423231363,
            0.00036174312117509544,
            9.901865996653214e-05
        ],
        "align_select": "select min(shop.Number_products), max(shop.Number_products)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the total count of stores?",
        "gold_select": "select count(distinct shop.Location)",
        "select_candidates": [
            "select count(*)",
            "select count(*), shop.Shop_ID",
            "select count(*), shop.Location",
            "select t1.c count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop",
            "shop hiring"
        ],
        "align_scores": [
            0.9938637018203735,
            7.547739369329065e-05,
            0.00016414413403254002,
            6.644827226409689e-05,
            0.00023399970086757094,
            7.056212052702904e-05,
            0.0006155249429866672,
            0.00012897908163722605
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the total count of distinct store locations.",
        "gold_select": "select count(distinct shop.Location)",
        "select_candidates": [
            "select count(distinct shop.Location)",
            "select count(*)",
            "select count(count(distinct shop.Location)",
            "select count((distinct shop.Location)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9958013892173767,
            0.9958013892173767,
            0.9909051656723022,
            0.9909051656723022,
            0.0003952378174290061,
            0.0003952378174290061,
            0.0022505964152514935,
            0.0022505964152514935
        ],
        "align_select": "select count(distinct shop.Location)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the districts that have stores with fewer than 3000 products, and those with over 10000 products.",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District (shop.Number_products), shop.District",
            "select shop.District (*), shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9708831310272217,
            0.9910187721252441,
            0.00012202579091535881,
            0.00016631830658297986,
            8.548823825549334e-05,
            0.00011695212742779404,
            8.993480878416449e-05,
            0.00012002849689451978
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
    },
    {
        "question": "What district has stores that have either product with less than 3000 or products greater than 10000?",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select distinct shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District (refers to shop.Number_products)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.10277462750673294,
            0.8385183215141296,
            0.0012681570369750261,
            0.031944211572408676,
            0.00011911782348761335,
            0.00014456444478128105,
            0.00022162737150210887,
            0.0005335641908459365
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which districts have stores that have over 10,000 products and stores with less than 3,000 products?",
        "gold_select": "select shop.District",
        "select_candidates": [
            "select shop.District",
            "select shop.District, shop.Number_products",
            "select shop.District, shop.Location",
            "select shop.District, shop.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9932360053062439,
            0.4126374423503876,
            0.0001764600456226617,
            0.00012003479059785604,
            0.0002073960640700534,
            0.00014404297689907253,
            0.0002446110302116722,
            0.00015865557361394167
        ],
        "align_select": "select shop.District",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Find the manager name and district of the shop with the most products.",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Manager_name, shop.District, shop.Location",
            "select shop.Manager_name, shop.Location"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.992889404296875,
            8.49714779178612e-05,
            0.002975384471938014,
            7.978385838214308e-05,
            0.00020667001081164926,
            7.023464422672987e-05,
            0.9789389371871948,
            9.292448521591723e-05
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the ID of the manager and district of the shop with the highest number of products?",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Location, shop.District",
            "select shop.District, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.003452542470768094,
            8.510983025189489e-05,
            0.0011574213858693838,
            0.00012996736040804535,
            0.001659815083257854,
            0.0001982507383218035,
            0.006837897934019566,
            8.08391923783347e-05
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the manager's name and district of the shop that has the highest product number.",
        "gold_select": "select shop.Manager_name, shop.District",
        "select_candidates": [
            "select shop.Manager_name, shop.District",
            "select shop.Name, shop.District",
            "select shop.Manager_name, shop.Location",
            "select shop.Location, shop.Manager_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "shop",
        "table_candidates": [
            "shop"
        ],
        "align_scores": [
            0.9885250926017761,
            7.881338387960568e-05,
            0.1330794394016266,
            7.724570605205372e-05,
            0.9631209373474121,
            9.233065793523565e-05,
            0.9428151249885559,
            9.637203766033053e-05
        ],
        "align_select": "select shop.Manager_name, shop.District",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total sum of bonuses received on evaluations?",
        "gold_select": "select sum(evaluation.Bonus)",
        "select_candidates": [
            "select sum(evaluation.Bonus)",
            "select sum(evaluation.Bonus), evaluation.Employee_ID",
            "select sum(evaluation.Bonus) delegated to evaluation.Employee_ID",
            "select sum(evaluation.Bonus), evaluation.Year_awarded"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "evaluation",
        "table_candidates": [
            "evaluation",
            "shop evaluation",
            "employee evaluation"
        ],
        "align_scores": [
            0.99503493309021,
            6.439773278543726e-05,
            0.00021206241217441857,
            5.468223025673069e-05,
            0.0015566983493044972,
            6.139586184872314e-05,
            0.00016413662524428219,
            5.790123395854607e-05
        ],
        "align_select": "select sum(evaluation.Bonus)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the total bonus given in all evaluations.",
        "gold_select": "select sum(evaluation.Bonus)",
        "select_candidates": [
            "select sum(evaluation.Bonus)",
            "select sum(evaluation.Bonus),",
            "select sum(evaluation.Bonus)",
            "select Sum(evaluation.Bonus)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "evaluation",
        "table_candidates": [
            "evaluation",
            "shop evaluation",
            "employee evaluation",
            "hiring evaluation",
            "employee hiring evaluation",
            "employee hiring"
        ],
        "align_scores": [
            0.9961058497428894,
            5.741167478845455e-05,
            0.0006239907233975828,
            7.71300692576915e-05,
            0.9961058497428894,
            5.741167478845455e-05,
            0.9961058497428894,
            5.741167478845455e-05
        ],
        "align_select": "select sum(evaluation.Bonus)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the totals on evaluation bonuses.",
        "gold_select": "select sum(evaluation.Bonus)",
        "select_candidates": [
            "select sum(evaluation.Bonus)",
            "select sums(evaluation.Bonus)",
            "select sum(evaluation.Bonus),",
            "select evaluation.Bonus"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "evaluation",
        "table_candidates": [
            "evaluation",
            "shop evaluation",
            "employee evaluation"
        ],
        "align_scores": [
            0.9945273995399475,
            0.0008928916067816317,
            0.07352764904499054,
            0.000297251099254936,
            0.0006217870977707207,
            0.030192803591489792,
            0.013098802417516708,
            0.0032417422626167536
        ],
        "align_select": "select sum(evaluation.Bonus)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the smallest version and its template type code?",
        "gold_select": "select min(Templates.Version_Number), Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select min(Templates.Version_Number), Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select min(Templates.Template_ID), Templates.Template_Type_Code"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9944412112236023,
            5.608470382867381e-05,
            0.00014295298024080694,
            6.160922202980146e-05,
            0.0004948734422214329,
            5.851219975738786e-05,
            8.452732436126098e-05,
            6.28885391051881e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the earliest version number and show it's template type code.",
        "gold_select": "select min(Templates.Version_Number), Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Templates.Version_Number.c1, Templates.Template_Type_Code",
            "select t1.c 1, Templates.Template_Type_Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9954760670661926,
            7.502745575038716e-05,
            0.0002373284805798903,
            9.003485320135951e-05,
            0.00027123448671773076,
            6.914708501426503e-05,
            0.00043372492655180395,
            8.019056258490309e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total count of documents that use the PPT template type?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select Documents.Document_ID, count(*)",
            "select count(*), Templates.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9955119490623474,
            0.00019140647782478482,
            0.00023869161668699235,
            0.0011472381884232163,
            0.0003069162485189736,
            0.0009281748207286,
            0.00018621156050357968,
            0.0005348792183212936
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the count of documents that use the PPT template type.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select Documents.Document_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9960781931877136,
            0.00014311622362583876,
            0.00022917432943359017,
            0.0006591222481802106,
            0.0001873508153948933,
            0.0010871439008042216,
            0.0002465466968715191,
            0.00035698540159501135
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the count of documents that use PPT template type.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9958874583244324,
            0.0001584298734087497,
            0.00022664820426143706,
            0.01341781672090292,
            0.0002153313544113189,
            0.006380483508110046,
            0.00021339947124943137,
            0.02281149849295616
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the total count of documents with the PPT template type.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select Documents.Document_ID, count(*)",
            "select count(*), Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9954481720924377,
            0.00018005905440077186,
            0.00022272043861448765,
            0.0011583687737584114,
            0.000260620639892295,
            0.000287039001705125,
            0.00019377662101760507,
            0.00033100711880251765
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the id and name of the document that has the highest number of paragraphs.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select Paragraphs.Document_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9937175512313843,
            6.532488623633981e-05,
            0.00029109572642482817,
            5.680890171788633e-05,
            0.008594224229454994,
            6.860947905806825e-05,
            0.0024349517188966274,
            6.552722334163263e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show all document ids and the total count of paragraphs in each document. Order by id.",
        "gold_select": "select Paragraphs.Document_ID, count(*)",
        "select_candidates": [
            "select Paragraphs.Document_ID, count(*)",
            "select Documents.Document_ID, count(*)",
            "select Paragraphs.Document_ID, sum(Paragraphs.Paragraph_Text)",
            "select Paragraphs.Document_ID, count(*), Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9965973496437073,
            0.0001715779071673751,
            0.9959561228752136,
            0.00017410035070497543,
            0.0007721695001237094,
            0.00017254687554668635,
            0.0001379797322442755,
            7.413206913042814e-05
        ],
        "align_select": "select Paragraphs.Document_ID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "Find the total count of templates.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Date_Effective_To"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Templates Documents"
        ],
        "align_scores": [
            0.9950952529907227,
            0.00011561190331121907,
            0.0001927314733620733,
            7.326692866627127e-05,
            0.00017072832270059735,
            7.46952136978507e-05,
            0.00015503868053201586,
            7.434558210661635e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "what is the total count of templates?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*), Templates.Date_Effective_To"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates",
            "Templates Documents"
        ],
        "align_scores": [
            0.994662344455719,
            8.609100041212514e-05,
            0.00017023415421135724,
            6.0955993831157684e-05,
            0.00016149804287124425,
            6.478381692431867e-05,
            0.00022328221530187875,
            6.030801159795374e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Return the code of the template type that is used in the most number of documents.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Documents.Document_Description",
            "select Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9944023489952087,
            6.609020056203008e-05,
            0.0002790427242871374,
            5.887573570362292e-05,
            0.0005626474739983678,
            5.806723129353486e-05,
            0.0005606487975455821,
            7.63316493248567e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the code of the template type used most in the documents.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Documents.Document_Name",
            "select Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates"
        ],
        "align_scores": [
            0.9944986701011658,
            7.475043094018474e-05,
            0.0001607081649126485,
            5.804564352729358e-05,
            0.0005561891011893749,
            7.53007479943335e-05,
            0.000507388380356133,
            7.094697502907366e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code of the template type that appears the most in documents?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code, Documents.Document_Description",
            "select Templates.Template_Type_Code (http://Templates.Template_Type_Code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates"
        ],
        "align_scores": [
            0.9938263297080994,
            9.116244473261759e-05,
            0.00035178958205506206,
            7.005364022916183e-05,
            0.0008555377717129886,
            6.972187838982791e-05,
            0.0032933629117906094,
            8.529653860023245e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the document with one to two paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_Name ou Documents.Document_Description"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.994918167591095,
            0.00022870632528793067,
            0.0004556452331598848,
            6.296402716543525e-05,
            0.00039030349580571055,
            6.996458250796422e-05,
            0.0034770772326737642,
            8.385423279833049e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the document id that has a count between 1 and 2 paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details",
            "select Paragraphs.Document_ID (Paragraphs.Paragraph_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9918436408042908,
            0.0001369373349007219,
            0.0001850795524660498,
            6.421290163416415e-05,
            0.00040234060725197196,
            6.77700518281199e-05,
            0.00023519637761637568,
            7.66561643104069e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the ids of the documents that has more or equal to 1 or 2 paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID",
            "select t4.c1",
            "select Templates.Template_ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.009996002539992332,
            0.9805980920791626,
            0.017651349306106567,
            0.9871751666069031,
            0.0002976339601445943,
            0.0005381946102716029,
            0.02736460044980049,
            0.7793822884559631
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the ID of document with one or two paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.0005522757419385016,
            0.9959619641304016,
            0.00043808293412439525,
            0.995904266834259,
            8.924595749704167e-05,
            0.0002996186667587608,
            8.491882908856496e-05,
            0.00047785593778826296
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the document id with one paragraph or two.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID (or Paragraphs.Paragraph_Text)",
            "select Paragraphs.Document_ID - Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.002041925210505724,
            0.9957959651947021,
            0.00011414479376981035,
            0.0005137830739840865,
            0.00027550070080906153,
            0.007688775192946196,
            0.00013180925452616066,
            0.000713803805410862
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the document ids, names, and paragraph counts for each document.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, Paragraphs.Document_ID, count(*)",
            "select Documents.Document_ID, Documents.Template_ID, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.974225640296936,
            0.00019469688413664699,
            0.974225640296936,
            0.00019469688413664699,
            0.007087288424372673,
            0.00015950153465382755,
            0.00016496884927619249,
            0.00018252264999318868
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the document ids, names and the total count of paragraphs in each document.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name.c2, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9958775043487549,
            0.00015243046800605953,
            0.9958775043487549,
            0.00015243046800605953,
            0.9167439937591553,
            0.00013873014540877193,
            0.0003220985527150333,
            0.00013788767682854086
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Give me an list of all the document ids, name and paragraph counts for each document.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Template_ID, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9274595379829407,
            0.0001444560184609145,
            0.9274595379829407,
            0.0001444560184609145,
            0.8250225186347961,
            0.00014492122863885015,
            0.00013216517982073128,
            0.00011672084656311199
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the ids, names and paragraph counts for each document.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*), Documents.Document_Description",
            "select Paragraphs.Document_ID, Documents.Document_Name, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9866982102394104,
            0.00014931154146324843,
            0.9866982102394104,
            0.00014931154146324843,
            0.00033244481892324984,
            8.215849084081128e-05,
            0.8113012313842773,
            0.00016324444732163101
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the names and ids of each document, as well as the total count of paragraphs per document.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Documents.Document_Name, Paragraphs.Document_ID, count(*)",
            "select Documents.Document_Name, Documents.Document_ID, count(*)",
            "select Documents.Document_Name, Paragraphs.Document_ID, count(*),",
            "select Documents.Document_Name, Paragraphs.Document_ID, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9958111047744751,
            0.000248069001827389,
            0.9936416745185852,
            0.00027549624792300165,
            0.002004391746595502,
            0.0001618774695089087,
            0.9958111047744751,
            0.000248069001827389
        ],
        "align_select": "select Documents.Document_Name, Paragraphs.Document_ID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me all the ids and names of each document, as well as the total count of paragraphs in each.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*), Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.8502535820007324,
            0.00021511259546969086,
            0.9936302304267883,
            0.00021937591372989118,
            0.9936302304267883,
            0.00021937591372989118,
            0.0005964115262031555,
            0.00010432747512822971
        ],
        "align_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the ids and names of each document, along with the total count of paragraphs in each.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Paragraphs.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*)",
            "select Documents.Document_ID, Documents.Document_Name, count(*), Paragraphs.Document_ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9954568147659302,
            0.0002333086304133758,
            0.7954018712043762,
            0.00021136195573490113,
            0.9954568147659302,
            0.0002333086304133758,
            0.00041407602839171886,
            0.00011444888514233753
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me which template type code has the largest number of templates.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select Templates.Template_Type_Code (http://www.Templates.Template_Type_Code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9951528310775757,
            0.0001075605396181345,
            0.00033249807893298566,
            5.893365232623182e-05,
            0.0007467067916877568,
            6.940307503100485e-05,
            0.008302210830152035,
            0.00010531541920499876
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code of a type with most templates?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code (symbol Templates.Template_Type_Code)",
            "select Templates.Template_Type_Code (ref. Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9687672853469849,
            8.65314868860878e-05,
            0.0005355058237910271,
            5.939329639659263e-05,
            0.00021003362780902535,
            6.40805228613317e-05,
            0.000928000605199486,
            7.118056964827701e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which template type has the most count of templates?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Template_Details",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Ref_Template_Types.Template_Type_Description, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9929457306861877,
            0.00011419270595069975,
            0.0002847619471140206,
            7.050453859847039e-05,
            0.0002754348097369075,
            5.6194563512690365e-05,
            0.002040814608335495,
            7.783643377479166e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which template type code has the most templates?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select Templates.Template_Type_Code (symbol Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9955215454101562,
            7.330437802011147e-05,
            0.0005261239130049944,
            5.937777677900158e-05,
            0.0012737546348944306,
            6.466653576353565e-05,
            0.000388445274438709,
            6.466900231316686e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the template type codes with the highest number of templates.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select Templates.Template_Type_Code (http://www.Templates.Template_Type_Code)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9954870343208313,
            6.656800542259589e-05,
            0.0002187032368965447,
            5.195761696086265e-05,
            0.0004351789830252528,
            5.7650660892250016e-05,
            0.006852283608168364,
            7.470611308235675e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "which template type code has the most templates?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select Templates.Template_Type_Code (symbol Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9955215454101562,
            7.330437802011147e-05,
            0.0005261239130049944,
            5.937777677900158e-05,
            0.0012737546348944306,
            6.466653576353565e-05,
            0.000388445274438709,
            6.466900231316686e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the template id and type code of the largest number of documents using it.",
        "gold_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "select_candidates": [
            "select Documents.Template_ID, Templates.Template_Type_Code",
            "select Documents.Template_ID, Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Documents.Template_ID, Templates.Template_Type_Code, Templates.Template_Details",
            "select Documents.Template_ID, Templates.Template_Type_Code, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9838067293167114,
            0.00010591828322503716,
            0.00014750839909538627,
            5.46341689187102e-05,
            0.00021642452338710427,
            6.690498412353918e-05,
            0.00024786184076219797,
            7.245837332447991e-05
        ],
        "align_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show all template type codes and list the total count of templates for each.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Templates.Template_Type_Code, count(*), Templates.Date_Effective_From",
            "select Templates.Template_Type_Code.c2, count(*)",
            "select Templates.Template_Type_Code, count(**)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9963068962097168,
            0.00027449053595773876,
            0.0004955467884428799,
            0.0001366484211757779,
            0.00045453791972249746,
            0.00013182534894440323,
            0.9953130483627319,
            0.00029345625080168247
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Return the id and type code of the template that is used for the most documents.",
        "gold_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Documents.Template_ID, Templates.Template_Type_Code",
            "select Documents.Document_ID, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Template_Details"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9941307902336121,
            7.620298129040748e-05,
            0.8797568082809448,
            7.523665408371016e-05,
            0.000358683115337044,
            7.226881280075759e-05,
            0.0002847135765478015,
            6.653551099589095e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the template id and type code for the template used for the largest number of documents.",
        "gold_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "select_candidates": [
            "select Documents.Template_ID, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Documents.Template_ID, Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Documents.Template_ID, Templates.Template_Type_Code, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9467377662658691,
            7.086367986630648e-05,
            0.9941192865371704,
            7.426565571222454e-05,
            0.0001413521822541952,
            5.0879349146271124e-05,
            0.0002000123349716887,
            6.119945464888588e-05
        ],
        "align_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the template type code and id of the template used for the most documents?",
        "gold_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code, Templates.Template_ID",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Documents.Document_Name, Documents.Template_ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9943668246269226,
            8.174101094482467e-05,
            0.9940013289451599,
            8.362671360373497e-05,
            0.9943019151687622,
            8.710389374755323e-05,
            0.0006484347395598888,
            0.00010362589819123968
        ],
        "align_select": "select Templates.Template_Type_Code, Templates.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the id and type code of the template for the largest document counts.",
        "gold_select": "select Documents.Template_ID, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_ID, Templates.Template_Type_Code",
            "select Documents.Template_ID, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Template_Details",
            "select Templates.Template_ID, Templates.Template_Type_Code, Templates.Date_Effective_From"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9857472777366638,
            9.92272689472884e-05,
            0.9620938897132874,
            9.66708903433755e-05,
            0.00020203253370709717,
            6.844009476481006e-05,
            0.0001327541540376842,
            5.693201092071831e-05
        ],
        "align_select": "select Templates.Template_ID, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give the id of the document with the lowest number of paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID, Paragraphs.Document_ID",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9953010082244873,
            7.535584882134572e-05,
            0.9958133101463318,
            7.054334855638444e-05,
            0.00019755538960453123,
            6.324674905044958e-05,
            0.0005076673114672303,
            5.477930244524032e-05
        ],
        "align_select": "select Documents.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the ID of the document with the smallest number of paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_ID, Paragraphs.Document_ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9954220652580261,
            7.269001071108505e-05,
            0.995980978012085,
            6.804507574997842e-05,
            0.0003534373827278614,
            5.382638846640475e-05,
            0.00016845845675561577,
            6.187736289575696e-05
        ],
        "align_select": "select Documents.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the ID of the document that has the least amount of paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_ID",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Document_ID, Paragraphs.Document_ID",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs"
        ],
        "align_scores": [
            0.9928279519081116,
            6.70226727379486e-05,
            0.0009685212280601263,
            6.0992042563157156e-05,
            0.0003050687082577497,
            5.8719855587696657e-05,
            0.0009685212280601263,
            6.0992042563157156e-05
        ],
        "align_select": "select Documents.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find out the id of the document with the minimum amount of paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_ID",
            "select Documents.Document_ID, Paragraphs.Document_ID",
            "select Documents.Document_ID, Documents.Document_Description",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9952383041381836,
            8.098918624455109e-05,
            0.0002552129444666207,
            6.366785964928567e-05,
            0.00022097582404967397,
            5.526570384972729e-05,
            0.0008593270322307944,
            5.7050707255257294e-05
        ],
        "align_select": "select Documents.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the document id with the fewest paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID (Paragraphs.Paragraph_ID)",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Ref_Template_Types Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9959271550178528,
            6.37418488622643e-05,
            0.00046033752732910216,
            5.365983088267967e-05,
            0.0013043401995673776,
            5.582601806963794e-05,
            0.0004503625677898526,
            6.066615242161788e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the document ids whose paragraph numbers is greater or equal to two.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID - Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Paragraphs.Other_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.8890256881713867,
            0.0001590859319549054,
            0.00012785849685315043,
            6.569045217474923e-05,
            0.00015235650062095374,
            5.792907177237794e-05,
            0.00042672845302149653,
            6.847587792435661e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the ids of the documents that has at least 2 paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID, Documents.Template_ID",
            "select Documents.Document_ID, Paragraphs.Document_ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9769189953804016,
            9.978787420550361e-05,
            0.9938325881958008,
            0.0001036484245560132,
            0.00016614711785223335,
            5.9486934333108366e-05,
            0.00042203126940876245,
            6.630318966927007e-05
        ],
        "align_select": "select Documents.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the ids of documents that have more or equal to 2 paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9910368919372559,
            0.0001648395846132189,
            0.9863025546073914,
            0.0001555525086587295,
            0.0008770253625698388,
            7.299175194930285e-05,
            0.00026915667694993317,
            7.408824603771791e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all the ID's of the documents which contains more or equal to two paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID",
            "select t4.c0",
            "select t5.c0"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Paragraphs",
            "Templates Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9861895442008972,
            0.00016508590488228947,
            0.9900460839271545,
            0.00019124284153804183,
            0.0007931457948870957,
            7.600753451697528e-05,
            0.0009001884609460831,
            8.265575888799503e-05
        ],
        "align_select": "select Documents.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the ids of documents that have more or equal to 2 paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID, Documents.Document_Name",
            "select Documents.Document_ID, Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9934554696083069,
            0.0001798367011360824,
            0.9909602403640747,
            0.00016596881323494017,
            0.0007875710143707693,
            7.553801697213203e-05,
            0.0004329771618358791,
            7.94296502135694e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the total count of documents?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Documents.Template_ID",
            "select count(*), Documents.Document_ID",
            "select t2.c count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents"
        ],
        "align_scores": [
            0.9947488903999329,
            7.934001769172028e-05,
            0.00014910852769389749,
            6.44510582787916e-05,
            0.0001479730271967128,
            6.467640196206048e-05,
            0.0006345474976114929,
            0.00012558109301608056
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the ids of the documents with one or two paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Paragraphs.Document_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9958668947219849,
            0.0013028093380853534,
            0.9953006505966187,
            0.0015777676599100232,
            0.00027699751080945134,
            0.00010859173198696226,
            0.000734046334400773,
            8.455247734673321e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give the ids of documents that have 1 or 2 paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.0004870542325079441,
            0.9963003396987915,
            0.0005080245900899172,
            0.9942765831947327,
            9.905274782795459e-05,
            0.0003430482465773821,
            0.00010225830919807777,
            0.000449043553089723
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the ids of documents that have one and two paragraphs?",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs",
            "Ref_Template_Types Paragraphs"
        ],
        "align_scores": [
            0.000733686494641006,
            0.000945005682297051,
            0.0008470014436170459,
            0.0012603085488080978,
            8.660727326059714e-05,
            8.908543532015756e-05,
            8.05920353741385e-05,
            7.529248978244141e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the ids of documents with 1-2 paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text",
            "select Paragraphs.Paragraph_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Documents Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9960997104644775,
            0.0002870576281566173,
            0.9958113431930542,
            0.00024133332772180438,
            0.00023186167527455837,
            6.926158675923944e-05,
            0.10204162448644638,
            0.00025477164308540523
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all template types that have been used multiple times and show their IDs.",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Templates.Template_Type_Code, Templates.Template_ID",
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, count(*)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Templates",
            "Ref_Template_Types Templates",
            "Templates Documents",
            "Documents Templates",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.00038441811921074986,
            9.031732042785734e-05,
            0.9827473163604736,
            0.00011904583516297862,
            0.0004686324391514063,
            7.172368350438774e-05,
            0.012352913618087769,
            9.486594353802502e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show ids for all template types used by two or more documents.",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Documents.Template_ID, Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9940158128738403,
            0.00014288020611274987,
            0.00047330520465038717,
            7.73305437178351e-05,
            0.0011035247007384896,
            7.349027873715386e-05,
            0.00047330520465038717,
            7.73305437178351e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all the ids of templates that have been used in two or more documents.",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Description",
            "select Documents.Template_ID,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents"
        ],
        "align_scores": [
            0.99368816614151,
            0.00017324354848824441,
            0.038076549768447876,
            9.894683171296492e-05,
            0.0006309012533165514,
            8.132614311762154e-05,
            0.0024502314627170563,
            7.477917824871838e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Retrieve the version numbers and template type codes for the templates with a version number higher than 5.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Version_Number.c2, Templates.Version_Number",
            "select Documents.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9936614036560059,
            0.00014262400509323925,
            0.00024714117171242833,
            6.992469570832327e-05,
            0.000628171837888658,
            7.015036680968478e-05,
            0.0003772895724978298,
            8.999382407637313e-05
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the version number and template type code of every template which has a higher version number than 5.",
        "gold_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Version_Number, Templates.Template_Type_Code",
            "select Templates.Version_Number.c2, Templates.Version_Number",
            "select Documents.Template_ID, Templates.Template_Type_Code",
            "select Templates.Template_ID, Templates.Template_Type_Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9920558333396912,
            0.00014032000035513192,
            0.0007051225984469056,
            7.262418512254953e-05,
            0.0004189130268059671,
            9.43563791224733e-05,
            0.0004973620525561273,
            0.00010597567597869784
        ],
        "align_select": "select Templates.Version_Number, Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all template ids and list the total count of documents per template.",
        "gold_select": "select Documents.Template_ID, count(*)",
        "select_candidates": [
            "select Documents.Template_ID, count(*)",
            "select Documents.Template_ID, sum(Documents.Document_ID)",
            "select Documents.Template_ID, count(Documents.Document_ID)",
            "select Documents.Template_ID, count(per_Documents.Document_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents"
        ],
        "align_scores": [
            0.9965331554412842,
            0.0002985165920108557,
            0.0026990333572030067,
            0.00015325374261010438,
            0.0017041765386238694,
            0.00014610547805204988,
            0.0005991962971165776,
            0.00016618894005659968
        ],
        "align_select": "select Documents.Template_ID, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List all documents that have at least 2 paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Documents.Document_Name",
            "select Documents.Document_Name, Documents.Document_Description",
            "select Documents.Document_Name, Documents.Document_Description, Documents.Other_Details",
            "select Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Documents Paragraphs",
            "Ref_Template_Types Documents Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9900668859481812,
            0.00010807387297973037,
            0.001489240792579949,
            5.590901491814293e-05,
            0.0014477500226348639,
            5.401634189183824e-05,
            0.0008774946327321231,
            5.976321699563414e-05
        ],
        "align_select": "select Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all documents with id and two or more paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Documents.Document_ID, Paragraphs.Document_ID",
            "select Paragraphs.Document_ID, Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9919149875640869,
            7.390245446003973e-05,
            0.9920550584793091,
            6.166001548990607e-05,
            0.0007030378328636289,
            5.754739686381072e-05,
            0.005440013017505407,
            6.120261241449043e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the ids of documents that have more or equal to two paragraphs.",
        "gold_select": "select Paragraphs.Document_ID",
        "select_candidates": [
            "select Paragraphs.Document_ID",
            "select Documents.Document_ID",
            "select Paragraphs.Document_ID",
            "select t4.c1"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Documents Paragraphs",
            "Templates Paragraphs",
            "Templates Documents Paragraphs"
        ],
        "align_scores": [
            0.9866199493408203,
            0.0001933235616888851,
            0.9866675734519958,
            0.00015147404337767512,
            0.9866199493408203,
            0.0001933235616888851,
            0.0009996596490964293,
            8.865018025971949e-05
        ],
        "align_select": "select Paragraphs.Document_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the count of the templates of the type CV.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Templates.Template_Type_Code",
            "select count(*), Templates.Template_ID",
            "select count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9963853359222412,
            9.436187247047201e-05,
            0.00016044665244407952,
            0.00047690668725408614,
            0.00015484691539313644,
            0.00013513173325918615,
            0.00044458714546635747,
            0.002368464134633541
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the ID of any templates used in at least two documents.",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Templates.Template_Details",
            "select Documents.Template_ID, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9951902627944946,
            0.00011048447049688548,
            0.005465235095471144,
            6.828845653217286e-05,
            0.0008840872906148434,
            6.874949758639559e-05,
            0.00035469833528622985,
            6.571050471393391e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the template ids of any templates used in multiple documents.",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Description",
            "select Documents.Template_ID (Documents.Document_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents"
        ],
        "align_scores": [
            0.9925733804702759,
            0.00013125890109222382,
            0.024815348908305168,
            7.623358396813273e-05,
            0.00048157741548493505,
            7.11252650944516e-05,
            0.0034702401608228683,
            7.058459596009925e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the template ids of any templates used in multiple documents.",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Description",
            "select Documents.Template_ID (Documents.Document_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents"
        ],
        "align_scores": [
            0.9936755299568176,
            0.00013625677092932165,
            0.023523885756731033,
            7.769346120767295e-05,
            0.0006268029101192951,
            7.490149437217042e-05,
            0.004843662492930889,
            7.217460370156914e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the template ids of templates used in at least two documents.",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Description",
            "select Documents.Template_ID (Documents.Document_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents"
        ],
        "align_scores": [
            0.9950671195983887,
            0.00010759120777947828,
            0.0016736303223297,
            6.586093513760716e-05,
            0.000290991913061589,
            6.390448106685653e-05,
            0.003049766644835472,
            5.844500628882088e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the template ids of any templates used in two or more documents?",
        "gold_select": "select Documents.Template_ID",
        "select_candidates": [
            "select Documents.Template_ID",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Description",
            "select Documents.Template_ID,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Ref_Template_Types Documents"
        ],
        "align_scores": [
            0.9906242489814758,
            0.00014265476784203202,
            0.0013432123232632875,
            7.723591261310503e-05,
            0.000427455612225458,
            7.354202534770593e-05,
            0.001969762844964862,
            6.398338155122474e-05
        ],
        "align_select": "select Documents.Template_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which template type code has the most documents?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code (ref. Documents.Template_ID)",
            "select Templates.Template_Type_Code (or Documents.Template_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9957549571990967,
            7.217988604679704e-05,
            0.00026612344663590193,
            6.358904647640884e-05,
            0.0003191293217241764,
            6.12893418292515e-05,
            0.0013909373665228486,
            8.572006481699646e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the template type code that is used by most documents?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Templates.Template_Type_Code (http://Templates.Template_Type_Code)",
            "select Templates.Template_Type_Code (or Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Templates"
        ],
        "align_scores": [
            0.9949674010276794,
            7.21721226000227e-05,
            0.000256119470577687,
            5.640017843688838e-05,
            0.0014176516560837626,
            6.972979463171214e-05,
            0.05356385186314583,
            8.752820576773956e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the template type code used by the largest number of documents.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Documents.Document_Name",
            "select Templates.Template_Type_Code (or Documents.Template_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9956800937652588,
            6.777192174922675e-05,
            0.00016601834795437753,
            5.5339223763439804e-05,
            0.0003671414451673627,
            6.180441414471716e-05,
            0.001104055787436664,
            6.966086948523298e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Out of which template types, which ones have the largest total number of documents?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Documents.Template_ID",
            "select Ref_Template_Types.Template_Type_Description, Templates.Template_Type_Code",
            "select Templates.Version_Number, Documents.Template_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9861975312232971,
            7.841896876925603e-05,
            0.00047362607438117266,
            6.60211662761867e-05,
            0.0077273184433579445,
            7.117228233255446e-05,
            0.000251521822065115,
            5.8471418014960364e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total count of paragraphs?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Paragraphs.Paragraph_ID",
            "select count(*), Paragraphs.Document_ID",
            "select count(*), Paragraphs.Paragraph_Text"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Paragraphs",
        "table_candidates": [
            "Paragraphs",
            "Templates Paragraphs"
        ],
        "align_scores": [
            0.9942941069602966,
            9.852502262219787e-05,
            0.0001300424919463694,
            6.442862650146708e-05,
            0.0001208935645991005,
            6.43335297354497e-05,
            0.00019774329848587513,
            6.831073551438749e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List all the template type codes with less than three templates.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code Suffice-to-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING",
            "select Templates.Template_Type_Code SAMPLE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "select Templates.Template_Type_Code Suffice-to-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9949575066566467,
            0.00020196627883706242,
            0.00013991996820550412,
            0.00021439512784127146,
            0.00012472197704482824,
            0.00018407429161015898,
            0.00015635789895895869,
            0.00021945565822534263
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the codes of template types that have fewer than three templates.",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code (or Templates.Date_Effective_From)",
            "select Templates.Template_Type_Code, Templates.Version_Number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.994022786617279,
            0.00018865674792323261,
            0.0004148016159888357,
            7.477032340830192e-05,
            0.0017867524875327945,
            0.000123670426546596,
            0.0001862479402916506,
            6.237751222215593e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all the template type codes and show the total count of documents per type.",
        "gold_select": "select Templates.Template_Type_Code, count(*)",
        "select_candidates": [
            "select Templates.Template_Type_Code, count(*)",
            "select Documents.Template_ID, count(*)",
            "select Documents.Document_Name, count(*)",
            "select Templates.Template_Type_Code, sum(Documents.Document_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates Documents",
        "table_candidates": [
            "Templates Documents",
            "Ref_Template_Types Templates Documents",
            "Documents"
        ],
        "align_scores": [
            0.9961307048797607,
            0.0002867238945327699,
            0.03272212669253349,
            0.0007104980759322643,
            0.0002938983088824898,
            0.0001974358019651845,
            0.017967311665415764,
            0.00024285535619128495
        ],
        "align_select": "select Templates.Template_Type_Code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the code of the template type that has the most templates?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select Templates.Template_Type_Code (symbol Templates.Date_Effective_From)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.994934618473053,
            8.57038758113049e-05,
            0.000565190042834729,
            6.340628897305578e-05,
            0.0011836574412882328,
            7.149873272283003e-05,
            0.0003173371951561421,
            6.603539804928005e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which template type code shows the largest count of templates?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To",
            "select Templates.Template_Type_Code, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9922122955322266,
            0.00011501779954414815,
            0.00028206524439156055,
            6.0004145780112594e-05,
            0.0006078878650441766,
            6.902217864990234e-05,
            0.0003792401112150401,
            7.808527152519673e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the type code of the template type that has the largest number of templates?",
        "gold_select": "select Templates.Template_Type_Code",
        "select_candidates": [
            "select Templates.Template_Type_Code",
            "select Templates.Template_Type_Code, Templates.Date_Effective_From",
            "select Templates.Template_Type_Code (http://www.Templates.Template_Type_Code)",
            "select Templates.Template_Type_Code, Templates.Template_Details"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Templates",
        "table_candidates": [
            "Templates"
        ],
        "align_scores": [
            0.9939143061637878,
            0.0001283910678466782,
            0.0003801359562203288,
            6.242583185667172e-05,
            0.008700360544025898,
            0.00012746654101647437,
            0.00037301835254766047,
            7.420378096867353e-05
        ],
        "align_select": "select Templates.Template_Type_Code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the total count of the different templates used for documents.",
        "gold_select": "select count(distinct Documents.Template_ID)",
        "select_candidates": [
            "select count(distinct Documents.Template_ID)",
            "select Documents.Template_ID, count(distinct Documents.Template_ID)",
            "select count(select count(distinct Documents.Template_ID)",
            "select count(selection count(distinct Documents.Template_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Documents",
        "table_candidates": [
            "Documents",
            "Templates Documents",
            "Ref_Template_Types Templates Documents"
        ],
        "align_scores": [
            0.9948229789733887,
            0.9948229789733887,
            0.00020802744256798178,
            0.00020802744256798178,
            0.0009915251284837723,
            0.0009915251284837723,
            0.000312899675918743,
            0.000312899675918743
        ],
        "align_select": "select count(distinct Documents.Template_ID)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which document id and name have the largest number of paragraphs?",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9935013651847839,
            0.00010232776548946276,
            0.015155306085944176,
            0.00010429305984871462,
            0.002774497726932168,
            9.283883991884068e-05,
            0.0004221069102641195,
            6.495144771179184e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the document id and name that has the highest number of paragraphs.",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9939252734184265,
            8.422141399933025e-05,
            0.018161261454224586,
            8.497286034980789e-05,
            0.0018955148989334702,
            7.790259405737743e-05,
            0.0004636770754586905,
            5.695900472346693e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the document id and name with most paragraphs?",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name",
        "select_candidates": [
            "select Paragraphs.Document_ID, Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name",
            "select Documents.Template_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Documents.Document_Name, Documents.Document_Description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.0045362478122115135,
            7.034779264358804e-05,
            0.9943557977676392,
            7.835581345716491e-05,
            0.002025175141170621,
            7.873075810493901e-05,
            0.00016269218758679926,
            5.765396053902805e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the document id and name whose number of paragraph exceeds the others?",
        "gold_select": "select Paragraphs.Document_ID, Documents.Document_Name",
        "select_candidates": [
            "select Documents.Document_ID, Documents.Document_Name",
            "select Paragraphs.Document_ID, Documents.Document_Name",
            "select Documents.Document_ID, Documents.Document_Name, Documents.Document_Description",
            "select t2, Documents.Document_ID, Documents.Document_Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Documents Paragraphs",
        "table_candidates": [
            "Documents Paragraphs"
        ],
        "align_scores": [
            0.9893484115600586,
            0.00011554457159945741,
            0.004371757619082928,
            9.619961201678962e-05,
            0.00032820075284689665,
            7.804684719303623e-05,
            0.0002966203901451081,
            6.756517541361973e-05
        ],
        "align_select": "select Documents.Document_ID, Documents.Document_Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of the teachers in order from youngest to oldest?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name (ordered by teacher.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9944775700569153,
            0.0002222071634605527,
            0.00015392919885925949,
            0.00012833108485210687,
            0.00020243592734914273,
            0.0001498810015618801,
            0.002067727968096733,
            0.0001445247617084533
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the names of the teachers starting with the youngest.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name (orthodox teacher.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9875497221946716,
            0.9875497221946716,
            0.00016189677990041673,
            0.00016189677990041673,
            0.00018526072381064296,
            0.00018526072381064296,
            0.0010060957865789533,
            0.0010060957865789533
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the hometown that the largest number of teachers from?",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown (GROUP BY-ORDER BY-LIMIT)",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Hometown, t1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9881137013435364,
            6.547394150402397e-05,
            0.0020806537941098213,
            6.48066052235663e-05,
            0.00038861847133375704,
            5.5721237004036084e-05,
            0.0005003022379241884,
            5.799429345643148e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find out the names of teachers and the amount of courses they teach.",
        "gold_select": "select teacher.Name, count(*)",
        "select_candidates": [
            "select teacher.Name, count(*)",
            "select teacher.Name, count(*), course.Course",
            "select teacher.Name, count(distinct course.Course)",
            "select teacher.Name, count(course.Course)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9893276691436768,
            0.00022716289095114917,
            0.001067361212335527,
            0.00011304106010356918,
            0.00786523800343275,
            0.00011167352931806818,
            0.19634677469730377,
            0.00016415963182225823
        ],
        "align_select": "select teacher.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Find names of teachers and list their total counts in courses.",
        "gold_select": "select teacher.Name, count(*)",
        "select_candidates": [
            "select teacher.Name, count(*)",
            "select teacher.Name, sum(course_arrange.Teacher_ID)",
            "select teacher.Name, count(*), course_arrange.Teacher_ID",
            "select teacher.Name, sum(course_arrange.Course_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "teacher course_arrange",
            "course teacher course_arrange"
        ],
        "align_scores": [
            0.9942978024482727,
            0.00020841376681346446,
            0.0038322231266647577,
            0.0005142863374203444,
            0.00016579673683736473,
            9.367414168082178e-05,
            0.0034352997317910194,
            0.0003646173281595111
        ],
        "align_select": "select teacher.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Who are the professors who teach two or more courses?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, course.Staring_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9841300249099731,
            0.00010427575034555048,
            0.0004173183406237513,
            6.626424874411896e-05,
            0.00021021913562435657,
            6.05250388616696e-05,
            0.0021926420740783215,
            6.774066423531622e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the names of teachers that teach two or more courses.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Staring_Date",
            "select teacher.Name, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.9866490960121155,
            9.448602941120043e-05,
            0.00043997314060106874,
            6.717443466186523e-05,
            0.001581893884576857,
            7.008544343989342e-05,
            0.0004913901793770492,
            7.068765262374654e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me a list of teachers in increasing order of age.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name, teacher.Age",
            "select teacher.Name",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Teacher_ID, teacher.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.00029668203205801547,
            0.0001256752439076081,
            0.9952077269554138,
            0.0002122274599969387,
            0.00017047359142452478,
            0.00013049461995251477,
            0.00044229664490558207,
            9.767748997546732e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Rank the teachers from youngest to oldest.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Age",
            "select teacher.Name, teacher.Age",
            "select teacher.Age, teacher.Name",
            "select teacher.Teacher_ID, teacher.Age"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.00469739967957139,
            0.00017063034465536475,
            0.0001945812691701576,
            0.00017818326887208968,
            0.00021043112792540342,
            0.00019198661902919412,
            0.00016970773867797107,
            0.00014575176464859396
        ],
        "align_select": "select teacher.Age",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Find the list of teacher names in the order of youngest to oldest.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, teacher.Age, teacher.Hometown",
            "select teacher.Name (ordered by teacher.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9952852129936218,
            0.0003298264928162098,
            0.00015691800217609853,
            0.00016249530017375946,
            0.00019079315825365484,
            0.00014710990944877267,
            0.004083910956978798,
            0.0002142884477507323
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the names of the teachers who were born in other districts except Little Lever Urban District?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Name, teacher.Age",
            "select teacher.Name - teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9832487106323242,
            0.0005231479881331325,
            0.0003939257876481861,
            0.00012476170377340168,
            0.0001757104037096724,
            8.999296551337466e-05,
            0.00022632235777564347,
            8.335460006492212e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of those teachers which teach two or more courses?",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, course.Staring_Date",
            "select teacher.Name, course.Course_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher"
        ],
        "align_scores": [
            0.986323356628418,
            0.00010026363452197984,
            0.0003614838933572173,
            6.546956865349784e-05,
            0.0013812771067023277,
            7.076993642840534e-05,
            0.00023455813061445951,
            7.624673162354156e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me a list of the teachers that are teaching more than one course.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Name",
            "select teacher.Name, course.Course",
            "select teacher.Name, teacher.Age",
            "select teacher.Name, course.Course_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher course_arrange",
        "table_candidates": [
            "course teacher course_arrange",
            "course teacher",
            "teacher course_arrange"
        ],
        "align_scores": [
            0.9858824014663696,
            9.863782179309055e-05,
            0.0010148478904739022,
            8.64822359289974e-05,
            0.00016051398415584117,
            5.552433867705986e-05,
            0.0007962316740304232,
            9.78785174083896e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the list of hometowns shared by two or more teachers?",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, t1.c4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.994553804397583,
            0.00021062402811367065,
            0.00024826821754686534,
            6.134072464192286e-05,
            0.0018437427934259176,
            6.905641203047708e-05,
            0.0003918071452062577,
            6.917894643265754e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the hometowns shared by more than a single teacher?",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, teacher.Hometown",
            "select teacher.Hometown, teacher.Age",
            "select teacher.Hometown, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9945803284645081,
            0.00011572109360713512,
            0.0004586170834954828,
            7.416034350171685e-05,
            0.00024167916853912175,
            6.05213463131804e-05,
            0.005259565077722073,
            7.811141404090449e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the teachers who live in towns other than Little Lever Urban District.",
        "gold_select": "select teacher.Name",
        "select_candidates": [
            "select teacher.Teacher_ID",
            "select teacher.Name",
            "select teacher.Name, teacher.Hometown",
            "select teacher.Teacher_ID, teacher.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.015118532814085484,
            0.00023231309023685753,
            0.9075992107391357,
            0.0004378116282168776,
            0.0002470980689395219,
            9.929352381732315e-05,
            0.0002883050183299929,
            8.876903302734718e-05
        ],
        "align_select": "select teacher.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find all the towns from which two or more teachers come from.",
        "gold_select": "select teacher.Hometown",
        "select_candidates": [
            "select teacher.Hometown",
            "select teacher.Hometown, count(*)",
            "select teacher.Hometown, teacher.Hometown",
            "select teacher.Hometown, teacher.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "teacher",
        "table_candidates": [
            "teacher"
        ],
        "align_scores": [
            0.9821584224700928,
            9.91177512332797e-05,
            0.0009388027247041464,
            6.713961192872375e-05,
            0.00036912833456881344,
            6.632734584854916e-05,
            0.00017602865409571677,
            5.4762069339631125e-05
        ],
        "align_select": "select teacher.Hometown",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the id, name and membership level of visitors who have spent the most money in total in all museum tickets?",
        "gold_select": "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
            "select visitor.ID, visitor.Name, visitor.Level_of_membership",
            "select visit.Museum_ID, visitor.Name, visitor.Level_of_membership",
            "select visitor.ID, visitor.Name, visitor.Level_of_membership"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.7875654697418213,
            0.44526785612106323,
            0.9152891635894775,
            0.81146240234375,
            0.0007404226344078779,
            0.0008491785847581923,
            0.9152891635894775,
            0.81146240234375
        ],
        "align_select": "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the id, name and membership level of visitors who has spent the most in all museum tickets.",
        "gold_select": "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
            "select visitor.ID, visitor.Name, visitor.Level_of_membership",
            "select visit.visitor_ID, visitor.ID, visitor.Name, visitor.Level_of_membership",
            "select visit.visitor_ID, visitor.ID, visitor.Name, visitor.Level_of_membership"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.8860984444618225,
            0.6609405875205994,
            0.925493061542511,
            0.8402948379516602,
            0.0006054472760297358,
            0.00055261718807742,
            0.0006054472760297358,
            0.00055261718807742
        ],
        "align_select": "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the ID, name, and membership level of visitors who have spent the most in total at all museum tickets?",
        "gold_select": "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
            "select visitor.ID, visitor.Name, visitor.Level_of_membership",
            "select visit.visitor_ID, visitor.ID, visitor.Name, visitor.Level_of_membership",
            "select visit.Museum_ID, visitor.Name, visitor.Level_of_membership"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.8343117833137512,
            0.517953097820282,
            0.9424214363098145,
            0.8808927536010742,
            0.0009040823206305504,
            0.0006754481582902372,
            0.0006456960691139102,
            0.0007664761506021023
        ],
        "align_select": "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the id, name and membership level of visitors who have spent the most money for the total museum tickets?",
        "gold_select": "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visitor.ID, visitor.Name, visitor.Level_of_membership",
            "select visit.visitor_ID, visitor.Name, visitor.Level_of_membership",
            "select visitor.ID, visitor.Name, visitor.Level_of_membership",
            "select visit.Museum_ID, visitor.Name, visitor.Level_of_membership"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.7063838839530945,
            0.5211840867996216,
            0.3647083640098572,
            0.14449594914913177,
            0.7063838839530945,
            0.5211840867996216,
            0.0007483737426809967,
            0.0007738851709291339
        ],
        "align_select": "select visitor.ID, visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the sum of the ticket expense for the visitors with membership level 1?",
        "gold_select": "select sum(visit.Total_spent)",
        "select_candidates": [
            "select sum(visit.Total_spent)",
            "select sum(visit.Total_spent), visitor.ID",
            "select sum(visit.Num_of_Ticket)",
            "select sum(visit.Total_spent)avg(visit.Num_of_Ticket)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit",
            "museum visitor visit"
        ],
        "align_scores": [
            0.9847890138626099,
            9.15594573598355e-05,
            0.00014547033060807735,
            7.311798253795132e-05,
            0.7130283117294312,
            9.122819756157696e-05,
            0.00014048762386664748,
            7.473596633644775e-05
        ],
        "align_select": "select sum(visit.Total_spent)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many visitors under the age of 30 are there?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), visitor.ID",
            "select count(*), visitor.Age",
            "select count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor",
            "visitor visit"
        ],
        "align_scores": [
            0.9931944608688354,
            0.00041808420792222023,
            0.0003096330619882792,
            0.00016529760614503175,
            0.00031893287086859345,
            0.014757690951228142,
            0.000752634892705828,
            0.08998754620552063
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many guests are under 30 years old?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), visitor.ID",
            "select count(*), visitor.Age",
            "select count(*) (visitor.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9951261281967163,
            0.0003867188934236765,
            0.0002834447077475488,
            0.0002376588381594047,
            0.0003278135845903307,
            0.0505620539188385,
            0.00044971867464482784,
            0.00019608056754805148
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many visitors under 30 years old are there?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), visitor.ID",
            "select count(*), visitor.Age",
            "select count(*), visitor.ID3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor",
            "visitor visit"
        ],
        "align_scores": [
            0.9928455948829651,
            0.0008333923178724945,
            0.00034954489092342556,
            0.00027192194829694927,
            0.000370610534446314,
            0.17053991556167603,
            0.0003042472817469388,
            0.00020744925132021308
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total number of visitors under age 30?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select sum(visitor.Age)",
            "select visitor.Age, count(*)",
            "select count(*), visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor",
            "visitor visit"
        ],
        "align_scores": [
            0.9941198825836182,
            0.0006298036314547062,
            0.004292553290724754,
            0.0002437015064060688,
            0.0006676923367194831,
            0.16700008511543274,
            0.0002594697580207139,
            0.0905722826719284
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many visitors are there who are less than 30 years old?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), visitor.ID",
            "select count(*) (visitor.ID)",
            "select count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor",
            "visitor visit"
        ],
        "align_scores": [
            0.989936113357544,
            0.0002925151202362031,
            0.0003160947235301137,
            0.000206344950129278,
            0.0003814162337221205,
            0.00014369560813065618,
            0.0007962764357216656,
            0.05363348871469498
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the visitor\u2019s name and how old he/she was for who bought the largest volume of tickets?",
        "gold_select": "select visitor.Name, visitor.Age",
        "select_candidates": [
            "select visitor.Name, visitor.Age",
            "select visitor.Name, visitor.Age, visitor.ID",
            "select visitor.ID, visitor.Name, visitor.Age",
            "select visitor.Name, visitor.Age, visit.visitor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor visit",
        "table_candidates": [
            "visitor visit"
        ],
        "align_scores": [
            0.9465565085411072,
            9.973791020456702e-05,
            0.00020825328829232603,
            6.777089583920315e-05,
            0.0005660369643010199,
            8.741351484786719e-05,
            0.00024041879805736244,
            6.475490954471752e-05
        ],
        "align_select": "select visitor.Name, visitor.Age",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the visitor who visited a museum with an open date earlier than 2009 and later than 2011?",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, visit.visitor_ID",
            "select visitor.Name, museum.Name",
            "select visitor.Name, visit.Museum_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "museum visitor visit",
        "table_candidates": [
            "museum visitor visit",
            "museum visitor"
        ],
        "align_scores": [
            0.9751361608505249,
            0.8872140645980835,
            0.00026964052813127637,
            0.00022719432308804244,
            0.0003782060812227428,
            0.0002502418647054583,
            0.0002326085086679086,
            0.00027094606775790453
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Calculate the average number of employees working at the museums prior to 2009.",
        "gold_select": "select avg(museum.Num_of_Staff)",
        "select_candidates": [
            "select avg(museum.Num_of_Staff)",
            "select avg(t0.c4)",
            "select avg(museum.Open_Year)",
            "select an avg(museum.Num_of_Staff)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9939648509025574,
            0.00010115472105098888,
            0.0010740564903244376,
            0.00017404576647095382,
            0.0007193729397840798,
            8.399547368753701e-05,
            0.0003395980456843972,
            0.0001285756879951805
        ],
        "align_select": "select avg(museum.Num_of_Staff)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the mean size of staff employed in open museums that had their doors open before 2009?",
        "gold_select": "select avg(museum.Num_of_Staff)",
        "select_candidates": [
            "select avg(museum.Num_of_Staff)",
            "select an avg(museum.Num_of_Staff)",
            "select avg(t0.c4)",
            "select avg(museum.Open_Year)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.9946086406707764,
            0.0001718828279990703,
            0.00047900585923343897,
            0.00013869997928850353,
            0.0014247469371184707,
            0.00021771456522401422,
            0.0014249017694965005,
            0.00036348786670714617
        ],
        "align_select": "select avg(museum.Num_of_Staff)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the names and levels of all visitors who have a membership level greater than 4, sort them in ascending order of age, from oldest to youngest.",
        "gold_select": "select visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.Name, visitor.Level_of_membership, visitor.Age",
            "select visitor.Name, visitor.Age",
            "select visitor.Name, visitor.Level_of_membership in visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9920837879180908,
            0.00024743922404013574,
            0.00033141381572932005,
            9.102588956011459e-05,
            0.06271451711654663,
            0.0002582205052021891,
            0.001029117382131517,
            0.0002685857471078634
        ],
        "align_select": "select visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Find the names and membership levels of visitors who has a membership level above 4, and sort them in ascending order by age from oldest to youngest.",
        "gold_select": "select visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.Name, visitor.Level_of_membership, visitor.Age",
            "select visitor.Name, visitor.Level_of_membership sort-by-order by",
            "select visitor.Name, visitor.Level_of_membership sort-by-ORDER BY"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.98853600025177,
            0.98853600025177,
            0.0004636986996047199,
            0.0004636986996047199,
            0.0009276978671550751,
            0.0009276978671550751,
            0.0009276978671550751,
            0.0009276978671550751
        ],
        "align_select": "select visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Find the name and membership level of the visitors whose membership level is bigger than 4, show in ascending order from the oldest to the youngest and sort them from the oldest to the youngest.",
        "gold_select": "select visitor.Name, visitor.Level_of_membership",
        "select_candidates": [
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.Name, visitor.Level_of_membership, visitor.Age",
            "select visitor.Name, visitor.Level_of_membership sort(visitor.Age)",
            "select visitor.Name, visitor.Level_of_membership sort in visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.02174585871398449,
            0.02174585871398449,
            0.00013372671674005687,
            0.00013372671674005687,
            0.0002983396698255092,
            0.0002983396698255092,
            0.00016725645400583744,
            0.00016725645400583744
        ],
        "align_select": "select visitor.Name, visitor.Level_of_membership",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "What is the ID and name of the museum that has the largest number of employees?",
        "gold_select": "select museum.Museum_ID, museum.Name",
        "select_candidates": [
            "select museum.Museum_ID, museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select museum.Museum_ID, museum.Name, museum.Num_of_Staff",
            "select museum.Num_of_Staff, museum.Name"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum",
        "table_candidates": [
            "museum"
        ],
        "align_scores": [
            0.6611759066581726,
            8.337391045643017e-05,
            0.7160772085189819,
            8.885560237104073e-05,
            0.0004774914705194533,
            7.21320029697381e-05,
            0.005910729523748159,
            7.395202555926517e-05
        ],
        "align_select": "select museum.Museum_ID, museum.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the id and name of the most visited museum.",
        "gold_select": "select visit.Museum_ID, museum.Name",
        "select_candidates": [
            "select museum.Museum_ID, museum.Name",
            "select visit.Museum_ID, museum.Name",
            "select museum.Name, museum.Museum_ID",
            "select visitor.ID, museum.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "museum visit",
        "table_candidates": [
            "museum visit"
        ],
        "align_scores": [
            0.9955184459686279,
            0.9947000741958618,
            0.9879645109176636,
            0.9708876609802246,
            0.9952161312103271,
            0.9946931004524231,
            0.0022519053891301155,
            0.0006311381584964693
        ],
        "align_select": "select museum.Museum_ID, museum.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the max and avg ticket sales for all visits.",
        "gold_select": "select avg(visit.Num_of_Ticket), max(visit.Num_of_Ticket)",
        "select_candidates": [
            "select max(visit.Num_of_Ticket), avg(visit.Num_of_Ticket)",
            "select max(t2.c6), avg(visit.Num_of_Ticket)",
            "select max(visit.Total_spent), avg(visit.Num_of_Ticket)",
            "select max(t2.c4), avg(visit.Num_of_Ticket)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visit",
        "table_candidates": [
            "visit"
        ],
        "align_scores": [
            0.9917705059051514,
            6.403484439942986e-05,
            0.0003631406289059669,
            0.0001225353335030377,
            0.02118835411965847,
            8.717834862181917e-05,
            0.00035018526250496507,
            0.00011435909982537851
        ],
        "align_select": "select max(visit.Num_of_Ticket), avg(visit.Num_of_Ticket)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the names of the visitors whose membership level is greater than 4, and sort them by their level from high to low.",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.Name, t1.c4",
            "select visitor.Name&sort(visitor.Level_of_membership)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9807235598564148,
            0.0003045494086109102,
            0.00024279009085148573,
            8.799619536148384e-05,
            0.00018706222181208432,
            0.00018560515309218317,
            0.0004888020921498537,
            0.00019714875088538975
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Find the names of the visitors whose membership level is larger than four, and list the results in descending order by level.",
        "gold_select": "select visitor.Name",
        "select_candidates": [
            "select visitor.Name",
            "select visitor.Name, visitor.Level_of_membership",
            "select visitor.Name, visitor.Level_of_membership, visitor.Age",
            "select visitor.Name, visitor.Level_of_membership - visitor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9902273416519165,
            0.9902273416519165,
            0.00028443659539334476,
            0.00028443659539334476,
            0.00010952863522106782,
            0.00010952863522106782,
            0.00014809847925789654,
            0.00014809847925789654
        ],
        "align_select": "select visitor.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "How old are the visitors whose membership levels do not exceed 4 years?",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select visitor.Age",
            "select visitor.Age, visitor.Level_of_membership",
            "select visitor.Age, t1.c4",
            "select visitor.Age,"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9895016551017761,
            0.00011860360245918855,
            0.00017402501543983817,
            5.817548299091868e-05,
            0.0006798155955038965,
            7.212485070340335e-05,
            0.2893596887588501,
            7.160087989177555e-05
        ],
        "align_select": "select visitor.Age",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many visitors whose membership level is not larger than 4, how old are they in average?",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select count(*), avg(visitor.Age)",
            "select avg(visitor.Age), count(*)",
            "select avg(visitor.Age)",
            "select number(*), avg(visitor.Age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9612746834754944,
            0.3760000765323639,
            0.976335346698761,
            0.04504327476024628,
            0.9512306451797485,
            0.00023201931617222726,
            0.0003141934867016971,
            0.00022295289090834558
        ],
        "align_select": "select count(*), avg(visitor.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the average age of the visitors who have a membership level between 1 and 4.",
        "gold_select": "select avg(visitor.Age)",
        "select_candidates": [
            "select avg(visitor.Age)",
            "select an avg(visitor.Age)",
            "select  avg(visitor.Age)",
            "select avg(t1.c)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "visitor",
        "table_candidates": [
            "visitor"
        ],
        "align_scores": [
            0.9947835803031921,
            0.00012980053725186735,
            0.0005141802248544991,
            0.0001151841861428693,
            0.9947835803031921,
            0.00012980053725186735,
            0.0013818105217069387,
            0.00013777517597191036
        ],
        "align_select": "select avg(visitor.Age)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the year with the most matches?",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.winner_entry",
            "select matches.year, matches.tourney_date",
            "select matches.year, matches.loser_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9961068034172058,
            7.813955744495615e-05,
            0.00020494728232733905,
            5.906125079491176e-05,
            0.0005698181921616197,
            5.857758515048772e-05,
            0.0003115934378001839,
            5.730047996621579e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the year with the highest number of matches.",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.winner_entry",
            "select matches.year, matches.tourney_date",
            "select matches.year (matches.match_num)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9955162405967712,
            4.946527042193338e-05,
            0.00015731531311757863,
            5.264288483886048e-05,
            0.0003665201656986028,
            5.531041097128764e-05,
            0.0002644109772518277,
            5.3385127102956176e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the highest year with most matches.",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.winner_entry",
            "select matches.year, matches.tourney_date",
            "select matches.year, matches.loser_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9933785200119019,
            6.006139301462099e-05,
            0.00026837506447918713,
            5.29856733919587e-05,
            0.000505874224472791,
            5.3052612202009186e-05,
            0.0004969303263351321,
            5.2167524700053036e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the year in which there is the largest number of matches.",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.winner_entry",
            "select matches.year, matches.tourney_date",
            "select matches.year (matches.match_num)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9897451996803284,
            5.246187356533483e-05,
            0.0001702289591776207,
            5.3979056247044355e-05,
            0.0005004191189073026,
            5.6768778449622914e-05,
            0.0003561785561032593,
            5.550347486860119e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the year that has the greatest number of matches?",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.winner_entry",
            "select matches.year, matches.tourney_date",
            "select matches.year, matches.loser_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9941771030426025,
            5.799479185952805e-05,
            0.00021665844542440027,
            6.0333208239171654e-05,
            0.0006293895421549678,
            6.226269761100411e-05,
            0.00036674996954388916,
            5.7693341659614816e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "The overall rank points for each player, and show first names.",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select sum(rankings.ranking_points), players.first_name",
            "select rankings.ranking, players.first_name",
            "select rankings.ranking_points, players.first_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.004796332214027643,
            0.00025873459526337683,
            0.9257839322090149,
            0.00020296139700803906,
            0.9330092668533325,
            0.001473631476983428,
            0.7707927823066711,
            0.0013017960591241717
        ],
        "align_select": "select rankings.ranking, players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the amount of ranking points for all players and their first names?",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select sum(rankings.ranking_points), players.first_name",
            "select rankings.ranking_points, players.first_name",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select rankings.player_id, players.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.2826806902885437,
            7.934062159620225e-05,
            0.985632061958313,
            9.071524982573465e-05,
            0.0005174391553737223,
            5.5338059610221535e-05,
            0.00023028090072330087,
            6.962899351492524e-05
        ],
        "align_select": "select rankings.ranking_points, players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show the total amount of ranking points and first name of each player.",
        "gold_select": "select sum(rankings.ranking_points), players.first_name",
        "select_candidates": [
            "select sum(rankings.ranking_points), players.first_name",
            "select rankings.player_id, sum(rankings.ranking_points)",
            "select rankings.ranking_points, players.first_name",
            "select rankings.ranking, sum(rankings.ranking_points)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.995000422000885,
            0.00016647536540403962,
            0.0003199164639227092,
            0.00012018105189781636,
            0.4025627076625824,
            0.00016780433361418545,
            0.0005555887473747134,
            0.00017417674825992435
        ],
        "align_select": "select sum(rankings.ranking_points), players.first_name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me the first name and country code of the player who has made the most tours.",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select players.first_name, players.last_name, players.country_code",
            "select players.first_name, players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9881923794746399,
            8.761438220972195e-05,
            0.00020417394989635795,
            6.446175393648446e-05,
            0.0014353427104651928,
            8.489406172884628e-05,
            0.0008047903538681567,
            6.949910311959684e-05
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the id and country code of the player with the highest number of tours?",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.player_id, players.country_code",
            "select rankings.player_id, players.country_code",
            "select players.first_name, players.country_code",
            "select t3.c2, players.country_code"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9899791479110718,
            9.144889918388799e-05,
            0.005728339310735464,
            8.937992970459163e-05,
            0.0007156766369007528,
            0.0001018161783576943,
            0.00042173711699433625,
            8.55961479828693e-05
        ],
        "align_select": "select players.player_id, players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the first name and country code of the player that has the most tours.",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.player_id, players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select players.first_name, players.last_name, players.country_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings",
            "players matches rankings"
        ],
        "align_scores": [
            0.9907070398330688,
            8.761128992773592e-05,
            0.0003597875765990466,
            7.794711564201862e-05,
            0.00019188469741493464,
            6.286443385761231e-05,
            0.0021319615188986063,
            8.560227433918044e-05
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the first name, country code, and number of tours of the player with the greatest number of tours.",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code, count(*)",
            "select players.first_name, players.country_code, rankings.tours",
            "select players.first_name, players.country_code, count(rankings.tours)",
            "select players.first_name, players.country_code, sum(rankings.tours)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.989598274230957,
            0.9934462904930115,
            0.9637624025344849,
            0.9895780682563782,
            0.00315263494849205,
            0.004600128158926964,
            0.5763071179389954,
            0.9661306142807007
        ],
        "align_select": "select players.first_name, players.country_code, count(*)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find out the first name and country code of the player who has done the most tours.",
        "gold_select": "select players.country_code, players.first_name",
        "select_candidates": [
            "select players.first_name, players.country_code",
            "select players.first_name, players.country_code, players.player_id",
            "select players.first_name, players.last_name, players.country_code",
            "select players.first_name, players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "players rankings",
        "table_candidates": [
            "players rankings"
        ],
        "align_scores": [
            0.9888745546340942,
            9.388805483467877e-05,
            0.00020519501413218677,
            6.661283987341449e-05,
            0.0021502424497157335,
            9.163762297248468e-05,
            0.001154265715740621,
            7.83174837124534e-05
        ],
        "align_select": "select players.first_name, players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total count of matches?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.match_num",
            "select t1.c count(*)",
            "select count(*), matches.minutes"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9943633079528809,
            8.194925612770021e-05,
            0.0001825954095693305,
            6.232650048332289e-05,
            0.0006866662879474461,
            0.00010600054520182312,
            0.00024394724459853023,
            6.645903340540826e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the first and last name of all players that are left-handed, listed by birth date.",
        "gold_select": "select players.first_name, players.last_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select distinct players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name (Date, Last)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9933454990386963,
            0.00037842392339371145,
            0.004529590252786875,
            0.0001430888078175485,
            0.00023978286480996758,
            0.00030575148412026465,
            0.00039250284316949546,
            0.000143737270263955
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY"
    },
    {
        "question": "Find the names of the loser and winner who played in the match with the most minutes.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.loser_name, matches.winner_name",
            "select t1.c 8, matches.winner_name",
            "select matches.loser_name, t1.c 27",
            "select matches.loser_ioc, matches.loser_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.8724005818367004,
            6.469514482887462e-05,
            0.0007231688359752297,
            7.68099125707522e-05,
            0.000710838008671999,
            9.649893763707951e-05,
            0.0005067174788564444,
            6.764190038666129e-05
        ],
        "align_select": "select matches.loser_name, matches.winner_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the names of the losers and winners who played in the match that had the longest time.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.loser_name, matches.winner_name",
            "select matches.loser_name, t1.c 27",
            "select matches.loser_ioc, matches.loser_name",
            "select t1.c 8, matches.winner_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9510740041732788,
            0.00010948967246804386,
            0.0005932850181125104,
            0.00014410383300855756,
            0.000627295405138284,
            9.491318633081391e-05,
            0.0006646700203418732,
            8.961718413047493e-05
        ],
        "align_select": "select matches.loser_name, matches.winner_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the names of the losers and winners who played in the match that had the largest duration.",
        "gold_select": "select matches.winner_name, matches.loser_name",
        "select_candidates": [
            "select matches.loser_name, matches.winner_name",
            "select matches.loser_name, t1.c 27",
            "select matches.loser_ioc, matches.loser_name",
            "select matches.loser_name, matches.loser_ioc"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9726299047470093,
            7.443397771567106e-05,
            0.000738088390789926,
            0.00014186420594342053,
            0.0006719458033330739,
            9.960874740500003e-05,
            0.0005916677764616907,
            9.578841127222404e-05
        ],
        "align_select": "select matches.loser_name, matches.winner_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me all the codes of countries with at least 51 players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, count(*)",
            "select players.country_code (wHERE-GROUP BY-HAVING",
            "select players.country_code, t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches",
            "players rankings"
        ],
        "align_scores": [
            0.9814471006393433,
            0.00012975512072443962,
            0.0008378017810173333,
            6.533510168083012e-05,
            0.00017710986139718443,
            7.641961565241218e-05,
            0.0003986752999480814,
            6.293282058322802e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the codes of countries with over 50 players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, t0.c6",
            "select players.country_code, max(players.player_id)",
            "select players.country_code, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches",
            "players rankings"
        ],
        "align_scores": [
            0.9933997392654419,
            0.00012324030103627592,
            0.0003843712038360536,
            6.298877269728109e-05,
            0.000169529186678119,
            5.933249485678971e-05,
            0.0001484331296524033,
            5.780182618764229e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the code for the country with the largest player base.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, t0.c6",
            "select players.country_code, players.birth_date",
            "select players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9946065545082092,
            7.5985946750734e-05,
            0.0005005956627428532,
            6.398221739800647e-05,
            0.00015689169231336564,
            5.875856368220411e-05,
            0.00016702583525329828,
            5.733311627409421e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the code for the country with the highest number of players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, players.birth_date",
            "select players.country_code, t0.c6",
            "select players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9950057864189148,
            6.717879296047613e-05,
            0.00015810556942597032,
            5.718142710975371e-05,
            0.000504008203279227,
            6.759946700185537e-05,
            0.00017311774718109518,
            5.840722951688804e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the code of the country with the most players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, players.birth_date",
            "select players.country_code, t0.c6",
            "select players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9957990050315857,
            7.589889719383791e-05,
            0.00016100511129479855,
            5.453983976622112e-05,
            0.0005507255555130541,
            6.46471744403243e-05,
            0.0001691703946562484,
            5.438434527604841e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the code of the country with the highest number of players.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, players.birth_date",
            "select players.country_code, players.first_name, players.last_name",
            "select players.country_code, t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9952705502510071,
            7.010845001786947e-05,
            0.00016819282609503716,
            5.8237033954355866e-05,
            0.0003217554185539484,
            7.966982229845598e-05,
            0.0005166826886124909,
            7.05931379343383e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the code of the country where the largest number of players reside.",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, players.birth_date",
            "select players.country_code, t0.c6",
            "select players.country_code, players.hand"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9950435161590576,
            7.906495011411607e-05,
            0.00019020844774786383,
            5.786227120552212e-05,
            0.000556155398953706,
            6.67313506710343e-05,
            0.0005077901878394186,
            6.201145879458636e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the count of players for each hand type?",
        "gold_select": "select count(*), players.hand",
        "select_candidates": [
            "select players.hand, count(*)",
            "select count(*), players.hand",
            "select players.hand, count(*), players.birth_date",
            "select players.hand, count(*), players.player_id"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9966391324996948,
            0.0002510775811970234,
            0.9966412782669067,
            0.00023181765573099256,
            0.00023661293380428106,
            0.00013574321928899735,
            0.00018237634503748268,
            8.455304487142712e-05
        ],
        "align_select": "select players.hand, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What\u2019s the player count for each country?",
        "gold_select": "select count(*), players.country_code",
        "select_candidates": [
            "select players.country_code, count(*)",
            "select count(*), players.country_code",
            "select country_code, count(*)",
            "select players.country_code.c0, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9965835809707642,
            0.00012509810039773583,
            0.9961994290351868,
            0.00012491061352193356,
            0.7734386920928955,
            9.171089914161712e-05,
            0.0005421914393082261,
            8.981789142126217e-05
        ],
        "align_select": "select players.country_code, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the total count of left handed winners who participated in the WTA Championships?",
        "gold_select": "select count(distinct matches.winner_name)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.winner_entry",
            "select count(distinct matches.winner_entry)",
            "select count(distinct matches.loser_age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9857165813446045,
            0.0008719274774193764,
            0.00030713225714862347,
            0.002543403534218669,
            0.0040776366367936134,
            0.0001270755019504577,
            0.000302627042401582,
            0.00010554545588092878
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the count of left-handed winners who have competed in the WTA Championships.",
        "gold_select": "select count(distinct matches.winner_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.loser_age)",
            "select count(distinct matches.winner_hand)",
            "select count(distinct matches.winner_entry)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9440546631813049,
            0.0026708573568612337,
            0.00037453381810337305,
            0.00012370405602268875,
            0.0011728956596925855,
            0.00017283190391026437,
            0.006935293786227703,
            0.00017704300989862531
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names and ranks of the players with the most number of wins.",
        "gold_select": "select matches.winner_name, matches.winner_rank_points",
        "select_candidates": [
            "select players.first_name, players.last_name, rankings.ranking",
            "select players.first_name, players.last_name, players.first_name, rankings.ranking",
            "select players.first_name, players.last_name, players.first_name, players.last_name, rankings.ranking",
            "select players.first_name, players.last_name, players.first_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "players matches rankings",
            "players matches"
        ],
        "align_scores": [
            0.9878736138343811,
            6.892844976391643e-05,
            0.00037443707697093487,
            6.517082510981709e-05,
            0.0007943125674501061,
            0.00012292694009374827,
            0.00020132525241933763,
            6.532475526910275e-05
        ],
        "align_select": "select players.first_name, players.last_name, rankings.ranking",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the country code with over fifty players?",
        "gold_select": "select players.country_code",
        "select_candidates": [
            "select players.country_code",
            "select players.country_code, t0.c6",
            "select players.country_code, players.birth_date",
            "select players.country_code, players.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players",
            "players matches",
            "players rankings"
        ],
        "align_scores": [
            0.9883370995521545,
            9.755890641827136e-05,
            0.0003652938758023083,
            6.501725874841213e-05,
            0.000131826353026554,
            5.618030627374537e-05,
            0.00013204701826907694,
            5.7005574490176514e-05
        ],
        "align_select": "select players.country_code",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "The player list shows the first and last name in the birth order.",
        "gold_select": "select players.first_name, players.last_name",
        "select_candidates": [
            "select players.first_name, players.last_name",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.last_name in players.birth_date",
            "select players.first_name, players.last_name, players.birth_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "players",
        "table_candidates": [
            "players"
        ],
        "align_scores": [
            0.9948897361755371,
            0.9948897361755371,
            0.00014123428263701499,
            0.00014123428263701499,
            0.0003356074448674917,
            0.0003356074448674917,
            0.00014123428263701499,
            0.00014123428263701499
        ],
        "align_select": "select players.first_name, players.last_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List all tournaments with 11+ matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name,",
            "select matches.winner_age",
            "select matches.tourney_date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.99068284034729,
            0.9929537177085876,
            0.06789971143007278,
            0.006997288204729557,
            0.0004579098313115537,
            0.0004198507813271135,
            0.03992815688252449,
            0.031510576605796814
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total count of the names of losers?",
        "gold_select": "select count(distinct matches.loser_name)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct matches.loser_name)",
            "select count(*), matches.loser_name",
            "select count(matches.loser_name)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "players matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9910881519317627,
            0.0006199928466230631,
            0.2458438277244568,
            5.626705751637928e-05,
            0.0011443904368206859,
            7.083760283421725e-05,
            0.869681179523468,
            6.233232124941424e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "find the first name, country code and birth date of the winner who has the most points in all matches.",
        "gold_select": "select players.first_name, players.country_code, players.birth_date",
        "select_candidates": [
            "select players.first_name, players.country_code, players.birth_date",
            "select players.first_name, players.birth_date, players.country_code",
            "select players.first_name, players.last_name, players.birth_date",
            "select players.first_name, players.country_code, players.birth_date"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "players matches",
        "table_candidates": [
            "players matches"
        ],
        "align_scores": [
            0.9346505999565125,
            0.8276404142379761,
            0.9239816665649414,
            0.8114301562309265,
            0.0003903014585375786,
            0.0005032924236729741,
            0.9346505999565125,
            0.8276404142379761
        ],
        "align_select": "select players.first_name, players.country_code, players.birth_date",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which year had the greatest total number of matches?",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.tourney_date",
            "select matches.year, matches.winner_entry",
            "select matches.year, matches.loser_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.995011568069458,
            5.4384036047849804e-05,
            0.0005004141130484641,
            5.5576358136022463e-05,
            0.00015578615420963615,
            5.252173650660552e-05,
            0.0002339521743124351,
            5.383624738897197e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which year has the largest number of matches?",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.winner_entry",
            "select matches.year, matches.tourney_date",
            "select matches.year, matches.match_num"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9954380393028259,
            5.300406337482855e-05,
            0.00016974902246147394,
            5.4927651945035905e-05,
            0.0005404680850915611,
            5.8270423323847353e-05,
            0.0001913523010443896,
            5.0105867558158934e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which year had the greatest number of matches?",
        "gold_select": "select matches.year",
        "select_candidates": [
            "select matches.year",
            "select matches.year, matches.tourney_date",
            "select matches.year, matches.winner_entry",
            "select matches.year, matches.loser_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9953113198280334,
            5.288813918014057e-05,
            0.00047877145698294044,
            5.5076721764635295e-05,
            0.00016350147780030966,
            5.2261242672102526e-05,
            0.00023823486117180437,
            5.1629212975967675e-05
        ],
        "align_select": "select matches.year",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name of tournament that has over 10 matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9896512031555176,
            8.739650365896523e-05,
            0.0001522121747257188,
            5.503723878064193e-05,
            0.00014152225048746914,
            6.004329407005571e-05,
            0.00013080411008559167,
            6.0390022554202005e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the name of tournament with more than ten results.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9860760569572449,
            0.00014047689910512418,
            0.00018854648806154728,
            6.425382889574394e-05,
            0.0001572458859300241,
            5.979861452942714e-05,
            0.0001448576949769631,
            6.726700667059049e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the name of tournament with greater than 10 matches.",
        "gold_select": "select matches.tourney_name",
        "select_candidates": [
            "select matches.tourney_name",
            "select matches.tourney_name, matches.winner_hand",
            "select matches.tourney_name, matches.tourney_date",
            "select matches.tourney_name, matches.winner_age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9878934025764465,
            0.00010055412712972611,
            0.00015619117766618729,
            5.954975858912803e-05,
            0.00015134786372072995,
            5.7444212870905176e-05,
            0.0001318305148743093,
            6.079727245378308e-05
        ],
        "align_select": "select matches.tourney_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the mean age of the losers and winners of all the matches.",
        "gold_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "select_candidates": [
            "select avg(matches.loser_age), avg(matches.winner_age)",
            "select avg(matches.loser_age), avg(matches.winner_age",
            "select avg(matches.loser_age), avg(matches.loser_age)",
            "select avg(matches.loser_age), avg(matches.loser_entry)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches"
        ],
        "align_scores": [
            0.9909310340881348,
            0.07792282104492188,
            0.9878556132316589,
            0.04431785270571709,
            0.0005008492735214531,
            0.00023611666983924806,
            0.00018625185475684702,
            0.00014811304572504014
        ],
        "align_select": "select avg(matches.loser_age), avg(matches.winner_age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which are the top rankings of all players on the losing side?",
        "gold_select": "select min(matches.loser_rank)",
        "select_candidates": [
            "select rankings.ranking",
            "select rankings.ranking, matches.loser_id",
            "select max(rankings.ranking)",
            "select rankings.ranking, matches.loser_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches rankings",
            "players matches rankings",
            "matches"
        ],
        "align_scores": [
            0.41044121980667114,
            0.9833833575248718,
            0.00016190511814784259,
            0.0013001114130020142,
            0.9932106137275696,
            0.00029995531076565385,
            0.0002323409862583503,
            0.003607784863561392
        ],
        "align_select": "select max(rankings.ranking)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total count of matches?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), matches.match_num",
            "select t1.c count(*)",
            "select count(*), matches.minutes"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "matches",
        "table_candidates": [
            "matches",
            "matches rankings"
        ],
        "align_scores": [
            0.9943633079528809,
            8.194925612770021e-05,
            0.0001825954095693305,
            6.232650048332289e-05,
            0.0006866662879474461,
            0.00010600054520182312,
            0.00024394724459853023,
            6.645903340540826e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the ship id and name that had the highest total injury count?",
        "gold_select": "select ship.id, ship.name",
        "select_candidates": [
            "select ship.id, ship.name",
            "select ship.id, ship.name, ship.tonnage",
            "select ship.id, ship.name, ship.ship_type",
            "select death.id, ship.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death"
        ],
        "align_scores": [
            0.990339457988739,
            6.863460293971002e-05,
            0.00017908857262227684,
            5.73005381738767e-05,
            0.00023534439969807863,
            6.85000341036357e-05,
            0.007497497834265232,
            6.86293569742702e-05
        ],
        "align_select": "select ship.id, ship.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the ship ID and name that had the highest number of total injuries.",
        "gold_select": "select ship.id, ship.name",
        "select_candidates": [
            "select ship.id, ship.name",
            "select ship.id, ship.name, ship.tonnage",
            "select death.id, ship.name",
            "select ship.id, ship.name, ship.ship_type"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "ship death",
        "table_candidates": [
            "ship death"
        ],
        "align_scores": [
            0.9920362830162048,
            6.073191616451368e-05,
            0.0001821813202695921,
            5.4126998293213546e-05,
            0.03280436992645264,
            6.512099935207516e-05,
            0.0002503158466424793,
            5.769163544755429e-05
        ],
        "align_select": "select ship.id, ship.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the largest and smallest death toll caused each time?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select max(death.killed), min(death.killed), death.caused_by_ship_id",
            "select max(death.killed), min(death.killed), battle.name",
            "select death.caused_by_ship_id, max(death.killed), min(death.killed)",
            "select max(death.killed), min(death.killed), death.id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.029773149639368057,
            0.002239952562376857,
            0.9460647106170654,
            0.09206613898277283,
            0.0446568988263607,
            0.0009834433440119028,
            0.0011616095434874296,
            0.00022777103004045784
        ],
        "align_select": "select max(death.killed), min(death.killed), battle.name",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the greatest and lowest numbers of deaths each time?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select max(death.killed), min(death.killed), death.caused_by_ship_id",
            "select max(death.killed), min(death.killed), death.id",
            "select max(death.killed), min(death.killed), death.injured",
            "select death.id, max(death.killed), min(death.killed)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.0009994155261665583,
            0.00022577663185074925,
            0.0002538527187425643,
            9.700655937194824e-05,
            0.00012761878315359354,
            0.00011737063323380426,
            0.0006730330060236156,
            0.0001540499069960788
        ],
        "align_select": "select max(death.killed), min(death.killed), death.caused_by_ship_id",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the highest and lowest number of deaths per incident?",
        "gold_select": "select max(death.killed), min(death.killed)",
        "select_candidates": [
            "select max(death.killed), min(death.killed)",
            "select max(death.injured), min(death.killed)",
            "select max(death.killed), min(death.killed), death.caused_by_ship_id",
            "select max(t2.c6), min(death.killed)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "death",
        "table_candidates": [
            "death"
        ],
        "align_scores": [
            0.9934821724891663,
            0.8750991821289062,
            0.000526749121490866,
            0.0006938047590665519,
            0.0003228250134270638,
            0.1130252555012703,
            0.0005046340520493686,
            0.00037633944884873927
        ],
        "align_select": "select max(death.killed), min(death.killed)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "When was the most recent transcript released?",
        "gold_select": "select Transcripts.transcript_date",
        "select_candidates": [
            "select t10.c5",
            "select t9.c5",
            "select max(t10.c5)",
            "select max(t10.c6)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.0015732275787740946,
            0.002512357197701931,
            0.0015659671043977141,
            0.003934684209525585,
            0.00026416050968691707,
            0.0011177430860698223,
            0.00025042780907824636,
            0.0011894125491380692
        ],
        "align_select": "select t10.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What was the most recent transcript release date?",
        "gold_select": "select Transcripts.transcript_date",
        "select_candidates": [
            "select t8.c5",
            "select t12.c5",
            "select max(t8.c6)",
            "select t9.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0013155237538740039,
            6.549192767124623e-05,
            0.0012347979936748743,
            6.703507824568078e-05,
            0.00019776061526499689,
            6.380200647981837e-05,
            0.001024731551297009,
            6.57827258692123e-05
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the degree summary name with the most enrolled students?",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.student_id",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id",
            "select Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Departments Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9954352974891663,
            8.365183748537675e-05,
            0.0002469386381562799,
            7.95578453107737e-05,
            0.0004431768611539155,
            7.502838707296178e-05,
            0.0005963788134977221,
            6.765634316252545e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the name of the degree summary with the largest number of students.",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id",
            "select Degree_Programs.degree_summary_name, Students.current_address_id3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Degree_Programs Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Departments Students Student_Enrolment_Courses",
            "Departments Students",
            "Degree_Programs Semesters Students",
            "Degree_Programs Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9950241446495056,
            9.259366925107315e-05,
            0.00036055909004062414,
            6.80741504766047e-05,
            0.0003308127634227276,
            6.895435217302293e-05,
            0.0002216855064034462,
            5.9354901168262586e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the degree summaries with the largest enrollment.",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment",
            "Departments Student_Enrolment",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9952658414840698,
            6.037344064679928e-05,
            0.0008671989780850708,
            6.55597832519561e-05,
            0.0005039044772274792,
            6.64682884234935e-05,
            0.000165111108799465,
            5.767782568000257e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the name of the degree summary that has the most students.",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id",
            "select Degree_Programs.degree_summary_name (or Degree_Programs.degree_summary_description)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Degree_Programs Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Semesters Students",
            "Departments Students Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9951753616333008,
            7.787935464875773e-05,
            0.00037120917113497853,
            6.003928501741029e-05,
            0.00036348437424749136,
            6.580236367881298e-05,
            0.9778798222541809,
            7.919111521914601e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the degree summary name with the greatest number of students enrolled.",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.student_id",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Departments Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9955667853355408,
            9.954000415746123e-05,
            0.00034755069646053016,
            6.921496969880536e-05,
            0.0001464137021685019,
            6.78499200148508e-05,
            9.451974619878456e-05,
            5.807221896247938e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the most-enrolled-student-degree-summary name?",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id3",
            "select Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id",
            "select Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment",
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Student_Enrolment Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9931401610374451,
            0.00012193401926197112,
            0.0002337588812224567,
            7.003659993642941e-05,
            0.00023407377011608332,
            6.998046592343599e-05,
            0.0014139639679342508,
            7.557794015156105e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the address that currently has the most students and show me the address and all the lines.",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3",
            "select Addresses.line_1, Addresses.line_2",
            "select Addresses.other_address_details, Addresses.line_1, Addresses.line_2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Semesters Students",
            "Addresses Courses Students",
            "Addresses Student_Enrolment",
            "Addresses Sections Students",
            "Addresses Students Transcripts"
        ],
        "align_scores": [
            0.04640017822384834,
            0.00010391561954747885,
            0.20415379106998444,
            9.409770427737385e-05,
            0.007372355088591576,
            9.421631693840027e-05,
            0.512430727481842,
            0.0001224694715347141
        ],
        "align_select": "select Addresses.other_address_details, Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which address holds the most students? List the address id and all the lines.",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_3",
            "select Addresses.address_id, Addresses.line_1",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2, t0.3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Students Student_Enrolment",
            "Addresses Semesters Students",
            "Addresses Courses Students",
            "Addresses Sections Students",
            "Addresses Student_Enrolment",
            "Addresses Students Transcripts"
        ],
        "align_scores": [
            0.9816529154777527,
            0.0001059979185811244,
            0.06585534662008286,
            0.00010820648458320647,
            0.03759828209877014,
            0.0001241120626218617,
            0.0004103700048290193,
            5.9451886045280844e-05
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the address id and all lines for the address with the most students.",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_3",
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3",
            "select Addresses.address_id, Addresses.line_2, Addresses.line_3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment"
        ],
        "align_scores": [
            0.9851617813110352,
            0.00010259918781230226,
            0.609114408493042,
            0.00010368401126470417,
            0.9885814785957336,
            0.00010805253259604797,
            0.35473352670669556,
            0.00010290136560797691
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the program id and summary of the degree that has the largest number of students enrolled.",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description",
            "select Sections.section_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.992641031742096,
            0.00010944365203613415,
            0.9925910234451294,
            0.00011376839393051341,
            0.0004316513950470835,
            7.309971988433972e-05,
            0.00015409455227199942,
            7.133624603739008e-05
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the program ID and its summary for the degree that has the largest number of students enrolled.",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description",
            "select Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.991838276386261,
            0.00012184464139863849,
            0.9920039772987366,
            0.00011445445852587,
            0.0003628694685176015,
            7.210311741800979e-05,
            0.9899260997772217,
            0.00014270075189415365
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the program id and summary for the degree that has the largest enrollment.",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description",
            "select Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9941425919532776,
            9.488150681136176e-05,
            0.9940574169158936,
            9.259737998945639e-05,
            0.0003094270941801369,
            6.827478500781581e-05,
            0.00036194355925545096,
            7.258915138663724e-05
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What\u2019s the program id and its summary of the degree that has the largest student enrollment?",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.989165723323822,
            0.00010838463640538976,
            0.9886173605918884,
            0.00011131821520393714,
            0.0001539193617645651,
            7.270408241311088e-05,
            0.0003564204089343548,
            7.443269714713097e-05
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Describe all students in reverse order.",
        "gold_select": "select Students.other_student_details",
        "select_candidates": [
            "select Students.other_student_details",
            "select Students.last_name, Students.first_name",
            "select Students.last_name, Students.cell_mobile_number",
            "select Students.current_address_id3, Students.current_address_id4"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Students Student_Enrolment_Courses",
            "Students Student_Enrolment",
            "Semesters Students",
            "Courses Students",
            "Sections Students",
            "Degree_Programs Students"
        ],
        "align_scores": [
            0.9958400726318359,
            0.9958400726318359,
            0.0011616311967372894,
            0.0011616311967372894,
            0.00019130924192722887,
            0.00019130924192722887,
            0.0003125928924418986,
            0.0003125928924418986
        ],
        "align_select": "select Students.other_student_details",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Find what is the id, line 1, and line 2 for the address with the highest student count?",
        "gold_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "select_candidates": [
            "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select student_Addresses.address_id, Addresses.line_1, Addresses.line_2",
            "select Addresses.other_address_details, Addresses.line_1, Addresses.line_2",
            "select Addresses.line_1, Addresses.line_2, Addresses.line_3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Addresses Students",
        "table_candidates": [
            "Addresses Students",
            "Addresses Students Student_Enrolment",
            "Addresses Student_Enrolment",
            "Addresses Students Student_Enrolment_Courses",
            "Addresses Courses Departments Students",
            "Addresses Semesters Students",
            "Addresses Courses Departments Student_Enrolment",
            "Addresses Courses Students"
        ],
        "align_scores": [
            0.9936093091964722,
            8.321933273691684e-05,
            0.9869165420532227,
            9.900676377583295e-05,
            0.0002765502140391618,
            7.034671580186114e-05,
            0.00021416998060885817,
            7.036711758701131e-05
        ],
        "align_select": "select Addresses.address_id, Addresses.line_1, Addresses.line_2",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the earliest transcript released? List the data and details.",
        "gold_select": "select Transcripts.transcript_date, Transcripts.other_details",
        "select_candidates": [
            "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id",
            "select Student_Enrolment_Courses.student_course_id, t8.c3",
            "select Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.student_enrolment_id",
            "select Student_Enrolment.degree_program_id, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0004204407159704715,
            8.255634020315483e-05,
            0.0004952417802996933,
            0.00013741935254074633,
            0.00040177564369514585,
            7.96891181380488e-05,
            0.0015002262080088258,
            0.0001011869462672621
        ],
        "align_select": "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the date of the latest transcript release?",
        "gold_select": "select Transcripts.transcript_date",
        "select_candidates": [
            "select t8.c5",
            "select t9.c5",
            "select t10.c5",
            "select max(t8.c6)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.001101793604902923,
            0.0017336896853521466,
            0.0008804795215837657,
            0.0015658349730074406,
            0.0008340977365151048,
            0.0011025606654584408,
            0.0001689964410616085,
            0.0007573654875159264
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "When was the last time a transcript was released?",
        "gold_select": "select Transcripts.transcript_date",
        "select_candidates": [
            "select t8.c5",
            "select t9.c5",
            "select max(t8.c6)",
            "select max(t9.c6)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcripts",
            "Transcript_Contents",
            "Student_Enrolment_Courses",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.002793532097712159,
            0.0033303513191640377,
            0.0029645701870322227,
            0.003181257052347064,
            0.001530535169877112,
            0.00027370077441446483,
            0.0013453043065965176,
            0.0003123435308225453
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What was the latest released transcript?",
        "gold_select": "select Transcripts.transcript_date",
        "select_candidates": [
            "select t10.c5",
            "select t9.c5",
            "select Transcripts.transcript_id",
            "select t8.c5"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcript_Contents",
            "Transcripts",
            "Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.0010560458758845925,
            6.449458305723965e-05,
            0.0014615330146625638,
            6.575726001756266e-05,
            0.06638377159833908,
            9.011095244204625e-05,
            0.0013006110675632954,
            6.54955510981381e-05
        ],
        "align_select": "select t10.c5",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the names and ids of each course with less than two sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections"
        ],
        "align_scores": [
            0.8550984263420105,
            9.714467887533829e-05,
            0.0008487238083034754,
            9.4874449132476e-05,
            0.9945038557052612,
            0.00010403777559986338,
            0.00030424297438003123,
            0.00010255224333377555
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the id and name of all courses that have less than 2 sections?",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_id, Courses.course_name",
            "select Sections.course_id, Courses.course_name",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_id, Courses.course_name, Sections.section_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections"
        ],
        "align_scores": [
            0.9906198978424072,
            9.842594590736553e-05,
            0.017753012478351593,
            9.39613237278536e-05,
            0.9923723936080933,
            9.635568130761385e-05,
            0.000399979529902339,
            6.489957013400272e-05
        ],
        "align_select": "select Courses.course_id, Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names and ids of every course with no more than one section.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.7666375637054443,
            0.0022230674512684345,
            0.8655762076377869,
            0.0027984243351966143,
            0.020192299038171768,
            0.000903576728887856,
            0.00037229788722470403,
            0.00015289934526663274
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the id and date of the transcripts that has the fewest results?",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select Student_Enrolment_Courses.student_course_id, t8.c3",
            "select Student_Enrolment_Courses.course_id, t8.c3",
            "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id",
            "select Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.00038484326796606183,
            7.901113713160157e-05,
            0.0003825155727099627,
            7.42599877412431e-05,
            0.0002078668330796063,
            6.820502312621102e-05,
            0.0001589731255080551,
            7.604770507896319e-05
        ],
        "align_select": "select Student_Enrolment_Courses.student_course_id, t8.c3",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the date and ID of the transcript with the lowest number of results.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t12.c5, t12.c0",
            "select t8.c5, t8.c6",
            "select t12.c3, t12.c4"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts"
        ],
        "align_scores": [
            0.00025657625519670546,
            9.530615352559835e-05,
            0.00014629284851253033,
            7.44007556932047e-05,
            0.00014291575644165277,
            6.14789969404228e-05,
            0.00014269612438511103,
            6.172354187583551e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of the sections in descending order?",
        "gold_select": "select Sections.section_name",
        "select_candidates": [
            "select Sections.section_name",
            "select Sections.section_name, Sections.section_description",
            "select Sections.section_name, Sections.section_description, Sections.other_details",
            "select Sections.course_id, Sections.section_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections"
        ],
        "align_scores": [
            0.9962648749351501,
            0.0002083209838019684,
            0.0002014739002333954,
            9.224529640050605e-05,
            0.00028730242047458887,
            9.846660395851359e-05,
            0.00019796323613263667,
            8.660396269988269e-05
        ],
        "align_select": "select Sections.section_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the list of the sections sorted by name, ordered by descending sequence of letter?",
        "gold_select": "select Sections.section_name",
        "select_candidates": [
            "select Sections.section_name",
            "select Sections.section_name, Sections.course_id",
            "select Sections.section_id, Sections.section_name",
            "select Sections.section_name, Sections.section_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "Sections",
        "table_candidates": [
            "Sections"
        ],
        "align_scores": [
            0.9948370456695557,
            0.9948370456695557,
            0.0001411016855854541,
            0.0001411016855854541,
            0.0001337863941444084,
            0.0001337863941444084,
            0.0001532353344373405,
            0.0001532353344373405
        ],
        "align_select": "select Sections.section_name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Find the date when the transcripts with the smallest number of results were recorded, show their IDs too.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t12.c5, t12.c0",
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t8.c5, Student_Enrolment.student_enrolment_id",
            "select t10.c5, Transcript_Contents.student_course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Semesters Student_Enrolment",
            "Student_Enrolment",
            "Semesters Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.00021043735614512116,
            7.028442632872611e-05,
            0.00022623302356805652,
            9.649048297433183e-05,
            0.00026928854640573263,
            8.521004929207265e-05,
            0.00019401955069042742,
            8.677128062117845e-05
        ],
        "align_select": "select t12.c5, t12.c0",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the date of the transcript which has the fewest results. List its id.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t8.c5, t8.c6",
            "select t9.c5, Transcripts.transcript_id",
            "select t10.c5, Transcript_Contents.student_course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcript_Contents",
            "Semesters Student_Enrolment_Courses",
            "Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.0002444834972266108,
            6.672613380942494e-05,
            0.00019776629051193595,
            5.214107295614667e-05,
            0.00021170401305425912,
            6.146251689642668e-05,
            0.00015853429795242846,
            6.70958252158016e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the date of the transcript with the lowest number of results, also list the id.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t12.c5, t12.c0",
            "select t8.c5, t8.c6",
            "select t10.c5, Transcript_Contents.student_course_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Semesters Student_Enrolment",
            "Semesters Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.0003204317472409457,
            7.868436659919098e-05,
            0.00014005078992340714,
            6.229636346688494e-05,
            0.00016509504348505288,
            5.216061254031956e-05,
            0.00022227494628168643,
            8.297091699205339e-05
        ],
        "align_select": "select t8.c5, Student_Enrolment_Courses.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which semester had the largest number of students registered? Show both the name and the ID.",
        "gold_select": "select Semesters.semester_name, Semesters.semester_id",
        "select_candidates": [
            "select Semesters.semester_name, Student_Enrolment.student_enrolment_id",
            "select Semesters.semester_name, Semesters.semester_id",
            "select Semesters.semester_name, Student_Enrolment.degree_program_id",
            "select Semesters.semester_name, Student_Enrolment.semester_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Departments Semesters Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.00044415527372621,
            8.348752453457564e-05,
            0.993602454662323,
            7.63380594435148e-05,
            0.0004041777865495533,
            0.00010026477684732527,
            0.9926566481590271,
            9.999761095969006e-05
        ],
        "align_select": "select Semesters.semester_name, Semesters.semester_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name of the student whose permanent address is not his or her current one?",
        "gold_select": "select Students.first_name",
        "select_candidates": [
            "select Students.first_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name",
            "select Students.student_id, Students.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students",
            "Addresses Students",
            "Semesters Students",
            "Students Student_Enrolment_Courses",
            "Degree_Programs Students",
            "Sections Students",
            "Departments Students",
            "Courses Students"
        ],
        "align_scores": [
            0.87893146276474,
            0.00020709609088953584,
            0.00019555326434783638,
            7.335501868510619e-05,
            0.00018399777763988823,
            7.622399425599724e-05,
            0.00019458869064692408,
            7.24434430594556e-05
        ],
        "align_select": "select Students.first_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the program which has the largest number of students enrolled in it. List both the id and the summary.",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.department_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description",
            "select Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Courses Degree_Programs Student_Enrolment",
            "Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Departments Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment",
            "Semesters Student_Enrolment",
            "Sections Student_Enrolment",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9732287526130676,
            8.698420424479991e-05,
            0.000579548766836524,
            9.616676834411919e-05,
            0.9657454490661621,
            8.380010694963858e-05,
            0.00015803457063157111,
            7.850088877603412e-05
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which program has the greatest number of enrolled students and give their IDs and summaries?",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select student_Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select student_Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9816336035728455,
            0.00013511664292309433,
            0.9803210496902466,
            0.00014895362255629152,
            0.0016907082172110677,
            0.00010891248530242592,
            0.000574758043512702,
            7.982343231560662e-05
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the program with most enrollment. List both the id and the summary.",
        "gold_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.department_id, Degree_Programs.degree_summary_name",
            "select Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_name",
            "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Courses Departments Degree_Programs Student_Enrolment",
            "Addresses Degree_Programs Student_Enrolment"
        ],
        "align_scores": [
            0.9871941208839417,
            7.409220415866002e-05,
            0.0006041180458851159,
            8.329173579113558e-05,
            0.9916430711746216,
            8.63078239490278e-05,
            0.9828929305076599,
            7.349091174546629e-05
        ],
        "align_select": "select Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the first name, middle name, last name of the first graduate of the school?",
        "gold_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "select_candidates": [
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.student_id, Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name, Students.middle_name, Students.last_name",
            "select Students.first_name., Students.middle_name, Students.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Students",
        "table_candidates": [
            "Students Student_Enrolment_Courses",
            "Students Student_Enrolment",
            "Students"
        ],
        "align_scores": [
            0.9914849400520325,
            6.570956611540169e-05,
            0.00026799613260664046,
            8.411418093601242e-05,
            0.9914849400520325,
            6.570956611540169e-05,
            0.025312351062893867,
            8.727350359549746e-05
        ],
        "align_select": "select Students.first_name, Students.middle_name, Students.last_name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "For each semester show me the name and ID of the class which has the largest enrollment.",
        "gold_select": "select Semesters.semester_name, Semesters.semester_id",
        "select_candidates": [
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Student_Enrolment.degree_program_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Student_Enrolment.student_enrolment_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Semesters Student_Enrolment",
            "Addresses Courses Semesters Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses Sections Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.0010021241614595056,
            8.921516564441845e-05,
            0.00039606195059604943,
            8.639693260192871e-05,
            0.9759628772735596,
            7.61504634283483e-05,
            0.0003844667226076126,
            7.957960769999772e-05
        ],
        "align_select": "select Courses.course_name, Courses.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "For each semester, what is the name and ID of the one with the largest number of students registered?",
        "gold_select": "select Semesters.semester_name, Semesters.semester_id",
        "select_candidates": [
            "select Semesters.semester_name, Semesters.semester_id",
            "select Semesters.semester_name, Student_Enrolment.student_enrolment_id",
            "select Semesters.semester_name, Student_Enrolment.degree_program_id",
            "select Semesters.semester_name, Students.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Semesters Student_Enrolment",
        "table_candidates": [
            "Semesters Student_Enrolment",
            "Semesters Students Student_Enrolment",
            "Degree_Programs Semesters Student_Enrolment",
            "Departments Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.9924947023391724,
            0.00014118313265498728,
            0.002221931703388691,
            0.00011900225945282727,
            0.0017884168773889542,
            0.0001435520825907588,
            0.003752191551029682,
            0.00012355975923128426
        ],
        "align_select": "select Semesters.semester_name, Semesters.semester_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the course with the greatest number of enrollments?",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.degree_program_id",
            "select Courses.course_name, Student_Enrolment.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Addresses Courses Sections Student_Enrolment",
            "Courses Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.9938108325004578,
            8.858469664119184e-05,
            0.00016674496873747557,
            5.9326044720364735e-05,
            0.00030456390231847763,
            7.270109199453145e-05,
            0.00019969524873886257,
            6.018988278810866e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the course with the most enrollments?",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.degree_program_id",
            "select Courses.course_name, Student_Enrolment.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Addresses Courses Sections Student_Enrolment"
        ],
        "align_scores": [
            0.9945617318153381,
            9.746683645062149e-05,
            0.00017078270320780575,
            6.121625483501703e-05,
            0.0002970782807096839,
            7.345665653701872e-05,
            0.00020137554383836687,
            5.8430960052646697e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the course id and name with the highest enrollments.",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Sections.course_id, Courses.course_name",
            "select Courses.course_id, Courses.course_name",
            "select Student_Enrolment.degree_program_id, Courses.course_name",
            "select Departments.department_name, Courses.course_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Sections Student_Enrolment"
        ],
        "align_scores": [
            0.06454387307167053,
            0.00010165182902710512,
            0.9937863349914551,
            0.00010068134724861011,
            0.0005767676047980785,
            9.157753811450675e-05,
            0.00038561856490559876,
            6.213950109668076e-05
        ],
        "align_select": "select Courses.course_id, Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the names and IDs of courses whose sections numbers do not exceed 2.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_id",
            "select Sections.course_id, Sections.section_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections",
            "Courses Departments Degree_Programs Sections",
            "Courses Departments"
        ],
        "align_scores": [
            0.20472025871276855,
            0.00014375483442563564,
            0.013038953766226768,
            0.0001437331666238606,
            0.1456204354763031,
            0.00011594432726269588,
            0.00047932236338965595,
            6.306973227765411e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the names and ids of courses with two or fewer sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections"
        ],
        "align_scores": [
            0.9884465932846069,
            0.00011586231994442642,
            0.001476438483223319,
            0.0001007906612358056,
            0.9932752847671509,
            0.00010490527347428724,
            0.00039326990372501314,
            8.726883970666677e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all the names and IDs of courses with no more than 2 sections.",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections"
        ],
        "align_scores": [
            0.9572792053222656,
            9.596083691576496e-05,
            0.0024691112339496613,
            0.00010032560385297984,
            0.988596498966217,
            9.077884897124022e-05,
            0.0003162957727909088,
            9.60949037107639e-05
        ],
        "align_select": "select Courses.course_name, Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names and IDs of courses having two sections or less?",
        "gold_select": "select Courses.course_name, Courses.course_id",
        "select_candidates": [
            "select Courses.course_name, Sections.course_id",
            "select Courses.course_name, Courses.course_id",
            "select Courses.course_name, Sections.section_id",
            "select Courses.course_name, Departments.department_id"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Sections",
        "table_candidates": [
            "Courses Sections",
            "Courses Departments Sections",
            "Courses Degree_Programs Sections"
        ],
        "align_scores": [
            0.7110234498977661,
            9.509808296570554e-05,
            0.9889066219329834,
            8.547127799829468e-05,
            0.0004917007754556835,
            7.74335494497791e-05,
            0.00036595738492906094,
            7.947071571834385e-05
        ],
        "align_select": "select Courses.course_name, Courses.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the date and id of the transcripts that has more or equal to two courses listed?",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t14.c3, t14.c0",
            "select t14.c3, t14.c4",
            "select t12.c5, t12.c0",
            "select t14.c5, t14.c0"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Courses Student_Enrolment_Courses",
            "Courses Transcripts",
            "Courses Student_Enrolment",
            "Semesters Student_Enrolment_Courses",
            "Courses Sections",
            "Semesters Student_Enrolment"
        ],
        "align_scores": [
            0.0002419113297946751,
            6.28433408564888e-05,
            0.0009607651736587286,
            6.173472502268851e-05,
            0.0002649485250003636,
            6.439564458560199e-05,
            0.0002993253874592483,
            6.511007813969627e-05
        ],
        "align_select": "select t14.c3, t14.c0",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the date and ID of the transcript with two or more courses.",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select t10.c5, Transcript_Contents.student_course_id",
            "select t8.c5, Student_Enrolment_Courses.student_course_id",
            "select t9.c5, Transcripts.transcript_id",
            "select t10.c5, t10.c6"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Courses Student_Enrolment_Courses",
            "Transcripts Transcript_Contents"
        ],
        "align_scores": [
            0.00027869443874806166,
            9.738545486470684e-05,
            0.000422934623202309,
            8.679230813868344e-05,
            0.00043407941120676696,
            9.917523857438937e-05,
            0.0008559161797165871,
            5.563734157476574e-05
        ],
        "align_select": "select t10.c5, Transcript_Contents.student_course_id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the id and date of the transcript with no less than 2 courses?",
        "gold_select": "select Transcripts.transcript_date, Transcript_Contents.transcript_id",
        "select_candidates": [
            "select Student_Enrolment_Courses.student_course_id, t8.c3",
            "select Student_Enrolment_Courses.course_id, t8.c3",
            "select Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id",
            "select Transcripts.transcript_id, t9.c3"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts Transcript_Contents",
        "table_candidates": [
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents",
            "Courses Student_Enrolment_Courses",
            "Semesters Student_Enrolment",
            "Semesters Student_Enrolment_Courses",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.00028904483770020306,
            6.727759318891913e-05,
            0.0002750375133473426,
            6.76529889460653e-05,
            0.00011370006541255862,
            6.276296335272491e-05,
            0.00031074436265043914,
            7.024951628409326e-05
        ],
        "align_select": "select Student_Enrolment_Courses.student_course_id, t8.c3",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the program type with the highest number of students.",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Degree_Programs.department_id",
            "select Degree_Programs.other_details",
            "select Student_Enrolment.degree_program_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Students",
            "Degree_Programs Students Student_Enrolment",
            "Degree_Programs Student_Enrolment",
            "Degree_Programs Students Student_Enrolment_Courses",
            "Departments Degree_Programs Students",
            "Courses Degree_Programs Students",
            "Departments Degree_Programs Students Student_Enrolment",
            "Courses Degree_Programs Students Student_Enrolment"
        ],
        "align_scores": [
            0.9261225461959839,
            8.037905354285613e-05,
            0.004273914732038975,
            7.47150115785189e-05,
            0.9757401943206787,
            7.063186058076099e-05,
            0.9851910471916199,
            8.256617729784921e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What type of program are most students enrolled in?",
        "gold_select": "select Degree_Programs.degree_summary_name",
        "select_candidates": [
            "select Degree_Programs.degree_summary_name",
            "select Student_Enrolment.semester_id",
            "select Student_Enrolment.degree_program_id",
            "select Degree_Programs.department_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Degree_Programs Student_Enrolment",
        "table_candidates": [
            "Degree_Programs Student_Enrolment",
            "Courses Degree_Programs Student_Enrolment",
            "Departments Degree_Programs Student_Enrolment",
            "Semesters Student_Enrolment",
            "Student_Enrolment",
            "Sections Student_Enrolment",
            "Students Student_Enrolment",
            "Courses Student_Enrolment"
        ],
        "align_scores": [
            0.9351183176040649,
            7.222279236884788e-05,
            0.0014200012665241957,
            6.511355604743585e-05,
            0.9562042951583862,
            7.320191070903093e-05,
            0.009530498646199703,
            8.013422484509647e-05
        ],
        "align_select": "select Degree_Programs.degree_summary_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code of the course with the highest number of students?",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Sections.course_id",
            "select Sections.course_id, Student_Enrolment.semester_id",
            "select Courses.course_name",
            "select Departments.department_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Sections Students Student_Enrolment",
            "Sections Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Courses Sections Students Student_Enrolment",
            "Courses Sections Students",
            "Sections Students",
            "Departments Sections Students Student_Enrolment",
            "Degree_Programs Sections Students Student_Enrolment"
        ],
        "align_scores": [
            0.993747353553772,
            9.177011816063896e-05,
            0.00025624086265452206,
            7.511601143050939e-05,
            0.3854300081729889,
            8.67186754476279e-05,
            0.0009089433588087559,
            7.702805305598304e-05
        ],
        "align_select": "select Sections.course_id",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the name of the course with the largest enrollment.",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.semester_id, Courses.other_details",
            "select Courses.course_name, Student_Enrolment.degree_program_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Courses Semesters Student_Enrolment",
            "Addresses Courses Sections Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses Departments Student_Enrolment",
            "Courses Departments Sections Student_Enrolment"
        ],
        "align_scores": [
            0.9948871731758118,
            5.9328645875211805e-05,
            0.00019797758432105184,
            5.302803037920967e-05,
            0.00014659417502116412,
            5.4346295655705035e-05,
            0.00026352080749347806,
            6.233660678844899e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the course with the largest enrollment?",
        "gold_select": "select Courses.course_name",
        "select_candidates": [
            "select Courses.course_name",
            "select Courses.course_name, Student_Enrolment.semester_id",
            "select Courses.course_name, Student_Enrolment.degree_program_id",
            "select Courses.course_name, Student_Enrolment.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Courses Student_Enrolment_Courses",
        "table_candidates": [
            "Courses Student_Enrolment",
            "Courses Sections Student_Enrolment",
            "Addresses Courses Student_Enrolment",
            "Courses Students Student_Enrolment",
            "Addresses Courses Sections Student_Enrolment",
            "Courses Semesters Student_Enrolment",
            "Courses Student_Enrolment_Courses"
        ],
        "align_scores": [
            0.9940325617790222,
            6.948869850020856e-05,
            0.00022592692403122783,
            5.823370520374738e-05,
            0.00032266712514683604,
            7.132978498702869e-05,
            0.00019945243548136204,
            5.5024484026944265e-05
        ],
        "align_select": "select Courses.course_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the median date of the transcripts?",
        "gold_select": "select avg(Transcripts.transcript_date)",
        "select_candidates": [
            "select t8.c5",
            "select avg(t10.c5)",
            "select avg(t9.c6)",
            "select avg(t9.c5)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Transcripts",
        "table_candidates": [
            "Transcript_Contents",
            "Transcripts",
            "Student_Enrolment_Courses",
            "Transcripts Transcript_Contents",
            "Student_Enrolment"
        ],
        "align_scores": [
            0.0008682796033099294,
            0.00028650916647166014,
            0.0008830307051539421,
            0.0003207517438568175,
            0.0008607013733126223,
            0.0002878161903936416,
            0.0008707137894816697,
            0.00030975116533227265
        ],
        "align_select": "select t8.c5",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the ID of the TV channels in countries with 3 or more TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Country",
            "select TV_Channel.id, TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.id, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9342131614685059,
            9.948315710062161e-05,
            0.0013350535882636905,
            8.397105557378381e-05,
            0.00016401679022237659,
            7.345021731453016e-05,
            0.0013350535882636905,
            8.397105557378381e-05
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all the TV channels in countries where there are three or more TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.Country",
            "select TV_Channel.Country, TV_Channel.Language",
            "select TV_Channel.series_name",
            "select TV_Channel.id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.7111944556236267,
            8.804033859632909e-05,
            0.00014696437574457377,
            6.141899211797863e-05,
            0.0004551186866592616,
            6.042642780812457e-05,
            0.7011954188346863,
            0.00013221056724432856
        ],
        "align_select": "select TV_Channel.Country",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the id of tv channels from countries with three or more tv channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Country",
            "select t0.c, TV_Channel.Country",
            "select TV_Channel.id - TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9878087043762207,
            9.510044037597254e-05,
            0.0019351193914189935,
            7.873540016589686e-05,
            0.00024766294518485665,
            6.368498725350946e-05,
            0.0005687566008418798,
            6.228335405467078e-05
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all id's for the tv channels that has at least 3 channels from each country.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Country",
            "select TV_Channel.id dependant on TV_Channel.Country",
            "select TV_Channel.ids, TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series Cartoon",
            "TV_Channel TV_series",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9807156324386597,
            0.000320839521009475,
            0.47794321179389954,
            0.00012430154311005026,
            0.006986548192799091,
            8.114920638035983e-05,
            0.2168578803539276,
            0.00010234853834845126
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the languages and their total counts of television channels.",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Language.c3, count(*)",
            "select TV_Channel.series_name, count(*)",
            "select TV_Channel.Country, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9965309500694275,
            0.0002087051107082516,
            0.0006328421295620501,
            0.00016435430734418333,
            0.00043373770313337445,
            0.0002768849954009056,
            0.0005360349314287305,
            0.00023205828620120883
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me all the languages and list the total count of TV channels using each.",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country",
            "select TV_Channel.Language.c3, count(*)",
            "select TV_Channel.Language, count(*), http://TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9958856701850891,
            0.00030230835545808077,
            0.00012038050044793636,
            9.898836287902668e-05,
            0.0009362467098981142,
            0.00018560550233814865,
            0.00013693720393348485,
            8.581002475693822e-05
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "For each language, list the total count of TV channels that use it.",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country",
            "select TV_Channel.Language.c3, count(*)",
            "select count(*), TV_Channel.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9959123730659485,
            0.00019652450282592326,
            0.00012010851787636057,
            8.966711175162345e-05,
            0.0011280988110229373,
            0.00018314622866455466,
            0.9949331879615784,
            0.00019028736278414726
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the total count of TV Channels using each language?",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select count(*), TV_Channel.Language",
            "select sum(TV_Channel.Language), TV_Channel.Language",
            "select TV_Channel.Language, count(*), TV_Channel.Country"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9963149428367615,
            0.0001637648674659431,
            0.9956715106964111,
            0.00017701162141747773,
            0.00012509679072536528,
            8.51147051434964e-05,
            0.00012629679986275733,
            7.551431917818263e-05
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the total amount of series names, contents in the tv channel list table?",
        "gold_select": "select count(distinct TV_Channel.series_name), count(distinct TV_Channel.Content)",
        "select_candidates": [
            "select sum(TV_Channel.series_name), sum(TV_Channel.Content)",
            "select sum(TV_Channel.series_name, sum(TV_Channel.Content)",
            "select sum(TV_Channel.Country), sum(TV_Channel.Content)",
            "select sum(TV_Channel.series_name), sum(TV_Channel.Country)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9940528273582458,
            0.00011381276999600232,
            0.0023821669165045023,
            0.00010163477418245748,
            0.0005951931234449148,
            0.00011431866005295888,
            0.00039802753599360585,
            0.00010275741806253791
        ],
        "align_select": "select sum(TV_Channel.series_name), sum(TV_Channel.Content)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the production code and channel, of the latest animated movie?",
        "gold_select": "select Cartoon.Production_code, Cartoon.Channel",
        "select_candidates": [
            "select Cartoon.Production_code, Cartoon.Channel",
            "select Cartoon.Production_code, Cartoon.Channel, t2.c7",
            "select Cartoon.Production_code, Cartoon.Channel, Cartoon.Title",
            "select Cartoon.Production_code.c6, Cartoon.Production_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-EXCEPT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.0024483592715114355,
            8.828641148284078e-05,
            9.962973854271695e-05,
            8.62490851432085e-05,
            0.00012017050903523341,
            6.72067326377146e-05,
            0.0001784229971235618,
            0.0001535471819806844
        ],
        "align_select": "select Cartoon.Production_code, Cartoon.Channel",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the code of the latest cartoon and the channel that broadcast it?",
        "gold_select": "select Cartoon.Production_code, Cartoon.Channel",
        "select_candidates": [
            "select Cartoon.Production_code, Cartoon.Channel",
            "select Cartoon.id, Cartoon.Channel",
            "select Cartoon.Title, Cartoon.Channel",
            "select Cartoon.Channel, Cartoon.Production_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.6880033016204834,
            8.78196515259333e-05,
            0.12942782044410706,
            7.693276711506769e-05,
            0.0003768916358239949,
            7.470433047274128e-05,
            0.736859917640686,
            8.654808334540576e-05
        ],
        "align_select": "select Cartoon.Production_code, Cartoon.Channel",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the production code and the channel of the latest cartoon?",
        "gold_select": "select Cartoon.Production_code, Cartoon.Channel",
        "select_candidates": [
            "select Cartoon.Production_code, Cartoon.Channel",
            "select max(Cartoon.Production_code), max(Cartoon.Channel)",
            "select Cartoon.Production_code.c5, Cartoon.Channel",
            "select Cartoon.Production_code, Cartoon.Channel"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.4033045470714569,
            8.526401506969705e-05,
            0.0003245518892072141,
            9.852708171820268e-05,
            0.0003087982186116278,
            7.401417678920552e-05,
            0.4033045470714569,
            8.526401506969705e-05
        ],
        "align_select": "select Cartoon.Production_code, Cartoon.Channel",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the smallest and largest share for the TV series?",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select min(TV_series.Share), max(TV_series.Share)",
            "select max(TV_series.Share), min(TV_series.Share)",
            "select TV_series.Share, min(TV_series.Share), max(TV_series.Share)",
            "select TV_series.Share, min(TV_series.Rating), max(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9946784973144531,
            0.00015661545330658555,
            0.9948810338973999,
            0.00019623205298557878,
            0.0002673790149856359,
            6.382086576195434e-05,
            0.0001307577040279284,
            6.693426985293627e-05
        ],
        "align_select": "select min(TV_series.Share), max(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show all shares for the TV series and their minima and maxima.",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select TV_series.Share, min(TV_series.Share), max(TV_series.Share)",
            "select TV_series.Share, minima(TV_series.Share), maxima(TV_series.Share)",
            "select TV_series.Share, minima(TV_series.Share), max(TV_series.Share)",
            "select sum(TV_series.Share), min(TV_series.Share), max(TV_series.Share)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9939391613006592,
            0.9939391613006592,
            0.001394492108374834,
            0.001394492108374834,
            0.0005637833382934332,
            0.0005637833382934332,
            0.0009029459906741977,
            0.0009029459906741977
        ],
        "align_select": "select TV_series.Share, min(TV_series.Share), max(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the names and IDs of all TV channels with 3 or more TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.series_name, TV_Channel.id",
            "select TV_Channel.id, TV_Channel.series_name",
            "select TV_Channel.Country, TV_Channel.id",
            "select Cartoon.Title, TV_Channel.id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.00028036010917276144,
            7.761888991808519e-05,
            0.00029987184097990394,
            7.326015474973246e-05,
            0.0002645448548719287,
            6.440019205911085e-05,
            0.01787470281124115,
            9.488694195169955e-05
        ],
        "align_select": "select TV_Channel.series_name, TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the code for each television channel that has a minimum of 3 channels?",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.Hight_definition_TV",
            "select TV_Channel.series_name",
            "select TV_Channel.Country",
            "select TV_Channel.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel Cartoon"
        ],
        "align_scores": [
            0.8003774285316467,
            0.000130136264488101,
            0.0004663325671572238,
            7.465419912477955e-05,
            0.0036264187656342983,
            8.065268775681034e-05,
            0.08240332454442978,
            0.00010350185766583309
        ],
        "align_select": "select TV_Channel.Hight_definition_TV",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the ids of all channels that have three or more TV channels.",
        "gold_select": "select TV_Channel.id",
        "select_candidates": [
            "select TV_Channel.id",
            "select TV_Channel.id, TV_Channel.Hight_definition_TV",
            "select TV_Channel.id, TV_Channel.Pay_per_view_PPV",
            "select TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel",
            "TV_Channel TV_series",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.9493066668510437,
            0.00010275290696881711,
            0.00033240331686101854,
            9.790791955310851e-05,
            0.0003759815590456128,
            7.100572111085057e-05,
            0.00022466106747742742,
            6.312707409961149e-05
        ],
        "align_select": "select TV_Channel.id",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "what are the 3 highest-rated episodes in the TV series table? Explain the ratings.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.Rating",
            "select TV_series.Episode, TV_series.Air_Date",
            "select TV_series.Episode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series",
            "TV_series Cartoon"
        ],
        "align_scores": [
            0.0005563247832469642,
            5.893421621294692e-05,
            0.003188700880855322,
            6.248700083233416e-05,
            0.0023069551680237055,
            6.478084833361208e-05,
            0.9894126057624817,
            6.5329804783687e-05
        ],
        "align_select": "select TV_series.Episode",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language of the fewest channels and how many channels use it?",
        "gold_select": "select TV_Channel.Language, count(*)",
        "select_candidates": [
            "select TV_Channel.Language, count(*)",
            "select TV_Channel.Language, count(*), TV_Channel.Country",
            "select TV_Channel.series_name, count(*)",
            "select TV_Channel.Country, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9953166246414185,
            9.562449849909171e-05,
            0.00011131163773825392,
            6.033366662450135e-05,
            0.0006681723170913756,
            6.531697727041319e-05,
            0.0006726162973791361,
            6.836651300545782e-05
        ],
        "align_select": "select TV_Channel.Language, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the total count of cartoons directed by each of the listed directors.",
        "gold_select": "select count(*), Cartoon.Directed_by",
        "select_candidates": [
            "select Cartoon.Directed_by, count(*)",
            "select Cartoon.Directed_by, count(*), Cartoon.Written_by",
            "select Cartoon.Directed_by.c2, count(*)",
            "select Cartoon.Directed_by, sum(Cartoon.id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon"
        ],
        "align_scores": [
            0.9958243370056152,
            0.00022886732767801732,
            0.00017540238332003355,
            6.583130016224459e-05,
            0.0002807500713970512,
            0.00011401686060708016,
            0.0026285143103450537,
            0.00022785071632824838
        ],
        "align_select": "select Cartoon.Directed_by, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show me three of the highest-rated TV series episodes, their Episode name and ratings.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Air_Date, TV_series.Rating",
            "select TV_series.Episode, TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.8863049745559692,
            5.1426915888441727e-05,
            0.0005217882571741939,
            6.053969991626218e-05,
            0.0002607230271678418,
            6.919872248545289e-05,
            0.0006481146556325257,
            5.890089596505277e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the top three TV series, their Episode and rating.",
        "gold_select": "select TV_series.Episode, TV_series.Rating",
        "select_candidates": [
            "select TV_series.Episode, TV_series.Rating",
            "select TV_series.id, TV_series.Episode, TV_series.Rating",
            "select TV_series.Episode, TV_series.Air_Date, TV_series.Rating",
            "select TV_series.Episode, TV_series.Rating, TV_series.Air_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9863815307617188,
            6.205718091223389e-05,
            0.0012315964559093118,
            7.127429853426293e-05,
            0.003461910178884864,
            6.47885026410222e-05,
            0.0015566545771434903,
            6.853976083220914e-05
        ],
        "align_select": "select TV_series.Episode, TV_series.Rating",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the production code and channel of the latest aired cartoon.",
        "gold_select": "select Cartoon.Production_code, Cartoon.Channel",
        "select_candidates": [
            "select Cartoon.Production_code, Cartoon.Channel",
            "select max(Cartoon.Production_code), max(Cartoon.Channel)",
            "select min(Cartoon.Production_code), min(Cartoon.Channel)",
            "select Cartoon.Production_code.c6, Cartoon.Production_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Cartoon",
        "table_candidates": [
            "Cartoon",
            "TV_series Cartoon",
            "TV_Channel Cartoon",
            "TV_Channel TV_series Cartoon"
        ],
        "align_scores": [
            0.8996928334236145,
            7.552965689683333e-05,
            0.0009098706068471074,
            9.519752347841859e-05,
            0.001016287598758936,
            7.767789793433622e-05,
            0.00023390042770188302,
            7.382308103842661e-05
        ],
        "align_select": "select Cartoon.Production_code, Cartoon.Channel",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the country with most TV channels, and what is their exact number?",
        "gold_select": "select TV_Channel.Country, count(*)",
        "select_candidates": [
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Country, count(*), TV_Channel.Language",
            "select TV_Channel.Country, count(*)",
            "select TV_Channel.Country.c2, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_Channel",
        "table_candidates": [
            "TV_Channel"
        ],
        "align_scores": [
            0.9949082732200623,
            0.00010637418017722666,
            0.0001414781145285815,
            6.146245868876576e-05,
            0.9949082732200623,
            0.00010637418017722666,
            0.0017706628423184156,
            6.799241964472458e-05
        ],
        "align_select": "select TV_Channel.Country, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the largest and smallest share of TV series.",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select max(TV_series.Share), min(TV_series.Share)",
            "select TV_series.Share, max(TV_series.Share), min(TV_series.Share)",
            "select TV_series.Share, max(TV_series.Share)",
            "select max(TV_series.Viewers_m), min(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9947466254234314,
            7.798503065714613e-05,
            0.0001602251286385581,
            6.46767730358988e-05,
            0.0002530825149733573,
            8.234955021180212e-05,
            0.002289628144353628,
            9.660316572990268e-05
        ],
        "align_select": "select max(TV_series.Share), min(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the smallest and largest share of TV series.",
        "gold_select": "select max(TV_series.Share), min(TV_series.Share)",
        "select_candidates": [
            "select min(TV_series.Share), max(TV_series.Share)",
            "select TV_series.Share, min(TV_series.Share), max(TV_series.Share)",
            "select max(TV_series.Share), min(TV_series.Share)",
            "select TV_series.Share, min(TV_series.Rating), max(TV_series.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "TV_series",
        "table_candidates": [
            "TV_series"
        ],
        "align_scores": [
            0.9948679208755493,
            0.0002559029671829194,
            0.00020526742446236312,
            7.245290908031166e-05,
            0.9951193332672119,
            0.0002447265142109245,
            0.0001116288112825714,
            7.506844849558547e-05
        ],
        "align_select": "select min(TV_series.Share), max(TV_series.Share)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the order of the player with the highest earnings?",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank, poker_player.Earnings",
            "select poker_player.Money_Rank",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Money_Rank, t0.c6"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-UNION-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.0002009980526054278,
            6.107037916081026e-05,
            0.04514794051647186,
            9.343941928818822e-05,
            0.0003361322160344571,
            6.946040957700461e-05,
            0.00023395507014356554,
            7.461562199750915e-05
        ],
        "align_select": "select poker_player.Money_Rank, poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the money rank of the player who has earned the most money.",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Money_Rank",
            "select poker_player.Money_Rank, poker_player.Earnings"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.7670361995697021,
            6.0246682551223785e-05,
            0.00016008112288545817,
            6.208819831954315e-05,
            0.00015703894314356148,
            6.562145426869392e-05,
            0.00021523899340536445,
            5.7952005590777844e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the rank of the player with the largest earnings.",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Money_Rank, poker_player.Earnings",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9886072278022766,
            5.9451485867612064e-05,
            0.00026594364317134023,
            6.059237784938887e-05,
            0.00019880459876731038,
            5.872097608516924e-05,
            0.00011906535655725747,
            6.082859181333333e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the rank of the player with the most earnings.",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.Money_Rank, poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9689907431602478,
            5.8898986026179045e-05,
            0.00012330870958976448,
            5.965298623777926e-05,
            0.0002136568073183298,
            5.731015698984265e-05,
            0.00027140940073877573,
            5.9228812460787594e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the earnings of poker players, sorted starting with the highest.",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Earnings, t0.c6",
            "select poker_player.Earnings, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9926268458366394,
            0.00018225588428322226,
            0.00017296594160143286,
            7.455076411133632e-05,
            0.0005509064067155123,
            0.0001888457190943882,
            9.986782970372587e-05,
            6.800195114919916e-05
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the nationalities shared by no less than one people?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.Name, people.Birth_Date",
            "select people.Nationality, people.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9383285045623779,
            9.941745520336553e-05,
            0.00044567236909642816,
            6.691793532809243e-05,
            0.00014406080299522728,
            5.102185605210252e-05,
            0.0009717514622025192,
            7.036120950942859e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all the nationalities shared by two people or more.",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.Name, people.Birth_Date",
            "select people.Nationality, people.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9946262240409851,
            0.00010591909085633233,
            0.00022673964849673212,
            6.341511470964178e-05,
            0.00011342911602696404,
            5.527092071133666e-05,
            0.0003490645030979067,
            7.28757368051447e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the nationalities that are shared by no less than one people?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.People_ID",
            "select people.Nationality, people.Name, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.815751850605011,
            0.00014289654791355133,
            0.0006122943595983088,
            7.516967161791399e-05,
            0.001222415012307465,
            8.889542368706316e-05,
            0.00016685231821611524,
            5.397108179749921e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the nationalities that share two or more persons.",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.People_ID",
            "select people.Nationality, people.Name",
            "select people.Nationality, count(people.People_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9902070164680481,
            0.00018464842287357897,
            0.0033378552179783583,
            0.00010629164171405137,
            0.012786678038537502,
            8.228401566157117e-05,
            0.0007711073267273605,
            6.424604362109676e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the nationalities that have more than one person in them?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, count(*)",
            "select people.Nationality, people.Name",
            "select people.Nationality, count(people.People_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9927101135253906,
            0.00010519316856516525,
            0.36218616366386414,
            8.000495290616527e-05,
            0.0007899303454905748,
            7.436926534865052e-05,
            0.020700080320239067,
            8.012414036784321e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the poker player earnings, sorted from highest to lowest.",
        "gold_select": "select poker_player.Earnings",
        "select_candidates": [
            "select poker_player.Earnings",
            "select poker_player.Earnings, poker_player.Money_Rank",
            "select poker_player.Earnings, t0.c6",
            "select poker_player.Earnings, t0.c8"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9945164322853088,
            0.9945164322853088,
            0.00015038016135804355,
            0.00015038016135804355,
            0.0006255359621718526,
            0.0006255359621718526,
            0.0005548743647523224,
            0.0005548743647523224
        ],
        "align_select": "select poker_player.Earnings",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the nationality of the largest number of people?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.Name, people.Birth_Date",
            "select people.Nationality, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9951034784317017,
            6.408902845578268e-05,
            0.0002704319776967168,
            5.2794264775002375e-05,
            0.00012831615458708256,
            4.971724047209136e-05,
            0.0001830045075621456,
            5.044733188697137e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the nationality of the most people?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.Name, people.Birth_Date",
            "select people.Nationality, people.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9956841468811035,
            8.81302185007371e-05,
            0.0002768063568510115,
            5.355697066988796e-05,
            0.00014138586993794888,
            5.037920709582977e-05,
            0.0003358956892043352,
            5.352301741368137e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the nationality of the largest percentage of people?",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, people.Name",
            "select people.Nationality, people.Name, people.Birth_Date",
            "select people.Nationality, people.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9945914149284363,
            6.220020441105589e-05,
            0.0002514767402317375,
            5.622221215162426e-05,
            0.00011591349175432697,
            5.286454324959777e-05,
            0.00016355575644411147,
            5.449082163977437e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the avgerage earnings of poker players taller than 200cm.",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select avgerage(poker_player.Earnings)",
            "select avgerge(poker_player.Earnings)",
            "select avge(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9964433312416077,
            6.999888137215748e-05,
            0.9827926754951477,
            7.889060361776501e-05,
            0.3979049026966095,
            7.976438791956753e-05,
            0.7759432792663574,
            7.562855171272531e-05
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the average earnings of poker players with height over 200.",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select avg(poker_player.Earnings), people.Height",
            "select an avg(poker_player.Earnings)",
            "select  avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9961678385734558,
            9.336780931334943e-05,
            0.00016455721925012767,
            0.02781260386109352,
            0.0003844197781290859,
            9.45489591686055e-05,
            0.9961678385734558,
            9.336780931334943e-05
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the highest final tables made by all poker players with a total earnings below 200000.",
        "gold_select": "select max(poker_player.Final_Table_Made)",
        "select_candidates": [
            "select poker_player.Final_Table_Made",
            "select max(poker_player.Final_Table_Made)",
            "select poker_player.Final_Table_Made, poker_player.Best_Finish",
            "select poker_player.Poker_Player_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9293117523193359,
            0.0001329617662122473,
            0.10620316118001938,
            0.00012606770906131715,
            0.00030714867170900106,
            6.922632019268349e-05,
            0.0003383563016541302,
            6.664022657787427e-05
        ],
        "align_select": "select poker_player.Final_Table_Made",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the total count of poker players.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), poker_player.People_ID",
            "select count(*), poker_player.Poker_Player_ID",
            "select count(*), poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9928606152534485,
            0.9928606152534485,
            0.00015522596368100494,
            0.00015522596368100494,
            0.00013760136789642274,
            0.00013760136789642274,
            0.00017436417692806572,
            0.00017436417692806572
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Return the nationalities with at least two people.",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, count(*)",
            "select people.Nationality, people.Name",
            "select people.Nationality, min(people.Nationality)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9963752627372742,
            7.572409958811477e-05,
            0.0011440678499639034,
            6.856499385321513e-05,
            0.0001956653723027557,
            5.692755803465843e-05,
            9.96876260614954e-05,
            6.107411172706634e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Return all nationalities for which there are multiple people.",
        "gold_select": "select people.Nationality",
        "select_candidates": [
            "select people.Nationality",
            "select people.Nationality, count(*)",
            "select people.Nationality, people.Name",
            "select people.Nationality Avg(people.Height)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.995794415473938,
            8.622212044429034e-05,
            0.9881510734558105,
            9.662932279752567e-05,
            0.2332351803779602,
            6.111930997576565e-05,
            0.00032541100517846644,
            5.735028753406368e-05
        ],
        "align_select": "select people.Nationality",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List down the name of poker player, starting from the greatest earnings.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Earnings",
            "select people.Name (or people.Birth_Date)",
            "select people.Name, poker_player.Best_Finish"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9885028004646301,
            0.0017350204288959503,
            0.00023384534870274365,
            0.00015078291471581906,
            0.0005382458912208676,
            0.00026799587067216635,
            0.00020272855181246996,
            0.00013148262223694474
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Write the names of poker players, ordered from largest to smallest based on their earnings.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Earnings",
            "select people.Name (ordered by poker_player.Earnings)",
            "select people.Nationality, poker_player.Earnings"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9904072880744934,
            0.9904072880744934,
            0.0002244189236080274,
            0.0002244189236080274,
            0.0122321592643857,
            0.0122321592643857,
            0.00013960333308205009,
            0.00013960333308205009
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What are the average earnings of poker players who are over 200 cm tall?",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select avg(poker_player.Earnings), people.Height",
            "select an avg(poker_player.Earnings)",
            "select  avg(poker_player.Earnings)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9959232807159424,
            0.00012668423005379736,
            0.0002275196893606335,
            0.014027084223926067,
            0.00045477389357984066,
            0.00011903788981726393,
            0.9959232807159424,
            0.00012668423005379736
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who are the people from outside Russia?",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Height",
            "select distinct people.Name, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.9933286905288696,
            0.0014792918227612972,
            0.00020148255862295628,
            9.009049972519279e-05,
            0.0001701794535620138,
            0.00010879561159526929,
            0.00033732305746525526,
            8.20934001239948e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of non-russians.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Nationality",
            "select people.Name, people.Birth_Date",
            "select distinct people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "people",
        "table_candidates": [
            "people"
        ],
        "align_scores": [
            0.991936206817627,
            0.00010472207941347733,
            0.00017443850811105222,
            6.41838923911564e-05,
            0.0001515460025984794,
            5.9423200582386926e-05,
            0.027365852147340775,
            7.490206189686432e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the birth date of the poker player who earned the least money in his career.",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.People_ID, people.Birth_Date",
            "select people.Birth_Date, people.Height",
            "select people.Birth_Date, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9698919653892517,
            0.00011135474051116034,
            0.0004370106034912169,
            7.38659655326046e-05,
            0.0002030125178862363,
            7.73470601416193e-05,
            0.0009705293923616409,
            8.964291919255629e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the birth date of the poker player with the smallest earnings.",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, people.Height",
            "select people.People_ID, people.Birth_Date",
            "select people.Birth_Date, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9926032423973083,
            0.9926032423973083,
            0.0001683466980466619,
            0.0001683466980466619,
            0.0003220135113224387,
            0.0003220135113224387,
            0.0004981772508472204,
            0.0004981772508472204
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find out when was the birth date of the poker player who have the fewest earning?",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, people.Height",
            "select people.Birth_Date, people.Name",
            "select people.Nationality, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9848561882972717,
            0.0002180860610678792,
            0.0002510086924303323,
            9.10656526684761e-05,
            0.0013998009962961078,
            0.00011186303163412958,
            0.00032016023760661483,
            0.00014715269207954407
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the names of poker players whose earnings is over $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, poker_player.Poker_Player_ID",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9842492938041687,
            0.000522847636602819,
            0.00016331981169059873,
            8.641456224722788e-05,
            0.0001710666110739112,
            8.934106881497428e-05,
            0.00015165731019806117,
            8.022726979106665e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of poker players whose winnings is over $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Nationality",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9817678928375244,
            0.00033217997406609356,
            0.00015465995238628238,
            8.306329982588068e-05,
            0.00021279136126395315,
            9.776061779120937e-05,
            0.00015849513874854892,
            7.795097917551175e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of poker players whose earnings is more than 300000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9909454584121704,
            0.00020269685774110258,
            0.00014348611875902861,
            8.041386172408238e-05,
            0.00014670955715700984,
            7.37441296223551e-05,
            0.00013935010065324605,
            7.962045492604375e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of poker players whose lifetime winnings exceed 300000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, people.Nationality",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9815596342086792,
            0.056793246418237686,
            0.00014962910790927708,
            0.0001627627934794873,
            0.00022960323258303106,
            0.0002965285093523562,
            0.00014530576299875975,
            0.0001571899774717167
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the money rank of the poker player with the most earnings.",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.Money_Rank, poker_player.Earnings",
            "select poker_player.People_ID, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9735599160194397,
            6.388845213223249e-05,
            0.00018648963305167854,
            6.501738243969157e-05,
            0.000340292725013569,
            5.810401853523217e-05,
            0.0001865127560449764,
            6.768667662981898e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the money rank of the poker player with the largest earnings.",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Money_Rank",
            "select poker_player.Money_Rank, poker_player.Earnings"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9873523712158203,
            6.078573642298579e-05,
            0.0001852243294706568,
            6.486009078798816e-05,
            0.00018243669182993472,
            6.838842091383412e-05,
            0.0002580693981144577,
            6.0618498537223786e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the money rank of the poker player with the most money?",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Final_Table_Made",
            "select poker_player.People_ID, poker_player.Money_Rank"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9900842905044556,
            7.086853293003514e-05,
            0.00020047953876201063,
            6.537549052154645e-05,
            0.00019040241022594273,
            6.230890721781179e-05,
            0.0002008562587434426,
            6.661297084065154e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the money rank of the poker player who won the most.",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select poker_player.Money_Rank",
            "select poker_player.Poker_Player_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Money_Rank",
            "select poker_player.People_ID, poker_player.Final_Table_Made"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player",
            "poker_player people"
        ],
        "align_scores": [
            0.9466956853866577,
            0.994658887386322,
            0.00018810459005180746,
            0.0002266207739012316,
            0.00019914229051209986,
            0.0002555011888034642,
            0.0002046362351393327,
            0.00024210885749198496
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Return the largest money rank of the tallest poker player.",
        "gold_select": "select poker_player.Money_Rank",
        "select_candidates": [
            "select max(poker_player.Money_Rank)",
            "select poker_player.Money_Rank",
            "select max(poker_player.Money_Rank), people.Height",
            "select min(poker_player.Money_Rank)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people",
            "people poker_player people"
        ],
        "align_scores": [
            0.0002662856422830373,
            6.820021371822804e-05,
            0.9854025840759277,
            5.684196366928518e-05,
            0.00020371697610244155,
            6.628548726439476e-05,
            0.00015573417476844043,
            7.924187957542017e-05
        ],
        "align_select": "select poker_player.Money_Rank",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the mean earnings of poker players.",
        "gold_select": "select avg(poker_player.Earnings)",
        "select_candidates": [
            "select avg(poker_player.Earnings)",
            "select an avg(poker_player.Earnings)",
            "select avg(poker_player.Earnings), poker_player.Poker_Player_ID",
            "select avg(poker_player.Earnings), t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player",
        "table_candidates": [
            "poker_player"
        ],
        "align_scores": [
            0.9969557523727417,
            7.185211143223569e-05,
            0.00035140072577632964,
            0.0001109058503061533,
            8.397249621339142e-05,
            5.0656261009862646e-05,
            0.0003072083636652678,
            6.109123205533251e-05
        ],
        "align_select": "select avg(poker_player.Earnings)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the birthdate of the poker player with the least earnings?",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Birth_Date, people.Height",
            "select people.Birth_Date, poker_player.People_ID",
            "select people.People_ID, people.Birth_Date"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9895451664924622,
            0.00011235241254325956,
            0.00018786388682201505,
            6.654655589954928e-05,
            0.00027811710606329143,
            6.542108167195693e-05,
            0.0002862118126358837,
            7.92861683294177e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Tell me the birthday of the poker player who earns less than the rest.",
        "gold_select": "select people.Birth_Date",
        "select_candidates": [
            "select people.Birth_Date",
            "select people.Name, people.Birth_Date",
            "select people.People_ID, people.Birth_Date",
            "select people.Birth_Date, people.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9870240688323975,
            0.00011019354860763997,
            0.0005181354936212301,
            8.026975410757586e-05,
            0.0003235894546378404,
            7.142078538890928e-05,
            0.0006209710845723748,
            7.59752219892107e-05
        ],
        "align_select": "select people.Birth_Date",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the names of poker players who have earnings larger than $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.Poker_Player_ID",
            "select people.Name, poker_player.People_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.972485363483429,
            0.0004950862494297326,
            0.0002030428877333179,
            0.00010557765926932916,
            0.00017618550918996334,
            9.23069819691591e-05,
            0.00016878660244401544,
            8.341000648215413e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the names of poker players whose earnings exceed $300,000.",
        "gold_select": "select people.Name",
        "select_candidates": [
            "select people.Name",
            "select people.Name, people.Birth_Date",
            "select people.Name, poker_player.People_ID",
            "select people.Name, poker_player.Poker_Player_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "poker_player people",
        "table_candidates": [
            "poker_player people"
        ],
        "align_scores": [
            0.9856890439987183,
            0.0006471561500802636,
            0.0001502276718383655,
            8.636248821858317e-05,
            0.00015212685684673488,
            7.502244261559099e-05,
            0.0001507740089436993,
            8.204151527024806e-05
        ],
        "align_select": "select people.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the contestants who have a name other than 'Jessie Alloway'?",
        "gold_select": "select CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_name, t1.c2",
            "select CONTESTANTS.contestant_name, CONTESTANTS.contestant_number",
            "select CONTESTANTS.contestant_name, t1.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS",
        "table_candidates": [
            "CONTESTANTS"
        ],
        "align_scores": [
            0.9869036674499512,
            0.0002260648470837623,
            0.0006725754938088357,
            9.517765283817425e-05,
            0.00019901302584912628,
            7.287448534043506e-05,
            0.0006213143933564425,
            8.493842324241996e-05
        ],
        "align_select": "select CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the largest and smallest possible area codes?",
        "gold_select": "select max(AREA_CODE_STATE.area_code), min(AREA_CODE_STATE.area_code)",
        "select_candidates": [
            "select max(AREA_CODE_STATE.area_code), min(AREA_CODE_STATE.area_code)",
            "select max(t0.c2), min(t0.c2)",
            "select max(AREA_CODE_STATE.state), min(t0.c2)",
            "select max(t0.c6), min(t0.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE",
        "table_candidates": [
            "AREA_CODE_STATE",
            "AREA_CODE_STATE CONTESTANTS",
            "AREA_CODE_STATE VOTES"
        ],
        "align_scores": [
            0.9906904697418213,
            0.0002864473790396005,
            0.01723054051399231,
            0.0012323082191869617,
            0.000563413486815989,
            0.00024057080736383796,
            0.007751171477138996,
            0.000587480841204524
        ],
        "align_select": "select max(AREA_CODE_STATE.area_code), min(AREA_CODE_STATE.area_code)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the code for the area with the highest number of voters.",
        "gold_select": "select AREA_CODE_STATE.area_code",
        "select_candidates": [
            "select AREA_CODE_STATE.area_code",
            "select AREA_CODE_STATE.area_code, AREA_CODE_STATE.state",
            "select AREA_CODE_STATE.state",
            "select AREA_CODE_STATE.state, t0.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9668338298797607,
            6.339728133752942e-05,
            0.00017645822663325816,
            5.506521847564727e-05,
            0.5058630108833313,
            5.714109283871949e-05,
            0.00024229244445450604,
            7.2104150603991e-05
        ],
        "align_select": "select AREA_CODE_STATE.area_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the area code in which the largest number of voters reside.",
        "gold_select": "select AREA_CODE_STATE.area_code",
        "select_candidates": [
            "select AREA_CODE_STATE.area_code",
            "select AREA_CODE_STATE.area_code, AREA_CODE_STATE.state",
            "select AREA_CODE_STATE.state",
            "select AREA_CODE_STATE.area_code, VOTES.state"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "AREA_CODE_STATE VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE"
        ],
        "align_scores": [
            0.669287383556366,
            6.715241761412472e-05,
            0.00019506982062011957,
            5.4312407883116975e-05,
            0.0007720400462858379,
            6.522019248222932e-05,
            0.0003168507828377187,
            6.138462049420923e-05
        ],
        "align_select": "select AREA_CODE_STATE.area_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me a list of contestants numbers and names with more or equal to 2 votes.",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.contestant_number, CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.contestant_number",
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, max(VOTES.contestant_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9934331178665161,
            0.00013202158152125776,
            0.004828800912946463,
            0.00013241216947790235,
            0.0002371590380789712,
            7.249348709592596e-05,
            0.00011973720393143594,
            5.8508016081759706e-05
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the vote counts of state NY or CA.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select VOTES.vote_id",
            "select count(*), VOTES.state",
            "select sum(VOTES.vote_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9963100552558899,
            9.042341116582975e-05,
            0.0020139203406870365,
            0.00010768729407573119,
            0.0003372809733264148,
            7.483809167752042e-05,
            0.0014113675570115447,
            7.067160913720727e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the latest day in which we collected votes from CA?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select max(t2.c5)",
            "select max(t2.c6)",
            "select max(VOTES.contestant_number)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.38065385818481445,
            7.210600597318262e-05,
            0.000755199755076319,
            9.563718049321324e-05,
            0.0006858095875941217,
            0.00010015489533543587,
            0.0005359176429919899,
            6.72067326377146e-05
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the date of votes from the state California.",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select VOTES.created",
            "select t2.c5",
            "select VOTES.vote_id",
            "select VOTES.vote_id, VOTES.created"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9956974983215332,
            5.767419497715309e-05,
            0.00044006604002788663,
            5.823636820423417e-05,
            0.00028960866620764136,
            6.157022289698943e-05,
            0.00010887137614190578,
            6.0013189795427024e-05
        ],
        "align_select": "select VOTES.created",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the latest date in which votes were received from the state CA?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select max(t2.c5)",
            "select max(VOTES.contestant_number)",
            "select max(t2.c6)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "VOTES",
            "AREA_CODE_STATE VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES",
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.008095511235296726,
            0.00025101035134866834,
            0.0008586370968259871,
            0.00017048692097887397,
            0.0003678913926705718,
            0.0006526855286210775,
            0.0008107461035251617,
            0.00016647759184706956
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What was the latest date a vote from California was cast?",
        "gold_select": "select max(VOTES.created)",
        "select_candidates": [
            "select max(VOTES.created)",
            "select max(VOTES.created), AREA_CODE_STATE.state",
            "select max(t2.c5)",
            "select max(VOTES.created), VOTES.phone_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "VOTES",
        "table_candidates": [
            "AREA_CODE_STATE VOTES",
            "VOTES",
            "CONTESTANTS VOTES",
            "AREA_CODE_STATE CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.7078686356544495,
            7.301918230950832e-05,
            0.00021521579765249044,
            6.216811743797734e-05,
            0.0009795299265533686,
            8.397201600018889e-05,
            0.0001522485981695354,
            5.8974517742171884e-05
        ],
        "align_select": "select max(VOTES.created)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Of all the contestants who were voted, what is the contestant number and name of the contestant that received the fewest votes?",
        "gold_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "select_candidates": [
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.contestant_number, CONTESTANTS.contestant_name",
            "select VOTES.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
            "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.contestant_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "CONTESTANTS VOTES",
        "table_candidates": [
            "CONTESTANTS VOTES"
        ],
        "align_scores": [
            0.9012766480445862,
            0.8057320713996887,
            0.025657864287495613,
            0.0066703748889267445,
            0.000798756955191493,
            0.00038816381129436195,
            0.0006349870236590505,
            0.0004221077251713723
        ],
        "align_select": "select CONTESTANTS.contestant_number, CONTESTANTS.contestant_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the native tongue of the most speakers in each country?",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9924147725105286,
            7.658259710296988e-05,
            0.005256173200905323,
            6.549792306032032e-05,
            0.0005611037486232817,
            6.029932774254121e-05,
            0.26834896206855774,
            7.42132542654872e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language spoken by the most people in each country?",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.Language, country.Capital"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage",
            "countrylanguage"
        ],
        "align_scores": [
            0.9946972131729126,
            8.424663974437863e-05,
            0.0057373144663870335,
            6.752819899702445e-05,
            0.9834995269775391,
            7.071840082062408e-05,
            0.0005250808317214251,
            5.8381276176078245e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the languages with the greatest percentage of native speakers living in each country?",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language, countrylanguage.CountryCode",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Code2"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.588448703289032,
            0.00010802627366501838,
            0.001026549027301371,
            7.596131035825238e-05,
            0.0008671031682752073,
            8.131450886139646e-05,
            0.0005488150054588914,
            7.10425665602088e-05
        ],
        "align_select": "select countrylanguage.Language, countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language spoken by the maximum number of people in each country?",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9935427904129028,
            7.645899313502014e-05,
            0.004875543061643839,
            7.039475894998759e-05,
            0.0022588863503187895,
            7.397923764074221e-05,
            0.00029962981352582574,
            5.889539170311764e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find out what is the language which is used by the majority of people in each country.",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "countrylanguage",
            "sqlite_sequence countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9916746020317078,
            7.000369078014046e-05,
            0.8668746948242188,
            7.0581903855782e-05,
            0.007721945643424988,
            6.000162829877809e-05,
            0.01214116346091032,
            6.791581836296245e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language spoken by the majority of the population in each country?",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, country.Capital"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9898736476898193,
            6.169823609525338e-05,
            0.20965832471847534,
            6.39845384284854e-05,
            0.0024079771246761084,
            5.234193668002263e-05,
            0.0005753079312853515,
            4.852957863477059e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language that is spoken by the highest percentage of the people in each country?",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.Percentage",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.991531252861023,
            8.630527736386284e-05,
            0.018532611429691315,
            7.116176857380196e-05,
            0.6712319850921631,
            8.66818954818882e-05,
            0.03968873247504234,
            0.00010167539585381746
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the main language spoken by the majority of the population in each country?",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, country.Capital"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9138705730438232,
            5.89476439927239e-05,
            0.12382683902978897,
            6.357316306093708e-05,
            0.0015003576409071684,
            5.2687486459035426e-05,
            0.0005695891450159252,
            4.910646748612635e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the population, leader and name of the country with the greatest area?",
        "gold_select": "select country.Name, country.Population, country.HeadOfState",
        "select_candidates": [
            "select country.Population, country.HeadOfState, country.Name",
            "select country.Code, country.HeadOfState, country.Name",
            "select country.Code, country.Population, country.HeadOfState",
            "select country.Name, country.Population, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9929089546203613,
            8.254178101196885e-05,
            0.0007402294431813061,
            0.00010500555799808353,
            0.0023540547117590904,
            8.021778194233775e-05,
            0.9927992820739746,
            8.530711056664586e-05
        ],
        "align_select": "select country.Population, country.HeadOfState, country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the sum area of all the countries in the Caribbean region?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea) descripted in country.SurfaceArea",
            "select sum(country.SurfaceArea) descripted in country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9960914254188538,
            0.0001484509848523885,
            0.00014996448589954525,
            8.874643390299752e-05,
            0.0003696169296745211,
            0.00010837956506293267,
            0.0008742535719648004,
            0.00012731821334455162
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How large is the area of countries located in the Caribbean region in total?",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea) descripted in country.SurfaceArea",
            "select sum(country.SurfaceArea) descripted by country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9954694509506226,
            0.0001765078486641869,
            0.000230951962294057,
            0.00033157345023937523,
            0.00046005850890651345,
            9.730803867569193e-05,
            0.0004792234394699335,
            0.00030135957058519125
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Sum up all the surface area of the countries in the Caribbean.",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.Region",
            "select sum(country.SurfaceArea), country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9961207509040833,
            0.00010211934568360448,
            0.00012840588169638067,
            5.906434671487659e-05,
            0.00016329536447301507,
            6.858265987830237e-05,
            0.0001262858568225056,
            6.400822167051956e-05
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many live in Asia, and what is the biggest GDP among them?",
        "gold_select": "select sum(country.Population), max(country.GNP)",
        "select_candidates": [
            "select country.Population, country.GNP",
            "select country.Population, country.LifeExpectancy",
            "select country.Name, country.GNP",
            "select country.Code, country.Population"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9943639039993286,
            0.00012034239625791088,
            0.0006050520460121334,
            7.285934407263994e-05,
            0.0011603721650317311,
            0.00013576110359281301,
            0.004105553962290287,
            0.00010720860882429406
        ],
        "align_select": "select country.Population, country.GNP",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "List how many people live in Asia, and the GDP of the country that has the highest GNP among them.",
        "gold_select": "select sum(country.Population), max(country.GNP)",
        "select_candidates": [
            "select country.Population, country.GNP",
            "select country.Code, country.Name, country.Population",
            "select country.Code, country.Population, country.GNP",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9914698004722595,
            0.0001018498805933632,
            0.0004729288339149207,
            8.28948468551971e-05,
            0.00048394937766715884,
            9.827093163039535e-05,
            0.0009470896911807358,
            0.0001314811233896762
        ],
        "align_select": "select country.Population, country.GNP",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Sum up the numbers for all Asian countries, what is the total population and highest GNP?",
        "gold_select": "select sum(country.Population), max(country.GNP)",
        "select_candidates": [
            "select sum(country.Population), max(country.GNP)",
            "select sum(country.Population), country.GNP",
            "select country.Population, country.GNP",
            "select sum(country.Population), sum(country.GNP)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.00015157778398133814,
            0.9940981864929199,
            0.13767345249652863,
            0.9316834211349487,
            0.40393713116645813,
            0.9474936127662659,
            0.38310712575912476,
            0.008172906935214996
        ],
        "align_select": "select sum(country.Population), max(country.GNP)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the total population of Asia and the highest gross national product (GNP)?",
        "gold_select": "select sum(country.Population), max(country.GNP)",
        "select_candidates": [
            "select sum(country.Population), max(country.GNP)",
            "select sum(country.Population), country.GNP",
            "select sum(country.Population), sum(country.GNP)",
            "select sum(country.Population), maxim(country.GNP)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.00012725374836008996,
            0.00010131410090252757,
            0.3675810694694519,
            7.47731828596443e-05,
            0.9267118573188782,
            8.047576557146385e-05,
            0.00012232987501192838,
            8.566220640204847e-05
        ],
        "align_select": "select sum(country.Population), sum(country.GNP)",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "List the names of all the countries that became independent later than 1950.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.9876749515533447,
            0.00015540736785624176,
            0.00017940664838533849,
            7.41525727789849e-05,
            0.00028107306570746005,
            8.60951840877533e-05,
            0.0005739633343182504,
            9.967982623493299e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of all the countries that became independent from 1950 onwards?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Name, country.Capital",
            "select distinct country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.988322913646698,
            0.00015062669990584254,
            0.00032363421632908285,
            8.12776925158687e-05,
            0.0001910607679747045,
            7.462943176506087e-05,
            0.0665985569357872,
            9.014576062327251e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the average life expectancy in countries where English is not the official language?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "country",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9945138692855835,
            0.00010171040776185691,
            0.00012771763431373984,
            0.00018179212929680943,
            0.0004102432867512107,
            0.0001073813036782667,
            0.00014594536332879215,
            0.000179014983586967
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the average life expectancy for countries in which English is not the official language.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode",
            "select an avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "country",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9948023557662964,
            0.00010844551434274763,
            0.00012169717956567183,
            0.00018080297741107643,
            0.00015881616855040193,
            0.00022523179359268397,
            0.000376454641809687,
            0.00010889150871662423
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the average life expectancy of the countries where English is not their official language.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select an avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "country",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.99456787109375,
            0.00016738151316531003,
            0.00013098733325023204,
            0.00018498182180337608,
            0.0003762764681596309,
            0.00011103007273050025,
            0.00015690304280724376,
            0.0003383998409844935
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the country codes for countries in which the language spoken is other than English.",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9583572149276733,
            0.0018099448643624783,
            0.03737473860383034,
            0.00016417325241491199,
            0.00024161144392564893,
            8.512006024830043e-05,
            0.0001582004188094288,
            6.839807610958815e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the country codes for countries in which people speak languages other than English?",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9242161512374878,
            0.16533328592777252,
            0.06634265929460526,
            0.00041067838901653886,
            0.00029287789948284626,
            0.000131839289679192,
            0.0001865958038251847,
            8.952818461693823e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the country codes for countries in which people speak languages other than English.",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.8997296690940857,
            0.05210480839014053,
            0.045301079750061035,
            0.0002289384719915688,
            0.00024725525872781873,
            9.261540253646672e-05,
            0.00015440754941664636,
            7.309093052754179e-05
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the number of official languages spoken in the countries that were established prior to 1930.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(countrylanguage.IsOfficial)",
            "select count(*)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.18496710062026978,
            0.0001632930216146633,
            0.9902650117874146,
            0.000167213540407829,
            0.01242712140083313,
            0.0004837381711695343,
            0.9656898975372314,
            0.007407977245748043
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give the populations and averages of the countries in North America with a surface area larger than 3000.",
        "gold_select": "select sum(country.Population), avg(country.SurfaceArea)",
        "select_candidates": [
            "select avg(country.Population), country.Population",
            "select country.Population, avg(country.Population)",
            "select avg(country.Population), count(*)",
            "select avg(country.Population), country.LifeExpectancy"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9859271049499512,
            0.00015760179667267948,
            0.9935036301612854,
            0.00042728567495942116,
            0.0007726273615844548,
            0.00014500126417260617,
            0.0036114035174250603,
            0.0001990667515201494
        ],
        "align_select": "select avg(country.Population), country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the name of the country with the most languages in use?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9948522448539734,
            8.052112389123067e-05,
            0.005608456674963236,
            0.00010249808110529557,
            0.0019769722130149603,
            7.555617048637941e-05,
            0.00032632253714837134,
            6.413005030481145e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which country has the largest number of official languages?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, countrylanguage.Language",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9728448987007141,
            6.589033728232607e-05,
            0.0043893614783883095,
            8.319585322169587e-05,
            0.0010802632896229625,
            6.53791066724807e-05,
            0.0003440675209276378,
            6.134119030321017e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the name of the country that speaks the most languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9953464865684509,
            6.662230589427054e-05,
            0.0036060521379113197,
            8.147548942361027e-05,
            0.0002018170926021412,
            5.821671584271826e-05,
            0.0011469867313280702,
            6.666914123343304e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the names of the top three countries in terms of population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Population",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9918970465660095,
            5.6741446314845234e-05,
            0.0002401924430159852,
            5.361455987440422e-05,
            0.0005565653555095196,
            5.3821768233319744e-05,
            0.001092853955924511,
            5.5117914598667994e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name, population, and life expectancy of the biggest country in Asia by land?",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.IndepYear, country.Population, country.LifeExpectancy",
            "select country.Name, country.Code, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9883113503456116,
            0.0002057720412267372,
            0.0022649492602795362,
            9.417624096386135e-05,
            0.0009787487797439098,
            9.045229671755806e-05,
            0.9883113503456116,
            0.0002057720412267372
        ],
        "align_select": "select country.Name, country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "The average GDP and overall population in countries whose governments are US territory.",
        "gold_select": "select avg(country.GNP), sum(country.Population)",
        "select_candidates": [
            "select avg(country.GNP), avg(country.Population)",
            "select avg(country.GNP), sum(country.Population)",
            "select avg(country.SurfaceArea), avg(country.Population)",
            "select avg(country.Population), avg(country.GNP)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9895995855331421,
            0.00021291679877322167,
            0.6601735353469849,
            0.0003530979447532445,
            0.00020185191533528268,
            0.000100712277344428,
            0.9932777285575867,
            0.0003629286075010896
        ],
        "align_select": "select avg(country.GNP), avg(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the largest surface area of all the countries in Europe?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.SurfaceArea",
            "select max(country.SurfaceArea)",
            "select country.Code, max(country.SurfaceArea)",
            "select maxima(country.SurfaceArea)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9925290942192078,
            0.000312253920128569,
            0.00014431681483983994,
            0.00011303738574497402,
            0.00011889427696587518,
            0.00014464801643043756,
            0.00018463820742908865,
            0.00012533440894912928
        ],
        "align_select": "select country.SurfaceArea",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the countries with more land area than any European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Region",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6948742866516113,
            0.00040824952884577215,
            0.00025827717036008835,
            8.39636122691445e-05,
            0.0005622123717330396,
            8.807611447991803e-05,
            0.00029079560772515833,
            9.558420424582437e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the list of countries that have a bigger surface area than any European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.SurfaceArea",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.6276401877403259,
            0.0005508405156433582,
            0.00026685086777433753,
            0.00010273154475726187,
            0.00038513948675245047,
            9.407966717844829e-05,
            0.0006983933853916824,
            0.00016001031326595694
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What\u2019s the total count of languages used in the world?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct countrylanguage.Language)",
            "select count(count(distinct countrylanguage.Language)",
            "select count(countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.991344690322876,
            0.0001001393175101839,
            0.9928227066993713,
            6.322901754174381e-05,
            0.0009841922437772155,
            8.86550042196177e-05,
            0.9872742891311646,
            7.539738726336509e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show the overall area covered by all countries in either Asia or Europe.",
        "gold_select": "select sum(country.SurfaceArea)",
        "select_candidates": [
            "select sum(country.SurfaceArea)",
            "select sum(country.SurfaceArea), country.Continent",
            "select sum(country.SurfaceArea), country.Name",
            "select sum(country.SurfaceArea), country.IndepYear"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country"
        ],
        "align_scores": [
            0.9961588382720947,
            0.000209187637665309,
            0.00017016695346683264,
            7.202636334113777e-05,
            0.0001343094336334616,
            6.880564615130424e-05,
            0.0001046105899149552,
            6.800590199418366e-05
        ],
        "align_select": "select sum(country.SurfaceArea)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the population and expected lifespan of the Asian nation with the biggest surface?",
        "gold_select": "select country.Name, country.Population, country.LifeExpectancy",
        "select_candidates": [
            "select country.Population, country.LifeExpectancy",
            "select country.Code, country.Population, country.LifeExpectancy",
            "select country.Code, country.Name, country.Population, country.LifeExpectancy",
            "select country.Name, country.Population, country.LifeExpectancy"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9873215556144714,
            0.00020259039592929184,
            0.00043677922803908587,
            8.849790901876986e-05,
            0.00028155476320534945,
            9.35712960199453e-05,
            0.0004985546693205833,
            8.207453356590122e-05
        ],
        "align_select": "select country.Population, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the primary language of Aruba?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9953403472900391,
            0.9960840940475464,
            0.00019624363631010056,
            0.0002104814921040088,
            0.00021880000713281333,
            0.00020177649275865406,
            0.00017300517356488854,
            0.0001939348439918831
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What language is used most on Aruba?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.3613615036010742,
            6.603123620152473e-05,
            0.00032984913559630513,
            6.72657261020504e-05,
            0.0002760375791694969,
            6.705846317345276e-05,
            0.00022875083959661424,
            7.037490286165848e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the most spoken language in Aruba?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9933704137802124,
            6.0150523495394737e-05,
            0.0003525812644511461,
            6.418548582587391e-05,
            0.00032596461824141443,
            6.225831020856276e-05,
            0.00028312409995123744,
            6.631507858401164e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language that is used by the most Asian countries?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Code2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9918609857559204,
            8.394719770876691e-05,
            0.0005088619654998183,
            7.250835187733173e-05,
            0.0002575094986241311,
            6.372695497702807e-05,
            0.00041132463957183063,
            7.257669494720176e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language most commonly used by the most countries in Asia?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.994383692741394,
            0.00013106578262522817,
            0.0008011505706235766,
            8.085306762950495e-05,
            0.00028281199047341943,
            6.941088213352486e-05,
            0.0003157248720526695,
            7.977496716193855e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How many countries have a majority of their population speaking Spanish?",
        "gold_select": "select count(*), max(countrylanguage.Percentage)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), country.Name",
            "select count(*), country.Name, country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.990382730960846,
            0.0016884932992979884,
            0.001670614117756486,
            0.0015833112411201,
            0.0011223274050280452,
            0.0008295184816233814,
            0.0002723895013332367,
            0.0001522599341114983
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the continents and their population and average life expectancy, for those with an average life expectancy below 72?",
        "gold_select": "select sum(country.Population), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select country.Continent, country.Population, avg(country.LifeExpectancy)",
            "select country.Continent, avg(country.Population)",
            "select country.Continent, country.IndepYear, avg(country.Population)",
            "select country.Name, country.Continent, avg(country.Population)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9463352560997009,
            0.00010340144217479974,
            0.436126172542572,
            9.59947137744166e-05,
            0.0001724971953080967,
            7.304961036425084e-05,
            0.39155134558677673,
            9.539135498926044e-05
        ],
        "align_select": "select country.Continent, country.Population, avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are all Asian countries where there are a greater number of people than that found in any African country?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select distinct country.Name",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.6798855066299438,
            0.0020449357107281685,
            0.0004474388842936605,
            0.00017170491628348827,
            0.1308184415102005,
            0.0009780656546354294,
            0.0002738615730777383,
            9.028366184793413e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the Asian countries whose population is larger than that of any African country?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Continent, max(country.Population)",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8749344348907471,
            0.13345801830291748,
            0.0003408001794014126,
            0.00017838504572864622,
            0.00021761578682344407,
            7.320366421481594e-05,
            0.0003125505754724145,
            0.00013316632248461246
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the codes of countries where people speak other than English?",
        "gold_select": "select distinct countrylanguage.CountryCode",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.9756067991256714,
            0.0463549941778183,
            0.041152119636535645,
            0.0002623393665999174,
            0.000351009308360517,
            0.00015425391029566526,
            0.00018116086721420288,
            0.00012291544408071786
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which countries in Asia have the shortest average life expectancy?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, avg(country.LifeExpectancy)",
            "select country.Name, country.LifeExpectancy",
            "select country.Name, avg(country.LifeExpectancy), country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9925321936607361,
            0.8814529776573181,
            0.0010269387857988477,
            0.0008468904998153448,
            0.0008598144049756229,
            0.0008869758457876742,
            0.00010016100713983178,
            7.476248720195144e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the mean life expectancies in countries where the country\u2019s official languages is different from the English language.",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), countrylanguage.Language",
            "select avg(country.LifeExpectancy), countrylanguage.IsOfficial",
            "select an avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.9915719032287598,
            0.000642773462459445,
            0.0001819738681660965,
            0.03085508570075035,
            0.0002627240610308945,
            0.0009824984008446336,
            0.0004582438850775361,
            0.0001663259172346443
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name the Asian countries that have a larger population than any African country?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Name de country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country",
            "city sqlite_sequence country"
        ],
        "align_scores": [
            0.7106871008872986,
            0.0006558838067576289,
            0.00028551684226840734,
            0.00012043814058415592,
            0.0003161214990541339,
            8.049242023844272e-05,
            0.0005234405980445445,
            0.00010727425251388922
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the most common language in Asia?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9953319430351257,
            9.210755524691194e-05,
            0.00028954294975847006,
            7.256769458763301e-05,
            0.0001697507977951318,
            7.208407623693347e-05,
            0.00022462100605480373,
            7.476327300537378e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List which language is most spoken on the Asian continent?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9953896999359131,
            0.9946236610412598,
            0.00028648291481658816,
            0.0002226671640528366,
            0.00017366581596434116,
            0.00022625354176852852,
            0.0004419966135174036,
            0.00021623643988277763
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the most spoken language on the Asian continent?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Code",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9944781064987183,
            0.9948293566703796,
            0.00030642535421065986,
            0.00023498566588386893,
            0.00019959357450716197,
            0.0002514589868951589,
            0.0006245208787731826,
            0.00023864339163992554
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the total number of distinct official languages in the countries founded prior to 1930.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language)",
            "select count(distinct t3.c6)",
            "select count(distinct countrylanguage.IsOfficial)."
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.014934832230210304,
            0.00013825790665578097,
            0.9951708912849426,
            0.00015052765957079828,
            0.00043126195669174194,
            0.00013384447083808482,
            0.0003205038665328175,
            9.902762394631281e-05
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many different official languages were used in the countries established prior to 1930?",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select count(distinct countrylanguage.Language)",
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language, countrylanguage.IsOfficial)",
            "select count(distinct countrylanguage.Language, count(distinct countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.99137282371521,
            0.0003395697276573628,
            0.03605670481920242,
            0.00011870361777255312,
            0.00045509939081966877,
            0.00014988753537181765,
            0.0001494713797001168,
            7.40133982617408e-05
        ],
        "align_select": "select count(distinct countrylanguage.Language)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the total count of official language in the country's founded earlier than 1930.",
        "gold_select": "select count(distinct countrylanguage.Language)",
        "select_candidates": [
            "select sum(countrylanguage.IsOfficial)",
            "select count(*)",
            "select count(distinct countrylanguage.IsOfficial)",
            "select count(countrylanguage.IsOfficial)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.7168843150138855,
            0.0004862201458308846,
            0.988466739654541,
            0.003630327060818672,
            0.009048485197126865,
            0.0001344224438071251,
            0.07299578934907913,
            0.00028413868858478963
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the cities whose population is in the range of 160000 to 900000.",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.ID, city.Name",
            "select city.Name, city.District",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9773784875869751,
            0.00034986960235983133,
            0.0003068992809858173,
            0.00010633990314090624,
            0.00021933935931883752,
            9.122193296207115e-05,
            0.00022091850405558944,
            7.598203228553757e-05
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the cities, where their numbers range from 160000 to 900000?",
        "gold_select": "select city.Name",
        "select_candidates": [
            "select city.Name",
            "select city.Name, city.Population",
            "select city.ID, city.Name",
            "select city.Name, city.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9752722382545471,
            0.0002333718293812126,
            0.00017321945051662624,
            9.883386519504711e-05,
            0.00020301541371736676,
            0.00010913308506133035,
            0.0002093650255119428,
            0.00011349836859153584
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of cities in each district whose population is more than the average city\u2019s population?",
        "gold_select": "select count(*), city.District",
        "select_candidates": [
            "select count(*), city.District",
            "select city.District, count(*)",
            "select count(*), city.District,",
            "select counts(*), city.District"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9908546209335327,
            0.642848551273346,
            0.9920493960380554,
            0.8027104735374451,
            0.0025497623719274998,
            0.0005176542326807976,
            0.0008743310463614762,
            0.0004005698428954929
        ],
        "align_select": "select count(*), city.District",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Find the number of cities in each district whose population exceeds the average population of cities.",
        "gold_select": "select count(*), city.District",
        "select_candidates": [
            "select count(*), city.District",
            "select city.District, count(*)",
            "select count(*), city.District, city.Population",
            "select count(*), city.District,"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.021386316046118736,
            0.9923682808876038,
            0.04669104889035225,
            0.9933799505233765,
            0.00026538840029388666,
            0.005427926778793335,
            0.00026893039466813207,
            0.003084708470851183
        ],
        "align_select": "select city.District, count(*)",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "Return the names and area of the 5 biggest countries.",
        "gold_select": "select country.Name, country.SurfaceArea",
        "select_candidates": [
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.SurfaceArea, country.Region",
            "select country.Name, country.SurfaceArea)",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9953019618988037,
            6.767673039576039e-05,
            0.0001344193733530119,
            5.7245870266342536e-05,
            0.00226931762881577,
            6.46517364657484e-05,
            0.07358428835868835,
            7.79973779572174e-05
        ],
        "align_select": "select country.Name, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the languages used exclusively in one country with a republic government?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select distinct countrylanguage.Language",
            "select exclusive countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9728674292564392,
            0.6879029273986816,
            0.26848843693733215,
            0.011414442211389542,
            0.005240952130407095,
            0.000533612968865782,
            0.00037927209632471204,
            0.00019182947289664298
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the language that is used by only one country with a republic government?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.LocalName",
            "select countrylanguage.Language, country.Capital",
            "select countrylanguage.Language, country.GovernmentForm"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.1565026491880417,
            0.9246537089347839,
            0.00019459704344626516,
            0.0006019718130119145,
            0.00013263153959996998,
            0.0004304938775021583,
            0.00011104192526545376,
            0.0004918798804283142
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the country codes of the different countries? Find the language that the largest percent uses in each.",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.Percentage",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.971572995185852,
            7.113612082321197e-05,
            0.0012140150647610426,
            6.532599945785478e-05,
            0.00028462184127420187,
            6.316038343356922e-05,
            0.9200790524482727,
            7.708168413955718e-05
        ],
        "align_select": "select countrylanguage.CountryCode, countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the country codes of the different countries and which are the languages spoken by the majority of people for each?",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select country.Code, countrylanguage.Language",
            "select country.Name, countrylanguage.Language",
            "select countrylanguage.Language, country.Code"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "countrylanguage",
            "sqlite_sequence countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.7836068868637085,
            8.722274651518092e-05,
            0.7482548952102661,
            9.451352525502443e-05,
            0.00028937074239365757,
            0.00011188115604454651,
            0.9273714423179626,
            9.220097126672044e-05
        ],
        "align_select": "select countrylanguage.CountryCode, countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me all the country codes and show me which languages have the largest proportion in each.",
        "gold_select": "select countrylanguage.Language, countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.Percentage",
            "select countrylanguage.Language, countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language, max(countrylanguage.Percentage)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage"
        ],
        "align_scores": [
            0.993306577205658,
            8.22806396172382e-05,
            0.0023957346566021442,
            6.694282637909055e-05,
            0.9896008372306824,
            8.714668365428224e-05,
            0.0002500284172128886,
            6.706480053253472e-05
        ],
        "align_select": "select countrylanguage.CountryCode, countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language which is spoken by the most countries?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.CountryCode"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9927617907524109,
            7.683759758947417e-05,
            0.002300718566402793,
            6.801082781748846e-05,
            0.0007620451506227255,
            6.147764361230657e-05,
            0.0008672460680827498,
            7.416799053316936e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the language in which the greatest number of countries speak?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage",
            "select countrylanguage.Language, countrylanguage.Percentage"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9941202998161316,
            7.028609979897738e-05,
            0.0008565859170630574,
            5.781350773759186e-05,
            0.0002996834518853575,
            6.424059392884374e-05,
            0.0006668726564384997,
            5.544513260247186e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Out of which languages do the most countries speak?",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, country.Name",
            "select countrylanguage.Language, countrylanguage.Percentage"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9942865967750549,
            7.791857206029817e-05,
            0.0008054014178924263,
            6.326224684016779e-05,
            0.0006807301542721689,
            6.037136699887924e-05,
            0.000866614980623126,
            5.666142169502564e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total count of nations that use English and Dutch?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), countrylanguage.CountryCode",
            "select count(*), countrylanguage.CountryCode, countrylanguage.Language",
            "select count(*), countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9907469749450684,
            0.041810158640146255,
            0.0004999578231945634,
            0.011931785382330418,
            0.00012302238610573113,
            0.0001565218553878367,
            0.00011658336006803438,
            9.919094009092078e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the count of countries in Asia.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), country.Code",
            "select count(*), country.Name",
            "select count(*), country.Continent"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9960073828697205,
            0.0001747928181430325,
            0.00027088355273008347,
            0.0018028857884928584,
            0.0002142610464943573,
            0.0009389736806042492,
            0.00021871492208447307,
            0.0010480318451300263
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the codes of the countries in which Spanish is the primary language.",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select distinct countrylanguage.CountryCode",
            "select countrylanguage.CountryCode, countrylanguage.Language",
            "select countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.91578209400177,
            0.6916321516036987,
            0.11734127253293991,
            0.00030554752447642386,
            0.00021745689446106553,
            0.0001254753879038617,
            0.15905719995498657,
            0.15018735826015472
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the codes of the countries where Spanish is the most spoken language.",
        "gold_select": "select countrylanguage.CountryCode, max(countrylanguage.Percentage)",
        "select_candidates": [
            "select countrylanguage.CountryCode",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Continent",
            "select countrylanguage.CountryCode, countrylanguage.Language"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.300955593585968,
            0.9410787224769592,
            0.001073262421414256,
            0.0005513483774848282,
            0.00019653874915093184,
            0.0003305545833427459,
            0.00044689461356028914,
            0.0002396324707660824
        ],
        "align_select": "select countrylanguage.CountryCode",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "List the top 3 countries by population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Population",
            "select country.Name, country.Code",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9954932928085327,
            5.303997022565454e-05,
            0.0005062003037892282,
            5.932706335443072e-05,
            0.008078206330537796,
            5.5880551371956244e-05,
            0.007050108630210161,
            5.776313992100768e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the names of the top 3 countries by population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Population",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9948837161064148,
            5.721328852814622e-05,
            0.00031571128056384623,
            5.5856045946711674e-05,
            0.0006914347759447992,
            5.4827280109748244e-05,
            0.0016998258652165532,
            5.542224243981764e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the names of countries with the three highest populations.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.Code",
            "select country.Name, country.LocalName"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9901084899902344,
            5.4035710491007194e-05,
            0.00037208787398412824,
            5.0967973947990686e-05,
            0.0014382271328940988,
            5.364079697756097e-05,
            0.005155268125236034,
            5.343973680282943e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the city with the most population that uses English.",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.Name, countrylanguage.Language",
            "select city.ID, city.Name",
            "select city.Name, countrylanguage.IsOfficial"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.981810450553894,
            0.9886158108711243,
            0.0007352108368650079,
            0.0017900365637615323,
            0.00046538759488612413,
            0.0007101730443537235,
            0.0003832492511719465,
            0.0011351662687957287
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Find the city with the most people who speak English.",
        "gold_select": "select city.Name, city.Population",
        "select_candidates": [
            "select city.Name",
            "select city.Name, countrylanguage.IsOfficial",
            "select city.Name, countrylanguage.Language",
            "select city.Name, countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "city countrylanguage",
        "table_candidates": [
            "city countrylanguage",
            "city country countrylanguage"
        ],
        "align_scores": [
            0.9901295304298401,
            0.00010253659274894744,
            0.0021082868333905935,
            0.00011886456923093647,
            0.0029994978103786707,
            0.00010472127178218216,
            0.0006885864422656596,
            0.0001027859325404279
        ],
        "align_select": "select city.Name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the name of the country that speaks the most languages.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, countrylanguage.CountryCode",
            "select country.Name, country.Capital",
            "select country.Name, countrylanguage.Language"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage"
        ],
        "align_scores": [
            0.9948888421058655,
            6.894428952364251e-05,
            0.00441313162446022,
            8.618093124823645e-05,
            0.0002231923717772588,
            5.9768062783405185e-05,
            0.0013161341194063425,
            6.744885467924178e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the average lifespan and number of inhabitants in continents, where the average lifespan is lower than 72 years old.",
        "gold_select": "select sum(country.Population), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select avg(country.LifeExpectancy), avg(country.Population)",
            "select avg(country.LifeExpectancy), count(*)",
            "select avg(country.LifeExpectancy), country.Population",
            "select avg(country.LifeExpectancy), sum(country.Population)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7457131743431091,
            0.006055857054889202,
            0.9342721104621887,
            0.061535753309726715,
            0.9770844578742981,
            0.02742677368223667,
            0.03254192695021629,
            0.02129901945590973
        ],
        "align_select": "select avg(country.LifeExpectancy), country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the averages of the populations, years of life, and life expectancies of each continent where the average lifespan is less than 72?",
        "gold_select": "select sum(country.Population), avg(country.LifeExpectancy), country.Continent",
        "select_candidates": [
            "select country.Population, country.IndepYear, country.LifeExpectancy",
            "select avg(country.Population), avg(country.IndepYear), avg(country.LifeExpectancy), country.Continent",
            "select avg(country.Population), avg(country.IndepYear), avg(country.LifeExpectancy)",
            "select avg(country.Population), avg(country.LifeExpectancy), avg(country.LifeExpectancy), country.Continent"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.0004152716137468815,
            7.770072261337191e-05,
            0.0011033223709091544,
            0.00010657359234755859,
            0.0007423065835610032,
            9.861714352155104e-05,
            0.00027858922840096056,
            8.871150203049183e-05
        ],
        "align_select": "select country.Population, country.IndepYear, country.LifeExpectancy",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Which African countries have a population size less than that of any country in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7256928086280823,
            0.0011952990898862481,
            0.00032456422923132777,
            0.00012140693434048444,
            0.00040330347837880254,
            8.608689677203074e-05,
            0.0034509082324802876,
            0.0001789189118426293
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the African countries with less people than any Asian country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Code, country.Name",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.677282989025116,
            0.000553889840375632,
            0.0002781646035145968,
            9.886675979942083e-05,
            0.0021548799704760313,
            0.00012752925977110863,
            0.00038125738501548767,
            7.487478433176875e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me a sum of the population living in the Gelderland district.",
        "gold_select": "select sum(city.Population)",
        "select_candidates": [
            "select sum(city.Population)",
            "select sum(city.Population), city.District",
            "select sum(city.Population), city.District, city.Population",
            "select sum(city.Population) denoted by city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9952109456062317,
            8.142811566358432e-05,
            0.00014341555652208626,
            8.014103514142334e-05,
            0.00015390482440125197,
            6.604490772588179e-05,
            0.0004677782126236707,
            8.544274896848947e-05
        ],
        "align_select": "select sum(city.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of residents in Gelderland?",
        "gold_select": "select sum(city.Population)",
        "select_candidates": [
            "select sum(city.Population)",
            "select city.Population",
            "select count(*)",
            "select sum(city.Population), city.District"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city",
            "city country"
        ],
        "align_scores": [
            0.3105194568634033,
            6.864801980555058e-05,
            0.9942238926887512,
            0.00010068403935292736,
            0.9954127669334412,
            9.392073116032407e-05,
            0.00016522260557394475,
            6.414093513740227e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names and areas of countries with the five biggest areas.",
        "gold_select": "select country.Name, country.SurfaceArea",
        "select_candidates": [
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Region",
            "select country.Name, country.SurfaceArea)",
            "select country.Name, country.SurfaceArea,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9923655390739441,
            8.568965859012678e-05,
            0.001047731377184391,
            6.740243406966329e-05,
            0.002982419217005372,
            7.348838698817417e-05,
            0.003469893941655755,
            8.002937829587609e-05
        ],
        "align_select": "select country.Name, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the names and areas of the top 5 countries by area.",
        "gold_select": "select country.Name, country.SurfaceArea",
        "select_candidates": [
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Region",
            "select country.Name, country.Continent",
            "select country.Name, country.SurfaceArea,"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9950088262557983,
            7.498225022573024e-05,
            0.994300365447998,
            6.500753079308197e-05,
            0.000774262472987175,
            7.935522444313392e-05,
            0.0021647801622748375,
            6.922077591298148e-05
        ],
        "align_select": "select country.Name, country.SurfaceArea",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the names of the countries that speak 3 or more languages and the total number of languages they speak.",
        "gold_select": "select count(countrylanguage.Language), country.Name",
        "select_candidates": [
            "select country.Name, sum(countrylanguage.Language)",
            "select country.Name, count(distinct countrylanguage.Language)",
            "select country.Name, count(*)",
            "select country.Name, count(countrylanguage.Language)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence countrylanguage"
        ],
        "align_scores": [
            0.11734604835510254,
            0.0001881058415165171,
            0.04074142500758171,
            8.031453762669116e-05,
            0.9234105944633484,
            0.00011573533265618607,
            0.015432077459990978,
            0.00011169716890435666
        ],
        "align_select": "select country.Name, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the number of cities in each district with a population that is larger than the average across all cities?",
        "gold_select": "select count(*), city.District",
        "select_candidates": [
            "select count(*), city.District",
            "select city.District, count(*)",
            "select counts(*), city.District",
            "select count(*), city.District,"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9925612807273865,
            0.00020373737788759172,
            0.9933688044548035,
            0.0002020038227783516,
            0.0009207662078551948,
            0.0001716034603305161,
            0.0017655425472185016,
            0.00012269530270714313
        ],
        "align_select": "select count(*), city.District",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "How many cities in each district has a population that is greater than the average population across all cities?",
        "gold_select": "select count(*), city.District",
        "select_candidates": [
            "select count(*), city.District",
            "select city.District, count(*)",
            "select counts(*), city.District",
            "select count(*), city.District,"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "city",
        "table_candidates": [
            "city"
        ],
        "align_scores": [
            0.9870944619178772,
            0.000293411168968305,
            0.9885162115097046,
            0.0002564182796049863,
            0.001370281563140452,
            0.0001794807321857661,
            0.0019437307491898537,
            0.00012129411334171891
        ],
        "align_select": "select count(*), city.District",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY"
    },
    {
        "question": "What is the mean life expectancy in Central Africa?",
        "gold_select": "select avg(country.LifeExpectancy)",
        "select_candidates": [
            "select avg(country.LifeExpectancy)",
            "select avg(country.LifeExpectancy), country.Region",
            "select an avg(country.LifeExpectancy)",
            "select m.avg(country.LifeExpectancy)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "sqlite_sequence country",
            "city country"
        ],
        "align_scores": [
            0.9948429465293884,
            0.00018007315520662814,
            0.0001616912632016465,
            0.0019874563440680504,
            0.00044210575288161635,
            0.00014302604540716857,
            0.0010778248542919755,
            0.00013008477981202304
        ],
        "align_select": "select avg(country.LifeExpectancy)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the 3 countries with the least population.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Code, country.Name",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9914668798446655,
            4.765818812302314e-05,
            0.01274043694138527,
            5.366003460949287e-05,
            0.01833421178162098,
            5.256673466647044e-05,
            0.0007374166743829846,
            5.325861638993956e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What are the three countries with the smallest population?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Code",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9907776117324829,
            5.42056150152348e-05,
            0.00930597260594368,
            5.9900321502937004e-05,
            0.0009135602158494294,
            5.735356535296887e-05,
            0.014849112369120121,
            5.797340054414235e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Retrieve the names of the 3 nations with the lowest inhabitants.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Capital",
            "select country.Name, country.LocalName",
            "select country.Name, country.HeadOfState"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9890047907829285,
            4.757749775308184e-05,
            0.0002115407696692273,
            5.0786908104782924e-05,
            0.00634744530543685,
            4.922105654259212e-05,
            0.00019473902648314834,
            5.1724968216149136e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show the language that is spoken in the maximum number of countries.",
        "gold_select": "select countrylanguage.Language",
        "select_candidates": [
            "select countrylanguage.Language",
            "select countrylanguage.Language, countrylanguage.IsOfficial",
            "select countrylanguage.Language, countrylanguage.CountryCode",
            "select countrylanguage.Language, countrylanguage.Percentage"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "countrylanguage",
        "table_candidates": [
            "countrylanguage",
            "country countrylanguage"
        ],
        "align_scores": [
            0.9936951994895935,
            6.679883517790586e-05,
            0.0008706274093128741,
            5.6958677305374295e-05,
            0.000698005547747016,
            6.846666656201705e-05,
            0.0005331858992576599,
            5.480197796714492e-05
        ],
        "align_select": "select countrylanguage.Language",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which continent has the largest number of languages spoken on it?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, countrylanguage.Language",
            "select country.Continent, country.Name",
            "select country.Continent, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9949383735656738,
            6.610967830056325e-05,
            0.0009474561084061861,
            6.3052233599592e-05,
            0.0005469511379487813,
            6.661817315034568e-05,
            0.0031651428434997797,
            6.397911056410521e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What continent has the most number of languages?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, countrylanguage.Language",
            "select country.Continent, country.Name",
            "select country.Continent, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9937810301780701,
            6.205723184393719e-05,
            0.000678792130202055,
            5.777063415735029e-05,
            0.00043475974234752357,
            6.11668947385624e-05,
            0.001112170284613967,
            5.8291436289437115e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which continent speaks the most languages in the world?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, countrylanguage.Language",
            "select country.Continent, country.Name",
            "select country.Continent, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9954314231872559,
            6.415451935026795e-05,
            0.000996047630906105,
            6.201879295986146e-05,
            0.0010128223802894354,
            6.17115365457721e-05,
            0.0048271287232637405,
            5.949147089268081e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the country with the lowest life expectancy in Asia?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.LifeExpectancy",
            "select country.Name, country.Continent",
            "select country.Name, country.Code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9917631149291992,
            0.0002888285380322486,
            0.0008501888951286674,
            0.0001054951426340267,
            0.000308154703816399,
            0.00013283075531944633,
            0.0010793569963425398,
            0.00014531021588481963
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of Asian country with the lowest average life expectancy?",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Region",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.9932258725166321,
            0.8315556049346924,
            0.0002970765926875174,
            0.0012087068753316998,
            0.0002475879155099392,
            0.00042710447451099753,
            0.00020705780480057,
            0.00025310085038654506
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name and total population for each government form whose average life expectancy is more than 72.",
        "gold_select": "select sum(country.Population), country.GovernmentForm",
        "select_candidates": [
            "select country.Name, sum(country.Population)",
            "select country.GovernmentForm, sum(country.Population)",
            "select country.Capital, sum(country.Population)",
            "select country.IndepYear, sum(country.Population)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.5103442668914795,
            0.0002549395721871406,
            0.7665539979934692,
            0.00019956390315201133,
            0.0016993967583402991,
            0.0001106525378418155,
            0.00023402823717333376,
            7.021709461696446e-05
        ],
        "align_select": "select country.GovernmentForm, sum(country.Population)",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the name and population size for the government forms whose life expectancy is > 72.",
        "gold_select": "select sum(country.Population), country.GovernmentForm",
        "select_candidates": [
            "select country.Name, country.Population",
            "select country.GovernmentForm, country.Population",
            "select country.LocalName, country.Population",
            "select country.LocalName, country.GovernmentForm"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country",
            "city country"
        ],
        "align_scores": [
            0.9730439782142639,
            0.0002627370704431087,
            0.9926243424415588,
            0.0002466978912707418,
            0.11555393040180206,
            0.00022691827325616032,
            0.00029270819504745305,
            8.90197916305624e-05
        ],
        "align_select": "select country.Name, country.Population",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me which countries have a larger area than that of any European country.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.SurfaceArea",
            "select country.Name, country.Continent",
            "select country.Name, country.Region"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7588467597961426,
            0.001329007325693965,
            0.0005829238798469305,
            0.00014597429253626615,
            0.00034100780612789094,
            0.00011443098628660664,
            0.00028464983915910125,
            0.00011769330012612045
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which continent has the greatest variety in languages?",
        "gold_select": "select country.Continent",
        "select_candidates": [
            "select country.Continent",
            "select country.Continent, countrylanguage.Language",
            "select country.Code, country.Continent",
            "select country.Continent, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage"
        ],
        "align_scores": [
            0.9938942790031433,
            5.998961569275707e-05,
            0.0007365053752437234,
            6.203723751241341e-05,
            0.0006022669258527458,
            6.764460704289377e-05,
            0.0006133976276032627,
            6.267068238230422e-05
        ],
        "align_select": "select country.Continent",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the African countries with populations smaller than any country in Asia.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select distinct country.Name",
            "select country.Name, country.Population"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.8480162620544434,
            0.0004877111641690135,
            0.0003196268808096647,
            9.649285493651405e-05,
            0.13437551259994507,
            0.00025178215582855046,
            0.0006266488344408572,
            8.263850031653419e-05
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the African countries whose populations are lower than those in Asia.",
        "gold_select": "select country.Name",
        "select_candidates": [
            "select country.Name",
            "select country.Name, country.Continent",
            "select country.Name, country.Population",
            "select country.Code, country.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country",
        "table_candidates": [
            "country"
        ],
        "align_scores": [
            0.7776778936386108,
            0.0002934094809461385,
            0.0002666186774149537,
            8.284189971163869e-05,
            0.0003320213290862739,
            7.162116526160389e-05,
            0.0013898210600018501,
            0.00011574239761102945
        ],
        "align_select": "select country.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many people live in non-English speaking countries?",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select sum(country.Population)",
            "select count(*)",
            "select country.Population",
            "select count(country.Population)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "sqlite_sequence countrylanguage",
            "country"
        ],
        "align_scores": [
            0.937541663646698,
            0.00022837991127744317,
            0.9928493499755859,
            0.00040422557503916323,
            0.9940404295921326,
            0.0007271961076185107,
            0.9687896370887756,
            0.00020522280829027295
        ],
        "align_select": "select sum(country.Population)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many persons living in non-English speaking countries.",
        "gold_select": "select sum(country.Population)",
        "select_candidates": [
            "select count(*)",
            "select sum(country.Population)",
            "select count(*), countrylanguage.Language",
            "select count(*), countrylanguage.CountryCode"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "country countrylanguage",
        "table_candidates": [
            "country countrylanguage",
            "sqlite_sequence country countrylanguage",
            "city country countrylanguage",
            "sqlite_sequence countrylanguage",
            "countrylanguage"
        ],
        "align_scores": [
            0.9886307716369629,
            0.0004968332941643894,
            0.02640797197818756,
            0.0002895948418881744,
            0.0002428157749818638,
            0.0007194674690254033,
            0.00021837279200553894,
            0.0017085839062929153
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of conductors who founded orchestras later than 2008.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (select conductor.Conductor_ID)",
            "select conductor.Name, orchestra.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.97984778881073,
            7.631527114426717e-05,
            0.0001562433026265353,
            6.0857484641019255e-05,
            0.0005787166301161051,
            6.989303074078634e-05,
            0.0001562433026265353,
            6.0857484641019255e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the record company that has been shared by the most orchestras.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company, orchestra.Conductor_ID",
            "select orchestra.Record_Company, orchestra.Major_Record_Format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9930849075317383,
            9.697196946945041e-05,
            0.0004591949691530317,
            6.338790990412235e-05,
            0.00016277970280498266,
            7.31647087377496e-05,
            0.0002598844585008919,
            6.59186189295724e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the record companies that have been shared by the largest number of orchestras.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company, orchestra.Conductor_ID",
            "select orchestra.Record_Company, orchestra.Major_Record_Format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9923920035362244,
            9.375939407618716e-05,
            0.00034942879574373364,
            5.998435153742321e-05,
            0.0001878910989034921,
            7.276796532096341e-05,
            0.000319732294883579,
            6.430666689993814e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the record company with the most orchestras.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company, orchestra.Conductor_ID",
            "select orchestra.Record_Company, orchestra.Major_Record_Format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.996189534664154,
            7.312942034332082e-05,
            0.0003542014164850116,
            5.2514275012072176e-05,
            0.00011982997239101678,
            5.297299139783718e-05,
            0.00016133028839249164,
            5.422003960120492e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Locate the record company with the most orchestras sharing it.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, performance.Share",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company (orchestra.Record_Company)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.9949334263801575,
            8.871091267792508e-05,
            0.0013422698248177767,
            6.644015957135707e-05,
            0.0004242121649440378,
            5.735520608141087e-05,
            0.0004250761994626373,
            7.083077798597515e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the record company for the orchestras with the highest total number.",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Conductor_ID",
            "select orchestra.Record_Company (orchestrator-id: orchestra.Conductor_ID)",
            "select orchestra.Record_Company, orchestra.Year_of_Founded"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra",
            "orchestra performance"
        ],
        "align_scores": [
            0.986906886100769,
            5.962937939330004e-05,
            0.00011379702482372522,
            5.13785780640319e-05,
            0.0001681543217273429,
            5.3259936976246536e-05,
            0.0003077501314692199,
            5.347459591575898e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the nationality counts of conductors.",
        "gold_select": "select count(distinct conductor.Nationality)",
        "select_candidates": [
            "select count(distinct conductor.Nationality)",
            "select count(*)",
            "select conductor.Nationality",
            "select count(distinct conductor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9955255389213562,
            8.719813195057213e-05,
            0.011319109238684177,
            0.00010990779992425814,
            0.05524522066116333,
            0.0025604008696973324,
            0.0013145781122148037,
            0.00012940913438796997
        ],
        "align_select": "select count(distinct conductor.Nationality)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "What is the total count of orchestras whose record format is \"CD\" or \"DVD\"?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.Major_Record_Format",
            "select t1.c count(*)",
            "select count(*), orchestra.Orchestra_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9942024350166321,
            7.285740139195696e-05,
            0.0002547044132370502,
            6.072780161048286e-05,
            0.00043826381443068385,
            9.3902024673298e-05,
            0.00016271731874439865,
            5.8601595810614526e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the count of orchestras that use CD/DVD format for their recordings.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(distinct orchestra.Orchestra)",
            "select count(distinct orchestra.Orchestra, count(distinct orchestra.Conductor_ID)",
            "select count(distinct orchestra.Orchestra, count(distinct orchestra.Orchestra_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9911758899688721,
            0.002047636779025197,
            0.003608653787523508,
            0.00011444670235505328,
            0.00014174006355460733,
            9.857831173576415e-05,
            0.0001532828318886459,
            9.775110811460763e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the highest and lowest share percentage for all performances that does not contain the \"Live Final\" in their description.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select performance.Share, max(performance.Share), min(performance.Share)",
            "select max(performance.Share), min(performance.Share), performance.Performance_ID",
            "select t2.cmax(performance.Share), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9880480766296387,
            0.00017260581080336124,
            0.00019211902690585703,
            8.128613990265876e-05,
            0.00010409345122752711,
            6.332665361696854e-05,
            0.00025072641437873244,
            7.582423859275877e-05
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the largest and smallest shares for performances that do not have a type of Live final.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select max(t2.c7), min(performance.Share)",
            "select maximum(performance.Share), min(performance.Share)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9946980476379395,
            0.00012960031745024025,
            0.0004898363258689642,
            9.073039109352976e-05,
            0.0004985249252058566,
            9.05887718545273e-05,
            0.00100613827817142,
            7.83420618972741e-05
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the largest and smallest values for performances that do not have the Live Final type.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Date), min(performance.Date)",
            "select max(performance.Date), min(performance.Official_ratings_in_millions)"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9918805956840515,
            9.907693311106414e-05,
            0.9648563861846924,
            0.00012000479910057038,
            0.9683541655540466,
            0.00012566075020004064,
            0.0004397431912366301,
            9.812654025154188e-05
        ],
        "align_select": "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "For performances without the type Live final, show the max and min values.",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(t2.c8), min(t2.c8)",
            "select max(performance.Weekly_rank), min(performance.Weekly_rank)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9947198629379272,
            0.00010931047290796414,
            0.9930168390274048,
            0.0001047969053615816,
            0.6549566388130188,
            0.00011612279922701418,
            0.9951221346855164,
            0.00011019931844202802
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the maximum and minimum values for performances without type \"Live final\".",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(t2.c8), min(t2.c8)",
            "select max(t2.c7), min(t2.c7)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.987695574760437,
            9.896381379803643e-05,
            0.9925190210342407,
            8.838548819767311e-05,
            0.15990868210792542,
            9.077174036065117e-05,
            0.07446766644716263,
            9.573007264407352e-05
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the major record formats of orchestras, listed by the frequency of use?",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, t1.c6",
            "select orchestra.Major_Record_Format, orchestra.Year_of_Founded",
            "select orchestra.Major_Record_Format, t1.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9915948510169983,
            0.0014464916894212365,
            0.00031226553255692124,
            0.00020571218919940293,
            0.0001359949674224481,
            9.950507956091315e-05,
            0.0003054616099689156,
            0.00019802329188678414
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "Sort by frequency the major record formats of orchestras.",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, count(*)",
            "select orchestra.Major_Record_Format, t1.c6",
            "select orchestra.Major_Record_Format, orchestra.Year_of_Founded"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9376497864723206,
            0.002977262483909726,
            0.002032715128734708,
            0.00019879569299519062,
            0.00020444161782506853,
            0.00015674304449930787,
            0.00011745281517505646,
            0.00011293374700471759
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "Show me all the major record formats of orchestras, ordered by their frequency.",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, t1.c6",
            "select orchestra.Major_Record_Format, orchestra.Year_of_Founded",
            "select orchestra.Major_Record_Format, t1.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9439614415168762,
            0.00015366550360340625,
            0.00024225545348599553,
            0.00013707725156564265,
            0.00010448278044350445,
            7.91472484706901e-05,
            0.00023042543034534901,
            0.0001289105712203309
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "List the common record types in an orchestra, from the least frequent to the most frequent.",
        "gold_select": "select orchestra.Major_Record_Format",
        "select_candidates": [
            "select orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, t1.c6",
            "select top-ten-record-formats-gr.1, orchestra.Major_Record_Format",
            "select orchestra.Major_Record_Format, performance.Type"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.18982970714569092,
            0.2665512263774872,
            0.00035075563937425613,
            0.0002764874661806971,
            0.0003174615849275142,
            0.00021330344316083938,
            0.0004895042511634529,
            0.00042877907981164753
        ],
        "align_select": "select orchestra.Major_Record_Format",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY"
    },
    {
        "question": "Describe the names of conductors from youngest to oldest.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name (or conductor.Age)",
            "select conductor.Name descended conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9707878828048706,
            0.00023482351389247924,
            0.000175640030647628,
            0.00011424891272326931,
            0.0006948615191504359,
            0.00017511211626697332,
            0.0014162118313834071,
            0.00018958757573273033
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "What is the record company used by the most orchestras?",
        "gold_select": "select orchestra.Record_Company",
        "select_candidates": [
            "select orchestra.Record_Company",
            "select orchestra.Record_Company, orchestra.Year_of_Founded",
            "select orchestra.Record_Company, orchestra.Conductor_ID",
            "select orchestra.Record_Company (http://www.orchestra.Record_Company)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9955756664276123,
            7.810292299836874e-05,
            0.0005112230428494513,
            5.642492396873422e-05,
            0.00014033072511665523,
            5.7772613217821345e-05,
            0.004837221931666136,
            7.252211071318015e-05
        ],
        "align_select": "select orchestra.Record_Company",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Who are the conductors that don't have US as a nationality?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Conductor_ID, conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9804320335388184,
            0.00310843950137496,
            0.00020602368749678135,
            0.00011026776337530464,
            0.00023314541613217443,
            0.00011453405022621155,
            0.00015039349091239274,
            9.686827252153307e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of conductors who have nationalities other than US?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9650954008102417,
            0.00012874450476374477,
            0.0002131115470547229,
            6.569026299985126e-05,
            0.00021612738783005625,
            6.899394793435931e-05,
            0.00017509926692582667,
            6.51128138997592e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the total count of orchestras that use CD or DVD as their recording format.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), orchestra.Major_Record_Format",
            "select t1.c count(*)",
            "select count(*),"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra",
        "table_candidates": [
            "orchestra"
        ],
        "align_scores": [
            0.9919328093528748,
            0.004969306290149689,
            0.0002560386492405087,
            0.04222876578569412,
            0.0005171132506802678,
            0.00033928558696061373,
            0.0009227382834069431,
            0.03413489833474159
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Find the name of the conductor who has worked the most years.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9825701117515564,
            0.9935547709465027,
            0.0003491578681860119,
            0.0006383442669175565,
            0.0002606888010632247,
            0.00028436825959943235,
            0.00016954794409684837,
            0.00020840184879489243
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the conductor with the most working experience?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9873902797698975,
            0.9926807284355164,
            0.0006293694605119526,
            0.0013252748176455498,
            0.0004399211029522121,
            0.0007157847285270691,
            0.0006064767367206514,
            0.000720987853128463
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the conductor who has worked the longest?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9904991984367371,
            6.543323979713023e-05,
            0.00038805571966804564,
            5.920487456023693e-05,
            0.0006910909432917833,
            5.89564697293099e-05,
            0.00021053609088994563,
            5.5203025112859905e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Identify the conductor who have led orchestras founded since 2009.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9329866766929626,
            0.00013132924505043775,
            0.0002984989550895989,
            9.02912433957681e-05,
            0.000248707685386762,
            7.373146945610642e-05,
            0.0002764497767202556,
            9.3436123279389e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of conductors who have worked in at least two orchestras.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, orchestra.Orchestra"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9326050281524658,
            9.793583012651652e-05,
            0.0005694778519682586,
            6.687168206553906e-05,
            0.00018186512170359492,
            5.324414451024495e-05,
            0.12830840051174164,
            0.00011259104212513193
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the names of conductors who have conducted at two or more orchestras.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select orchestra.Conductor_ID, conductor.Name",
            "select conductor.Name (conductor.Conductor_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9915661811828613,
            0.00010365356865804642,
            0.00048167494242079556,
            6.756246875738725e-05,
            0.0007403574418276548,
            8.170127694029361e-05,
            0.0013480745255947113,
            7.238503167172894e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names of conductors who have conducted at least 2 orchestras.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (or conductor.Age)",
            "select conductor.Name (ORDER BY-LIMIT)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9843199849128723,
            8.343323861481622e-05,
            0.0005079063703306019,
            6.380394916050136e-05,
            0.0003703387046698481,
            6.579401815542951e-05,
            0.0011234339326620102,
            5.700578913092613e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Give me the names of conductors who have led multiple orchestras.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select orchestra.Conductor_ID, conductor.Name",
            "select conductor.Name (c0, orchestra.Conductor_ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9881623387336731,
            8.368088310817257e-05,
            0.0004098182253073901,
            7.608281885040924e-05,
            0.00048426297144033015,
            7.61716000852175e-05,
            0.0005984936142340302,
            6.999941979302093e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the largest and smallest percentage of performances in which the type is not \"live final\"?",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(performance.Official_ratings_in_millions), min(performance.Official_ratings_in_millions)",
            "select max(performance.Type), min(performance.Official_ratings_in_millions)",
            "select max(performance.Weekly_rank), min(performance.Weekly_rank)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9950459003448486,
            0.0009616035968065262,
            0.001208959030918777,
            0.0009830320486798882,
            0.0003298308583907783,
            0.00013649332686327398,
            0.0025652702897787094,
            0.0006017975392751396
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the highest share and lowest share of performances whose types are not live final?",
        "gold_select": "select max(performance.Share), min(performance.Share)",
        "select_candidates": [
            "select max(performance.Share), min(performance.Share)",
            "select max(t2.c8), min(performance.Share)",
            "select maximum(performance.Share), min(performance.Share)",
            "select performance.Share, t2.c7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "performance",
        "table_candidates": [
            "performance"
        ],
        "align_scores": [
            0.9955654740333557,
            0.00010142449900740758,
            0.0003952438710257411,
            9.689820581115782e-05,
            0.0006838490371592343,
            7.261823338922113e-05,
            0.0003750111209228635,
            0.00010805943747982383
        ],
        "align_select": "select max(performance.Share), min(performance.Share)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Return the names of conductors with no nationality USA.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra",
            "conductor orchestra performance"
        ],
        "align_scores": [
            0.9285404682159424,
            9.227583359461278e-05,
            0.00012866535689681768,
            5.987542317598127e-05,
            0.0001414217404089868,
            6.085783024900593e-05,
            0.0001084690957213752,
            5.8454479585634544e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Sort the names of conductors by the number of years they've been working.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9931174516677856,
            0.00019430022803135216,
            0.00018725726113189012,
            9.513173426967114e-05,
            0.0001514662435511127,
            0.00012822197459172457,
            0.00012329062155913562,
            9.446207695873454e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Show the names of conductors and their length of time in order.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name, conductor.Year_of_Work",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Conductor_ID, conductor.Name, conductor.Year_of_Work"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            1.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.0006196327740326524,
            0.0006196327740326524,
            0.0036201458424329758,
            0.0036201458424329758,
            0.0004647184396162629,
            0.0004647184396162629,
            0.00012596690794453025,
            0.00012596690794453025
        ],
        "align_select": "select conductor.Name, conductor.Year_of_Work",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "List the conductors with two or more orchestral groups they are conducting.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select orchestra.Conductor_ID",
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select orchestra.Orchestra, conductor.Name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra",
            "orchestra",
            "show orchestra"
        ],
        "align_scores": [
            0.9576361179351807,
            0.00025428799563087523,
            0.9878047704696655,
            0.00011540319246705621,
            0.0029816676396876574,
            9.778354433365166e-05,
            0.0025586721021682024,
            8.087065361905843e-05
        ],
        "align_select": "select orchestra.Conductor_ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the conductors that have conducted at least two orchestras.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9870909452438354,
            7.631920016137883e-05,
            0.002224464900791645,
            7.086751429596916e-05,
            0.0015462369192391634,
            7.580601959489286e-05,
            0.0001878663751995191,
            4.933157833875157e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the name of the conductor who had the most orchestras under their leadership?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select orchestra.Conductor_ID, conductor.Name",
            "select conductor.Name (ORDER BY-LIMIT)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9932552576065063,
            6.764635327272117e-05,
            0.0007591271423734725,
            6.289405428105965e-05,
            0.0007214064244180918,
            7.255371747305617e-05,
            0.00034614946343936026,
            5.9498619521036744e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the conductor who conducts the largest number of orchestras?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name (ORDER BY-LIMIT)",
            "select conductor.Name (or conductor.Age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9920859932899475,
            7.141519745346159e-05,
            0.0006728499429300427,
            6.469810614362359e-05,
            0.0003385938180144876,
            6.188716361066326e-05,
            0.0005268005770631135,
            6.521621253341436e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find out about the musician who conducts the maximum number of orchestras.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.9818366169929504,
            6.64119070279412e-05,
            0.00027470936765894294,
            6.662732630502433e-05,
            0.0005798711790703237,
            6.41867081867531e-05,
            0.00027470936765894294,
            6.662732630502433e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which conductors have conducted the most orchestras?",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, orchestra.Conductor_ID",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor orchestra",
        "table_candidates": [
            "conductor orchestra"
        ],
        "align_scores": [
            0.994046688079834,
            5.322551078279503e-05,
            0.001944963587448001,
            6.106211367296055e-05,
            0.00022373077808879316,
            5.1738090405706316e-05,
            0.0006855867686681449,
            6.449981447076425e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the years in which orchestras that have given two or more performances are founded.",
        "gold_select": "select orchestra.Year_of_Founded",
        "select_candidates": [
            "select orchestra.Year_of_Founded",
            "select orchestra.Year_of_Founded (orchestrator_orchestra.Year_of_Founded)",
            "select orchestra.Year_of_Founded (orchestrator_id)",
            "select orchestra.Year_of_Founded (ORDER BY-LIMIT)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra performance",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.6270835995674133,
            8.606784831499681e-05,
            0.0004650239716283977,
            7.132523023756221e-05,
            0.005273913964629173,
            7.712418300798163e-05,
            0.002650484209880233,
            6.893975660204887e-05
        ],
        "align_select": "select orchestra.Year_of_Founded",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the years in which orchestras that have performed at least two times are founded.",
        "gold_select": "select orchestra.Year_of_Founded",
        "select_candidates": [
            "select orchestra.Year_of_Founded",
            "select orchestra.Year_of_Founded (orchestrator_id)",
            "select orchestra.Year_of_Founded (orchestrator_orchestra.Year_of_Founded)",
            "select orchestra.Year_of_Founded, orchestra.Major_Record_Format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra performance",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.7922143340110779,
            8.249087113654241e-05,
            0.008084265515208244,
            7.616099173901603e-05,
            0.0005227694055065513,
            6.495336856460199e-05,
            0.00017880636733025312,
            6.172754365252331e-05
        ],
        "align_select": "select orchestra.Year_of_Founded",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the name of the conductor who has been working the longest time.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9847758412361145,
            6.365845183609053e-05,
            0.0003268271975684911,
            5.691741171176545e-05,
            0.0006608028197661042,
            5.914004213991575e-05,
            0.00018643042130861431,
            5.5478034482803196e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the name of the conductor with the longest career.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9934064149856567,
            6.053208198864013e-05,
            0.00039396373904310167,
            5.750664422521368e-05,
            0.0002730695123318583,
            5.669417078024708e-05,
            0.0002211018290836364,
            5.582378071267158e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the longest-serving conductors of all those listed.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Conductor_ID, conductor.Name",
            "select conductor.Name, conductor.Age",
            "select conductor.Conductor_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor",
            "conductor orchestra"
        ],
        "align_scores": [
            0.9909374713897705,
            0.995500385761261,
            0.0007124500116333365,
            0.0009769118623808026,
            0.00030414233333431184,
            0.00045794693869538605,
            0.01001707836985588,
            0.018692972138524055
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the name of the conductor who has been working for the longest time.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9880318641662598,
            6.525527714984491e-05,
            0.00036279825144447386,
            5.997565313009545e-05,
            0.0007711011567153037,
            5.864900958840735e-05,
            0.00021341412502806634,
            5.604016769211739e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the names of conductors who have worked the longest amount of time.",
        "gold_select": "select conductor.Name",
        "select_candidates": [
            "select conductor.Name",
            "select conductor.Name, conductor.Nationality",
            "select conductor.Name, conductor.Age",
            "select conductor.Name, conductor.Nationality, conductor.Year_of_Work"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "conductor",
        "table_candidates": [
            "conductor"
        ],
        "align_scores": [
            0.9699996113777161,
            6.439761637011543e-05,
            0.00027511303778737783,
            6.05530985922087e-05,
            0.0004337406135164201,
            5.890382090001367e-05,
            0.0002056341472780332,
            5.426897405413911e-05
        ],
        "align_select": "select conductor.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total number of spectators per show?",
        "gold_select": "select avg(show.Attendance)",
        "select_candidates": [
            "select sum(show.Attendance)",
            "select sum(show.Attendance), show.Show_ID",
            "select sum(show.Attendance), show.Performance_ID",
            "select sum(show.Attendance) par show.Show_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "show",
        "table_candidates": [
            "show",
            "performance show"
        ],
        "align_scores": [
            0.9948745369911194,
            0.29143840074539185,
            0.0001322390598943457,
            0.9476984739303589,
            0.00018481539154890925,
            0.4354665279388428,
            0.007512323092669249,
            0.36665835976600647
        ],
        "align_select": "select sum(show.Attendance)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the years of founding for orchestras that have had at least two performances.",
        "gold_select": "select orchestra.Year_of_Founded",
        "select_candidates": [
            "select orchestra.Year_of_Founded",
            "select orchestra.Year_of_Founded, performance.Orchestra_ID",
            "select orchestra.Year_of_Founded, orchestra.Orchestra",
            "select orchestra.Year_of_Founded, orchestra.Major_Record_Format"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra performance",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.42703551054000854,
            8.666560461279005e-05,
            0.000710727646946907,
            6.780981493648142e-05,
            0.000576965743675828,
            6.0695318097714335e-05,
            0.00015294019249267876,
            5.826069536851719e-05
        ],
        "align_select": "select orchestra.Year_of_Founded",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me a list of years of founding for orchestras that have performed more than once.",
        "gold_select": "select orchestra.Year_of_Founded",
        "select_candidates": [
            "select orchestra.Year_of_Founded",
            "select orchestra.Year_of_Founded, performance.Orchestra_ID",
            "select orchestra.Year_of_Founded, orchestra.Orchestra",
            "select orchestra.Year_of_Founded, orchestra.Orchestra_ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra performance",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.6831039190292358,
            9.153824066743255e-05,
            0.0011453403858467937,
            7.895292219473049e-05,
            0.0004232246137689799,
            6.210317951627076e-05,
            0.00027063110610470176,
            6.511343235615641e-05
        ],
        "align_select": "select orchestra.Year_of_Founded",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the founding years for orchestras that have had multiple performances.",
        "gold_select": "select orchestra.Year_of_Founded",
        "select_candidates": [
            "select orchestra.Year_of_Founded",
            "select orchestra.Year_of_Founded, performance.Orchestra_ID",
            "select orchestra.Year_of_Founded, orchestra.Major_Record_Format",
            "select orchestra.Year_of_Founded, performance.Type"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "orchestra performance",
        "table_candidates": [
            "orchestra performance",
            "orchestra"
        ],
        "align_scores": [
            0.43193337321281433,
            7.088218990247697e-05,
            0.0005570809007622302,
            6.444023892981932e-05,
            0.00019564021204132587,
            6.037786806700751e-05,
            0.0007067736005410552,
            6.684325489914045e-05
        ],
        "align_select": "select orchestra.Year_of_Founded",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the minimum grade of students that have no friends?",
        "gold_select": "select min(Highschooler.grade)",
        "select_candidates": [
            "select min(Highschooler.grade)",
            "select min(Highschooler.grade), Highschooler.ID",
            "select min(Highschooler.grade), Highschooler.name",
            "select min(Highschooler.grade), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9934720993041992,
            0.011607620865106583,
            0.00017747434321790934,
            0.00031651175231672823,
            0.00020569493062794209,
            0.0007311883964575827,
            0.0002852727775461972,
            0.00013658771058544517
        ],
        "align_select": "select min(Highschooler.grade)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the least of the grades of students who do not have any friends?",
        "gold_select": "select min(Highschooler.grade)",
        "select_candidates": [
            "select min(Highschooler.grade)",
            "select min(Highschooler.grade), Highschooler.ID",
            "select min(Highschooler.grade), Highschooler.name",
            "select min(Highschooler.grade), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.989326000213623,
            0.00016682416026014835,
            0.0001647804892854765,
            6.602241774089634e-05,
            0.00025237121735699475,
            8.139472629409283e-05,
            0.0003437509585637599,
            9.216397302225232e-05
        ],
        "align_select": "select min(Highschooler.grade)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the smallest grade level that has zero friends?",
        "gold_select": "select min(Highschooler.grade)",
        "select_candidates": [
            "select min(Highschooler.grade)",
            "select min(Highschooler.grade), Friend.friend_id",
            "select min(Highschooler.grade), t0.c3",
            "select min(Highschooler.grade), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.3183375895023346,
            0.39450109004974365,
            0.0001868552208179608,
            0.0001887911494122818,
            0.00019126235565636307,
            0.00017182316514663398,
            0.00023532532213721424,
            0.0002357792400289327
        ],
        "align_select": "select min(Highschooler.grade)",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "What is the name of the high schooler who has the most friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9880988001823425,
            7.484330126317218e-05,
            0.0005296518793329597,
            7.224242290249094e-05,
            0.0014516679802909493,
            9.164304356090724e-05,
            0.0006398018449544907,
            5.5497337598353624e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the name of the high schooler who has the most friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9853566288948059,
            6.540666799992323e-05,
            0.0005214088596403599,
            6.441038567572832e-05,
            0.0013705766759812832,
            8.01517307991162e-05,
            0.0007902195211499929,
            5.85850648349151e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the high schooler with the most friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9901003241539001,
            7.574215123895556e-05,
            0.0006409241468645632,
            6.982987542869523e-05,
            0.0012756778160110116,
            8.857126522343606e-05,
            0.0006926381029188633,
            5.331472129910253e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the names of high schoolers who have more than 3 friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9808706641197205,
            9.530006354907528e-05,
            0.0011196281993761659,
            7.973168249009177e-05,
            0.000329050439177081,
            6.712540198350325e-05,
            0.00045407822472043335,
            7.925932732177898e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names and ids of high schoolers with 3 or more friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.ID, Highschooler.name",
            "select distinct Highschooler.name, Highschooler.ID",
            "select Highschooler.name.c0, Highschooler.name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9862857460975647,
            0.00011409997387090698,
            0.9878173470497131,
            0.00011856988567160442,
            0.0013668668689206243,
            6.819950067438185e-05,
            0.0003082240291405469,
            6.82796016917564e-05
        ],
        "align_select": "select Highschooler.name, Highschooler.ID",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the names of high schoolers who has more or equal to 3 friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9737763404846191,
            0.00019693495414685458,
            0.0013974766479805112,
            0.00013192204642109573,
            0.00034346041502431035,
            0.00010772210225695744,
            0.0004472357395570725,
            0.00010467745596542954
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of high schoolers who have more or equal to 3 friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9717261791229248,
            0.000315902812872082,
            0.0015042158775031567,
            0.00014665011258330196,
            0.00036699516931548715,
            0.00011403448297642171,
            0.0004602844128385186,
            0.00010862685303436592
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show all high school students that have no less than 2 friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.name",
            "select Highschooler.ID, Highschooler.name",
            "select Highschooler.name, Highschooler.ID"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.41328129172325134,
            8.196722774300724e-05,
            0.9760398864746094,
            8.24480812298134e-05,
            0.07871400564908981,
            8.834015170577914e-05,
            0.0682210922241211,
            7.820784958312288e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names of students that have grades above 5 and have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9577528834342957,
            0.04963032528758049,
            0.0003344379656482488,
            0.00032483975519426167,
            0.0005516039091162384,
            0.00035167892929166555,
            0.0019615129567682743,
            0.0008219096926040947
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of students who have at least 2 friends and have a grade greater than 5?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select distinct Highschooler.name",
            "select Highschooler.name, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9772610068321228,
            0.9778383374214172,
            0.00029651803197339177,
            0.0005485129659064114,
            0.0019549112766981125,
            0.0003040571173187345,
            0.00030408313614316285,
            0.0004032606375403702
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING-INTERSECT-SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of students who have a grade higher than 5, and have more or equal to 2 friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.2089705914258957,
            0.09350726008415222,
            0.0007636451628059149,
            0.00034677176154218614,
            0.0004125070117879659,
            0.00026954596978612244,
            0.00029641541186720133,
            0.00022809221991337836
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find all students that have a grade above 5, and find out if they also have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.ID",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.0001837277814047411,
            0.0013936642790213227,
            0.0005078657413832843,
            0.22465136647224426,
            0.00024061418662313372,
            0.09114160388708115,
            0.0002641428727656603,
            0.11114967614412308
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of students with grades higher than 5 and have two or more friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.980357825756073,
            0.014148090034723282,
            0.0002698380558285862,
            0.0003334872890263796,
            0.00041043260716833174,
            0.00024225315428338945,
            0.0012675427133217454,
            0.00048213780974037945
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What is the total count of likes for each student id?",
        "gold_select": "select Likes.student_id, count(*)",
        "select_candidates": [
            "select Likes.student_id, count(*)",
            "select Likes.student_id, sum(t2.c3)",
            "select Likes.student_id, sum(t2.c5)",
            "select Likes.student_id, sum(t2.c8)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Likes",
        "table_candidates": [
            "Likes"
        ],
        "align_scores": [
            0.9964240193367004,
            0.00016752920055296272,
            0.0017532720230519772,
            0.0002182383177569136,
            0.0005565042956732213,
            0.00021797005319967866,
            0.0005563799059018493,
            0.00024113760446198285
        ],
        "align_select": "select Likes.student_id, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "List the names of the students who have two or more likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9494373202323914,
            0.00010670649498933926,
            0.000495483516715467,
            6.172883877297863e-05,
            0.0009013724629767239,
            7.467036630259827e-05,
            0.0002651372633408755,
            6.440178549382836e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the student names that have more or equal to two likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9794670343399048,
            0.00034553505247458816,
            0.00038999144453555346,
            7.77779714553617e-05,
            0.0010060453787446022,
            0.00010253267828375101,
            0.00019068713299930096,
            6.603791553061455e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the grade with the largest number of high school students.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, t0.c3",
            "select Highschooler.grade, Highschooler.name",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9880351424217224,
            6.392904469976202e-05,
            0.0005823108367621899,
            7.312607340281829e-05,
            0.0002480032271705568,
            6.153102731332183e-05,
            0.00018976139836013317,
            7.315514812944457e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which grade has the largest amount of high schoolers?",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, Highschooler.name",
            "select Highschooler.grade, t0.c3",
            "select Highschooler.grade, Highschooler.ID"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Likes",
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9859212040901184,
            6.332073826342821e-05,
            0.0003205955435987562,
            6.06494904786814e-05,
            0.0005387260462157428,
            6.48686254862696e-05,
            0.0002556932158768177,
            5.825125481351279e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the count of students for each grade in high school?",
        "gold_select": "select Highschooler.grade, count(*)",
        "select_candidates": [
            "select count(*), Highschooler.grade",
            "select Highschooler.grade, count(*)",
            "select counts(*), Highschooler.grade",
            "select highschooler_Highschooler.grade, count(*)"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9952316880226135,
            0.00020464677072595805,
            0.9956654906272888,
            0.00018056831322610378,
            0.000759232381824404,
            0.0001285764155909419,
            0.0006502061733044684,
            0.00013398786541074514
        ],
        "align_select": "select count(*), Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the count of high school students for each grade?",
        "gold_select": "select Highschooler.grade, count(*)",
        "select_candidates": [
            "select count(*), Highschooler.grade",
            "select Highschooler.grade, count(*)",
            "select highschooler Highschooler.grade, count(*)",
            "select counts(*), Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9963029623031616,
            0.00020549262990243733,
            0.9961899518966675,
            0.00017712033877614886,
            0.0009736198699101806,
            0.0001314305845880881,
            0.0008854360785335302,
            0.0001288806088268757
        ],
        "align_select": "select count(*), Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the name of the high schooler with the most likes?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Likes.liked_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.990496039390564,
            0.9869810938835144,
            0.0011054481146857142,
            0.0007664629956707358,
            0.00034635362681001425,
            0.00038492880412377417,
            0.0009536634315736592,
            0.0005017232033424079
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Give me the id of a high schooler who has the highest number of likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.ID",
            "select Highschooler.ID, Highschooler.name, Highschooler.grade",
            "select Highschooler.ID, Highschooler.name",
            "select Highschooler.ID, Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.47813358902931213,
            6.677985948044807e-05,
            0.00035758575540967286,
            7.199656101875007e-05,
            0.002171124331653118,
            7.54467400838621e-05,
            0.00035758575540967286,
            7.199656101875007e-05
        ],
        "align_select": "select Highschooler.ID",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find out the name of the student with the largest number of likes in high school.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade, t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-WHERE-ORDER BY-LIMIT",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.977390706539154,
            0.987101674079895,
            0.00043631670996546745,
            0.0007729639182798564,
            0.00036997368442825973,
            0.0004270845092833042,
            0.0001842305646277964,
            0.00020327340462245047
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-ORDER BY-LIMIT"
    },
    {
        "question": "Show me all grades that have more or equal to 4 students.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, count(*)",
            "select Highschooler.grade, max(Highschooler.ID)",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Likes",
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9785251021385193,
            0.0002080016565741971,
            0.003532238770276308,
            0.00011630131484707817,
            0.00015607342356815934,
            6.089533417252824e-05,
            0.00019176908244844526,
            8.053894271142781e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me all the grades that have four or more students.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, count(*)",
            "select Highschooler.grade, count(*), t0.c3",
            "select Highschooler.grade, max(Highschooler.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler",
            "Highschooler Friend",
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9781432151794434,
            0.00010699105769162998,
            0.0032742787152528763,
            8.162915764842182e-05,
            0.0001898366754176095,
            5.91810567129869e-05,
            0.00016303756274282932,
            5.69198455195874e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List all the grades that have 4+ students.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select distinct Highschooler.grade",
            "select distinct Highschooler.grade, t0.c3",
            "select Highschooler.grade, count(*)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.977007269859314,
            0.00011022612306987867,
            0.007711583282798529,
            9.274354670196772e-05,
            0.0002175722038373351,
            6.05324275966268e-05,
            0.0027127889916300774,
            8.639840962132439e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Return the name of the high school student with the largest number of friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9901052117347717,
            5.976418833597563e-05,
            0.0006168389809317887,
            6.0436279454734176e-05,
            0.0010709235211834311,
            6.792028580093756e-05,
            0.0005577396950684488,
            5.156834231456742e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the mean grade of all students who have some friends.",
        "gold_select": "select avg(Highschooler.grade)",
        "select_candidates": [
            "select avg(Highschooler.grade)",
            "select an avg(Highschooler.grade)",
            "select the avg(Highschooler.grade)",
            "select avg(t0-Highschooler.grade)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9837889671325684,
            0.027717873454093933,
            0.0007113073370419443,
            0.00036402358091436327,
            0.000540227338206023,
            0.00034295881050638855,
            0.0009884131141006947,
            0.0007426533265970647
        ],
        "align_select": "select avg(Highschooler.grade)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of students that have more or equal to 2 likes?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Likes.student_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9605738520622253,
            0.0003318538947496563,
            0.0007874006987549365,
            0.00010259615373797715,
            0.0002322032378287986,
            8.622919995104894e-05,
            0.0009155866573564708,
            0.00011525516310939565
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names of students who have at least two likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9251812100410461,
            8.734243601793423e-05,
            0.0004450669512152672,
            5.529158443096094e-05,
            0.0009119905298575759,
            6.276134081417695e-05,
            0.0002955524832941592,
            5.978504486847669e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the total count of Kyle's friends?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.name",
            "select count(Friend.friend_id)",
            "select count(distinct Friend.friend_id)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9953923225402832,
            7.753211684757844e-05,
            0.00020439637592062354,
            7.174775964813307e-05,
            0.0006223904201760888,
            6.440270954044536e-05,
            0.0008950210176408291,
            6.456393748521805e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the grade with the most high schoolers.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, t0.c3",
            "select Highschooler.grade, Highschooler.name",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9942589998245239,
            8.302101923618466e-05,
            0.0005855701165273786,
            5.9874964790651575e-05,
            0.0002245469222543761,
            5.644773773383349e-05,
            0.00018475197430234402,
            6.117121665738523e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the grade with the largest number of high schoolers.",
        "gold_select": "select Highschooler.grade",
        "select_candidates": [
            "select Highschooler.grade",
            "select Highschooler.grade, t0.c3",
            "select Highschooler.grade, Highschooler.name",
            "select Highschooler.grade, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9941938519477844,
            6.256851338548586e-05,
            0.0004954785690642893,
            5.4247549996944144e-05,
            0.0001999484229600057,
            5.3609903261531144e-05,
            0.0005763908266089857,
            5.7681347243487835e-05
        ],
        "align_select": "select Highschooler.grade",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the names of high schoolers who have a grade of over 5 and have at least 2 friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.062057975679636,
            0.11274291574954987,
            0.00044916532351635396,
            0.00032166126766242087,
            0.00024667297839187086,
            0.00023905260604806244,
            0.00041057151975110173,
            0.00024622250930406153
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of high schoolers who have grades higher than five and who have two or more friends?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Friend.friend_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.19144102931022644,
            0.960740327835083,
            0.0005177765851840377,
            0.0004994852934032679,
            0.00026804523076862097,
            0.0010418696328997612,
            0.0004304060712456703,
            0.0006774711655452847
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "List the names of high school students who have a grade of 6 or higher and have two or more friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Highschooler.grade",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, t0.c6"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.3474135994911194,
            0.18494826555252075,
            0.0005850010784342885,
            0.00035452371230348945,
            0.00032328112865798175,
            0.00028005256899632514,
            0.0004657803801819682,
            0.00021720245422329754
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the total count of students in grade 9 or 10.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.grade",
            "select count(*), Highschooler.ID",
            "select count(*), t0.c9, Highschooler.name0"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9950071573257446,
            0.00028353038942441344,
            0.000273995305178687,
            0.7748982310295105,
            0.0002909777977038175,
            0.0022373346146196127,
            0.00013991609739605337,
            0.00010393137927167118
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of high schoolers who have at least 3 friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend"
        ],
        "align_scores": [
            0.9636419415473938,
            8.067407907219604e-05,
            0.002132102381438017,
            7.6970478403382e-05,
            0.0003880263539031148,
            6.485205085482448e-05,
            0.0005251606344245374,
            7.670312334084883e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names of high schoolers that have 3+ friends.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Friend.student_id",
            "select Highschooler.name, Friend.friend_id",
            "select Highschooler.name, t1.c2"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9817109107971191,
            7.677797839278355e-05,
            0.0015438365517184138,
            6.840551941422746e-05,
            0.00022056637681089342,
            5.933996362728067e-05,
            0.0003421313303988427,
            7.249881309689954e-05
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Who is the most liked student?",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Likes.student_id",
            "select Likes.student_id, Highschooler.name",
            "select Highschooler.ID, Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9933235049247742,
            0.9722719788551331,
            0.001600197865627706,
            0.0016445277724415064,
            0.0021292930468916893,
            0.002235506661236286,
            0.002521128160879016,
            0.0007941157091408968
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List the names of students who have a greater number of likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name, Highschooler.grade"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.8157851696014404,
            0.18296386301517487,
            0.0009002991719171405,
            0.000572250341065228,
            0.00046129844849929214,
            0.0003792603383772075,
            0.000798089022282511,
            0.0004427130043040961
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Tell me the name of the student with the largest number of likes.",
        "gold_select": "select Highschooler.name",
        "select_candidates": [
            "select Highschooler.name",
            "select Highschooler.name, Likes.student_id",
            "select Highschooler.name, Highschooler.ID",
            "select Highschooler.name (Highschooler.ID)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Likes",
        "table_candidates": [
            "Highschooler Likes"
        ],
        "align_scores": [
            0.9805120229721069,
            0.9371019005775452,
            0.0007741108420304954,
            0.0007097431807778776,
            0.00042260633199475706,
            0.00043209607247263193,
            0.005954928696155548,
            0.008771596476435661
        ],
        "align_select": "select Highschooler.name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the count of high schoolers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Highschooler.ID",
            "select Highschooler.ID, count(*)",
            "select count(*), Highschooler.name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler",
        "table_candidates": [
            "Highschooler"
        ],
        "align_scores": [
            0.9928452372550964,
            8.759366028243676e-05,
            0.00021309571457095444,
            8.584358147345483e-05,
            0.00042943187872879207,
            8.046786388149485e-05,
            0.00018644839292392135,
            8.70880248839967e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Find the lowest grade of students who have no friends.",
        "gold_select": "select min(Highschooler.grade)",
        "select_candidates": [
            "select min(Highschooler.grade)",
            "select min(Highschooler.grade), Highschooler.ID",
            "select min(Highschooler.grade), Highschooler.name",
            "select min(Highschooler.grade), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.9889733195304871,
            0.3527243137359619,
            0.00016273515939246863,
            0.0005176296108402312,
            0.00021358043886721134,
            0.000783753115683794,
            0.0003935410641133785,
            0.00016566840349696577
        ],
        "align_select": "select min(Highschooler.grade)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the smallest grade of students that have no friends?",
        "gold_select": "select min(Highschooler.grade)",
        "select_candidates": [
            "select min(Highschooler.grade)",
            "select min(Highschooler.grade), Highschooler.ID",
            "select min(Highschooler.grade), Highschooler.name",
            "select min(Highschooler.grade), t0.c3"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Highschooler Friend",
        "table_candidates": [
            "Highschooler Friend",
            "Highschooler Friend Likes"
        ],
        "align_scores": [
            0.011045283637940884,
            0.043735429644584656,
            0.00029507523868232965,
            0.0003955868596676737,
            0.000690356595441699,
            0.00048096911632455885,
            0.0001575313217472285,
            0.00015000393614172935
        ],
        "align_select": "select min(Highschooler.grade)",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM"
    },
    {
        "question": "Who owns the largest number of dogs? List the owner ID, first name and last name.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.first_name, Owners.last_name",
            "select Dogs.owner_id, Owners.first_name, Owners.last_name",
            "select Sizes.size_code, Owners.first_name, Owners.last_name",
            "select Owners.owner_id-, Owners.first_name, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Charges Owners Dogs",
            "Breeds Owners Dogs"
        ],
        "align_scores": [
            0.9929381012916565,
            8.702086779521778e-05,
            0.17787933349609375,
            8.342273940797895e-05,
            0.0003272247267886996,
            7.898025069152936e-05,
            0.0030451801139861345,
            7.37867594580166e-05
        ],
        "align_select": "select Owners.owner_id, Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Return the owner id, first name and last name of the owner who owns the largest number of dogs.",
        "gold_select": "select Dogs.owner_id, Owners.first_name, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.first_name, Owners.last_name",
            "select Dogs.owner_id, Owners.first_name, Owners.last_name",
            "select Sizes.size_code, Owners.first_name, Owners.last_name",
            "select Sizes.size_description, Owners.first_name, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs",
        "table_candidates": [
            "Owners Dogs",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.9915695786476135,
            7.942267984617501e-05,
            0.6063323616981506,
            7.824157364666462e-05,
            0.0003105181094724685,
            7.004896178841591e-05,
            0.00015572037955280393,
            6.397037941496819e-05
        ],
        "align_select": "select Owners.owner_id, Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Find the name, email, and phone of the professional operators of more or equal to two treatment types.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.first_name, Professionals.email_address, Professionals.home_phone",
            "select Professionals.first_name, Professionals.last_name, Professionals.home_phone",
            "select Professionals.role_code, Professionals.email_address, Professionals.home_phone",
            "select Professionals.first_name, Professionals.email_address, Professionals.home_phone"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Charges Professionals Treatments",
            "Sizes Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.0043830047361552715,
            0.00020750642579514533,
            0.0003437106788624078,
            9.561466140439734e-05,
            0.00033059052657335997,
            9.269102156395093e-05,
            0.0043830047361552715,
            0.00020750642579514533
        ],
        "align_select": "select Professionals.first_name, Professionals.email_address, Professionals.home_phone",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the id and phone of professionals who operate more or equal to two treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.home_phone",
            "select Professionals.first_name, Professionals.home_phone",
            "select Professionals.role_code, Professionals.home_phone",
            "select Treatments.professional_id, Professionals.home_phone"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.9414001703262329,
            0.00028163345996290445,
            0.0006821280112490058,
            8.176783740054816e-05,
            0.0991564467549324,
            0.00016660081746522337,
            0.5122601985931396,
            0.00028890129760839045
        ],
        "align_select": "select Professionals.professional_id, Professionals.home_phone",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the name and mobile of the professionals who run no less than two types of treatment?",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.first_name, Professionals.cell_number",
            "select Professionals.role_code, Professionals.cell_number",
            "select t6).c2, Professionals.cell_number",
            "select Charges.charge_amount, Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.22384925186634064,
            0.0011052570771425962,
            0.0007076099864207208,
            9.161884372588247e-05,
            0.00037265545688569546,
            6.681412196485326e-05,
            0.0005182545864954591,
            8.147424523485824e-05
        ],
        "align_select": "select Professionals.first_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the name and cell phone of all of the people who operate at least two treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Owners.first_name, Owners.last_name, Owners.cell_number",
            "select Owners.first_name, Owners.last_name, Owners.home_phone, Owners.cell_number",
            "select Owners.first_name, Owners.last_name, Owners.cell_number, Treatments.professional_id",
            "select Owners.first_name, Owners.last_name, Owners.cell_number, Owners.home_phone"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Owners Treatments",
            "Owners Professionals Treatments",
            "Sizes Owners Treatments",
            "Owners Dogs Professionals Treatments",
            "Treatment_Types Owners Treatments",
            "Sizes Owners Professionals Treatments",
            "Owners Dogs Treatments"
        ],
        "align_scores": [
            0.6030486226081848,
            0.00011047013686038554,
            0.0007971541490405798,
            7.367601938312873e-05,
            0.0005432503530755639,
            7.06856299075298e-05,
            0.00041561416583135724,
            7.105306576704606e-05
        ],
        "align_select": "select Owners.first_name, Owners.last_name, Owners.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Count the number of dogs who have a lower age than the average.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.age",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9840954542160034,
            0.001350801787339151,
            0.00019640517712105066,
            0.0003046829951927066,
            0.00021139279124327004,
            0.005103390663862228,
            0.00017467568977735937,
            0.01902630738914013
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the number of dogs that have an age less than the average.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.age",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9835667610168457,
            0.005039576906710863,
            0.00021136236318852752,
            0.00029034572071395814,
            0.00021205231314525008,
            0.0022620069794356823,
            0.00021736009512096643,
            0.3693840801715851
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show how many dogs are younger than the average.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.age",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9912480115890503,
            0.0023759526666253805,
            0.0003080143069382757,
            0.004816065542399883,
            0.00022381890448741615,
            0.00017866575217340142,
            0.00018862704746425152,
            0.00021093914983794093
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs have a smaller age than the average?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.age",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9902805089950562,
            8.569978672312573e-05,
            0.00025242174160666764,
            6.580261833732948e-05,
            0.00022679065295960754,
            7.349000225076452e-05,
            0.0002229328965768218,
            6.309939635684714e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs have a lower than the average age?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.age",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9849167466163635,
            0.0006812259671278298,
            0.00023739274183753878,
            0.00014617739361710846,
            0.00023121990670915693,
            0.0001381704059895128,
            0.00022496652672998607,
            0.0012160416226834059
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs have a age smaller than the average?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.age",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9878662824630737,
            7.85431984695606e-05,
            0.0002984343736898154,
            6.135055446065962e-05,
            0.0002231128019047901,
            6.274465704336762e-05,
            0.0003105658106505871,
            6.739118543919176e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs are under the average age?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.age",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9934004545211792,
            8.104728476610035e-05,
            0.00023000268265604973,
            8.262706978712231e-05,
            0.00021395691146608442,
            6.598748586839065e-05,
            0.0001946818665601313,
            6.590227712877095e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How much is the last treatment?",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select max(Treatments.cost_of_treatment)",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code",
            "select Treatments.cost_of_treatment, Treatments.date_of_treatment"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Charges Treatments",
            "Dogs Professionals Treatments",
            "Professionals Treatments"
        ],
        "align_scores": [
            0.9944302439689636,
            5.6882632634369656e-05,
            0.00012320175301283598,
            5.721208799513988e-05,
            0.0002120969584211707,
            5.131688158144243e-05,
            0.00014840623771306127,
            5.264348874334246e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the costs of the last treatment.",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select Treatments.cost_of_treatment, Treatments.date_of_treatment",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code",
            "select Treatments.cost_of_treatment, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Breeds Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9643747806549072,
            5.8303608966525644e-05,
            0.00018848557374440134,
            5.537257675314322e-05,
            0.000257520325249061,
            5.386233169701882e-05,
            0.0004659225232899189,
            5.243741179583594e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How much does the latest treatment cost?",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select max(Treatments.cost_of_treatment)",
            "select min(Treatments.cost_of_treatment)",
            "select max(Treatments.cost_of_treatment), Treatments.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.002839872846379876,
            5.872136898688041e-05,
            7.020124030532315e-05,
            6.160787597764283e-05,
            7.30119354557246e-05,
            6.157140160212293e-05,
            5.524273365153931e-05,
            5.5338536185445264e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the cost of the latest treatment.",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select max(Treatments.cost_of_treatment)",
            "select Treatments.cost_of_treatment, Treatments.date_of_treatment",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Breeds Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.0014349239645525813,
            6.677488272543997e-05,
            7.381392060779035e-05,
            6.208127160789445e-05,
            0.0002726901730056852,
            5.9316313127055764e-05,
            0.00018112010729964823,
            5.712703932658769e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total cost of the last performed treatment?",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select sum(Treatments.cost_of_treatment)",
            "select sum(Treatments.cost_of_treatment), Treatments.date_of_treatment",
            "select sum(Treatments.cost_of_treatment), Treatments.treatment_type_code",
            "select sum(Treatments.cost_of_treatment), Treatments.dog_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Breeds Treatments",
            "Professionals Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.004788706079125404,
            0.0012024088064208627,
            0.00022076754248701036,
            0.00033251073909923434,
            0.00013001769548282027,
            0.0004583666450344026,
            0.0006647658883593976,
            0.001858266768977046
        ],
        "align_select": "select sum(Treatments.cost_of_treatment)",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the cost of the last treatment?",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select Treatments.cost_of_treatment, Treatments.date_of_treatment",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code",
            "select Treatments.cost_of_treatment, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Dogs Treatments",
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Breeds Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9944977164268494,
            5.9963815147057176e-05,
            0.0002019531821133569,
            5.5767482990631834e-05,
            0.00022663327399641275,
            5.3267151088221e-05,
            0.00040262797847390175,
            5.467372466227971e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the IDs, last names and cell phones of the professionals who live in Indiana and have performed at least three treatments.",
        "gold_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Treatments.professional_id, Professionals.last_name, Professionals.cell_number",
            "select Professionals.first_name, Professionals.last_name, Professionals.cell_number",
            "select t8.c2, Professionals.last_name, Professionals.cell_number"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-WHERE-GROUP BY-HAVING",
            "SELECT-FROM-WHERE-GROUP BY-HAVING-INTERSECT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.6402202248573303,
            0.00024398890673182905,
            0.28098833560943604,
            0.00019045817316509783,
            0.0006706859567202628,
            9.83965874183923e-05,
            0.000649147666990757,
            7.993623876245692e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.last_name, Professionals.cell_number",
        "align_structure": "SELECT-FROM-WHERE-GROUP BY-HAVING"
    },
    {
        "question": "What is the largest age of the dog?",
        "gold_select": "select max(Dogs.age)",
        "select_candidates": [
            "select max(Dogs.age)",
            "select max(Dogs.age), Dogs.date_of_birth",
            "select max(Dogs.age), Dogs.breed_code",
            "select max(Dogs.age), Dogs.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9953168630599976,
            0.00011364305828465149,
            0.00016611002502031624,
            6.690900045214221e-05,
            0.00035839664633385837,
            6.230724102351815e-05,
            0.00011659825395327061,
            6.0985639720456675e-05
        ],
        "align_select": "select max(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which professionals have had two or more treatment types? List their ID and cellphone number.",
        "gold_select": "select Professionals.professional_id, Professionals.cell_number",
        "select_candidates": [
            "select Treatments.professional_id, Professionals.cell_number",
            "select Professionals.professional_id, Professionals.cell_number",
            "select Professionals.first_name, Professionals.cell_number",
            "select Treatments.dog_id, Professionals.cell_number"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.10520973056554794,
            0.0001745771151036024,
            0.9855247139930725,
            0.0004904126399196684,
            0.00030161914764903486,
            7.694640953559428e-05,
            0.00046461349120363593,
            0.0001367911754641682
        ],
        "align_select": "select Professionals.professional_id, Professionals.cell_number",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the mean age of all the dogs.",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age).",
            "select the avg(Dogs.age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9953468441963196,
            6.569534161826596e-05,
            0.0005161953158676624,
            8.364003588212654e-05,
            0.0012518127914518118,
            8.049803000176325e-05,
            0.00044040934881195426,
            0.00010911904973909259
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Give a list of dog names, which cost $1000 or less in veterinary bills.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.cost_of_treatment",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Treatments.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Charges Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Charges Sizes Dogs Treatments",
            "Dogs Treatments"
        ],
        "align_scores": [
            0.046259816735982895,
            0.00019521125068422407,
            0.0004749921790789813,
            7.725889736320823e-05,
            0.000262306333752349,
            8.308572432724759e-05,
            0.00031347808544524014,
            8.40801076265052e-05
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the names of the dogs who have not cost their owners over $1000 for treatment?",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Treatments.professional_id",
            "select Dogs.name, Dogs.owner_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Owners Dogs Treatments",
            "Breeds Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.7945073246955872,
            0.017364220693707466,
            0.0006965904613025486,
            0.0005262893973849714,
            0.00040441981400363147,
            0.0003247341373935342,
            0.0002938714169431478,
            0.0002805595868267119
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE"
    },
    {
        "question": "Describe the treatment type, whose overall costs is the lowest.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Sizes Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9922224879264832,
            8.102664287434891e-05,
            0.0003454355464782566,
            6.215816392796114e-05,
            0.00038148750900290906,
            6.347466114675626e-05,
            0.0001080145375453867,
            5.621877789963037e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the desciption of the treatment type that has the lowest cost.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_description, t7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9922897219657898,
            0.9948925971984863,
            0.00043915584683418274,
            0.0004191504849586636,
            0.00013460383343044668,
            9.955785208148882e-05,
            0.0007768450304865837,
            0.00045984238386154175
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the desciption of the treatment for which the lowest total price was assigned?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Charges Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Owners Treatments"
        ],
        "align_scores": [
            0.9928683638572693,
            6.708558794343844e-05,
            0.00013555206533055753,
            5.447819785331376e-05,
            0.0007924040546640754,
            6.285658309934661e-05,
            0.0002452604821883142,
            6.291217141551897e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show the mean age of all the dogs.",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age).",
            "select avg(Dogs.age)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9948528409004211,
            7.076426118146628e-05,
            0.0004936190671287477,
            8.98062571650371e-05,
            0.0012223742669448256,
            8.95948032848537e-05,
            0.9948528409004211,
            7.076426118146628e-05
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Count the number of dogs under the average age.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.age",
            "select count(*), avg(Dogs.age)",
            "select count(*), Dogs.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.9930915832519531,
            8.492888446198776e-05,
            0.00020695911371149123,
            8.49735879455693e-05,
            0.000375543866539374,
            5.89452865824569e-05,
            0.00017162079166155308,
            6.772651977371424e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "How many dogs are there that are younger than what would be considered the average dog?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.age",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9658421874046326,
            0.00013777332787867635,
            0.0002698308671824634,
            7.754335820209235e-05,
            0.00022622333199251443,
            0.0001233254006365314,
            0.00024820712860673666,
            0.0001293363602599129
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of dogs of an age smaller than the average?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.age",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9895360469818115,
            0.001900599803775549,
            0.00021380375255830586,
            0.010603008791804314,
            0.0001995224301936105,
            0.00036992537206970155,
            0.0002247328229714185,
            0.03236784413456917
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the number of dogs that are younger than the average age?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.age",
            "select count(*), Dogs.breed_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs",
        "table_candidates": [
            "Dogs"
        ],
        "align_scores": [
            0.9903676509857178,
            0.0017574322409927845,
            0.0001950352598214522,
            0.00027477514231577516,
            0.00021817318338435143,
            0.018292482942342758,
            0.00018607544188853353,
            0.12593741714954376
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Which owner has spent the most in total on their dog? Explain which is the owner\u2019s id and zip code.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Treatments.dog_id, Owners.zip_code",
            "select t8.c1, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Owners Dogs Treatments",
            "Sizes Owners Dogs Treatments",
            "Owners Dogs",
            "Charges Owners Dogs Treatments",
            "Treatment_Types Owners Dogs Treatments",
            "Sizes Owners Dogs",
            "Treatment_Types Owners Dogs",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.9882609248161316,
            0.00013464388030115515,
            0.0010064337402582169,
            9.455202962271869e-05,
            0.0006224903045222163,
            0.00010180607932852581,
            0.6101125478744507,
            0.00013437221059575677
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which owner has paid the most total amount of money for their dogs? Show owner-id and zip-code.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Owners.first_name, Owners.last_name, Owners.zip_code",
            "select Owners.owner_id-, Owners.zip_code",
            "select Owners.owner_id, Owners.zip_code, Owners.email_address"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Charges Owners Dogs",
            "Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Breeds Charges Owners Dogs",
            "Sizes Owners Dogs",
            "Breeds Charges Sizes Owners Dogs",
            "Treatment_Types Owners Dogs"
        ],
        "align_scores": [
            0.9849393367767334,
            8.641456224722788e-05,
            0.0005492315394803882,
            8.803815580904484e-05,
            0.0020131058990955353,
            9.417337423656136e-05,
            0.0003222293744329363,
            8.180871373042464e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which owner has spent the largest sum on their dogs? Show the owner ID and ZIP code.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code",
            "select Sizes.size_code, Owners.zip_code",
            "select Owners.owner_id-, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Charges Owners Dogs",
            "Owners Dogs",
            "Breeds Charges Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Charges Owners Dogs Treatments",
            "Owners Dogs Treatments",
            "Sizes Owners Dogs"
        ],
        "align_scores": [
            0.9783692955970764,
            9.952898835763335e-05,
            0.03512268140912056,
            0.00010555873450357467,
            0.0006410142523236573,
            0.00010733114322647452,
            0.0038720753509551287,
            9.170407429337502e-05
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find the total count of professionals who have not treated any dogs.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Professionals.role_code, Professionals.last_name",
            "select count(*), Professionals.street, Professionals.last_name",
            "select count(*), Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Professionals"
        ],
        "align_scores": [
            0.973882257938385,
            0.003093970473855734,
            0.00012336163490545005,
            0.00010222027776762843,
            0.00014802608347963542,
            0.00011378964700270444,
            0.0001418563479091972,
            0.00010585114796413109
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the count of professionals who have not treated a single dog.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Professionals.role_code, Professionals.last_name",
            "select count(*), Professionals.street, Professionals.last_name",
            "select count(*), Professionals.first_name, Professionals.last_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.9219356775283813,
            0.005848923698067665,
            0.0001437816972611472,
            0.0001073554958566092,
            0.00017365123494528234,
            0.00012379715917631984,
            0.0011034475173801184,
            0.01988222450017929
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names and treatment dates of the rarest breed of dogs.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Dogs.name, Treatments.date_of_treatment",
            "select Breeds.breed_name, Treatments.date_of_treatment",
            "select Treatment_Types.treatment_type_description, Treatments.date_of_treatment",
            "select Dogs.name, Dogs.size_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Breeds Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Breeds Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.9871839880943298,
            6.261219823500142e-05,
            0.9939216375350952,
            6.912881508469582e-05,
            0.026220809668302536,
            7.399928290396929e-05,
            0.00020915870845783502,
            6.615842721657827e-05
        ],
        "align_select": "select Dogs.name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What are the dogs with the lowest occurrence breed on the planet? Explain in detail their names and treatment dates.",
        "gold_select": "select Dogs.name, Treatments.date_of_treatment",
        "select_candidates": [
            "select Dogs.name, Treatments.date_of_treatment",
            "select Dogs.name, Treatments.treatment_type_code, Treatments.date_of_treatment",
            "select Dogs.name, Dogs.size_code",
            "select Dogs.name, Treatments.treatment_type_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Breeds Dogs Treatments",
            "Dogs Treatments",
            "Breeds Charges Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Sizes Dogs Treatments",
            "Breeds Charges Sizes Dogs Treatments",
            "Owners Dogs Treatments"
        ],
        "align_scores": [
            0.9422724843025208,
            0.00012657520710490644,
            0.0014299041358754039,
            8.589417848270386e-05,
            0.0003694383194670081,
            8.116252138279378e-05,
            0.0004014699370600283,
            7.078789349179715e-05
        ],
        "align_select": "select Dogs.name, Treatments.date_of_treatment",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "List all the professional's id, roles, and first names, which are involved in treating at least two cases.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "select_candidates": [
            "select Treatments.professional_id, Professionals.role_code, Professionals.first_name",
            "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
            "select t8.c2, Professionals.role_code, Professionals.first_name",
            "select Treatments.professional_id, Treatments.dog_id, Professionals.first_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments"
        ],
        "align_scores": [
            0.05020115152001381,
            0.00010422714694868773,
            0.885708749294281,
            0.00018194748554378748,
            0.00046158148325048387,
            7.56716908654198e-05,
            0.00021062704036012292,
            6.372124335030094e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the IDs, roles, and first names of the professionals who have performed at least two treatments?",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "select_candidates": [
            "select Treatments.professional_id, Professionals.role_code, Professionals.first_name",
            "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
            "select t8.c2, Professionals.role_code, Professionals.first_name",
            "select Treatments.dog_id, Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.07941702008247375,
            0.00011899066885234788,
            0.8815799355506897,
            0.00012198158219689503,
            0.0005960827693343163,
            8.295849693240598e-05,
            0.00043040153104811907,
            7.514072058256716e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What are the ids, roles, and first names of the professionals who have performed more than one treatment?",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "select_candidates": [
            "select Treatments.professional_id, Professionals.role_code, Professionals.first_name",
            "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
            "select t8.c2, Professionals.role_code, Professionals.first_name",
            "select Treatments.dog_id, Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.16170693933963776,
            0.00011973400978604332,
            0.9359105229377747,
            0.00014902111433912069,
            0.0005629067891277373,
            7.098122296156362e-05,
            0.00048150031943805516,
            7.080004434101284e-05
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show the description of the treatment type that costs the least amount in total.",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_description, t7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.994080126285553,
            5.987691110931337e-05,
            0.0004240783164277673,
            5.723588037653826e-05,
            0.00010883296636166051,
            5.4378382628783584e-05,
            0.0005026053986512125,
            7.20197640475817e-05
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the description of treatment type that has the lowest cost in terms of price?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_description, t7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9760836362838745,
            0.9896232485771179,
            0.0005386824486777186,
            0.0005354282329790294,
            0.00017332189599983394,
            0.00012354984937701374,
            0.0007270901114679873,
            0.00047562463441863656
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the description of overall cheapest treatment option?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatment_Types Treatments"
        ],
        "align_scores": [
            0.9959101676940918,
            0.9952000379562378,
            0.00012331987090874463,
            0.00014048453886061907,
            0.00040008514770306647,
            0.0003531371767167002,
            0.00023036477796267718,
            0.00023950614558998495
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is thedescription of the treatment type that costs less money than others?",
        "gold_select": "select Treatment_Types.treatment_type_description",
        "select_candidates": [
            "select Treatment_Types.treatment_type_description",
            "select Treatment_Types.treatment_type_description, t7",
            "select Treatment_Types.treatment_type_description, Treatments.treatment_type_code",
            "select Treatment_Types.treatment_type_description, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Treatment_Types Treatments",
        "table_candidates": [
            "Treatment_Types Treatments",
            "Sizes Treatment_Types Treatments",
            "Breeds Treatment_Types Treatments",
            "Charges Treatments"
        ],
        "align_scores": [
            0.9427069425582886,
            0.9729413390159607,
            0.0005473913624882698,
            0.0004417202726472169,
            0.0002935706579592079,
            0.0003290156018920243,
            0.00014188126078806818,
            0.00011521934357006103
        ],
        "align_select": "select Treatment_Types.treatment_type_description",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the mean age of the dogs who were treated?",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select avg(Dogs.age)",
            "select Treatments.date_of_treatment, avg(Dogs.age)",
            "select an avg(Dogs.age)",
            "select avg(Dogs.age), t7"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments"
        ],
        "align_scores": [
            0.9911301136016846,
            0.001435532933101058,
            0.0002375754847889766,
            0.0010289233177900314,
            0.0009600615594536066,
            0.00046476247371174395,
            0.0005767315160483122,
            0.0015839309198781848
        ],
        "align_select": "select avg(Dogs.age)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Which professionals has operated a treatment that costs under the average? Give me their first and last name.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select the Professionals.first_name, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-EXCEPT-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Charges Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.9696416258811951,
            0.0004219242255203426,
            0.0612475760281086,
            0.00017205729091074318,
            0.00043076399015262723,
            0.0001316435809712857,
            0.0010565902339294553,
            0.00020251082605682313
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Name all the professionals who ran a treatment that was cheaper than the average, give their first and last name.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select t 6.c2, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments",
            "Sizes Professionals Treatments"
        ],
        "align_scores": [
            0.8932814002037048,
            0.00017684779595583677,
            0.00045166286872699857,
            8.763678488321602e-05,
            0.124121755361557,
            7.113502942956984e-05,
            0.0005528914043679833,
            8.385471301153302e-05
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the maximum charge type cost?",
        "gold_select": "select max(Charges.charge_amount)",
        "select_candidates": [
            "select max(Charges.charge_amount)",
            "select max(Charges.charge_amount), Charges.charge_type",
            "select max(Charges.charge_amount) dependant on Charges.charge_type",
            "select Charges.charge_type, max(Charges.charge_amount)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Charges",
        "table_candidates": [
            "Charges"
        ],
        "align_scores": [
            6.43610255792737e-05,
            5.143681482877582e-05,
            5.2901556045981124e-05,
            5.427114956546575e-05,
            7.758152059977874e-05,
            6.0273570852587e-05,
            8.262407209258527e-05,
            5.2141618652967736e-05
        ],
        "align_select": "select max(Charges.charge_amount)",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "How old are the dogs who have been treated?",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select Dogs.age",
            "select distinct Dogs.age",
            "select Dogs.dog_id, Dogs.age",
            "select sum(Dogs.age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.8075690865516663,
            0.024649253115057945,
            0.5258417129516602,
            0.0006714774062857032,
            0.00028379703871905804,
            0.00017657886201050133,
            0.06894126534461975,
            0.00024298320931848139
        ],
        "align_select": "select Dogs.age",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the dogs' ages who have gone through at least one treatment.",
        "gold_select": "select avg(Dogs.age)",
        "select_candidates": [
            "select Dogs.age",
            "select distinct Dogs.age",
            "select Dogs.dog_id, Dogs.age",
            "select at least Dogs.age"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.6027470827102661,
            0.9688878655433655,
            0.35021036863327026,
            0.00386900850571692,
            0.0005082222050987184,
            0.0023019579239189625,
            0.03570730611681938,
            0.03006739914417267
        ],
        "align_select": "select Dogs.age",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "The latest procedure costs how much?",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select max(Treatments.cost_of_treatment)",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code",
            "select Treatments.cost_of_treatment, Treatments.dog_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Charges Treatments",
            "Breeds Charges Treatments",
            "Dogs Treatments",
            "Breeds Treatments",
            "Dogs Professionals Treatments",
            "Treatment_Types Treatments",
            "Professionals Treatments"
        ],
        "align_scores": [
            0.026140054687857628,
            5.400227746577002e-05,
            6.633822340518236e-05,
            6.108744855737314e-05,
            0.00016587640857324004,
            5.146424155100249e-05,
            0.00010256672248942778,
            5.081399285700172e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "How much does the last procedure cost?",
        "gold_select": "select Treatments.cost_of_treatment",
        "select_candidates": [
            "select Treatments.cost_of_treatment",
            "select Treatments.cost_of_treatment, Treatments.dog_id",
            "select Treatments.cost_of_treatment, Treatments.treatment_type_code",
            "select Treatments.cost_of_treatment, Treatments.professional_id"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Treatments",
        "table_candidates": [
            "Treatments",
            "Charges Treatments",
            "Breeds Charges Treatments",
            "Dogs Treatments",
            "Treatment_Types Treatments",
            "Professionals Treatments",
            "Breeds Treatments"
        ],
        "align_scores": [
            0.9942548871040344,
            5.5151664128061384e-05,
            0.00023458272335119545,
            5.113028237246908e-05,
            0.00023892251192592084,
            5.0189224566565827e-05,
            0.00018655187159311026,
            4.832380000152625e-05
        ],
        "align_select": "select Treatments.cost_of_treatment",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "List the names of dogs that the owner did not spend over $1000 for treatment.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Dogs.owner_id",
            "select Dogs.name, Dogs.age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-EXCEPT-SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Owners Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Sizes Dogs Treatments"
        ],
        "align_scores": [
            0.17995046079158783,
            0.9715453386306763,
            0.00038399637560360134,
            0.00023688512737862766,
            0.00020872699678875506,
            0.00017356632451992482,
            0.00013049239350948483,
            0.0001580615498824045
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of the dogs whose owners have spent equal or less than 1000 USD for their treatment.",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Dogs.age",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Dogs.date_of_birth"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments",
            "Owners Dogs Treatments",
            "Sizes Dogs Treatments",
            "Breeds Dogs Treatments"
        ],
        "align_scores": [
            0.9481601715087891,
            0.5483667850494385,
            0.00018103240290656686,
            0.0001910343416966498,
            0.0004023747460450977,
            0.0019598943181335926,
            0.00015967209765221924,
            0.00018358246597927064
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the dogs with at most 1000 spent for treatment?",
        "gold_select": "select Dogs.name",
        "select_candidates": [
            "select Dogs.name",
            "select Dogs.name, Treatments.dog_id",
            "select Dogs.name, Dogs.breed_code",
            "select Dogs.name, Dogs.age"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Charges Dogs Treatments",
            "Treatment_Types Dogs Treatments"
        ],
        "align_scores": [
            0.813273012638092,
            0.00017075534560717642,
            0.0014784905361011624,
            9.165808296529576e-05,
            0.0014819432981312275,
            0.00011549961345735937,
            0.0001767565991031006,
            7.553275645477697e-05
        ],
        "align_select": "select Dogs.name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "What is the name of the breed with the largest number of dogs?",
        "gold_select": "select Breeds.breed_name",
        "select_candidates": [
            "select Breeds.breed_name",
            "select Breeds.breed_name, Dogs.breed_code",
            "select Breeds.breed_name, Dogs.breed_code, Dogs.size_code",
            "select Breeds.breed_code, Breeds.breed_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Breeds Dogs",
        "table_candidates": [
            "Breeds Dogs",
            "Breeds Charges Dogs"
        ],
        "align_scores": [
            0.9914264678955078,
            9.575097647029907e-05,
            0.005107747856527567,
            8.429454464931041e-05,
            0.0002170273073716089,
            6.102927363826893e-05,
            0.003979022148996592,
            9.142491762759164e-05
        ],
        "align_select": "select Breeds.breed_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the total count of the dogs that has not received any treatment?",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), Dogs.breed_code",
            "select count(*), Dogs.dog_id",
            "select count(*), Dogs.abandoned_yn"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs",
            "Dogs Professionals"
        ],
        "align_scores": [
            0.9804446697235107,
            0.0041115437634289265,
            0.00020551968191284686,
            0.004573881160467863,
            0.00019662290287669748,
            0.0005838141078129411,
            0.00023334601428359747,
            0.001467563328333199
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the sum of dogs without a treatment.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select sum(Dogs.dog_id)",
            "select sum(Dogs.name)",
            "select count(*)",
            "select sum(Dogs.age)"
        ],
        "select_labels": [
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Dogs Treatments",
        "table_candidates": [
            "Dogs Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.0028777485713362694,
            0.0007431849953718483,
            0.0006238317000679672,
            0.00023227385827340186,
            0.004448599647730589,
            0.004712995607405901,
            0.0007885958184488118,
            0.000570431468077004
        ],
        "align_select": "select sum(Dogs.dog_id)",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Who have performed two (or more) treatments? List each professional\u2019s id, role, first name.",
        "gold_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "select_candidates": [
            "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
            "select Professionals.professional_id, Professionals.first_name, Professionals.last_name",
            "select Treatments.professional_id, Professionals.role_code, Professionals.first_name",
            "select Professionals.professional_id, Professionals.role_code, Professionals.first_name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments"
        ],
        "align_scores": [
            0.9198189377784729,
            0.0001806678483262658,
            0.0004438099276740104,
            7.166324940044433e-05,
            0.025004751980304718,
            0.00011606025509536266,
            0.9198189377784729,
            0.0001806678483262658
        ],
        "align_select": "select Professionals.professional_id, Professionals.role_code, Professionals.first_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find out the first and last names of the professionals who have done treatments with cost less than average.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name",
            "select Professionals.professional_id, Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Sizes Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9019045829772949,
            0.3275337815284729,
            0.06166849657893181,
            0.0004844494687858969,
            0.00026949302991852164,
            0.000284545065369457,
            0.00036901768180541694,
            0.0001873772853286937
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the first and last names of the professionals who did treatment with a cost smaller than the average.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select Professionals.professional_id, Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select Professionals.first_name, Professionals.last_name, Treatments.professional_id"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Sizes Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9722291827201843,
            7.670596824027598e-05,
            0.0002551837242208421,
            7.758403080515563e-05,
            0.0003447693889029324,
            7.773371180519462e-05,
            0.00024535894044674933,
            6.363101419992745e-05
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the first and last name of professional that had treatment at a lower cost than average?",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select Professionals.professional_id, Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select distinct Professionals.first_name, Professionals.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Owners Professionals Treatments",
            "Sizes Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Breeds Professionals Treatments",
            "Charges Professionals Treatments"
        ],
        "align_scores": [
            0.9656789898872375,
            0.00013403347111307085,
            0.00021833884238731116,
            8.702883496880531e-05,
            0.00043289814493618906,
            8.411956514464691e-05,
            0.02767488732933998,
            5.739389234804548e-05
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the first and last name of the professionals who has done an operation of a certain kind, under an average cost.",
        "gold_select": "select distinct Professionals.first_name, Professionals.last_name",
        "select_candidates": [
            "select Professionals.first_name, Professionals.last_name",
            "select Professionals.professional_id, Professionals.first_name, Professionals.last_name",
            "select Professionals.role_code, Professionals.last_name",
            "select Professionals.first_name, Professionals.last_name, avg(Treatments.cost_of_treatment)"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "Professionals Treatments",
        "table_candidates": [
            "Professionals Treatments",
            "Dogs Professionals Treatments",
            "Charges Professionals Treatments",
            "Treatment_Types Professionals Treatments",
            "Owners Professionals Treatments",
            "Breeds Professionals Treatments",
            "Sizes Professionals Treatments",
            "Sizes Treatments"
        ],
        "align_scores": [
            0.7204717993736267,
            7.862345955800265e-05,
            0.00038798735477030277,
            6.835817475803196e-05,
            0.00020645023323595524,
            6.607539398828521e-05,
            0.002493971958756447,
            6.67295025778003e-05
        ],
        "align_select": "select Professionals.first_name, Professionals.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Find the owner ID and zip code of the owner who spent the largest amount of money on his or her dogs.",
        "gold_select": "select Owners.owner_id, Owners.zip_code",
        "select_candidates": [
            "select Owners.owner_id, Owners.zip_code",
            "select Sizes.size_code, Owners.zip_code",
            "select Owners.owner_id-, Owners.zip_code",
            "select Dogs.owner_id, Owners.zip_code"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Charges Owners Dogs",
            "Owners Dogs",
            "Breeds Charges Owners Dogs",
            "Charges Sizes Owners Dogs",
            "Sizes Owners Dogs",
            "Charges Owners Dogs Treatments"
        ],
        "align_scores": [
            0.9682862162590027,
            0.9854177236557007,
            0.0007400583126582205,
            0.0006508227088488638,
            0.005813324823975563,
            0.00378190609626472,
            0.18593630194664001,
            0.808317244052887
        ],
        "align_select": "select Owners.owner_id, Owners.zip_code",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What owner have paid the most amount of money on his or her dog treatments? List the owners ID and full name.",
        "gold_select": "select Owners.owner_id, Owners.last_name",
        "select_candidates": [
            "select Owners.owner_id, Owners.first_name, Owners.last_name",
            "select Treatments.professional_id, Owners.first_name, Owners.last_name",
            "select Treatments.dog_id, Owners.first_name, Owners.last_name",
            "select Charges.charge_id, Owners.first_name, Owners.last_name"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "Owners Dogs Treatments",
        "table_candidates": [
            "Charges Owners Treatments",
            "Charges Owners Dogs Treatments",
            "Charges Sizes Treatments",
            "Breeds Charges Owners Treatments",
            "Owners Treatments",
            "Sizes Owners Treatments"
        ],
        "align_scores": [
            0.9698636531829834,
            0.9498252868652344,
            0.0005057466332800686,
            0.0005442194524221122,
            0.00043688423465937376,
            0.0004994390765205026,
            0.00048206219798885286,
            0.0004660108534153551
        ],
        "align_select": "select Owners.owner_id, Owners.first_name, Owners.last_name",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the singer that has the highest revenue?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, song.Sales",
            "select singer.Name, song.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer song",
            "singer"
        ],
        "align_scores": [
            0.9634257555007935,
            0.9928597211837769,
            0.0006344274152070284,
            0.0007165041170082986,
            0.0008896644576452672,
            0.0019382188329473138,
            0.0006568212411366403,
            0.0011703550117090344
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the singer who has the most amount of earnings?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name (ORDER BY-LIMIT)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8366021513938904,
            6.58627541270107e-05,
            0.0004396972362883389,
            6.329242023639381e-05,
            0.0004267076728865504,
            6.112438859418035e-05,
            0.0005678309826180339,
            6.294206104939803e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who is the richest singer?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9715149402618408,
            6.103230407461524e-05,
            0.0009661397198215127,
            5.631676685879938e-05,
            0.0004716821713373065,
            5.944117219769396e-05,
            0.00021115687559358776,
            5.5772696214262396e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Who is the singer that has the largest net worth?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9176703095436096,
            6.604861846426502e-05,
            0.0005140395369380713,
            6.614121230086312e-05,
            0.0014027869328856468,
            6.435003888327628e-05,
            0.00043312847265042365,
            6.349154864437878e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "What is the name of the singer who has the highest net worth?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.9492294192314148,
            6.77800053381361e-05,
            0.0005072387866675854,
            6.464187754318118e-05,
            0.000653028313536197,
            6.418891280191019e-05,
            0.00046457050484605134,
            6.794367072870955e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Find all the citizenships that have been held by singers born not between 1945 and 1955.",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select distinct singer.Citizenship",
            "select singer.Citizenship",
            "select count(*)",
            "select all singer.Citizenship"
        ],
        "select_labels": [
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-INTERSECT-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-EXCEPT-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9272616505622864,
            0.009760058484971523,
            0.8056725859642029,
            0.06101808696985245,
            0.02042968012392521,
            0.0003858969430439174,
            0.002809501253068447,
            0.0007255161763168871
        ],
        "align_select": "select distinct singer.Citizenship",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the number of singers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), singer.Singer_ID",
            "select count(*), singer.Singer_ID, singer.Name",
            "select count(*), singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-GROUP BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.9948157668113708,
            0.0015340691898018122,
            0.00013537767517846078,
            0.0005246943910606205,
            0.00011992656072834507,
            0.00011033980263164267,
            0.0001407426461810246,
            0.0001592295157024637
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "Show me the number of singers.",
        "gold_select": "select count(*)",
        "select_candidates": [
            "select count(*)",
            "select count(*), singer.Singer_ID",
            "select count(*), singer.Singer_ID, singer.Name",
            "select count(*), singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM",
        "structure_candidates": [
            "SELECT-FROM",
            "SELECT-FROM-UNION-SELECT-FROM"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer",
            "singer song"
        ],
        "align_scores": [
            0.9948181509971619,
            8.028252341318876e-05,
            0.00014536063827108592,
            6.248259160201997e-05,
            0.00013185500574763864,
            6.17629339103587e-05,
            0.00014663780166301876,
            6.312267942121252e-05
        ],
        "align_select": "select count(*)",
        "align_structure": "SELECT-FROM"
    },
    {
        "question": "List the names of non-French singers.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select distinct singer.Name",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9927060008049011,
            7.394207932520658e-05,
            0.00016591390885878354,
            5.673852137988433e-05,
            0.027473466470837593,
            7.762695895507932e-05,
            0.00015420300769619644,
            5.536635217140429e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the non-French singers?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9915054440498352,
            9.30064998101443e-05,
            0.00018246244871988893,
            5.921718548052013e-05,
            0.00013840512838214636,
            5.501362102222629e-05,
            0.00016002432676032186,
            5.406797572504729e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of singers from other countries than France.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9913718700408936,
            0.0001019737683236599,
            0.00025449029635638,
            6.558454333571717e-05,
            0.0001830041583161801,
            6.951010436750948e-05,
            0.00018079676374327391,
            6.407331238733605e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show the names of the non-French singers.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9922167062759399,
            7.999717490747571e-05,
            0.00016557902563363314,
            5.697443339158781e-05,
            0.00015373936912510544,
            5.501666237250902e-05,
            0.00014552469656337053,
            5.200178566155955e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the singer nationality that has the largest number?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship the SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship (GROUP BY-ORDER BY-LIMIT)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9216845631599426,
            6.413182563846931e-05,
            0.0007150188321247697,
            9.183630027109757e-05,
            0.010631624609231949,
            6.020555883878842e-05,
            0.002411958295851946,
            6.27923000138253e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What singer citizenship is the most popular?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, singer.Name",
            "select singer.Citizenship, t0.c5",
            "select singer.Citizenship, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.995722770690918,
            6.222096999408677e-05,
            0.00030204906943254173,
            5.779686398454942e-05,
            0.0005482680862769485,
            6.616827158723027e-05,
            0.0003840725403279066,
            5.914049324928783e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the country with the most singers?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship, singer.Net_Worth_Millions",
            "select singer.Citizenship, t0.c5"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9885163307189941,
            6.719327939208597e-05,
            0.24098874628543854,
            5.8447461924515665e-05,
            0.0007104140240699053,
            6.080527600715868e-05,
            0.0005062145064584911,
            6.665274850092828e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "What is the country of origin for the most singers?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, singer.Birth_Year",
            "select singer.Citizenship, t0.c5",
            "select singer.Citizenship, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9915552735328674,
            6.371839117491618e-05,
            0.00019025780784431845,
            5.3138686780584976e-05,
            0.000394481816329062,
            6.20413848082535e-05,
            0.0004596166836563498,
            5.745741873397492e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Which of the singer citizenship is most popular?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, t0.c5",
            "select singer.Citizenship, singer.Net_Worth_Millions",
            "select singer.Citizenship, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-UNION-SELECT-FROM-GROUP BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9942726492881775,
            0.00012683459499385208,
            0.0004434927541296929,
            6.242809467948973e-05,
            0.0003591717395465821,
            8.064223220571876e-05,
            0.0002378887147642672,
            7.677797839278355e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me all the names of singers that have recorded songs with sales over 300,000.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID",
            "select singer.Name, song.Singer_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.8490511178970337,
            0.9569441676139832,
            0.0002566557959653437,
            0.0006430785870179534,
            0.03938663750886917,
            0.22700241208076477,
            0.0002566557959653437,
            0.0006430785870179534
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the citizenship of singers and list the count of singers of each citizenship.",
        "gold_select": "select singer.Citizenship, count(*)",
        "select_candidates": [
            "select singer.Citizenship, count(*)",
            "select singer.Citizenship, count(*), singer.Net_Worth_Millions",
            "select singer.Citizenship, count(*), t0.c5",
            "select singer.Citizenship, count(*), singer.Citizenship"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9964738488197327,
            0.0002808062999974936,
            0.0013997890055179596,
            0.00011239763989578933,
            0.0002172782551497221,
            0.0001160663305199705,
            0.0003532300761435181,
            0.0001223933359142393
        ],
        "align_select": "select singer.Citizenship, count(*)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "Show all the names of singers with increasing net worth.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name (or singer.Birth_Year)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9664050936698914,
            0.0005671229446306825,
            0.00033169612288475037,
            0.00011795631144195795,
            0.0001781161845428869,
            0.00013003034109715372,
            0.0006970356917008758,
            0.00019659385725390166
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Find the names of singers who have two or more songs.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID, singer.Name",
            "select singer.Name, song.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9874179363250732,
            8.726501255296171e-05,
            0.0004075057222507894,
            6.370266783051193e-05,
            0.000642481551039964,
            7.514301250921562e-05,
            0.5830065011978149,
            7.660334085812792e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Show me the names of singers who have at least two songs.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, song.Title",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9829680323600769,
            7.334844121942297e-05,
            0.00038649613270536065,
            5.989209967083298e-05,
            0.34737521409988403,
            6.456141272792593e-05,
            0.00024867066531442106,
            5.7261644542450085e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the names of singers with multiple songs.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, song.Title",
            "select song.Title, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9947977066040039,
            7.43729542591609e-05,
            0.00031711370684206486,
            6.386780296452343e-05,
            0.9665552973747253,
            6.719225348206237e-05,
            0.19537267088890076,
            6.87700230628252e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "Order all singers in increasing net worth.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY",
            "SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9872347712516785,
            0.0005199869628995657,
            0.0003295310598332435,
            0.00017426679551135749,
            0.0034866337664425373,
            0.0001880238705780357,
            0.000393182534025982,
            0.0001273644738830626
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY"
    },
    {
        "question": "Who are the singers who aren't from France?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Citizenship",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.8831751942634583,
            0.00013778542052023113,
            0.00021056861442048103,
            6.921694875927642e-05,
            0.00041201573912985623,
            7.863561040721834e-05,
            0.00022982423251960427,
            7.784824265399948e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What is the nationality of the majority of singers?",
        "gold_select": "select singer.Citizenship",
        "select_candidates": [
            "select singer.Citizenship",
            "select singer.Citizenship, t0.c5",
            "select singer.Citizenship, singer.Net_Worth_Millions",
            "select singer.Citizenship, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT",
            "SELECT-FROM-GROUP BY-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9948915243148804,
            7.389583333861083e-05,
            0.000410700507927686,
            5.877347575733438e-05,
            0.0004061437211930752,
            5.6580152886454016e-05,
            0.00019959242490585893,
            5.59846666874364e-05
        ],
        "align_select": "select singer.Citizenship",
        "align_structure": "SELECT-FROM-GROUP BY-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the names of the singers and the total amount of their songs sales.",
        "gold_select": "select singer.Name, sum(song.Sales)",
        "select_candidates": [
            "select singer.Name, sum(song.Sales)",
            "select song.Singer_ID, sum(song.Sales)",
            "select t2.c2, sum(song.Sales)",
            "select t3.c2, sum(song.Sales)"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9959940910339355,
            0.00018059209105558693,
            0.001251388806849718,
            0.00015159773465711623,
            0.0003520571335684508,
            0.00016454905562568456,
            0.00027334457263350487,
            0.00018079177243635058
        ],
        "align_select": "select singer.Name, sum(song.Sales)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What are the names of the singers with sales exceeding 300,000?",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Birth_Year",
            "select singer.Name, singer.Singer_ID"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9684761166572571,
            0.45647114515304565,
            0.00018614994769450277,
            0.00024084854521788657,
            0.00015058464487083256,
            0.00016107421834021807,
            0.00016925687668845057,
            0.00021105182531755418
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "What are the names of the singers who had sales above $300,000?",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song",
            "singer"
        ],
        "align_scores": [
            0.8801884651184082,
            0.820257842540741,
            0.00022098298359196633,
            0.00036900414852425456,
            0.00018530416127759963,
            0.00031522978679277003,
            0.0001961082307389006,
            0.0002024998248089105
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Give me the names of the singers with sales over 30000.",
        "gold_select": "select distinct singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID, singer.Name",
            "select singer.Name, singer.Birth_Year"
        ],
        "select_labels": [
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.967037558555603,
            0.7718343138694763,
            0.0001708529016468674,
            0.0002216633001808077,
            0.0002644351916387677,
            0.0004071422736160457,
            0.00014297818415798247,
            0.00015858614642638713
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "Show me the names of the singers with two or more songs.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Singer_ID, singer.Name",
            "select singer.Name, song.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9923958778381348,
            8.896310464479029e-05,
            0.0003655276377685368,
            6.1856655520387e-05,
            0.0007574319024570286,
            6.962952465983108e-05,
            0.16875293850898743,
            6.460606527980417e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "List the singers that have at least 2 songs.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, song.Singer_ID",
            "select song.Title, singer.Name",
            "select singer.Name, song.Title"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY-HAVING",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY-HAVING",
            "SELECT-FROM-GROUP BY-HAVING-UNION-SELECT-FROM-GROUP BY-HAVING"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9890538454055786,
            7.818936137482524e-05,
            0.0008861383539624512,
            7.412245031446218e-05,
            0.03405274450778961,
            6.959924940019846e-05,
            0.0716240331530571,
            7.254056981764734e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-GROUP BY-HAVING"
    },
    {
        "question": "For each singer's name, what is the total number of sales for their songs?",
        "gold_select": "select singer.Name, sum(song.Sales)",
        "select_candidates": [
            "select singer.Name, sum(song.Sales)",
            "select sum(song.Sales), singer.Name",
            "select singer.Name, sum(song.Sales)",
            "select song.Singer_ID, sum(song.Sales)"
        ],
        "select_labels": [
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-GROUP BY",
        "structure_candidates": [
            "SELECT-FROM-GROUP BY",
            "SELECT-FROM-GROUP BY-ORDER BY"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer song",
        "table_candidates": [
            "singer song"
        ],
        "align_scores": [
            0.9959384202957153,
            0.00018030888168141246,
            0.9951664209365845,
            0.0001785293425200507,
            0.9959384202957153,
            0.00018030888168141246,
            0.14997026324272156,
            0.00023845255782362074
        ],
        "align_select": "select singer.Name, sum(song.Sales)",
        "align_structure": "SELECT-FROM-GROUP BY"
    },
    {
        "question": "What is the name of the singer that is worth the most money?",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Name, singer.Birth_Year",
            "select singer.Singer_ID, singer.Name"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9519444704055786,
            6.895040860399604e-05,
            0.0005236826254986227,
            6.271970050875098e-05,
            0.0007602999685332179,
            6.119618774391711e-05,
            0.0004945746622979641,
            6.633974408032373e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Show me the singer with the most net worth.",
        "gold_select": "select singer.Name",
        "select_candidates": [
            "select singer.Name",
            "select singer.Singer_ID, singer.Name",
            "select singer.Name, singer.Net_Worth_Millions",
            "select singer.Singer_ID, singer.Name, singer.Net_Worth_Millions"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-ORDER BY-LIMIT",
        "structure_candidates": [
            "SELECT-FROM-ORDER BY-LIMIT",
            "SELECT-FROM-ORDER BY-LIMIT-INTERSECT-SELECT-FROM-ORDER BY-LIMIT"
        ],
        "structure_labels": [
            1.0,
            0.0
        ],
        "gold_table": "singer",
        "table_candidates": [
            "singer"
        ],
        "align_scores": [
            0.9472296237945557,
            5.7467168517177925e-05,
            0.0013181656831875443,
            5.8700545196188614e-05,
            0.00045266415691003203,
            6.088116788305342e-05,
            0.00030975264962762594,
            6.357849633786827e-05
        ],
        "align_select": "select singer.Name",
        "align_structure": "SELECT-FROM-ORDER BY-LIMIT"
    },
    {
        "question": "Locate the names of properties that are either houses or apartments with two or more rooms.",
        "gold_select": "select Properties.property_name",
        "select_candidates": [
            "select Properties.property_name",
            "select Properties.property_name, Properties.room_count",
            "select Properties.property_name, Properties.property_address",
            "select Properties.property_name - Properties.room_count"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties"
        ],
        "align_scores": [
            0.9750367999076843,
            0.9384371638298035,
            0.00019158123177476227,
            0.00011776525934692472,
            0.0003030889783985913,
            0.000123272038763389,
            0.000376615091226995,
            0.0001747651695040986
        ],
        "align_select": "select Properties.property_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of houses or apartments that have multiple rooms.",
        "gold_select": "select Properties.property_name",
        "select_candidates": [
            "select Properties.property_name",
            "select Properties.property_name, Properties.property_address",
            "select Properties.property_name, Properties.property_address, Properties.room_count",
            "select Properties.property_name, Properties.room_count"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties",
            "Other_Available_Features Properties"
        ],
        "align_scores": [
            0.8442309498786926,
            0.0029136601369827986,
            0.0002436854992993176,
            7.184251444414258e-05,
            0.0001872869033832103,
            7.319696305785328e-05,
            0.0002002877154154703,
            6.604352529393509e-05
        ],
        "align_select": "select Properties.property_name",
        "align_structure": "SELECT-FROM-WHERE"
    },
    {
        "question": "List the names of properties that are either houses or apartments with two or more rooms.",
        "gold_select": "select Properties.property_name",
        "select_candidates": [
            "select Properties.property_name",
            "select Properties.property_name, Properties.room_count",
            "select Properties.property_name, Properties.property_address",
            "select Properties.property_name, Properties.vendor_requested_price"
        ],
        "select_labels": [
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "gold_structure": "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE",
        "structure_candidates": [
            "SELECT-FROM-WHERE",
            "SELECT-FROM-WHERE-UNION-SELECT-FROM-WHERE"
        ],
        "structure_labels": [
            0.0,
            1.0
        ],
        "gold_table": "Properties",
        "table_candidates": [
            "Properties"
        ],
        "align_scores": [
            0.9769913554191589,
            0.8658148050308228,
            0.00019999210780952126,
            0.00010396896686870605,
            0.0002463230339344591,
            0.000122423458378762,
            0.00023846939438953996,
            0.00011515365622472018
        ],
        "align_select": "select Properties.property_name",
        "align_structure": "SELECT-FROM-WHERE"
    }
]